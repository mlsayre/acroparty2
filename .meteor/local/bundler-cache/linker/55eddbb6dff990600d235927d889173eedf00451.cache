[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nAccounts = Package['accounts-base'].Accounts;\nReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nmoment = Package['momentjs:moment'].moment;\nlivestamp = Package['copleykj:livestamp'].livestamp;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"chats.js\":[\"meteor/mongo\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// imports/api/chats.js                                                                           //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nmodule.export({Chats:function(){return Chats}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});\n                                                                                                  //\nvar Chats = new Mongo.Collection('chats');                                                        // 3\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"games.js\":[\"meteor/meteor\",\"meteor/mongo\",\"meteor/check\",\"../api/rooms.js\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// imports/api/games.js                                                                           //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nmodule.export({Games:function(){return Games}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});var Rooms;module.import('../api/rooms.js',{\"Rooms\":function(v){Rooms=v}});\n                                                                                                  // 2\n                                                                                                  // 3\n                                                                                                  //\n                                                                                                  // 5\nvar Games = new Mongo.Collection('games');                                                        // 6\n                                                                                                  //\n// game config                                                                                    //\nacroLettersPool = \"AAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHIIIIIIIIIIIIIIIIIIIIIIJJJJJKKKKKKLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPPPPPPPPPPPQQQQRRRRRRRRRRRRRRRRRRSSSSSSSSSSSSSSSSSSSSSSSSTTTTTTTTTTTTTTTTTTTTTTTTUUUUUUUVVVVVVVVVVVVWWWWWWWWWWWWXYYYYYYYYYYYYZZZZ\";\n                                                                                                  //\nacroCategories = [\"General\", \"Sports\", \"Food\", \"Movies\", \"Television\", \"History\", \"Music\", \"Art\", \"Animals\", \"Science\", \"Politics\", \"Fashion\", \"Books\", \"Travel\", \"Celebrities\", \"Romance\", \"Technology\", \"Family\", \"School\", \"Nature\", \"Health\", \"Current Events\", \"Work\", \"Give Some Advice\", \"Definitions\", \"Sayings\", \"Exercise/Fitness\", \"Baby's First Sentence\", \"My Greatest Fear\", \"In the Year 3000\", \"Weird Laws\", \"I Was Late Because...\", \"Odd College Majors\", \"My Biggest Secret\", \"New Ice Cream Flavors\", \"Bad Restaurant Names\", \"I Got Fired Because...\", \"Odd Product Slogans\", \"Bad Habits\", \"Science Fiction\", \"Strange Trends\", \"Embarrassing Moments\", \"CAVEMAN SAY...\", \"Superhero/villain Names\", \"Horror Movie Titles\", \"In a Perfect World...\", \"Short Poetry\", \"New Year's Resolutions\", \"My Dream Last Night\", \"Odd Tombstone Messages\", \"Awful First Dates\", \"Odd Holiday Customs\", \"The Holidays\", \"Short Ghost Stories\", \"... Said No One Ever\", \"Fairy/Folk Tales\"];\n                                                                                                  //\nroundsToPlay = 8;                                                                                 // 23\nroundTimes = [50, 60, 60, 80, 50, 60, 60, 80];                                                    // 24\nroundAcroLength = [3, 4, 5, 6, 3, 4, 5, 6];                                                       // 25\n                                                                                                  //\n////////////                                                                                      //\n                                                                                                  //\nMeteor.methods({                                                                                  // 29\n  'games.init': function gamesInit(roomId) {                                                      // 30\n    if (Games.find({ room_id: roomId }).fetch().length === 0) {                                   // 31\n      //always make sure updates only happen once                                                 //\n      var roundletters;                                                                           // 32\n      var acroPoolLength = acroLettersPool.length;                                                // 33\n      var catPoolLength = acroCategories.length;                                                  // 34\n      var acroPlayArray = [];                                                                     // 35\n      var acroCatArray = [];                                                                      // 36\n      for (var i = 0; i < roundsToPlay; i++) {                                                    // 37\n        var acroToPlay = \"\";                                                                      // 38\n        for (var j = 0; j < roundAcroLength[i]; j++) {                                            // 39\n          acroToPlay = acroToPlay + acroLettersPool[Math.floor(Math.random() * acroPoolLength)];  // 40\n        }                                                                                         // 41\n        acroPlayArray.push(acroToPlay);                                                           // 42\n        acroCatArray.push(acroCategories[Math.floor(Math.random() * catPoolLength)]);             // 43\n      }                                                                                           // 44\n      Games.insert({                                                                              // 45\n        room_id: roomId,                                                                          // 46\n        roundletters: acroPlayArray,                                                              // 47\n        roundcategories: acroCatArray,                                                            // 48\n        roundtimes: roundTimes                                                                    // 49\n      });                                                                                         // 45\n      Rooms.update({ room_id: roomId }, {                                                         // 51\n        $set: { round: 1, subround: \"Get ready\" }                                                 // 52\n      });                                                                                         // 51\n    }                                                                                             // 54\n  },                                                                                              // 55\n  'games.getready': function gamesGetready(roomId) {                                              // 57\n    if (!readyTimer) {                                                                            // 58\n      // one timer only                                                                           //\n      var readyTimer = Meteor.setTimeout(function () {                                            // 59\n        if (Rooms.findOne({ room_id: roomId }).players.length === 0) {                            // 60\n          Meteor.call('games.reset', roomId);                                                     // 61\n        } else {                                                                                  // 62\n          Rooms.update({ room_id: roomId }, {                                                     // 63\n            $set: { subround: \"Play\" }                                                            // 64\n          });                                                                                     // 63\n        }                                                                                         // 66\n      }, 7000);                                                                                   // 67\n      readyTimer = null;                                                                          // 68\n    }                                                                                             // 69\n  },                                                                                              // 70\n  'games.play': function gamesPlay(roomId, roundtime) {                                           // 72\n    if (!playTimer) {                                                                             // 73\n      // one timer only                                                                           //\n      var playTimer = Meteor.setTimeout(function () {                                             // 74\n        if (Rooms.findOne({ room_id: roomId }).players.length === 0) {                            // 75\n          Meteor.call('games.reset', roomId);                                                     // 76\n        } else {                                                                                  // 77\n          Rooms.update({ room_id: roomId }, {                                                     // 78\n            $set: { subround: \"Vote\" }                                                            // 79\n          });                                                                                     // 78\n        }                                                                                         // 81\n      }, roundtime * 1000 + 20000);                                                               // 82\n      playTimer = null;                                                                           // 83\n    }                                                                                             // 84\n  },                                                                                              // 85\n  'games.vote': function gamesVote(roomId) {                                                      // 87\n    if (!voteTimer) {                                                                             // 88\n      // one timer only                                                                           //\n      var voteTimer = Meteor.setTimeout(function () {                                             // 89\n        if (Rooms.findOne({ room_id: roomId }).players.length === 0) {                            // 90\n          Meteor.call('games.reset', roomId);                                                     // 91\n        } else {                                                                                  // 92\n          Rooms.update({ room_id: roomId }, {                                                     // 93\n            $set: { subround: \"Results\" }                                                         // 94\n          });                                                                                     // 93\n        }                                                                                         // 96\n      }, 35000);                                                                                  // 97\n      voteTimer = null;                                                                           // 98\n    }                                                                                             // 99\n  },                                                                                              // 100\n  'games.results': function gamesResults(roomId) {                                                // 102\n    if (!resultsTimer) {                                                                          // 103\n      // one timer only                                                                           //\n      var currentRound = Rooms.findOne({ room_id: roomId }).round;                                // 104\n      if (currentRound === roundsToPlay) {                                                        // 105\n        var resultsTimer = Meteor.setTimeout(function () {                                        // 106\n          if (Rooms.findOne({ room_id: roomId }).players.length < 2) {                            // 107\n            // end game after results if not enough players                                       //\n            Meteor.call('games.reset', roomId);                                                   // 108\n          } else {                                                                                // 109\n            Rooms.update({ room_id: roomId }, {                                                   // 110\n              $set: { subround: \"Final results\" }                                                 // 111\n            });                                                                                   // 110\n          }                                                                                       // 113\n        }, 22000);                                                                                // 114\n      } else {                                                                                    // 115\n        var resultsTimer = Meteor.setTimeout(function () {                                        // 116\n          if (Rooms.findOne({ room_id: roomId }).players.length < 2) {                            // 117\n            // end game after results if not enough players                                       //\n            Meteor.call('games.reset', roomId);                                                   // 118\n          } else {                                                                                // 119\n            Rooms.update({ room_id: roomId }, {                                                   // 120\n              $set: { round: currentRound + 1,                                                    // 121\n                subround: \"Get ready\" }                                                           // 122\n            });                                                                                   // 120\n          }                                                                                       // 124\n        }, 22000);                                                                                // 125\n      }                                                                                           // 126\n      resultsTimer = null;                                                                        // 127\n    }                                                                                             // 128\n  },                                                                                              // 129\n  'games.finalresults': function gamesFinalresults(roomId) {                                      // 131\n    if (!finalTimer) {                                                                            // 132\n      // one timer only                                                                           //\n      var finalTimer = Meteor.setTimeout(function () {                                            // 133\n        if (Rooms.findOne({ room_id: roomId }).players.length < 2) {                              // 134\n          // end game after results if not enough players                                         //\n          Meteor.call('games.reset', roomId);                                                     // 135\n        } else {                                                                                  // 136\n          // set up for new game                                                                  //\n          Games.remove({ room_id: roomId });                                                      // 137\n          Meteor.call('games.init', roomId);                                                      // 138\n        }                                                                                         // 139\n      }, 25000);                                                                                  // 140\n    }                                                                                             // 141\n    finalTimer = null;                                                                            // 142\n  },                                                                                              // 143\n  'games.reset': function gamesReset(roomId) {                                                    // 145\n    Games.remove({ room_id: roomId });                                                            // 146\n    Rooms.update({ room_id: roomId }, {                                                           // 147\n      $set: { round: 0,                                                                           // 148\n        subround: \"Waiting for players\" }                                                         // 149\n    });                                                                                           // 147\n  }                                                                                               // 151\n});                                                                                               // 29\n                                                                                                  //\n// Games.find({ room_id: roomId }).remove({});                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"messages.js\":[\"meteor/meteor\",\"meteor/mongo\",\"meteor/check\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// imports/api/messages.js                                                                        //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nmodule.export({Messages:function(){return Messages}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});\n                                                                                                  // 2\n                                                                                                  // 3\n                                                                                                  //\nvar Messages = new Mongo.Collection('messages');                                                  // 5\n                                                                                                  //\nMeteor.methods({                                                                                  // 7\n  'messages.msgPlayer': function messagesMsgPlayer(roomId, name, verb, roomName) {                // 8\n    Messages.insert({                                                                             // 9\n      user_id: \"<PartyHost>\",                                                                     // 10\n      room_id: roomId,                                                                            // 11\n      message: name + verb + roomName,                                                            // 12\n      createdAt: new Date()                                                                       // 13\n    });                                                                                           // 9\n  },                                                                                              // 15\n  'messages.postMessage': function messagesPostMessage(name, roomId, message) {                   // 17\n    Messages.insert({                                                                             // 18\n      user_id: name,                                                                              // 19\n      room_id: roomId,                                                                            // 20\n      message: message,                                                                           // 21\n      createdAt: new Date() });                                                                   // 22\n  },                                                                                              // 23\n  'messages.deleteOld': function messagesDeleteOld(messageId) {                                   // 25\n    Messages.remove({ _id: messageId });                                                          // 26\n  }                                                                                               // 27\n});                                                                                               // 7\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"rooms.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// imports/api/rooms.js                                                                           //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nthrow new Error(\"Unexpected token (13:6)\");\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"accounts-server-config.js\":[\"meteor/accounts-base\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// server/accounts-server-config.js                                                               //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nvar Accounts;module.import('meteor/accounts-base',{\"Accounts\":function(v){Accounts=v}});          // 1\n                                                                                                  //\nAccounts.onCreateUser(function (options, user) {                                                  // 3\n                                                                                                  //\n  user.currentRoom = \"\";                                                                          // 5\n  user.stats = {                                                                                  // 6\n    lifetimePoints: 0,                                                                            // 7\n    lifetimeWins: 0,                                                                              // 8\n    lifetimeGamesPlayed: 0                                                                        // 9\n  };                                                                                              // 6\n                                                                                                  //\n  if (options.profile) user.profile = options.profile;                                            // 12\n                                                                                                  //\n  return user;                                                                                    // 15\n});                                                                                               // 16\n                                                                                                  //\nMeteor.publish(\"userData\", function () {                                                          // 18\n  if (this.userId) {                                                                              // 19\n    return Meteor.users.find({ _id: this.userId }, { fields: { 'stats': 1, 'currentRoom': 1 } });\n  } else {                                                                                        // 22\n    this.ready();                                                                                 // 23\n  }                                                                                               // 24\n});                                                                                               // 25\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"main.js\":[\"meteor/meteor\",\"../imports/api/rooms.js\",\"../imports/api/chats.js\",\"../imports/api/messages.js\",\"../imports/api/games.js\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// server/main.js                                                                                 //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nvar Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});module.import('../imports/api/rooms.js');module.import('../imports/api/chats.js');module.import('../imports/api/messages.js');module.import('../imports/api/games.js');\n                                                                                                  // 2\n                                                                                                  // 3\n                                                                                                  // 4\n                                                                                                  // 5\n                                                                                                  //\nMeteor.startup(function () {                                                                      // 7\n  // code to run on server at startup                                                             //\n});                                                                                               // 9\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\",\".jsx\"]});\nrequire(\"./server/accounts-server-config.js\");\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/api/chats.js","/imports/api/games.js","/imports/api/messages.js","imports/api/rooms.js","/server/accounts-server-config.js","/server/main.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\n\nexport const Chats = new Mongo.Collection('chats');\n","import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nimport { Rooms } from '../api/rooms.js';\nexport const Games = new Mongo.Collection('games');\n\n// game config\nacroLettersPool = \"AAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHIIIIIIIIIIIIIIIIIIIIIIJJJJJKKKKKKLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPPPPPPPPPPPQQQQRRRRRRRRRRRRRRRRRRSSSSSSSSSSSSSSSSSSSSSSSSTTTTTTTTTTTTTTTTTTTTTTTTUUUUUUUVVVVVVVVVVVVWWWWWWWWWWWWXYYYYYYYYYYYYZZZZ\";\n\nacroCategories = [\"General\", \"Sports\", \"Food\", \"Movies\", \"Television\", \"History\", \"Music\", \"Art\", \"Animals\",\n                  \"Science\", \"Politics\", \"Fashion\", \"Books\", \"Travel\", \"Celebrities\", \"Romance\", \"Technology\",\n                  \"Family\", \"School\", \"Nature\", \"Health\", \"Current Events\", \"Work\", \"Give Some Advice\",\n                  \"Definitions\", \"Sayings\", \"Exercise/Fitness\", \"Baby's First Sentence\", \"My Greatest Fear\",\n                  \"In the Year 3000\", \"Weird Laws\", \"I Was Late Because...\", \"Odd College Majors\",\n                  \"My Biggest Secret\", \"New Ice Cream Flavors\", \"Bad Restaurant Names\",\n                  \"I Got Fired Because...\", \"Odd Product Slogans\", \"Bad Habits\", \"Science Fiction\",\n                  \"Strange Trends\", \"Embarrassing Moments\", \"CAVEMAN SAY...\", \"Superhero/villain Names\",\n                  \"Horror Movie Titles\", \"In a Perfect World...\", \"Short Poetry\", \"New Year's Resolutions\",\n                  \"My Dream Last Night\", \"Odd Tombstone Messages\", \"Awful First Dates\", \"Odd Holiday Customs\",\n                  \"The Holidays\", \"Short Ghost Stories\", \"... Said No One Ever\", \"Fairy/Folk Tales\"]\n\nroundsToPlay = 8;\nroundTimes = [50, 60, 60, 80, 50, 60, 60 ,80]\nroundAcroLength = [3, 4, 5, 6, 3, 4, 5, 6]\n\n////////////\n\nMeteor.methods({\n  'games.init'(roomId) {\n    if (Games.find({ room_id: roomId }).fetch().length === 0) { //always make sure updates only happen once\n      var roundletters;\n      var acroPoolLength = acroLettersPool.length;\n      var catPoolLength = acroCategories.length;\n      var acroPlayArray = [];\n      var acroCatArray = [];\n      for (var i = 0; i < roundsToPlay; i++) {\n        var acroToPlay = \"\";\n        for (var j = 0; j < roundAcroLength[i]; j++) {\n          acroToPlay = acroToPlay + acroLettersPool[Math.floor(Math.random() * acroPoolLength)]\n        }\n        acroPlayArray.push(acroToPlay);\n        acroCatArray.push(acroCategories[Math.floor(Math.random() * catPoolLength)])\n      }\n      Games.insert({\n        room_id: roomId,\n        roundletters: acroPlayArray,\n        roundcategories: acroCatArray,\n        roundtimes: roundTimes\n      });\n      Rooms.update({room_id: roomId}, {\n        $set: { round: 1 , subround: \"Get ready\" },\n      });\n    }\n  },\n\n  'games.getready'(roomId) {\n    if (!readyTimer) { // one timer only\n      var readyTimer = Meteor.setTimeout(function() {\n        if (Rooms.findOne({room_id: roomId}).players.length === 0) {\n          Meteor.call('games.reset', roomId );\n        } else {\n          Rooms.update({room_id: roomId}, {\n            $set: { subround: \"Play\" },\n          });\n        }\n      }, 7000);\n      readyTimer = null;\n    }\n  },\n\n  'games.play'(roomId, roundtime) {\n    if (!playTimer) { // one timer only\n      var playTimer = Meteor.setTimeout(function() {\n        if (Rooms.findOne({room_id: roomId}).players.length === 0) {\n          Meteor.call('games.reset', roomId );\n        } else {\n          Rooms.update({room_id: roomId}, {\n            $set: { subround: \"Vote\" },\n          });\n        }\n      }, (roundtime * 1000) + 20000);\n      playTimer = null;\n    }\n  },\n\n  'games.vote'(roomId) {\n    if (!voteTimer) { // one timer only\n      var voteTimer = Meteor.setTimeout(function() {\n        if (Rooms.findOne({room_id: roomId}).players.length === 0) {\n          Meteor.call('games.reset', roomId );\n        } else {\n          Rooms.update({room_id: roomId}, {\n            $set: { subround: \"Results\" },\n          });\n        }\n      }, 35000);\n      voteTimer = null;\n    }\n  },\n\n  'games.results'(roomId) {\n    if (!resultsTimer) { // one timer only\n      var currentRound = Rooms.findOne({room_id: roomId}).round;\n      if (currentRound === roundsToPlay) {\n        var resultsTimer = Meteor.setTimeout(function() {\n          if (Rooms.findOne({room_id: roomId}).players.length < 2) { // end game after results if not enough players\n            Meteor.call('games.reset', roomId );\n          } else {\n            Rooms.update({room_id: roomId}, {\n              $set: { subround: \"Final results\" },\n            });\n          }\n        }, 22000);\n      } else {\n        var resultsTimer = Meteor.setTimeout(function() {\n          if (Rooms.findOne({room_id: roomId}).players.length < 2) { // end game after results if not enough players\n            Meteor.call('games.reset', roomId );\n          } else {\n            Rooms.update({room_id: roomId}, {\n              $set: { round: currentRound + 1,\n                      subround: \"Get ready\" },\n            });\n          }\n        }, 22000);\n      }\n      resultsTimer = null;\n    }\n  },\n\n  'games.finalresults'(roomId) {\n    if (!finalTimer) { // one timer only\n      var finalTimer = Meteor.setTimeout(function() {\n        if (Rooms.findOne({room_id: roomId}).players.length < 2) { // end game after results if not enough players\n          Meteor.call('games.reset', roomId );\n        } else { // set up for new game\n          Games.remove({ room_id: roomId });\n          Meteor.call('games.init', roomId );\n        }\n      }, 25000);\n    }\n    finalTimer = null;\n  },\n\n  'games.reset'(roomId) {\n    Games.remove({ room_id: roomId });\n    Rooms.update({room_id: roomId}, {\n      $set: { round: 0,\n              subround: \"Waiting for players\" },\n    });\n  }\n\n\n\n\n})\n\n    // Games.find({ room_id: roomId }).remove({});\n","import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nexport const Messages = new Mongo.Collection('messages');\n\nMeteor.methods({\n  'messages.msgPlayer'(roomId, name, verb, roomName) {\n    Messages.insert({\n      user_id: \"<PartyHost>\",\n      room_id: roomId,\n      message: name + verb + roomName,\n      createdAt: new Date()\n    });\n  },\n\n  'messages.postMessage'(name, roomId, message) {\n    Messages.insert({\n      user_id: name,\n      room_id: roomId,\n      message: message,\n      createdAt: new Date() });\n  },\n\n  'messages.deleteOld'(messageId) {\n    Messages.remove({ _id : messageId});\n  }\n\n})\n","throw new Error(\"Unexpected token (13:6)\");\n","import { Accounts } from 'meteor/accounts-base';\n\nAccounts.onCreateUser((options, user) => {\n\n  user.currentRoom = \"\";\n  user.stats = {\n    lifetimePoints : 0,\n    lifetimeWins : 0,\n    lifetimeGamesPlayed : 0\n  };\n\n  if (options.profile)\n    user.profile = options.profile;\n\n  return user;\n});\n\nMeteor.publish(\"userData\", function () {\n  if (this.userId) {\n    return Meteor.users.find({_id: this.userId},\n                             {fields: {'stats': 1, 'currentRoom': 1}});\n  } else {\n    this.ready();\n  }\n});\n","import { Meteor } from 'meteor/meteor';\nimport '../imports/api/rooms.js';\nimport '../imports/api/chats.js';\nimport '../imports/api/messages.js';\nimport '../imports/api/games.js';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n\n"]}}]