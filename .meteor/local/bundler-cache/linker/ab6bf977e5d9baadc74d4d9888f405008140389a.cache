[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar moment = Package['momentjs:moment'].moment;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar Template = Package.templating.Template;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar mo;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"lbee:moment-helpers\":{\"common.js\":[\"babel-runtime/helpers/classCallCheck\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/lbee_moment-helpers/common.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});\n                                                                                                                      //\nvar MomentHelperInit = function () {                                                                                  //\n  // let self = this;                                                                                                 //\n                                                                                                                      //\n  //                                                                                                                  //\n                                                                                                                      //\n  function MomentHelperInit(isClient) {                                                                               // 5\n    _classCallCheck(this, MomentHelperInit);                                                                          // 5\n                                                                                                                      //\n    if (isClient) {                                                                                                   // 7\n      // create a new reactiveVar that holds the moment helper context of locale                                      //\n      this.currentLocale = new ReactiveVar();                                                                         // 9\n                                                                                                                      //\n      // when creating the moment helper context, set the locale same as moment                                       //\n      this.currentLocale.set(moment.locale());                                                                        // 12\n                                                                                                                      //\n      // reactive now                                                                                                 //\n      this.now = new ReactiveVar(moment());                                                                           // 15\n      var now = this.now;                                                                                             // 16\n                                                                                                                      //\n      Meteor.setInterval(function () {                                                                                // 18\n        now.set(moment());                                                                                            // 19\n      }, 1000); // every second                                                                                       // 20\n    }                                                                                                                 // 21\n                                                                                                                      //\n    // logging messages                                                                                               //\n    this._msg = {                                                                                                     // 24\n      dateNotValidReturnNow: 'valid date not provided, sending new moment instead',                                   // 25\n      dateNotValidReturnNull: 'valid date not provided, sending null'                                                 // 27\n    };                                                                                                                // 24\n                                                                                                                      //\n    // initate the default options                                                                                    //\n    this.options = {                                                                                                  // 32\n      // if a helper is called and no date given, create one as now                                                   //\n      returnNowIfDateNotGiven: false,                                                                                 // 34\n      // extra console logging                                                                                        //\n      debug: false,                                                                                                   // 36\n      // initial library of format tokens                                                                             //\n      formatTokens: {                                                                                                 // 38\n        'default': 'LLL'                                                                                              // 39\n        // defaults to locale date format: Month name, day of month, year, time                                       //\n      }                                                                                                               // 38\n    };                                                                                                                // 32\n  }                                                                                                                   // 44\n                                                                                                                      //\n  // configuration function, merges the defaults with the options provided                                            //\n                                                                                                                      //\n                                                                                                                      //\n  MomentHelperInit.prototype.configure = function () {                                                                //\n    function configure(options) {                                                                                     //\n      _.extend(this.options, options);                                                                                // 49\n    }                                                                                                                 // 50\n                                                                                                                      //\n    return configure;                                                                                                 //\n  }();                                                                                                                //\n                                                                                                                      //\n  // expose a utility to set the locale, updating moment & reactive locale                                            //\n                                                                                                                      //\n                                                                                                                      //\n  MomentHelperInit.prototype.setLocale = function () {                                                                //\n    function setLocale(locale) {                                                                                      //\n      moment.locale(locale);                                                                                          // 54\n      this.currentLocale.set(moment.locale()); // how does 'this' work?                                               // 55\n    }                                                                                                                 // 56\n                                                                                                                      //\n    return setLocale;                                                                                                 //\n  }();                                                                                                                //\n                                                                                                                      //\n  // logging function                                                                                                 //\n                                                                                                                      //\n                                                                                                                      //\n  MomentHelperInit.prototype.log = function () {                                                                      //\n    function log(_log) {                                                                                              //\n                                                                                                                      //\n      // delete the currently stored log                                                                              //\n      // this was enabled to assit with logging                                                                       //\n      delete this.logged;                                                                                             // 63\n                                                                                                                      //\n      // if debugging is enabled, log it!                                                                             //\n      if (this.options.debug) {                                                                                       // 66\n        this.logged = _log;                                                                                           // 67\n        console.log(_log);                                                                                            // 68\n      }                                                                                                               // 69\n    }                                                                                                                 // 70\n                                                                                                                      //\n    return log;                                                                                                       //\n  }();                                                                                                                //\n                                                                                                                      //\n  // used for moFormat, helps to get a format token eg. 'YYYY-MM-DD'                                                  //\n                                                                                                                      //\n                                                                                                                      //\n  MomentHelperInit.prototype._getToken = function () {                                                                //\n    function _getToken(token, aMoment) {                                                                              //\n      check(token, Match.Optional(String, null));                                                                     // 74\n      var tokenLibrary = _.defaults(this.options.formatTokens, {                                                      // 75\n        // these tokens will always be available (unless overridden)                                                  //\n        'dayOfWeek': 'dddd',                                                                                          // 77\n        'dayOfMonth': 'D',                                                                                            // 78\n        'month': 'M',                                                                                                 // 79\n        'year': 'YYYY',                                                                                               // 80\n        'time': 'h:mm a'                                                                                              // 81\n      });                                                                                                             // 75\n                                                                                                                      //\n      // if no token provided, use the default from the token library                                                 //\n      if (!token) {                                                                                                   // 85\n        token = 'default';                                                                                            // 86\n      }                                                                                                               // 87\n                                                                                                                      //\n      // see if the token is a reference to the token library, otherwise keep                                         //\n      token = tokenLibrary[token] || token;                                                                           // 90\n                                                                                                                      //\n      // check if token is a function & process                                                                       //\n      if (_.isFunction(token)) {                                                                                      // 93\n        token = token.call(aMoment);                                                                                  // 94\n      }                                                                                                               // 95\n                                                                                                                      //\n      // return the token                                                                                             //\n      return token;                                                                                                   // 98\n    }                                                                                                                 // 99\n                                                                                                                      //\n    return _getToken;                                                                                                 //\n  }();                                                                                                                //\n                                                                                                                      //\n  MomentHelperInit.prototype._getMoment = function () {                                                               //\n    function _getMoment(obj) {                                                                                        //\n                                                                                                                      //\n      var result;                                                                                                     // 103\n      var date;                                                                                                       // 104\n                                                                                                                      //\n      // goal is to get a moment object from what is provided                                                         //\n      if (moment.isMoment(obj)) {                                                                                     // 107\n        // if a moment is provided, return that moment, no questions asked                                            //\n        result = obj;                                                                                                 // 109\n      } else if (_.isDate(obj)) {                                                                                     // 110\n        // if a date is provided, convert to moment and return                                                        //\n        result = moment(obj);                                                                                         // 112\n      } else if (_.isString(obj) && obj.length > 1) {                                                                 // 113\n        // attempt to get a date from the string                                                                      //\n                                                                                                                      //\n        // if '|' is found, separate and use the RHS as the input format token                                        //\n        if (obj.indexOf('|') !== -1) {                                                                                // 117\n          date = moment(obj.substring(0, obj.indexOf('|')), // input string LHS of '|'                                // 118\n          obj.substring(obj.indexOf('|') + 1) // input format, RHS after '|'                                          // 120\n          );                                                                                                          // 118\n        } else {                                                                                                      // 122\n            date = moment(new Date(obj));                                                                             // 123\n          }                                                                                                           // 124\n        if (date.isValid()) {                                                                                         // 125\n          result = date;                                                                                              // 126\n        }                                                                                                             // 127\n      }                                                                                                               // 128\n                                                                                                                      //\n      // could not get a moment object, work out what to return if anything                                           //\n      if (!result) {                                                                                                  // 131\n        if (this.options.returnNowIfDateNotGiven) {                                                                   // 132\n          this.log(this._msg.dateNotValidReturnNow);                                                                  // 133\n          return moment();                                                                                            // 134\n        } else {                                                                                                      // 135\n          this.log(this._msg.dateNotValidReturnNull);                                                                 // 136\n        }                                                                                                             // 137\n      }                                                                                                               // 138\n                                                                                                                      //\n      return result;                                                                                                  // 140\n    }                                                                                                                 // 141\n                                                                                                                      //\n    return _getMoment;                                                                                                //\n  }();                                                                                                                //\n                                                                                                                      //\n  return MomentHelperInit;                                                                                            //\n}();                                                                                                                  //\n                                                                                                                      //\nmo = new MomentHelperInit(Meteor.isClient);                                                                           // 145\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"client.js\":[\"babel-runtime/helpers/classCallCheck\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/lbee_moment-helpers/client.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});\n                                                                                                                      //\nvar MomentHelper = function () {                                                                                      //\n  function MomentHelper() {                                                                                           // 3\n    _classCallCheck(this, MomentHelper);                                                                              // 3\n                                                                                                                      //\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                            // 3\n      args[_key] = arguments[_key];                                                                                   // 3\n    }                                                                                                                 // 3\n                                                                                                                      //\n    this.args = args;                                                                                                 // 4\n                                                                                                                      //\n    // Calling this reactive property ensure the helper is updated                                                    //\n    this.locale = mo.currentLocale.get();                                                                             // 7\n                                                                                                                      //\n    // eg. {{moFormat date=myDate}} / {{moFormat myDate}} will do the same thing                                      //\n    this.keywords = args.pop();                                                                                       // 10\n    this.dateA = args[0] || this.keywords.hash.d || this.keywords.hash.a;                                             // 11\n                                                                                                                      //\n    // processes what was given to ensure we end up with a moment object                                              //\n    this.moDate = mo._getMoment(this.dateA);                                                                          // 14\n  }                                                                                                                   // 15\n                                                                                                                      //\n  MomentHelper.prototype.moFormat = function () {                                                                     //\n    function moFormat() {                                                                                             //\n      if (this.moDate) {                                                                                              // 18\n        this.formatToken = this.args[1] || this.keywords.hash.f;                                                      // 19\n                                                                                                                      //\n        return this.moDate.format(mo._getToken(this.formatToken, this.moDate));                                       // 21\n      }                                                                                                               // 24\n      // fail silently if the date is not worked out to be a moment                                                   //\n      return null;                                                                                                    // 26\n    }                                                                                                                 // 27\n                                                                                                                      //\n    return moFormat;                                                                                                  //\n  }();                                                                                                                //\n                                                                                                                      //\n  return MomentHelper;                                                                                                //\n}();                                                                                                                  //\n                                                                                                                      //\nTemplate.registerHelper('moFormat', function () {                                                                     // 31\n  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {                        // 31\n    args[_key2] = arguments[_key2];                                                                                   // 31\n  }                                                                                                                   // 31\n                                                                                                                      //\n  return new (Function.prototype.bind.apply(MomentHelper, [null].concat(args)))().moFormat();                         // 31\n});                                                                                                                   // 31\n                                                                                                                      //\nTemplate.registerHelper('moDiff', function () {                                                                       // 35\n  function moDiff() {                                                                                                 // 35\n    // Calling this reactive property ensure the helper is updated                                                    //\n    var locale = mo.currentLocale.get(); // eslint-disable-line                                                       // 37\n    var result = void 0;                                                                                              // 38\n                                                                                                                      //\n    // enables the arguments to be provided as args or vars                                                           //\n                                                                                                                      //\n    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {                      // 35\n      args[_key3] = arguments[_key3];                                                                                 // 35\n    }                                                                                                                 // 35\n                                                                                                                      //\n    var kw = args.pop();                                                                                              // 41\n    var dateA = mo._getMoment(args[0] || kw.hash.a);                                                                  // 42\n    var dateB = mo._getMoment(args[1] || kw.hash.b);                                                                  // 43\n    var units = args[2] || kw.hash.units || 'seconds';                                                                // 44\n    var returnFloat = args[3] || kw.hash.returnFloat;                                                                 // 45\n                                                                                                                      //\n    // if the returnFloat is truthy convert it to true, or falsy = false                                              //\n    if (returnFloat) {                                                                                                // 48\n      returnFloat = true;                                                                                             // 49\n    } else {                                                                                                          // 50\n      returnFloat = false;                                                                                            // 51\n    }                                                                                                                 // 52\n                                                                                                                      //\n    // if the two dates are valid moment objects, send the result                                                     //\n    if (dateA && dateB) {                                                                                             // 55\n      result = dateA.diff(dateB, units, returnFloat);                                                                 // 56\n    }                                                                                                                 // 57\n                                                                                                                      //\n    // fail silently if the dates were not processed to a moment                                                      //\n    return result;                                                                                                    // 60\n  }                                                                                                                   // 61\n                                                                                                                      //\n  return moDiff;                                                                                                      // 35\n}());                                                                                                                 // 35\n                                                                                                                      //\nTemplate.registerHelper('moFrom', function () {                                                                       // 63\n  function moFrom() {                                                                                                 // 63\n    // Calling this reactive property ensure the helper is updated                                                    //\n    var locale = mo.currentLocale.get(); // eslint-disable-line                                                       // 65\n    var result = void 0;                                                                                              // 66\n                                                                                                                      //\n    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {                      // 63\n      args[_key4] = arguments[_key4];                                                                                 // 63\n    }                                                                                                                 // 63\n                                                                                                                      //\n    var kw = args.pop();                                                                                              // 68\n    var dateA = mo._getMoment(args[0] || kw.hash.a);                                                                  // 69\n    var dateB = mo._getMoment(args[1] || kw.hash.b);                                                                  // 70\n    var withoutSuffix = args[2] || kw.hash.withoutSuffix;                                                             // 71\n                                                                                                                      //\n    // if the withoutSuffix is truthy convert it to true, or falsy = false                                            //\n    if (withoutSuffix) {                                                                                              // 74\n      withoutSuffix = true;                                                                                           // 75\n    } else {                                                                                                          // 76\n      withoutSuffix = false;                                                                                          // 77\n    }                                                                                                                 // 78\n                                                                                                                      //\n    // if the two dates are valid moment objects, send the result                                                     //\n    if (dateA && dateB) {                                                                                             // 81\n      result = dateA.from(dateB, withoutSuffix);                                                                      // 82\n    }                                                                                                                 // 83\n                                                                                                                      //\n    // fail silently if the dates were not processed to a moment                                                      //\n    return result;                                                                                                    // 86\n  }                                                                                                                   // 87\n                                                                                                                      //\n  return moFrom;                                                                                                      // 63\n}());                                                                                                                 // 63\n                                                                                                                      //\nTemplate.registerHelper('moFromNow', function () {                                                                    // 89\n  function moFromNow() {                                                                                              // 89\n    // Calling this reactive property ensure the helper is updated                                                    //\n    var locale = mo.currentLocale.get(); // eslint-disable-line                                                       // 91\n                                                                                                                      //\n    // enables the arguments to be provided as args or vars                                                           //\n                                                                                                                      //\n    for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {                      // 89\n      args[_key5] = arguments[_key5];                                                                                 // 89\n    }                                                                                                                 // 89\n                                                                                                                      //\n    var kw = args.pop();                                                                                              // 94\n    var date = args[0] || kw.hash.d;                                                                                  // 95\n    var withoutSuffix = args[1] || kw.hash.withoutSuffix;                                                             // 96\n                                                                                                                      //\n    // if the withoutSuffix is truthy convert it to true, or falsy = false                                            //\n    if (withoutSuffix) {                                                                                              // 99\n      withoutSuffix = true;                                                                                           // 100\n    } else {                                                                                                          // 101\n      withoutSuffix = false;                                                                                          // 102\n    }                                                                                                                 // 103\n                                                                                                                      //\n    // work with what is given to get a moment object                                                                 //\n    var moDate = mo._getMoment(date);                                                                                 // 106\n                                                                                                                      //\n    // if we did end up with a valid object above, send the result                                                    //\n    if (moDate) {                                                                                                     // 109\n      return moDate.fromNow(withoutSuffix);                                                                           // 110\n    }                                                                                                                 // 111\n                                                                                                                      //\n    // fail silently if the dates were not processed to a moment                                                      //\n    return null;                                                                                                      // 114\n  }                                                                                                                   // 115\n                                                                                                                      //\n  return moFromNow;                                                                                                   // 89\n}());                                                                                                                 // 89\n                                                                                                                      //\nTemplate.registerHelper('moCalendar', function () {                                                                   // 117\n  function moCalendar() {                                                                                             // 117\n    // Calling this reactive property ensure the helper is updated                                                    //\n    var locale = mo.currentLocale.get(); // eslint-disable-line                                                       // 119\n                                                                                                                      //\n    // enables the arguments to be provided as args or vars                                                           //\n    // eg. {{moFormat date=myDate}} or {{moFormat myDate}} will do the same thing                                     //\n                                                                                                                      //\n    for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {                      // 117\n      args[_key6] = arguments[_key6];                                                                                 // 117\n    }                                                                                                                 // 117\n                                                                                                                      //\n    var kw = args.pop();                                                                                              // 123\n    var date = args[0] || kw.hash.d;                                                                                  // 124\n    var referenceDate = args[1] || kw.hash.r;                                                                         // 125\n    var moReferenceDate = void 0;                                                                                     // 126\n                                                                                                                      //\n    // processes what was given to ensure we end up with a moment object                                              //\n    var moDate = mo._getMoment(date);                                                                                 // 129\n                                                                                                                      //\n    // never let reference date default to now if not provided                                                        //\n    if (referenceDate) {                                                                                              // 132\n      moReferenceDate = mo._getMoment(referenceDate);                                                                 // 133\n    }                                                                                                                 // 134\n                                                                                                                      //\n    // fail silently if the date is not worked out to be a moment                                                     //\n    if (moDate) {                                                                                                     // 137\n      if (moReferenceDate) {                                                                                          // 138\n        return moDate.calendar(moReferenceDate);                                                                      // 139\n      }                                                                                                               // 140\n      return moDate.calendar();                                                                                       // 141\n    }                                                                                                                 // 142\n                                                                                                                      //\n    return null;                                                                                                      // 144\n  }                                                                                                                   // 145\n                                                                                                                      //\n  return moCalendar;                                                                                                  // 117\n}());                                                                                                                 // 117\n                                                                                                                      //\nTemplate.registerHelper('moNow', function () {                                                                        // 147\n  return mo.now.get();                                                                                                // 147\n});                                                                                                                   // 147\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/lbee:moment-helpers/common.js\");\nrequire(\"./node_modules/meteor/lbee:moment-helpers/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['lbee:moment-helpers'] = {}, {\n  mo: mo\n});\n\n})();\n","servePath":"/packages/lbee_moment-helpers.js","sourceMap":{"version":3,"sources":["/packages/lbee:moment-helpers/common.js","/packages/lbee:moment-helpers/client.js"],"names":[],"mappings":"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","file":"/packages/lbee_moment-helpers.js","sourcesContent":["class MomentHelperInit {\n  // let self = this;\n\n  //\n  constructor ( isClient ) {\n\n    if ( isClient ) {\n      // create a new reactiveVar that holds the moment helper context of locale\n      this.currentLocale = new ReactiveVar();\n\n      // when creating the moment helper context, set the locale same as moment\n      this.currentLocale.set( moment.locale() );\n\n      // reactive now\n      this.now = new ReactiveVar( moment() );\n      var now = this.now;\n\n      Meteor.setInterval( function () {\n        now.set( moment() );\n      }, 1000 ); // every second\n    }\n\n    // logging messages\n    this._msg = {\n      dateNotValidReturnNow:\n        'valid date not provided, sending new moment instead',\n      dateNotValidReturnNull:\n        'valid date not provided, sending null'\n    };\n\n    // initate the default options\n    this.options = {\n      // if a helper is called and no date given, create one as now\n      returnNowIfDateNotGiven: false,\n      // extra console logging\n      debug: false,\n      // initial library of format tokens\n      formatTokens: {\n        'default': 'LLL'\n        // defaults to locale date format: Month name, day of month, year, time\n      }\n    };\n\n  }\n\n\n  // configuration function, merges the defaults with the options provided\n  configure ( options ) {\n    _.extend( this.options, options );\n  }\n\n  // expose a utility to set the locale, updating moment & reactive locale\n  setLocale ( locale ) {\n    moment.locale( locale );\n    this.currentLocale.set( moment.locale() );// how does 'this' work?\n  }\n\n  // logging function\n  log ( log ) {\n\n    // delete the currently stored log\n    // this was enabled to assit with logging\n    delete this.logged;\n\n    // if debugging is enabled, log it!\n    if ( this.options.debug ) {\n      this.logged = log;\n      console.log( log );\n    }\n  }\n\n  // used for moFormat, helps to get a format token eg. 'YYYY-MM-DD'\n  _getToken ( token, aMoment ) {\n    check( token, Match.Optional( String, null ) );\n    let tokenLibrary = _.defaults( this.options.formatTokens, {\n      // these tokens will always be available (unless overridden)\n      'dayOfWeek': 'dddd',\n      'dayOfMonth': 'D',\n      'month': 'M',\n      'year': 'YYYY',\n      'time': 'h:mm a'\n    });\n\n    // if no token provided, use the default from the token library\n    if ( !token ) {\n      token = 'default';\n    }\n\n    // see if the token is a reference to the token library, otherwise keep\n    token = tokenLibrary[token] || token;\n\n    // check if token is a function & process\n    if ( _.isFunction( token ) ) {\n      token = token.call( aMoment );\n    }\n\n    // return the token\n    return token;\n  }\n\n  _getMoment ( obj ) {\n    \n    var result;\n    var date;\n\n    // goal is to get a moment object from what is provided\n    if ( moment.isMoment( obj ) ) {\n      // if a moment is provided, return that moment, no questions asked\n      result = obj;\n    } else if ( _.isDate( obj ) ) {\n      // if a date is provided, convert to moment and return\n      result = moment( obj );\n    } else if ( _.isString( obj ) && obj.length > 1 ) {\n      // attempt to get a date from the string\n\n      // if '|' is found, separate and use the RHS as the input format token\n      if ( obj.indexOf( '|' ) !== -1 ) {\n        date = moment(\n          obj.substring( 0, obj.indexOf( '|' ) ), // input string LHS of '|'\n          obj.substring( obj.indexOf( '|' ) + 1 ) // input format, RHS after '|'\n        );\n      } else {\n        date = moment( new Date( obj ) );\n      }\n      if ( date.isValid() ) {\n        result = date;\n      }\n    }\n\n    // could not get a moment object, work out what to return if anything\n    if ( !result ) {\n      if ( this.options.returnNowIfDateNotGiven ) {\n        this.log( this._msg.dateNotValidReturnNow );\n        return moment();\n      } else {\n        this.log( this._msg.dateNotValidReturnNull );\n      }\n    }\n\n    return result;\n  }\n\n}\n\nmo = new MomentHelperInit( Meteor.isClient );\n","class MomentHelper {\n\n  constructor(...args) {\n    this.args = args;\n\n    // Calling this reactive property ensure the helper is updated\n    this.locale = mo.currentLocale.get();\n\n    // eg. {{moFormat date=myDate}} / {{moFormat myDate}} will do the same thing\n    this.keywords = args.pop();\n    this.dateA = args[0] || this.keywords.hash.d || this.keywords.hash.a;\n\n    // processes what was given to ensure we end up with a moment object\n    this.moDate = mo._getMoment(this.dateA);\n  }\n\n  moFormat() {\n    if (this.moDate) {\n      this.formatToken = this.args[1] || this.keywords.hash.f;\n\n      return this.moDate.format(\n        mo._getToken(this.formatToken, this.moDate)\n      );\n    }\n    // fail silently if the date is not worked out to be a moment\n    return null;\n  }\n\n}\n\nTemplate.registerHelper('moFormat', (...args) =>\n  new MomentHelper(...args).moFormat()\n);\n\nTemplate.registerHelper('moDiff', function moDiff(...args) {\n  // Calling this reactive property ensure the helper is updated\n  const locale = mo.currentLocale.get(); // eslint-disable-line\n  let result;\n\n  // enables the arguments to be provided as args or vars\n  const kw = args.pop();\n  const dateA = mo._getMoment(args[0] || kw.hash.a);\n  const dateB = mo._getMoment(args[1] || kw.hash.b);\n  const units = args[2] || kw.hash.units || 'seconds';\n  let returnFloat = args[3] || kw.hash.returnFloat;\n\n  // if the returnFloat is truthy convert it to true, or falsy = false\n  if (returnFloat) {\n    returnFloat = true;\n  } else {\n    returnFloat = false;\n  }\n\n  // if the two dates are valid moment objects, send the result\n  if (dateA && dateB) {\n    result = dateA.diff(dateB, units, returnFloat);\n  }\n\n  // fail silently if the dates were not processed to a moment\n  return result;\n});\n\nTemplate.registerHelper('moFrom', function moFrom(...args) {\n  // Calling this reactive property ensure the helper is updated\n  const locale = mo.currentLocale.get(); // eslint-disable-line\n  let result;\n\n  const kw = args.pop();\n  const dateA = mo._getMoment(args[0] || kw.hash.a);\n  const dateB = mo._getMoment(args[1] || kw.hash.b);\n  let withoutSuffix = args[2] || kw.hash.withoutSuffix;\n\n  // if the withoutSuffix is truthy convert it to true, or falsy = false\n  if (withoutSuffix) {\n    withoutSuffix = true;\n  } else {\n    withoutSuffix = false;\n  }\n\n  // if the two dates are valid moment objects, send the result\n  if (dateA && dateB) {\n    result = dateA.from(dateB, withoutSuffix);\n  }\n\n  // fail silently if the dates were not processed to a moment\n  return result;\n});\n\nTemplate.registerHelper('moFromNow', function moFromNow(...args) {\n  // Calling this reactive property ensure the helper is updated\n  const locale = mo.currentLocale.get(); // eslint-disable-line\n\n  // enables the arguments to be provided as args or vars\n  const kw = args.pop();\n  const date = args[0] || kw.hash.d;\n  let withoutSuffix = args[1] || kw.hash.withoutSuffix;\n\n  // if the withoutSuffix is truthy convert it to true, or falsy = false\n  if (withoutSuffix) {\n    withoutSuffix = true;\n  } else {\n    withoutSuffix = false;\n  }\n\n  // work with what is given to get a moment object\n  const moDate = mo._getMoment(date);\n\n  // if we did end up with a valid object above, send the result\n  if (moDate) {\n    return moDate.fromNow(withoutSuffix);\n  }\n\n  // fail silently if the dates were not processed to a moment\n  return null;\n});\n\nTemplate.registerHelper('moCalendar', function moCalendar(...args) {\n  // Calling this reactive property ensure the helper is updated\n  const locale = mo.currentLocale.get(); // eslint-disable-line\n\n  // enables the arguments to be provided as args or vars\n  // eg. {{moFormat date=myDate}} or {{moFormat myDate}} will do the same thing\n  const kw = args.pop();\n  const date = args[0] || kw.hash.d;\n  const referenceDate = args[1] || kw.hash.r;\n  let moReferenceDate;\n\n  // processes what was given to ensure we end up with a moment object\n  const moDate = mo._getMoment(date);\n\n  // never let reference date default to now if not provided\n  if (referenceDate) {\n    moReferenceDate = mo._getMoment(referenceDate);\n  }\n\n  // fail silently if the date is not worked out to be a moment\n  if (moDate) {\n    if (moReferenceDate) {\n      return moDate.calendar(moReferenceDate);\n    }\n    return moDate.calendar();\n  }\n\n  return null;\n});\n\nTemplate.registerHelper('moNow', () => mo.now.get());\n"]}}]