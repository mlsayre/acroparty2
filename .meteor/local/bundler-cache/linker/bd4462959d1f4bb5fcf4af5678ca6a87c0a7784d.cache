[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar meteorInstall = Package['modules-runtime'].meteorInstall;\n\n/* Package-scope variables */\nvar Buffer, process;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"modules\":{\"client.js\":[\"./install-packages.js\",\"./stubs.js\",\"./buffer.js\",\"./process.js\",\"reify/lib/runtime\",\"./css\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/client.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"./install-packages.js\");                                                                                      // 1\nrequire(\"./stubs.js\");                                                                                                 // 2\nrequire(\"./buffer.js\");                                                                                                // 3\nrequire(\"./process.js\");                                                                                               // 4\nrequire(\"reify/lib/runtime\").enable(module.constructor);                                                               // 5\n                                                                                                                       // 6\nexports.addStyles = require(\"./css\").addStyles;                                                                        // 7\n                                                                                                                       // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"buffer.js\":[\"buffer\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/buffer.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ntry {                                                                                                                  // 1\n  Buffer = global.Buffer || require(\"buffer\").Buffer;                                                                  // 2\n} catch (noBuffer) {}                                                                                                  // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"css.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/css.js                                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar doc = document;                                                                                                    // 1\nvar head = doc.getElementsByTagName(\"head\").item(0);                                                                   // 2\n                                                                                                                       // 3\nexports.addStyles = function (css) {                                                                                   // 4\n  var style = doc.createElement(\"style\");                                                                              // 5\n                                                                                                                       // 6\n  style.setAttribute(\"type\", \"text/css\");                                                                              // 7\n                                                                                                                       // 8\n  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                                   // 9\n  var internetExplorerSheetObject =                                                                                    // 10\n    style.sheet || // Edge/IE11.                                                                                       // 11\n    style.styleSheet; // Older IEs.                                                                                    // 12\n                                                                                                                       // 13\n  if (internetExplorerSheetObject) {                                                                                   // 14\n    internetExplorerSheetObject.cssText = css;                                                                         // 15\n  } else {                                                                                                             // 16\n    style.appendChild(doc.createTextNode(css));                                                                        // 17\n  }                                                                                                                    // 18\n                                                                                                                       // 19\n  return head.appendChild(style);                                                                                      // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"install-packages.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/install-packages.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction install(name, mainModule) {                                                                                   // 1\n  var meteorDir = {};                                                                                                  // 2\n                                                                                                                       // 3\n  // Given a package name <name>, install a stub module in the                                                         // 4\n  // /node_modules/meteor directory called <name>.js, so that                                                          // 5\n  // require.resolve(\"meteor/<name>\") will always return                                                               // 6\n  // /node_modules/meteor/<name>.js instead of something like                                                          // 7\n  // /node_modules/meteor/<name>/index.js, in the rare but possible event                                              // 8\n  // that the package contains a file called index.js (#6590).                                                         // 9\n                                                                                                                       // 10\n  if (mainModule) {                                                                                                    // 11\n    meteorDir[name + \".js\"] = [mainModule, function (require, e, module) {                                             // 12\n      module.exports = require(mainModule);                                                                            // 13\n    }];                                                                                                                // 14\n  } else {                                                                                                             // 15\n    // back compat with old Meteor packages                                                                            // 16\n    meteorDir[name + \".js\"] = function (r, e, module) {                                                                // 17\n      module.exports = Package[name];                                                                                  // 18\n    };                                                                                                                 // 19\n  }                                                                                                                    // 20\n                                                                                                                       // 21\n  meteorInstall({                                                                                                      // 22\n    node_modules: {                                                                                                    // 23\n      meteor: meteorDir                                                                                                // 24\n    }                                                                                                                  // 25\n  });                                                                                                                  // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\n// This file will be modified during computeJsOutputFilesMap to include                                                // 29\n// install(<name>) calls for every Meteor package.                                                                     // 30\n                                                                                                                       // 31\ninstall(\"underscore\");                                                                                                 // 32\ninstall(\"meteor\");                                                                                                     // 33\ninstall(\"meteor-base\");                                                                                                // 34\ninstall(\"mobile-experience\");                                                                                          // 35\ninstall(\"modules-runtime\");                                                                                            // 36\ninstall(\"modules\", \"meteor/modules/client.js\");                                                                        // 37\ninstall(\"es5-shim\", \"meteor/es5-shim/client.js\");                                                                      // 38\ninstall(\"promise\", \"meteor/promise/client.js\");                                                                        // 39\ninstall(\"ecmascript-runtime\", \"meteor/ecmascript-runtime/runtime.js\");                                                 // 40\ninstall(\"babel-compiler\");                                                                                             // 41\ninstall(\"ecmascript\");                                                                                                 // 42\ninstall(\"base64\");                                                                                                     // 43\ninstall(\"ejson\");                                                                                                      // 44\ninstall(\"id-map\");                                                                                                     // 45\ninstall(\"ordered-dict\");                                                                                               // 46\ninstall(\"tracker\");                                                                                                    // 47\ninstall(\"babel-runtime\");                                                                                              // 48\ninstall(\"random\");                                                                                                     // 49\ninstall(\"mongo-id\");                                                                                                   // 50\ninstall(\"diff-sequence\");                                                                                              // 51\ninstall(\"geojson-utils\", \"meteor/geojson-utils/main.js\");                                                              // 52\ninstall(\"minimongo\");                                                                                                  // 53\ninstall(\"check\", \"meteor/check/match.js\");                                                                             // 54\ninstall(\"retry\");                                                                                                      // 55\ninstall(\"ddp-common\");                                                                                                 // 56\ninstall(\"reload\");                                                                                                     // 57\ninstall(\"ddp-client\");                                                                                                 // 58\ninstall(\"ddp\");                                                                                                        // 59\ninstall(\"ddp-server\");                                                                                                 // 60\ninstall(\"allow-deny\");                                                                                                 // 61\ninstall(\"insecure\");                                                                                                   // 62\ninstall(\"mongo\");                                                                                                      // 63\ninstall(\"blaze-html-templates\");                                                                                       // 64\ninstall(\"reactive-var\");                                                                                               // 65\ninstall(\"jquery\", \"meteor/jquery/main.js\");                                                                            // 66\ninstall(\"standard-minifier-css\");                                                                                      // 67\ninstall(\"standard-minifier-js\");                                                                                       // 68\ninstall(\"shell-server\");                                                                                               // 69\ninstall(\"autopublish\");                                                                                                // 70\ninstall(\"ddp-rate-limiter\");                                                                                           // 71\ninstall(\"localstorage\");                                                                                               // 72\ninstall(\"callback-hook\");                                                                                              // 73\ninstall(\"deps\");                                                                                                       // 74\ninstall(\"htmljs\");                                                                                                     // 75\ninstall(\"observe-sequence\");                                                                                           // 76\ninstall(\"blaze\");                                                                                                      // 77\ninstall(\"accounts-base\", \"meteor/accounts-base/client_main.js\");                                                       // 78\ninstall(\"service-configuration\");                                                                                      // 79\ninstall(\"spacebars\");                                                                                                  // 80\ninstall(\"templating\");                                                                                                 // 81\ninstall(\"reactive-dict\");                                                                                              // 82\ninstall(\"session\");                                                                                                    // 83\ninstall(\"sha\");                                                                                                        // 84\ninstall(\"srp\");                                                                                                        // 85\ninstall(\"accounts-password\");                                                                                          // 86\ninstall(\"less\");                                                                                                       // 87\ninstall(\"accounts-ui-unstyled\");                                                                                       // 88\ninstall(\"accounts-ui\");                                                                                                // 89\ninstall(\"tmeasday:check-npm-versions\", \"meteor/tmeasday:check-npm-versions/check-npm-versions.js\");                    // 90\ninstall(\"react-meteor-data\", \"meteor/react-meteor-data/react-meteor-data.jsx\");                                        // 91\ninstall(\"momentjs:moment\");                                                                                            // 92\ninstall(\"glasser:reactive-fromnow\");                                                                                   // 93\ninstall(\"webapp\");                                                                                                     // 94\ninstall(\"livedata\");                                                                                                   // 95\ninstall(\"hot-code-push\");                                                                                              // 96\ninstall(\"launch-screen\");                                                                                              // 97\ninstall(\"ui\");                                                                                                         // 98\ninstall(\"autoupdate\");                                                                                                 // 99\n                                                                                                                       // 100\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"process.js\":[\"process\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/process.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ntry {                                                                                                                  // 1\n  // The application can run `npm install process` to provide its own                                                  // 2\n  // process stub; otherwise this module will provide a partial stub.                                                  // 3\n  process = global.process || require(\"process\");                                                                      // 4\n} catch (noProcess) {                                                                                                  // 5\n  process = {};                                                                                                        // 6\n}                                                                                                                      // 7\n                                                                                                                       // 8\nif (Meteor.isServer) {                                                                                                 // 9\n  // Make require(\"process\") work on the server in all versions of Node.                                               // 10\n  meteorInstall({                                                                                                      // 11\n    node_modules: {                                                                                                    // 12\n      \"process.js\": function (r, e, module) {                                                                          // 13\n        module.exports = process;                                                                                      // 14\n      }                                                                                                                // 15\n    }                                                                                                                  // 16\n  });                                                                                                                  // 17\n} else {                                                                                                               // 18\n  process.platform = \"browser\";                                                                                        // 19\n  process.nextTick = process.nextTick || Meteor._setImmediate;                                                         // 20\n}                                                                                                                      // 21\n                                                                                                                       // 22\nif (typeof process.env !== \"object\") {                                                                                 // 23\n  process.env = {};                                                                                                    // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\n_.extend(process.env, meteorEnv);                                                                                      // 27\n                                                                                                                       // 28\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"stubs.js\":[\"meteor-node-stubs\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/stubs.js                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ntry {                                                                                                                  // 1\n  // When meteor-node-stubs is installed in the application's root                                                     // 2\n  // node_modules directory, requiring it here installs aliases for stubs                                              // 3\n  // for all Node built-in modules, such as fs, util, and http.                                                        // 4\n  require(\"meteor-node-stubs\");                                                                                        // 5\n} catch (noStubs) {}                                                                                                   // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"node_modules\":{\"reify\":{\"lib\":{\"runtime.js\":[\"./entry.js\",\"./utils.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/modules/node_modules/reify/lib/runtime.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Entry = require(\"./entry.js\").Entry;                                                                               // 1\nvar utils = require(\"./utils.js\");                                                                                     // 2\n                                                                                                                       // 3\nexports.enable = function (Module) {                                                                                   // 4\n  var Mp = Module.prototype;                                                                                           // 5\n                                                                                                                       // 6\n  if (typeof Mp.import === \"function\" &&                                                                               // 7\n      typeof Mp.export === \"function\") {                                                                               // 8\n    // If the Mp.{import,export} methods have already been                                                             // 9\n    // defined, abandon reification immediately.                                                                       // 10\n    return Module;                                                                                                     // 11\n  }                                                                                                                    // 12\n                                                                                                                       // 13\n  // Platform-specific code should implement this method however                                                       // 14\n  // appropriate. Module.prototype.resolve(id) should return an absolute                                               // 15\n  // version of the given module identifier, like require.resolve.                                                     // 16\n  Mp.resolve = Mp.resolve || function resolve(id) {                                                                    // 17\n    throw new Error(\"Module.prototype.resolve not implemented\");                                                       // 18\n  };                                                                                                                   // 19\n                                                                                                                       // 20\n  // Platform-specific code should find a way to call this method whenever                                             // 21\n  // the module system is about to return module.exports from require. This                                            // 22\n  // might happen more than once per module, in case of dependency cycles,                                             // 23\n  // so we want Module.prototype.runModuleSetters to run each time.                                                    // 24\n  Mp.runModuleSetters = function runModuleSetters(valueToPassThrough) {                                                // 25\n    var entry = Entry.get(this.id);                                                                                    // 26\n    if (entry) {                                                                                                       // 27\n      entry.runModuleSetters(this);                                                                                    // 28\n    }                                                                                                                  // 29\n                                                                                                                       // 30\n    // Assignments to exported local variables get wrapped with calls to                                               // 31\n    // module.runModuleSetters, so module.runModuleSetters returns the                                                 // 32\n    // valueToPassThrough parameter to allow the value of the original                                                 // 33\n    // expression to pass through. For example,                                                                        // 34\n    //                                                                                                                 // 35\n    //   export var a = 1;                                                                                             // 36\n    //   console.log(a += 3);                                                                                          // 37\n    //                                                                                                                 // 38\n    // becomes                                                                                                         // 39\n    //                                                                                                                 // 40\n    //   module.export(\"a\", () => a);                                                                                  // 41\n    //   var a = 1;                                                                                                    // 42\n    //   console.log(module.runModuleSetters(a += 3));                                                                 // 43\n    //                                                                                                                 // 44\n    // This ensures module.runModuleSetters runs immediately after the                                                 // 45\n    // assignment, and does not interfere with the larger computation.                                                 // 46\n    return valueToPassThrough;                                                                                         // 47\n  };                                                                                                                   // 48\n                                                                                                                       // 49\n  function setESModule(module) {                                                                                       // 50\n    var exports = module.exports;                                                                                      // 51\n    if (exports && typeof exports === \"object\") {                                                                      // 52\n      exports.__esModule = true;                                                                                       // 53\n    }                                                                                                                  // 54\n  }                                                                                                                    // 55\n                                                                                                                       // 56\n  Mp.import = function (id, setters) {                                                                                 // 57\n    var module = this;                                                                                                 // 58\n    setESModule(module);                                                                                               // 59\n                                                                                                                       // 60\n    var absoluteId = module.resolve(id);                                                                               // 61\n                                                                                                                       // 62\n    if (setters && typeof setters === \"object\") {                                                                      // 63\n      var entry = Entry.getOrCreate(absoluteId);                                                                       // 64\n      entry.addSetters(module, setters);                                                                               // 65\n    }                                                                                                                  // 66\n                                                                                                                       // 67\n    var countBefore = entry && entry.runCount;                                                                         // 68\n    var exports = typeof module.require === \"function\"                                                                 // 69\n      ? module.require(absoluteId)                                                                                     // 70\n      : require(absoluteId);                                                                                           // 71\n                                                                                                                       // 72\n    if (entry && entry.runCount === countBefore) {                                                                     // 73\n      // If require(absoluteId) didn't run any setters for this entry,                                                 // 74\n      // perhaps because it's not the first time this module has been                                                  // 75\n      // required, run the setters now using an object that passes as the                                              // 76\n      // real module object.                                                                                           // 77\n      entry.runModuleSetters({                                                                                         // 78\n        id: absoluteId,                                                                                                // 79\n        exports: exports,                                                                                              // 80\n        getExportByName: Mp.getExportByName                                                                            // 81\n      });                                                                                                              // 82\n    }                                                                                                                  // 83\n  };                                                                                                                   // 84\n                                                                                                                       // 85\n  // Register getter functions for local variables in the scope of an                                                  // 86\n  // export statement. The keys of the getters object are exported names,                                              // 87\n  // and the values are functions that return local values.                                                            // 88\n  Mp.export = function (getters) {                                                                                     // 89\n    var module = this;                                                                                                 // 90\n    setESModule(module);                                                                                               // 91\n                                                                                                                       // 92\n    if (utils.isPlainObject(getters)) {                                                                                // 93\n      Entry.getOrCreate(module.id).addGetters(getters);                                                                // 94\n    }                                                                                                                  // 95\n                                                                                                                       // 96\n    if (module.loaded) {                                                                                               // 97\n      // If the module has already been evaluated, then we need to trigger                                             // 98\n      // another round of entry.runModuleSetters calls, which begins by                                                // 99\n      // calling entry.runModuleGetters(module).                                                                       // 100\n      module.runModuleSetters();                                                                                       // 101\n    }                                                                                                                  // 102\n  };                                                                                                                   // 103\n                                                                                                                       // 104\n  // This method can be overridden by client code to implement custom export                                           // 105\n  // naming logic. The current implementation works well with Babel's                                                  // 106\n  // __esModule convention.                                                                                            // 107\n  Mp.getExportByName = function (name) {                                                                               // 108\n    var exports = this.exports;                                                                                        // 109\n                                                                                                                       // 110\n    if (name === \"*\") {                                                                                                // 111\n      return exports;                                                                                                  // 112\n    }                                                                                                                  // 113\n                                                                                                                       // 114\n    if (name === \"default\" &&                                                                                          // 115\n        ! (exports &&                                                                                                  // 116\n           typeof exports === \"object\" &&                                                                              // 117\n           exports.__esModule &&                                                                                       // 118\n           \"default\" in exports)) {                                                                                    // 119\n      return exports;                                                                                                  // 120\n    }                                                                                                                  // 121\n                                                                                                                       // 122\n    return exports && exports[name];                                                                                   // 123\n  };                                                                                                                   // 124\n                                                                                                                       // 125\n  return Module;                                                                                                       // 126\n};                                                                                                                     // 127\n                                                                                                                       // 128\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"entry.js\":[\"./utils.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/modules/node_modules/reify/lib/entry.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                          // 1\nvar entryMap = Object.create(null);                                                                                    // 2\nvar utils = require(\"./utils.js\");                                                                                     // 3\n                                                                                                                       // 4\nfunction Entry(id) {                                                                                                   // 5\n  // Same as module.id for this module.                                                                                // 6\n  this.id = id;                                                                                                        // 7\n  // The number of times this.runModuleSetters has been called.                                                        // 8\n  this.runCount = 0;                                                                                                   // 9\n  // Setters for assigning to local variables in parent modules.                                                       // 10\n  this.setters = Object.create(null);                                                                                  // 11\n  // Getters for local variables exported from this module.                                                            // 12\n  this.getters = Object.create(null);                                                                                  // 13\n}                                                                                                                      // 14\n                                                                                                                       // 15\nvar Ep = Entry.prototype;                                                                                              // 16\n                                                                                                                       // 17\nEntry.get = function (id) {                                                                                            // 18\n  return entryMap[id] || null;                                                                                         // 19\n};                                                                                                                     // 20\n                                                                                                                       // 21\nEntry.getOrCreate = function (id) {                                                                                    // 22\n  return entryMap[id] = entryMap[id] || new Entry(id);                                                                 // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\nEp.addSetters = function (parent, setters) {                                                                           // 26\n  var entry = this;                                                                                                    // 27\n                                                                                                                       // 28\n  Object.keys(setters).forEach(function (name) {                                                                       // 29\n    var setter = setters[name];                                                                                        // 30\n    if (typeof setter === \"function\" &&                                                                                // 31\n        // Ignore any requests for the exports.__esModule property.\"                                                   // 32\n        name !== \"__esModule\") {                                                                                       // 33\n      setter.parent = parent;                                                                                          // 34\n      (entry.setters[name] =                                                                                           // 35\n       entry.setters[name] || []                                                                                       // 36\n      ).push(setter);                                                                                                  // 37\n    }                                                                                                                  // 38\n  });                                                                                                                  // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\nEp.addGetters = function (getters) {                                                                                   // 42\n  var entry = this;                                                                                                    // 43\n  Object.keys(getters).forEach(function (name) {                                                                       // 44\n    var getter = getters[name];                                                                                        // 45\n    if (typeof getter === \"function\" &&                                                                                // 46\n        // Ignore any requests for the exports.__esModule property.\"                                                   // 47\n        name !== \"__esModule\") {                                                                                       // 48\n      // Should this throw if hasOwn.call(this.getters, name)?                                                         // 49\n      entry.getters[name] = getter;                                                                                    // 50\n    }                                                                                                                  // 51\n  });                                                                                                                  // 52\n};                                                                                                                     // 53\n                                                                                                                       // 54\nfunction runModuleSetters(module) {                                                                                    // 55\n  var entry = entryMap[module.id];                                                                                     // 56\n  if (entry) {                                                                                                         // 57\n    entry.runModuleSetters(module);                                                                                    // 58\n  }                                                                                                                    // 59\n}                                                                                                                      // 60\n                                                                                                                       // 61\nfunction runModuleGetters(module) {                                                                                    // 62\n  var entry = entryMap[module.id];                                                                                     // 63\n  return entry ? entry.runModuleGetters(module) : 0;                                                                   // 64\n}                                                                                                                      // 65\n                                                                                                                       // 66\nEp.runModuleGetters = function (module) {                                                                              // 67\n  var entry = this;                                                                                                    // 68\n  var changeCount = 0;                                                                                                 // 69\n                                                                                                                       // 70\n  Object.keys(entry.getters).forEach(function (name) {                                                                 // 71\n    if (entry.runGetter(module, name)) {                                                                               // 72\n      ++changeCount;                                                                                                   // 73\n    }                                                                                                                  // 74\n  });                                                                                                                  // 75\n                                                                                                                       // 76\n  return changeCount;                                                                                                  // 77\n};                                                                                                                     // 78\n                                                                                                                       // 79\n// Returns true iff the getter updated module.exports with a new value.                                                // 80\nEp.runGetter = function (module, name) {                                                                               // 81\n  if (! hasOwn.call(this.getters, name)) {                                                                             // 82\n    return false;                                                                                                      // 83\n  }                                                                                                                    // 84\n                                                                                                                       // 85\n  var getter = this.getters[name];                                                                                     // 86\n  try {                                                                                                                // 87\n    var value = getter.call(module);                                                                                   // 88\n  } catch (e) {}                                                                                                       // 89\n  var exports = module.exports;                                                                                        // 90\n                                                                                                                       // 91\n  if (! hasOwn.call(exports, name) ||                                                                                  // 92\n      exports[name] !== value) {                                                                                       // 93\n    // We update module.exports[name] with the current value so that                                                   // 94\n    // CommonJS require calls remain consistent with module.import.                                                    // 95\n    exports[name] = value;                                                                                             // 96\n    return true;                                                                                                       // 97\n  }                                                                                                                    // 98\n                                                                                                                       // 99\n  return false;                                                                                                        // 100\n};                                                                                                                     // 101\n                                                                                                                       // 102\n// Called whenever module.exports might have changed, to trigger any                                                   // 103\n// setters associated with the newly exported values.                                                                  // 104\nEp.runModuleSetters = function (module) {                                                                              // 105\n  var entry = this;                                                                                                    // 106\n  var names = Object.keys(entry.setters);                                                                              // 107\n                                                                                                                       // 108\n  // Make sure module.exports is up to date before we call                                                             // 109\n  // module.getExportByName(name).                                                                                     // 110\n  entry.runModuleGetters(module);                                                                                      // 111\n                                                                                                                       // 112\n  // Invoke the given callback once for every (setter, value, name) triple                                             // 113\n  // that needs to be called. Note that forEachSetter does not call any                                                // 114\n  // setters itself, only the given callback.                                                                          // 115\n  function forEachSetter(callback, context) {                                                                          // 116\n    names.forEach(function (name) {                                                                                    // 117\n      entry.setters[name].forEach(function (setter) {                                                                  // 118\n        var value = module.getExportByName(name);                                                                      // 119\n        if (name === \"*\") {                                                                                            // 120\n          Object.keys(value).forEach(function (name) {                                                                 // 121\n            call(setter, value[name], name);                                                                           // 122\n          });                                                                                                          // 123\n        } else {                                                                                                       // 124\n          call(setter, value, name);                                                                                   // 125\n        }                                                                                                              // 126\n      });                                                                                                              // 127\n    });                                                                                                                // 128\n                                                                                                                       // 129\n    function call(setter, value, name) {                                                                               // 130\n      if (name === \"__esModule\") {                                                                                     // 131\n        // Ignore setters asking for module.exports.__esModule.                                                        // 132\n        return;                                                                                                        // 133\n      }                                                                                                                // 134\n                                                                                                                       // 135\n      setter.last = setter.last || Object.create(null);                                                                // 136\n                                                                                                                       // 137\n      if (! hasOwn.call(setter.last, name) ||                                                                          // 138\n          setter.last[name] !== value) {                                                                               // 139\n        // Only invoke the callback if we have not called this setter                                                  // 140\n        // (with a value of this name) before, or the current value is                                                 // 141\n        // different from the last value we passed to this setter.                                                     // 142\n        return callback.apply(context, arguments);                                                                     // 143\n      }                                                                                                                // 144\n    }                                                                                                                  // 145\n  }                                                                                                                    // 146\n                                                                                                                       // 147\n  // Every three elements of this list form a (setter, value, name) triple                                             // 148\n  // that needs to be invoked.                                                                                         // 149\n  var settersToCall = [];                                                                                              // 150\n                                                                                                                       // 151\n  // Lazily-initialized objects mapping parent module identifiers to                                                   // 152\n  // relevant parent module objects and snapshots of their exports.                                                    // 153\n  var relevantParents;                                                                                                 // 154\n  var parentSnapshots;                                                                                                 // 155\n                                                                                                                       // 156\n  // Take snapshots of setter.parent.exports for any setters that we are                                               // 157\n  // planning to call, so that we can later determine if calling the                                                   // 158\n  // setters modified any of those exports objects.                                                                    // 159\n  forEachSetter(function (setter, value, name) {                                                                       // 160\n    var parent = setter.parent;                                                                                        // 161\n    parentSnapshots = parentSnapshots || Object.create(null);                                                          // 162\n    if (! hasOwn.call(parentSnapshots, parent.id)) {                                                                   // 163\n      relevantParents = relevantParents || Object.create(null);                                                        // 164\n      relevantParents[parent.id] = parent;                                                                             // 165\n      if (utils.isPlainObject(parent.exports)) {                                                                       // 166\n        // If parent.exports is an object, make a shallow clone of it so                                               // 167\n        // that we can see if it changes as a result of calling setters.                                               // 168\n        parentSnapshots[parent.id] = utils.assign({}, parent.exports);                                                 // 169\n      } else {                                                                                                         // 170\n        // If parent.exports is not an object, the \"snapshot\" is just the                                              // 171\n        // value of parent.exports.                                                                                    // 172\n        parentSnapshots[parent.id] = parent.exports;                                                                   // 173\n      }                                                                                                                // 174\n    }                                                                                                                  // 175\n                                                                                                                       // 176\n    // Push three elements at a time to avoid creating wrapper arrays for                                              // 177\n    // each (setter, value, name) triple. Note the i += 3 below.                                                       // 178\n    settersToCall.push(setter, value, name);                                                                           // 179\n  });                                                                                                                  // 180\n                                                                                                                       // 181\n  // Now call all the setters that we decided we need to call.                                                         // 182\n  for (var i = 0; i < settersToCall.length; i += 3) {                                                                  // 183\n    var setter = settersToCall[i];                                                                                     // 184\n    var value = settersToCall[i + 1];                                                                                  // 185\n    var name = settersToCall[i + 2];                                                                                   // 186\n    setter.call(module, setter.last[name] = value, name);                                                              // 187\n  }                                                                                                                    // 188\n                                                                                                                       // 189\n  ++entry.runCount;                                                                                                    // 190\n                                                                                                                       // 191\n  if (! relevantParents) {                                                                                             // 192\n    // If we never called takeSnapshot, then we can avoid checking                                                     // 193\n    // relevantParents and parentSnapshots below.                                                                      // 194\n    return;                                                                                                            // 195\n  }                                                                                                                    // 196\n                                                                                                                       // 197\n  // If any of the setters updated the module.exports of a parent module,                                              // 198\n  // or updated local variables that are exported by that parent module,                                               // 199\n  // then we must re-run any setters registered by that parent module.                                                 // 200\n  Object.keys(relevantParents).forEach(function (id) {                                                                 // 201\n    var parent = relevantParents[id];                                                                                  // 202\n                                                                                                                       // 203\n    if (runModuleGetters(parent) > 0) {                                                                                // 204\n      return runModuleSetters(parent);                                                                                 // 205\n    }                                                                                                                  // 206\n                                                                                                                       // 207\n    var exports = parent.exports;                                                                                      // 208\n    var snapshot = parentSnapshots[parent.id];                                                                         // 209\n    if (utils.shallowObjEqual(exports, snapshot)) {                                                                    // 210\n      // If parent.exports have not changed since we took the snapshot,                                                // 211\n      // then we do not need to run the parent's setters.                                                              // 212\n      return;                                                                                                          // 213\n    }                                                                                                                  // 214\n                                                                                                                       // 215\n    runModuleSetters(parent);                                                                                          // 216\n  });                                                                                                                  // 217\n};                                                                                                                     // 218\n                                                                                                                       // 219\nexports.Entry = Entry;                                                                                                 // 220\n                                                                                                                       // 221\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"utils.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/modules/node_modules/reify/lib/utils.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                          // 1\nvar objToStr = Object.prototype.toString;                                                                              // 2\nvar objStr = objToStr.call({});                                                                                        // 3\n                                                                                                                       // 4\nfunction isPlainObject(value) {                                                                                        // 5\n  return objToStr.call(value) === objStr;                                                                              // 6\n}                                                                                                                      // 7\nexports.isPlainObject = isPlainObject;                                                                                 // 8\n                                                                                                                       // 9\nexports.assign = Object.assign || function (obj) {                                                                     // 10\n  var argc = arguments.length;                                                                                         // 11\n  for (var i = 1; i < argc; ++i) {                                                                                     // 12\n    var arg = arguments[i];                                                                                            // 13\n    if (arg && typeof arg === \"object\") {                                                                              // 14\n      var keys = Object.keys(arg);                                                                                     // 15\n      for (var k = 0; k < keys.length; ++k) {                                                                          // 16\n        var key = keys[k];                                                                                             // 17\n        obj[key] = arg[key];                                                                                           // 18\n      }                                                                                                                // 19\n    }                                                                                                                  // 20\n  }                                                                                                                    // 21\n  return obj;                                                                                                          // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\nexports.shallowObjEqual = function(a, b) {                                                                             // 25\n  if (a === b) {                                                                                                       // 26\n    return true;                                                                                                       // 27\n  }                                                                                                                    // 28\n                                                                                                                       // 29\n  if (! isPlainObject(a) ||                                                                                            // 30\n      ! isPlainObject(b)) {                                                                                            // 31\n    return false;                                                                                                      // 32\n  }                                                                                                                    // 33\n                                                                                                                       // 34\n  var aKeys = Object.keys(a);                                                                                          // 35\n  var bKeys = Object.keys(b);                                                                                          // 36\n                                                                                                                       // 37\n  if (aKeys.length !== bKeys.length) {                                                                                 // 38\n    return false;                                                                                                      // 39\n  }                                                                                                                    // 40\n                                                                                                                       // 41\n  return aKeys.every(function (key) {                                                                                  // 42\n    return hasOwn.call(b, key) &&                                                                                      // 43\n      a[key] === b[key];                                                                                               // 44\n  });                                                                                                                  // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},\"react\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/package.json                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"react\";                                                                                                // 1\nexports.version = \"15.3.2\";                                                                                            // 2\nexports.main = \"react.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"react.js\":[\"./lib/React\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/react.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nmodule.exports = require('./lib/React');                                                                               // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"lib\":{\"React.js\":[\"object-assign\",\"./ReactChildren\",\"./ReactComponent\",\"./ReactPureComponent\",\"./ReactClass\",\"./ReactDOMFactories\",\"./ReactElement\",\"./ReactPropTypes\",\"./ReactVersion\",\"./onlyChild\",\"fbjs/lib/warning\",\"./ReactElementValidator\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/React.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule React                                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar ReactChildren = require('./ReactChildren');                                                                        // 16\nvar ReactComponent = require('./ReactComponent');                                                                      // 17\nvar ReactPureComponent = require('./ReactPureComponent');                                                              // 18\nvar ReactClass = require('./ReactClass');                                                                              // 19\nvar ReactDOMFactories = require('./ReactDOMFactories');                                                                // 20\nvar ReactElement = require('./ReactElement');                                                                          // 21\nvar ReactPropTypes = require('./ReactPropTypes');                                                                      // 22\nvar ReactVersion = require('./ReactVersion');                                                                          // 23\n                                                                                                                       // 24\nvar onlyChild = require('./onlyChild');                                                                                // 25\nvar warning = require('fbjs/lib/warning');                                                                             // 26\n                                                                                                                       // 27\nvar createElement = ReactElement.createElement;                                                                        // 28\nvar createFactory = ReactElement.createFactory;                                                                        // 29\nvar cloneElement = ReactElement.cloneElement;                                                                          // 30\n                                                                                                                       // 31\nif (process.env.NODE_ENV !== 'production') {                                                                           // 32\n  var ReactElementValidator = require('./ReactElementValidator');                                                      // 33\n  createElement = ReactElementValidator.createElement;                                                                 // 34\n  createFactory = ReactElementValidator.createFactory;                                                                 // 35\n  cloneElement = ReactElementValidator.cloneElement;                                                                   // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\nvar __spread = _assign;                                                                                                // 39\n                                                                                                                       // 40\nif (process.env.NODE_ENV !== 'production') {                                                                           // 41\n  var warned = false;                                                                                                  // 42\n  __spread = function () {                                                                                             // 43\n    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;\n    warned = true;                                                                                                     // 45\n    return _assign.apply(null, arguments);                                                                             // 46\n  };                                                                                                                   // 47\n}                                                                                                                      // 48\n                                                                                                                       // 49\nvar React = {                                                                                                          // 50\n                                                                                                                       // 51\n  // Modern                                                                                                            // 52\n                                                                                                                       // 53\n  Children: {                                                                                                          // 54\n    map: ReactChildren.map,                                                                                            // 55\n    forEach: ReactChildren.forEach,                                                                                    // 56\n    count: ReactChildren.count,                                                                                        // 57\n    toArray: ReactChildren.toArray,                                                                                    // 58\n    only: onlyChild                                                                                                    // 59\n  },                                                                                                                   // 60\n                                                                                                                       // 61\n  Component: ReactComponent,                                                                                           // 62\n  PureComponent: ReactPureComponent,                                                                                   // 63\n                                                                                                                       // 64\n  createElement: createElement,                                                                                        // 65\n  cloneElement: cloneElement,                                                                                          // 66\n  isValidElement: ReactElement.isValidElement,                                                                         // 67\n                                                                                                                       // 68\n  // Classic                                                                                                           // 69\n                                                                                                                       // 70\n  PropTypes: ReactPropTypes,                                                                                           // 71\n  createClass: ReactClass.createClass,                                                                                 // 72\n  createFactory: createFactory,                                                                                        // 73\n  createMixin: function (mixin) {                                                                                      // 74\n    // Currently a noop. Will be used to validate and trace mixins.                                                    // 75\n    return mixin;                                                                                                      // 76\n  },                                                                                                                   // 77\n                                                                                                                       // 78\n  // This looks DOM specific but these are actually isomorphic helpers                                                 // 79\n  // since they are just generating DOM strings.                                                                       // 80\n  DOM: ReactDOMFactories,                                                                                              // 81\n                                                                                                                       // 82\n  version: ReactVersion,                                                                                               // 83\n                                                                                                                       // 84\n  // Deprecated hook for JSX spread, don't use this for anything.                                                      // 85\n  __spread: __spread                                                                                                   // 86\n};                                                                                                                     // 87\n                                                                                                                       // 88\nmodule.exports = React;                                                                                                // 89\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactChildren.js\":[\"./PooledClass\",\"./ReactElement\",\"fbjs/lib/emptyFunction\",\"./traverseAllChildren\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactChildren.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactChildren                                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar PooledClass = require('./PooledClass');                                                                            // 14\nvar ReactElement = require('./ReactElement');                                                                          // 15\n                                                                                                                       // 16\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 17\nvar traverseAllChildren = require('./traverseAllChildren');                                                            // 18\n                                                                                                                       // 19\nvar twoArgumentPooler = PooledClass.twoArgumentPooler;                                                                 // 20\nvar fourArgumentPooler = PooledClass.fourArgumentPooler;                                                               // 21\n                                                                                                                       // 22\nvar userProvidedKeyEscapeRegex = /\\/+/g;                                                                               // 23\nfunction escapeUserProvidedKey(text) {                                                                                 // 24\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');                                                       // 25\n}                                                                                                                      // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * PooledClass representing the bookkeeping associated with performing a child                                         // 29\n * traversal. Allows avoiding binding callbacks.                                                                       // 30\n *                                                                                                                     // 31\n * @constructor ForEachBookKeeping                                                                                     // 32\n * @param {!function} forEachFunction Function to perform traversal with.                                              // 33\n * @param {?*} forEachContext Context to perform context with.                                                         // 34\n */                                                                                                                    // 35\nfunction ForEachBookKeeping(forEachFunction, forEachContext) {                                                         // 36\n  this.func = forEachFunction;                                                                                         // 37\n  this.context = forEachContext;                                                                                       // 38\n  this.count = 0;                                                                                                      // 39\n}                                                                                                                      // 40\nForEachBookKeeping.prototype.destructor = function () {                                                                // 41\n  this.func = null;                                                                                                    // 42\n  this.context = null;                                                                                                 // 43\n  this.count = 0;                                                                                                      // 44\n};                                                                                                                     // 45\nPooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);                                                       // 46\n                                                                                                                       // 47\nfunction forEachSingleChild(bookKeeping, child, name) {                                                                // 48\n  var func = bookKeeping.func;                                                                                         // 49\n  var context = bookKeeping.context;                                                                                   // 50\n                                                                                                                       // 51\n  func.call(context, child, bookKeeping.count++);                                                                      // 52\n}                                                                                                                      // 53\n                                                                                                                       // 54\n/**                                                                                                                    // 55\n * Iterates through children that are typically specified as `props.children`.                                         // 56\n *                                                                                                                     // 57\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach                                 // 58\n *                                                                                                                     // 59\n * The provided forEachFunc(child, index) will be called for each                                                      // 60\n * leaf child.                                                                                                         // 61\n *                                                                                                                     // 62\n * @param {?*} children Children tree container.                                                                       // 63\n * @param {function(*, int)} forEachFunc                                                                               // 64\n * @param {*} forEachContext Context for forEachContext.                                                               // 65\n */                                                                                                                    // 66\nfunction forEachChildren(children, forEachFunc, forEachContext) {                                                      // 67\n  if (children == null) {                                                                                              // 68\n    return children;                                                                                                   // 69\n  }                                                                                                                    // 70\n  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);                                     // 71\n  traverseAllChildren(children, forEachSingleChild, traverseContext);                                                  // 72\n  ForEachBookKeeping.release(traverseContext);                                                                         // 73\n}                                                                                                                      // 74\n                                                                                                                       // 75\n/**                                                                                                                    // 76\n * PooledClass representing the bookkeeping associated with performing a child                                         // 77\n * mapping. Allows avoiding binding callbacks.                                                                         // 78\n *                                                                                                                     // 79\n * @constructor MapBookKeeping                                                                                         // 80\n * @param {!*} mapResult Object containing the ordered map of results.                                                 // 81\n * @param {!function} mapFunction Function to perform mapping with.                                                    // 82\n * @param {?*} mapContext Context to perform mapping with.                                                             // 83\n */                                                                                                                    // 84\nfunction MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {                                               // 85\n  this.result = mapResult;                                                                                             // 86\n  this.keyPrefix = keyPrefix;                                                                                          // 87\n  this.func = mapFunction;                                                                                             // 88\n  this.context = mapContext;                                                                                           // 89\n  this.count = 0;                                                                                                      // 90\n}                                                                                                                      // 91\nMapBookKeeping.prototype.destructor = function () {                                                                    // 92\n  this.result = null;                                                                                                  // 93\n  this.keyPrefix = null;                                                                                               // 94\n  this.func = null;                                                                                                    // 95\n  this.context = null;                                                                                                 // 96\n  this.count = 0;                                                                                                      // 97\n};                                                                                                                     // 98\nPooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);                                                          // 99\n                                                                                                                       // 100\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {                                                     // 101\n  var result = bookKeeping.result;                                                                                     // 102\n  var keyPrefix = bookKeeping.keyPrefix;                                                                               // 103\n  var func = bookKeeping.func;                                                                                         // 104\n  var context = bookKeeping.context;                                                                                   // 105\n                                                                                                                       // 106\n                                                                                                                       // 107\n  var mappedChild = func.call(context, child, bookKeeping.count++);                                                    // 108\n  if (Array.isArray(mappedChild)) {                                                                                    // 109\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);                    // 110\n  } else if (mappedChild != null) {                                                                                    // 111\n    if (ReactElement.isValidElement(mappedChild)) {                                                                    // 112\n      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,                                                       // 113\n      // Keep both the (mapped) and old keys if they differ, just as                                                   // 114\n      // traverseAllChildren used to do for objects as children                                                        // 115\n      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n    }                                                                                                                  // 117\n    result.push(mappedChild);                                                                                          // 118\n  }                                                                                                                    // 119\n}                                                                                                                      // 120\n                                                                                                                       // 121\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {                                        // 122\n  var escapedPrefix = '';                                                                                              // 123\n  if (prefix != null) {                                                                                                // 124\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';                                                               // 125\n  }                                                                                                                    // 126\n  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);                                 // 127\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);                                           // 128\n  MapBookKeeping.release(traverseContext);                                                                             // 129\n}                                                                                                                      // 130\n                                                                                                                       // 131\n/**                                                                                                                    // 132\n * Maps children that are typically specified as `props.children`.                                                     // 133\n *                                                                                                                     // 134\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map                                     // 135\n *                                                                                                                     // 136\n * The provided mapFunction(child, key, index) will be called for each                                                 // 137\n * leaf child.                                                                                                         // 138\n *                                                                                                                     // 139\n * @param {?*} children Children tree container.                                                                       // 140\n * @param {function(*, int)} func The map function.                                                                    // 141\n * @param {*} context Context for mapFunction.                                                                         // 142\n * @return {object} Object containing the ordered map of results.                                                      // 143\n */                                                                                                                    // 144\nfunction mapChildren(children, func, context) {                                                                        // 145\n  if (children == null) {                                                                                              // 146\n    return children;                                                                                                   // 147\n  }                                                                                                                    // 148\n  var result = [];                                                                                                     // 149\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);                                                 // 150\n  return result;                                                                                                       // 151\n}                                                                                                                      // 152\n                                                                                                                       // 153\nfunction forEachSingleChildDummy(traverseContext, child, name) {                                                       // 154\n  return null;                                                                                                         // 155\n}                                                                                                                      // 156\n                                                                                                                       // 157\n/**                                                                                                                    // 158\n * Count the number of children that are typically specified as                                                        // 159\n * `props.children`.                                                                                                   // 160\n *                                                                                                                     // 161\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count                                   // 162\n *                                                                                                                     // 163\n * @param {?*} children Children tree container.                                                                       // 164\n * @return {number} The number of children.                                                                            // 165\n */                                                                                                                    // 166\nfunction countChildren(children, context) {                                                                            // 167\n  return traverseAllChildren(children, forEachSingleChildDummy, null);                                                 // 168\n}                                                                                                                      // 169\n                                                                                                                       // 170\n/**                                                                                                                    // 171\n * Flatten a children object (typically specified as `props.children`) and                                             // 172\n * return an array with appropriately re-keyed children.                                                               // 173\n *                                                                                                                     // 174\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray                                 // 175\n */                                                                                                                    // 176\nfunction toArray(children) {                                                                                           // 177\n  var result = [];                                                                                                     // 178\n  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);                             // 179\n  return result;                                                                                                       // 180\n}                                                                                                                      // 181\n                                                                                                                       // 182\nvar ReactChildren = {                                                                                                  // 183\n  forEach: forEachChildren,                                                                                            // 184\n  map: mapChildren,                                                                                                    // 185\n  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,                                                          // 186\n  count: countChildren,                                                                                                // 187\n  toArray: toArray                                                                                                     // 188\n};                                                                                                                     // 189\n                                                                                                                       // 190\nmodule.exports = ReactChildren;                                                                                        // 191\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"PooledClass.js\":[\"./reactProdInvariant\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/PooledClass.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule PooledClass                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar invariant = require('fbjs/lib/invariant');                                                                         // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Static poolers. Several custom versions for each potential number of                                                // 19\n * arguments. A completely generic pooler is easy to implement, but would                                              // 20\n * require accessing the `arguments` object. In each of these, `this` refers to                                        // 21\n * the Class itself, not an instance. If any others are needed, simply add them                                        // 22\n * here, or in their own files.                                                                                        // 23\n */                                                                                                                    // 24\nvar oneArgumentPooler = function (copyFieldsFrom) {                                                                    // 25\n  var Klass = this;                                                                                                    // 26\n  if (Klass.instancePool.length) {                                                                                     // 27\n    var instance = Klass.instancePool.pop();                                                                           // 28\n    Klass.call(instance, copyFieldsFrom);                                                                              // 29\n    return instance;                                                                                                   // 30\n  } else {                                                                                                             // 31\n    return new Klass(copyFieldsFrom);                                                                                  // 32\n  }                                                                                                                    // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nvar twoArgumentPooler = function (a1, a2) {                                                                            // 36\n  var Klass = this;                                                                                                    // 37\n  if (Klass.instancePool.length) {                                                                                     // 38\n    var instance = Klass.instancePool.pop();                                                                           // 39\n    Klass.call(instance, a1, a2);                                                                                      // 40\n    return instance;                                                                                                   // 41\n  } else {                                                                                                             // 42\n    return new Klass(a1, a2);                                                                                          // 43\n  }                                                                                                                    // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\nvar threeArgumentPooler = function (a1, a2, a3) {                                                                      // 47\n  var Klass = this;                                                                                                    // 48\n  if (Klass.instancePool.length) {                                                                                     // 49\n    var instance = Klass.instancePool.pop();                                                                           // 50\n    Klass.call(instance, a1, a2, a3);                                                                                  // 51\n    return instance;                                                                                                   // 52\n  } else {                                                                                                             // 53\n    return new Klass(a1, a2, a3);                                                                                      // 54\n  }                                                                                                                    // 55\n};                                                                                                                     // 56\n                                                                                                                       // 57\nvar fourArgumentPooler = function (a1, a2, a3, a4) {                                                                   // 58\n  var Klass = this;                                                                                                    // 59\n  if (Klass.instancePool.length) {                                                                                     // 60\n    var instance = Klass.instancePool.pop();                                                                           // 61\n    Klass.call(instance, a1, a2, a3, a4);                                                                              // 62\n    return instance;                                                                                                   // 63\n  } else {                                                                                                             // 64\n    return new Klass(a1, a2, a3, a4);                                                                                  // 65\n  }                                                                                                                    // 66\n};                                                                                                                     // 67\n                                                                                                                       // 68\nvar fiveArgumentPooler = function (a1, a2, a3, a4, a5) {                                                               // 69\n  var Klass = this;                                                                                                    // 70\n  if (Klass.instancePool.length) {                                                                                     // 71\n    var instance = Klass.instancePool.pop();                                                                           // 72\n    Klass.call(instance, a1, a2, a3, a4, a5);                                                                          // 73\n    return instance;                                                                                                   // 74\n  } else {                                                                                                             // 75\n    return new Klass(a1, a2, a3, a4, a5);                                                                              // 76\n  }                                                                                                                    // 77\n};                                                                                                                     // 78\n                                                                                                                       // 79\nvar standardReleaser = function (instance) {                                                                           // 80\n  var Klass = this;                                                                                                    // 81\n  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;\n  instance.destructor();                                                                                               // 83\n  if (Klass.instancePool.length < Klass.poolSize) {                                                                    // 84\n    Klass.instancePool.push(instance);                                                                                 // 85\n  }                                                                                                                    // 86\n};                                                                                                                     // 87\n                                                                                                                       // 88\nvar DEFAULT_POOL_SIZE = 10;                                                                                            // 89\nvar DEFAULT_POOLER = oneArgumentPooler;                                                                                // 90\n                                                                                                                       // 91\n/**                                                                                                                    // 92\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class                                        // 93\n * itself (statically) not adding any prototypical fields. Any CopyConstructor                                         // 94\n * you give this may have a `poolSize` property, and will look for a                                                   // 95\n * prototypical `destructor` on instances.                                                                             // 96\n *                                                                                                                     // 97\n * @param {Function} CopyConstructor Constructor that can be used to reset.                                            // 98\n * @param {Function} pooler Customizable pooler.                                                                       // 99\n */                                                                                                                    // 100\nvar addPoolingTo = function (CopyConstructor, pooler) {                                                                // 101\n  var NewKlass = CopyConstructor;                                                                                      // 102\n  NewKlass.instancePool = [];                                                                                          // 103\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;                                                                       // 104\n  if (!NewKlass.poolSize) {                                                                                            // 105\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;                                                                             // 106\n  }                                                                                                                    // 107\n  NewKlass.release = standardReleaser;                                                                                 // 108\n  return NewKlass;                                                                                                     // 109\n};                                                                                                                     // 110\n                                                                                                                       // 111\nvar PooledClass = {                                                                                                    // 112\n  addPoolingTo: addPoolingTo,                                                                                          // 113\n  oneArgumentPooler: oneArgumentPooler,                                                                                // 114\n  twoArgumentPooler: twoArgumentPooler,                                                                                // 115\n  threeArgumentPooler: threeArgumentPooler,                                                                            // 116\n  fourArgumentPooler: fourArgumentPooler,                                                                              // 117\n  fiveArgumentPooler: fiveArgumentPooler                                                                               // 118\n};                                                                                                                     // 119\n                                                                                                                       // 120\nmodule.exports = PooledClass;                                                                                          // 121\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"reactProdInvariant.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/reactProdInvariant.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule reactProdInvariant                                                                                  // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * WARNING: DO NOT manually require this module.                                                                       // 15\n * This is a replacement for `invariant(...)` used by the error code system                                            // 16\n * and will _only_ be required by the corresponding babel pass.                                                        // 17\n * It always throws.                                                                                                   // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\nfunction reactProdInvariant(code) {                                                                                    // 21\n  var argCount = arguments.length - 1;                                                                                 // 22\n                                                                                                                       // 23\n  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;\n                                                                                                                       // 25\n  for (var argIdx = 0; argIdx < argCount; argIdx++) {                                                                  // 26\n    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);                                                 // 27\n  }                                                                                                                    // 28\n                                                                                                                       // 29\n  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';\n                                                                                                                       // 31\n  var error = new Error(message);                                                                                      // 32\n  error.name = 'Invariant Violation';                                                                                  // 33\n  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame                                         // 34\n                                                                                                                       // 35\n  throw error;                                                                                                         // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\nmodule.exports = reactProdInvariant;                                                                                   // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactElement.js\":[\"object-assign\",\"./ReactCurrentOwner\",\"fbjs/lib/warning\",\"./canDefineProperty\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactElement.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactElement                                                                                        // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 16\n                                                                                                                       // 17\nvar warning = require('fbjs/lib/warning');                                                                             // 18\nvar canDefineProperty = require('./canDefineProperty');                                                                // 19\nvar hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 20\n                                                                                                                       // 21\n// The Symbol used to tag the ReactElement type. If there is no native Symbol                                          // 22\n// nor polyfill, then a plain number is used for performance.                                                          // 23\nvar REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;    // 24\n                                                                                                                       // 25\nvar RESERVED_PROPS = {                                                                                                 // 26\n  key: true,                                                                                                           // 27\n  ref: true,                                                                                                           // 28\n  __self: true,                                                                                                        // 29\n  __source: true                                                                                                       // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\nvar specialPropKeyWarningShown, specialPropRefWarningShown;                                                            // 33\n                                                                                                                       // 34\nfunction hasValidRef(config) {                                                                                         // 35\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 36\n    if (hasOwnProperty.call(config, 'ref')) {                                                                          // 37\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;                                                 // 38\n      if (getter && getter.isReactWarning) {                                                                           // 39\n        return false;                                                                                                  // 40\n      }                                                                                                                // 41\n    }                                                                                                                  // 42\n  }                                                                                                                    // 43\n  return config.ref !== undefined;                                                                                     // 44\n}                                                                                                                      // 45\n                                                                                                                       // 46\nfunction hasValidKey(config) {                                                                                         // 47\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 48\n    if (hasOwnProperty.call(config, 'key')) {                                                                          // 49\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;                                                 // 50\n      if (getter && getter.isReactWarning) {                                                                           // 51\n        return false;                                                                                                  // 52\n      }                                                                                                                // 53\n    }                                                                                                                  // 54\n  }                                                                                                                    // 55\n  return config.key !== undefined;                                                                                     // 56\n}                                                                                                                      // 57\n                                                                                                                       // 58\nfunction defineKeyPropWarningGetter(props, displayName) {                                                              // 59\n  var warnAboutAccessingKey = function () {                                                                            // 60\n    if (!specialPropKeyWarningShown) {                                                                                 // 61\n      specialPropKeyWarningShown = true;                                                                               // 62\n      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;\n    }                                                                                                                  // 64\n  };                                                                                                                   // 65\n  warnAboutAccessingKey.isReactWarning = true;                                                                         // 66\n  Object.defineProperty(props, 'key', {                                                                                // 67\n    get: warnAboutAccessingKey,                                                                                        // 68\n    configurable: true                                                                                                 // 69\n  });                                                                                                                  // 70\n}                                                                                                                      // 71\n                                                                                                                       // 72\nfunction defineRefPropWarningGetter(props, displayName) {                                                              // 73\n  var warnAboutAccessingRef = function () {                                                                            // 74\n    if (!specialPropRefWarningShown) {                                                                                 // 75\n      specialPropRefWarningShown = true;                                                                               // 76\n      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;\n    }                                                                                                                  // 78\n  };                                                                                                                   // 79\n  warnAboutAccessingRef.isReactWarning = true;                                                                         // 80\n  Object.defineProperty(props, 'ref', {                                                                                // 81\n    get: warnAboutAccessingRef,                                                                                        // 82\n    configurable: true                                                                                                 // 83\n  });                                                                                                                  // 84\n}                                                                                                                      // 85\n                                                                                                                       // 86\n/**                                                                                                                    // 87\n * Factory method to create a new React element. This no longer adheres to                                             // 88\n * the class pattern, so do not use new to call it. Also, no instanceof check                                          // 89\n * will work. Instead test $$typeof field against Symbol.for('react.element') to check                                 // 90\n * if something is a React Element.                                                                                    // 91\n *                                                                                                                     // 92\n * @param {*} type                                                                                                     // 93\n * @param {*} key                                                                                                      // 94\n * @param {string|object} ref                                                                                          // 95\n * @param {*} self A *temporary* helper to detect places where `this` is                                               // 96\n * different from the `owner` when React.createElement is called, so that we                                           // 97\n * can warn. We want to get rid of owner and replace string `ref`s with arrow                                          // 98\n * functions, and as long as `this` and owner are the same, there will be no                                           // 99\n * change in behavior.                                                                                                 // 100\n * @param {*} source An annotation object (added by a transpiler or otherwise)                                         // 101\n * indicating filename, line number, and/or other information.                                                         // 102\n * @param {*} owner                                                                                                    // 103\n * @param {*} props                                                                                                    // 104\n * @internal                                                                                                           // 105\n */                                                                                                                    // 106\nvar ReactElement = function (type, key, ref, self, source, owner, props) {                                             // 107\n  var element = {                                                                                                      // 108\n    // This tag allow us to uniquely identify this as a React Element                                                  // 109\n    $$typeof: REACT_ELEMENT_TYPE,                                                                                      // 110\n                                                                                                                       // 111\n    // Built-in properties that belong on the element                                                                  // 112\n    type: type,                                                                                                        // 113\n    key: key,                                                                                                          // 114\n    ref: ref,                                                                                                          // 115\n    props: props,                                                                                                      // 116\n                                                                                                                       // 117\n    // Record the component responsible for creating this element.                                                     // 118\n    _owner: owner                                                                                                      // 119\n  };                                                                                                                   // 120\n                                                                                                                       // 121\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 122\n    // The validation flag is currently mutative. We put it on                                                         // 123\n    // an external backing store so that we can freeze the whole object.                                               // 124\n    // This can be replaced with a WeakMap once they are implemented in                                                // 125\n    // commonly used development environments.                                                                         // 126\n    element._store = {};                                                                                               // 127\n    var shadowChildren = Array.isArray(props.children) ? props.children.slice(0) : props.children;                     // 128\n                                                                                                                       // 129\n    // To make comparing ReactElements easier for testing purposes, we make                                            // 130\n    // the validation flag non-enumerable (where possible, which should                                                // 131\n    // include every environment we run tests in), so the test framework                                               // 132\n    // ignores it.                                                                                                     // 133\n    if (canDefineProperty) {                                                                                           // 134\n      Object.defineProperty(element._store, 'validated', {                                                             // 135\n        configurable: false,                                                                                           // 136\n        enumerable: false,                                                                                             // 137\n        writable: true,                                                                                                // 138\n        value: false                                                                                                   // 139\n      });                                                                                                              // 140\n      // self and source are DEV only properties.                                                                      // 141\n      Object.defineProperty(element, '_self', {                                                                        // 142\n        configurable: false,                                                                                           // 143\n        enumerable: false,                                                                                             // 144\n        writable: false,                                                                                               // 145\n        value: self                                                                                                    // 146\n      });                                                                                                              // 147\n      Object.defineProperty(element, '_shadowChildren', {                                                              // 148\n        configurable: false,                                                                                           // 149\n        enumerable: false,                                                                                             // 150\n        writable: false,                                                                                               // 151\n        value: shadowChildren                                                                                          // 152\n      });                                                                                                              // 153\n      // Two elements created in two different places should be considered                                             // 154\n      // equal for testing purposes and therefore we hide it from enumeration.                                         // 155\n      Object.defineProperty(element, '_source', {                                                                      // 156\n        configurable: false,                                                                                           // 157\n        enumerable: false,                                                                                             // 158\n        writable: false,                                                                                               // 159\n        value: source                                                                                                  // 160\n      });                                                                                                              // 161\n    } else {                                                                                                           // 162\n      element._store.validated = false;                                                                                // 163\n      element._self = self;                                                                                            // 164\n      element._shadowChildren = shadowChildren;                                                                        // 165\n      element._source = source;                                                                                        // 166\n    }                                                                                                                  // 167\n    if (Object.freeze) {                                                                                               // 168\n      Object.freeze(element.props);                                                                                    // 169\n      Object.freeze(element);                                                                                          // 170\n    }                                                                                                                  // 171\n  }                                                                                                                    // 172\n                                                                                                                       // 173\n  return element;                                                                                                      // 174\n};                                                                                                                     // 175\n                                                                                                                       // 176\n/**                                                                                                                    // 177\n * Create and return a new ReactElement of the given type.                                                             // 178\n * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement                                    // 179\n */                                                                                                                    // 180\nReactElement.createElement = function (type, config, children) {                                                       // 181\n  var propName;                                                                                                        // 182\n                                                                                                                       // 183\n  // Reserved names are extracted                                                                                      // 184\n  var props = {};                                                                                                      // 185\n                                                                                                                       // 186\n  var key = null;                                                                                                      // 187\n  var ref = null;                                                                                                      // 188\n  var self = null;                                                                                                     // 189\n  var source = null;                                                                                                   // 190\n                                                                                                                       // 191\n  if (config != null) {                                                                                                // 192\n    if (hasValidRef(config)) {                                                                                         // 193\n      ref = config.ref;                                                                                                // 194\n    }                                                                                                                  // 195\n    if (hasValidKey(config)) {                                                                                         // 196\n      key = '' + config.key;                                                                                           // 197\n    }                                                                                                                  // 198\n                                                                                                                       // 199\n    self = config.__self === undefined ? null : config.__self;                                                         // 200\n    source = config.__source === undefined ? null : config.__source;                                                   // 201\n    // Remaining properties are added to a new props object                                                            // 202\n    for (propName in config) {                                                                                         // 203\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {                         // 204\n        props[propName] = config[propName];                                                                            // 205\n      }                                                                                                                // 206\n    }                                                                                                                  // 207\n  }                                                                                                                    // 208\n                                                                                                                       // 209\n  // Children can be more than one argument, and those are transferred onto                                            // 210\n  // the newly allocated props object.                                                                                 // 211\n  var childrenLength = arguments.length - 2;                                                                           // 212\n  if (childrenLength === 1) {                                                                                          // 213\n    props.children = children;                                                                                         // 214\n  } else if (childrenLength > 1) {                                                                                     // 215\n    var childArray = Array(childrenLength);                                                                            // 216\n    for (var i = 0; i < childrenLength; i++) {                                                                         // 217\n      childArray[i] = arguments[i + 2];                                                                                // 218\n    }                                                                                                                  // 219\n    props.children = childArray;                                                                                       // 220\n  }                                                                                                                    // 221\n                                                                                                                       // 222\n  // Resolve default props                                                                                             // 223\n  if (type && type.defaultProps) {                                                                                     // 224\n    var defaultProps = type.defaultProps;                                                                              // 225\n    for (propName in defaultProps) {                                                                                   // 226\n      if (props[propName] === undefined) {                                                                             // 227\n        props[propName] = defaultProps[propName];                                                                      // 228\n      }                                                                                                                // 229\n    }                                                                                                                  // 230\n  }                                                                                                                    // 231\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 232\n    if (key || ref) {                                                                                                  // 233\n      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {                            // 234\n        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;              // 235\n        if (key) {                                                                                                     // 236\n          defineKeyPropWarningGetter(props, displayName);                                                              // 237\n        }                                                                                                              // 238\n        if (ref) {                                                                                                     // 239\n          defineRefPropWarningGetter(props, displayName);                                                              // 240\n        }                                                                                                              // 241\n      }                                                                                                                // 242\n    }                                                                                                                  // 243\n  }                                                                                                                    // 244\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);                                 // 245\n};                                                                                                                     // 246\n                                                                                                                       // 247\n/**                                                                                                                    // 248\n * Return a function that produces ReactElements of a given type.                                                      // 249\n * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory                                    // 250\n */                                                                                                                    // 251\nReactElement.createFactory = function (type) {                                                                         // 252\n  var factory = ReactElement.createElement.bind(null, type);                                                           // 253\n  // Expose the type on the factory and the prototype so that it can be                                                // 254\n  // easily accessed on elements. E.g. `<Foo />.type === Foo`.                                                         // 255\n  // This should not be named `constructor` since this may not be the function                                         // 256\n  // that created the element, and it may not even be a constructor.                                                   // 257\n  // Legacy hook TODO: Warn if this is accessed                                                                        // 258\n  factory.type = type;                                                                                                 // 259\n  return factory;                                                                                                      // 260\n};                                                                                                                     // 261\n                                                                                                                       // 262\nReactElement.cloneAndReplaceKey = function (oldElement, newKey) {                                                      // 263\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n                                                                                                                       // 265\n  return newElement;                                                                                                   // 266\n};                                                                                                                     // 267\n                                                                                                                       // 268\n/**                                                                                                                    // 269\n * Clone and return a new ReactElement using element as the starting point.                                            // 270\n * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement                                     // 271\n */                                                                                                                    // 272\nReactElement.cloneElement = function (element, config, children) {                                                     // 273\n  var propName;                                                                                                        // 274\n                                                                                                                       // 275\n  // Original props are copied                                                                                         // 276\n  var props = _assign({}, element.props);                                                                              // 277\n                                                                                                                       // 278\n  // Reserved names are extracted                                                                                      // 279\n  var key = element.key;                                                                                               // 280\n  var ref = element.ref;                                                                                               // 281\n  // Self is preserved since the owner is preserved.                                                                   // 282\n  var self = element._self;                                                                                            // 283\n  // Source is preserved since cloneElement is unlikely to be targeted by a                                            // 284\n  // transpiler, and the original source is probably a better indicator of the                                         // 285\n  // true owner.                                                                                                       // 286\n  var source = element._source;                                                                                        // 287\n                                                                                                                       // 288\n  // Owner will be preserved, unless ref is overridden                                                                 // 289\n  var owner = element._owner;                                                                                          // 290\n                                                                                                                       // 291\n  if (config != null) {                                                                                                // 292\n    if (hasValidRef(config)) {                                                                                         // 293\n      // Silently steal the ref from the parent.                                                                       // 294\n      ref = config.ref;                                                                                                // 295\n      owner = ReactCurrentOwner.current;                                                                               // 296\n    }                                                                                                                  // 297\n    if (hasValidKey(config)) {                                                                                         // 298\n      key = '' + config.key;                                                                                           // 299\n    }                                                                                                                  // 300\n                                                                                                                       // 301\n    // Remaining properties override existing props                                                                    // 302\n    var defaultProps;                                                                                                  // 303\n    if (element.type && element.type.defaultProps) {                                                                   // 304\n      defaultProps = element.type.defaultProps;                                                                        // 305\n    }                                                                                                                  // 306\n    for (propName in config) {                                                                                         // 307\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {                         // 308\n        if (config[propName] === undefined && defaultProps !== undefined) {                                            // 309\n          // Resolve default props                                                                                     // 310\n          props[propName] = defaultProps[propName];                                                                    // 311\n        } else {                                                                                                       // 312\n          props[propName] = config[propName];                                                                          // 313\n        }                                                                                                              // 314\n      }                                                                                                                // 315\n    }                                                                                                                  // 316\n  }                                                                                                                    // 317\n                                                                                                                       // 318\n  // Children can be more than one argument, and those are transferred onto                                            // 319\n  // the newly allocated props object.                                                                                 // 320\n  var childrenLength = arguments.length - 2;                                                                           // 321\n  if (childrenLength === 1) {                                                                                          // 322\n    props.children = children;                                                                                         // 323\n  } else if (childrenLength > 1) {                                                                                     // 324\n    var childArray = Array(childrenLength);                                                                            // 325\n    for (var i = 0; i < childrenLength; i++) {                                                                         // 326\n      childArray[i] = arguments[i + 2];                                                                                // 327\n    }                                                                                                                  // 328\n    props.children = childArray;                                                                                       // 329\n  }                                                                                                                    // 330\n                                                                                                                       // 331\n  return ReactElement(element.type, key, ref, self, source, owner, props);                                             // 332\n};                                                                                                                     // 333\n                                                                                                                       // 334\n/**                                                                                                                    // 335\n * Verifies the object is a ReactElement.                                                                              // 336\n * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement                                   // 337\n * @param {?object} object                                                                                             // 338\n * @return {boolean} True if `object` is a valid component.                                                            // 339\n * @final                                                                                                              // 340\n */                                                                                                                    // 341\nReactElement.isValidElement = function (object) {                                                                      // 342\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;                      // 343\n};                                                                                                                     // 344\n                                                                                                                       // 345\nReactElement.REACT_ELEMENT_TYPE = REACT_ELEMENT_TYPE;                                                                  // 346\n                                                                                                                       // 347\nmodule.exports = ReactElement;                                                                                         // 348\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactCurrentOwner.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactCurrentOwner.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactCurrentOwner                                                                                   // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Keeps track of the current owner.                                                                                   // 15\n *                                                                                                                     // 16\n * The current owner is the component who should own any components that are                                           // 17\n * currently being constructed.                                                                                        // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\nvar ReactCurrentOwner = {                                                                                              // 21\n                                                                                                                       // 22\n  /**                                                                                                                  // 23\n   * @internal                                                                                                         // 24\n   * @type {ReactComponent}                                                                                            // 25\n   */                                                                                                                  // 26\n  current: null                                                                                                        // 27\n                                                                                                                       // 28\n};                                                                                                                     // 29\n                                                                                                                       // 30\nmodule.exports = ReactCurrentOwner;                                                                                    // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"canDefineProperty.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/canDefineProperty.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule canDefineProperty                                                                                   // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar canDefineProperty = false;                                                                                         // 14\nif (process.env.NODE_ENV !== 'production') {                                                                           // 15\n  try {                                                                                                                // 16\n    Object.defineProperty({}, 'x', { get: function () {} });                                                           // 17\n    canDefineProperty = true;                                                                                          // 18\n  } catch (x) {                                                                                                        // 19\n    // IE will fail on defineProperty                                                                                  // 20\n  }                                                                                                                    // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\nmodule.exports = canDefineProperty;                                                                                    // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"traverseAllChildren.js\":[\"./reactProdInvariant\",\"./ReactCurrentOwner\",\"./ReactElement\",\"./getIteratorFn\",\"fbjs/lib/invariant\",\"./KeyEscapeUtils\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/traverseAllChildren.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule traverseAllChildren                                                                                 // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 16\nvar ReactElement = require('./ReactElement');                                                                          // 17\n                                                                                                                       // 18\nvar getIteratorFn = require('./getIteratorFn');                                                                        // 19\nvar invariant = require('fbjs/lib/invariant');                                                                         // 20\nvar KeyEscapeUtils = require('./KeyEscapeUtils');                                                                      // 21\nvar warning = require('fbjs/lib/warning');                                                                             // 22\n                                                                                                                       // 23\nvar SEPARATOR = '.';                                                                                                   // 24\nvar SUBSEPARATOR = ':';                                                                                                // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * TODO: Test that a single child and an array with one item have the same key                                         // 28\n * pattern.                                                                                                            // 29\n */                                                                                                                    // 30\n                                                                                                                       // 31\nvar didWarnAboutMaps = false;                                                                                          // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Generate a key string that identifies a component within a set.                                                     // 35\n *                                                                                                                     // 36\n * @param {*} component A component that could contain a manual key.                                                   // 37\n * @param {number} index Index that is used if a manual key is not provided.                                           // 38\n * @return {string}                                                                                                    // 39\n */                                                                                                                    // 40\nfunction getComponentKey(component, index) {                                                                           // 41\n  // Do some typechecking here since we call this blindly. We want to ensure                                           // 42\n  // that we don't block potential future ES APIs.                                                                     // 43\n  if (component && typeof component === 'object' && component.key != null) {                                           // 44\n    // Explicit key                                                                                                    // 45\n    return KeyEscapeUtils.escape(component.key);                                                                       // 46\n  }                                                                                                                    // 47\n  // Implicit key determined by the index in the set                                                                   // 48\n  return index.toString(36);                                                                                           // 49\n}                                                                                                                      // 50\n                                                                                                                       // 51\n/**                                                                                                                    // 52\n * @param {?*} children Children tree container.                                                                       // 53\n * @param {!string} nameSoFar Name of the key path so far.                                                             // 54\n * @param {!function} callback Callback to invoke with each child found.                                               // 55\n * @param {?*} traverseContext Used to pass information throughout the traversal                                       // 56\n * process.                                                                                                            // 57\n * @return {!number} The number of children in this subtree.                                                           // 58\n */                                                                                                                    // 59\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {                                     // 60\n  var type = typeof children;                                                                                          // 61\n                                                                                                                       // 62\n  if (type === 'undefined' || type === 'boolean') {                                                                    // 63\n    // All of the above are perceived as null.                                                                         // 64\n    children = null;                                                                                                   // 65\n  }                                                                                                                    // 66\n                                                                                                                       // 67\n  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {          // 68\n    callback(traverseContext, children,                                                                                // 69\n    // If it's the only child, treat the name as if it was wrapped in an array                                         // 70\n    // so that it's consistent if the number of children grows.                                                        // 71\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);                                          // 72\n    return 1;                                                                                                          // 73\n  }                                                                                                                    // 74\n                                                                                                                       // 75\n  var child;                                                                                                           // 76\n  var nextName;                                                                                                        // 77\n  var subtreeCount = 0; // Count of children found in the current subtree.                                             // 78\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;                                        // 79\n                                                                                                                       // 80\n  if (Array.isArray(children)) {                                                                                       // 81\n    for (var i = 0; i < children.length; i++) {                                                                        // 82\n      child = children[i];                                                                                             // 83\n      nextName = nextNamePrefix + getComponentKey(child, i);                                                           // 84\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                             // 85\n    }                                                                                                                  // 86\n  } else {                                                                                                             // 87\n    var iteratorFn = getIteratorFn(children);                                                                          // 88\n    if (iteratorFn) {                                                                                                  // 89\n      var iterator = iteratorFn.call(children);                                                                        // 90\n      var step;                                                                                                        // 91\n      if (iteratorFn !== children.entries) {                                                                           // 92\n        var ii = 0;                                                                                                    // 93\n        while (!(step = iterator.next()).done) {                                                                       // 94\n          child = step.value;                                                                                          // 95\n          nextName = nextNamePrefix + getComponentKey(child, ii++);                                                    // 96\n          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                         // 97\n        }                                                                                                              // 98\n      } else {                                                                                                         // 99\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 100\n          var mapsAsChildrenAddendum = '';                                                                             // 101\n          if (ReactCurrentOwner.current) {                                                                             // 102\n            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();                                         // 103\n            if (mapsAsChildrenOwnerName) {                                                                             // 104\n              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';               // 105\n            }                                                                                                          // 106\n          }                                                                                                            // 107\n          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;\n          didWarnAboutMaps = true;                                                                                     // 109\n        }                                                                                                              // 110\n        // Iterator will provide entry [k,v] tuples rather than values.                                                // 111\n        while (!(step = iterator.next()).done) {                                                                       // 112\n          var entry = step.value;                                                                                      // 113\n          if (entry) {                                                                                                 // 114\n            child = entry[1];                                                                                          // 115\n            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);    // 116\n            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                       // 117\n          }                                                                                                            // 118\n        }                                                                                                              // 119\n      }                                                                                                                // 120\n    } else if (type === 'object') {                                                                                    // 121\n      var addendum = '';                                                                                               // 122\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 123\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';\n        if (children._isReactElement) {                                                                                // 125\n          addendum = ' It looks like you\\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';\n        }                                                                                                              // 127\n        if (ReactCurrentOwner.current) {                                                                               // 128\n          var name = ReactCurrentOwner.current.getName();                                                              // 129\n          if (name) {                                                                                                  // 130\n            addendum += ' Check the render method of `' + name + '`.';                                                 // 131\n          }                                                                                                            // 132\n        }                                                                                                              // 133\n      }                                                                                                                // 134\n      var childrenString = String(children);                                                                           // 135\n      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;\n    }                                                                                                                  // 137\n  }                                                                                                                    // 138\n                                                                                                                       // 139\n  return subtreeCount;                                                                                                 // 140\n}                                                                                                                      // 141\n                                                                                                                       // 142\n/**                                                                                                                    // 143\n * Traverses children that are typically specified as `props.children`, but                                            // 144\n * might also be specified through attributes:                                                                         // 145\n *                                                                                                                     // 146\n * - `traverseAllChildren(this.props.children, ...)`                                                                   // 147\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`                                                          // 148\n *                                                                                                                     // 149\n * The `traverseContext` is an optional argument that is passed through the                                            // 150\n * entire traversal. It can be used to store accumulations or anything else that                                       // 151\n * the callback might find relevant.                                                                                   // 152\n *                                                                                                                     // 153\n * @param {?*} children Children tree object.                                                                          // 154\n * @param {!function} callback To invoke upon traversing each child.                                                   // 155\n * @param {?*} traverseContext Context for traversal.                                                                  // 156\n * @return {!number} The number of children in this subtree.                                                           // 157\n */                                                                                                                    // 158\nfunction traverseAllChildren(children, callback, traverseContext) {                                                    // 159\n  if (children == null) {                                                                                              // 160\n    return 0;                                                                                                          // 161\n  }                                                                                                                    // 162\n                                                                                                                       // 163\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);                                             // 164\n}                                                                                                                      // 165\n                                                                                                                       // 166\nmodule.exports = traverseAllChildren;                                                                                  // 167\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getIteratorFn.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getIteratorFn.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getIteratorFn                                                                                       // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\n/* global Symbol */                                                                                                    // 15\n                                                                                                                       // 16\nvar ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;                                                 // 17\nvar FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.                                                        // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * Returns the iterator method function contained on the iterable object.                                              // 21\n *                                                                                                                     // 22\n * Be sure to invoke the function with the iterable as context:                                                        // 23\n *                                                                                                                     // 24\n *     var iteratorFn = getIteratorFn(myIterable);                                                                     // 25\n *     if (iteratorFn) {                                                                                               // 26\n *       var iterator = iteratorFn.call(myIterable);                                                                   // 27\n *       ...                                                                                                           // 28\n *     }                                                                                                               // 29\n *                                                                                                                     // 30\n * @param {?object} maybeIterable                                                                                      // 31\n * @return {?function}                                                                                                 // 32\n */                                                                                                                    // 33\nfunction getIteratorFn(maybeIterable) {                                                                                // 34\n  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n  if (typeof iteratorFn === 'function') {                                                                              // 36\n    return iteratorFn;                                                                                                 // 37\n  }                                                                                                                    // 38\n}                                                                                                                      // 39\n                                                                                                                       // 40\nmodule.exports = getIteratorFn;                                                                                        // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"KeyEscapeUtils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/KeyEscapeUtils.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule KeyEscapeUtils                                                                                      // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Escape and wrap key so it is safe to use as a reactid                                                               // 16\n *                                                                                                                     // 17\n * @param {string} key to be escaped.                                                                                  // 18\n * @return {string} the escaped key.                                                                                   // 19\n */                                                                                                                    // 20\n                                                                                                                       // 21\nfunction escape(key) {                                                                                                 // 22\n  var escapeRegex = /[=:]/g;                                                                                           // 23\n  var escaperLookup = {                                                                                                // 24\n    '=': '=0',                                                                                                         // 25\n    ':': '=2'                                                                                                          // 26\n  };                                                                                                                   // 27\n  var escapedString = ('' + key).replace(escapeRegex, function (match) {                                               // 28\n    return escaperLookup[match];                                                                                       // 29\n  });                                                                                                                  // 30\n                                                                                                                       // 31\n  return '$' + escapedString;                                                                                          // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\n/**                                                                                                                    // 35\n * Unescape and unwrap key for human-readable display                                                                  // 36\n *                                                                                                                     // 37\n * @param {string} key to unescape.                                                                                    // 38\n * @return {string} the unescaped key.                                                                                 // 39\n */                                                                                                                    // 40\nfunction unescape(key) {                                                                                               // 41\n  var unescapeRegex = /(=0|=2)/g;                                                                                      // 42\n  var unescaperLookup = {                                                                                              // 43\n    '=0': '=',                                                                                                         // 44\n    '=2': ':'                                                                                                          // 45\n  };                                                                                                                   // 46\n  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);                           // 47\n                                                                                                                       // 48\n  return ('' + keySubstring).replace(unescapeRegex, function (match) {                                                 // 49\n    return unescaperLookup[match];                                                                                     // 50\n  });                                                                                                                  // 51\n}                                                                                                                      // 52\n                                                                                                                       // 53\nvar KeyEscapeUtils = {                                                                                                 // 54\n  escape: escape,                                                                                                      // 55\n  unescape: unescape                                                                                                   // 56\n};                                                                                                                     // 57\n                                                                                                                       // 58\nmodule.exports = KeyEscapeUtils;                                                                                       // 59\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactComponent.js\":[\"./reactProdInvariant\",\"./ReactNoopUpdateQueue\",\"./canDefineProperty\",\"fbjs/lib/emptyObject\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactComponent.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactComponent                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');                                                          // 16\n                                                                                                                       // 17\nvar canDefineProperty = require('./canDefineProperty');                                                                // 18\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                     // 19\nvar invariant = require('fbjs/lib/invariant');                                                                         // 20\nvar warning = require('fbjs/lib/warning');                                                                             // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Base class helpers for the updating state of a component.                                                           // 24\n */                                                                                                                    // 25\nfunction ReactComponent(props, context, updater) {                                                                     // 26\n  this.props = props;                                                                                                  // 27\n  this.context = context;                                                                                              // 28\n  this.refs = emptyObject;                                                                                             // 29\n  // We initialize the default updater but the real one gets injected by the                                           // 30\n  // renderer.                                                                                                         // 31\n  this.updater = updater || ReactNoopUpdateQueue;                                                                      // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\nReactComponent.prototype.isReactComponent = {};                                                                        // 35\n                                                                                                                       // 36\n/**                                                                                                                    // 37\n * Sets a subset of the state. Always use this to mutate                                                               // 38\n * state. You should treat `this.state` as immutable.                                                                  // 39\n *                                                                                                                     // 40\n * There is no guarantee that `this.state` will be immediately updated, so                                             // 41\n * accessing `this.state` after calling this method may return the old value.                                          // 42\n *                                                                                                                     // 43\n * There is no guarantee that calls to `setState` will run synchronously,                                              // 44\n * as they may eventually be batched together.  You can provide an optional                                            // 45\n * callback that will be executed when the call to setState is actually                                                // 46\n * completed.                                                                                                          // 47\n *                                                                                                                     // 48\n * When a function is provided to setState, it will be called at some point in                                         // 49\n * the future (not synchronously). It will be called with the up to date                                               // 50\n * component arguments (state, props, context). These values can be different                                          // 51\n * from this.* because your function may be called after receiveProps but before                                       // 52\n * shouldComponentUpdate, and this new state, props, and context will not yet be                                       // 53\n * assigned to this.                                                                                                   // 54\n *                                                                                                                     // 55\n * @param {object|function} partialState Next partial state or function to                                             // 56\n *        produce next partial state to be merged with current state.                                                  // 57\n * @param {?function} callback Called after state is updated.                                                          // 58\n * @final                                                                                                              // 59\n * @protected                                                                                                          // 60\n */                                                                                                                    // 61\nReactComponent.prototype.setState = function (partialState, callback) {                                                // 62\n  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;\n  this.updater.enqueueSetState(this, partialState);                                                                    // 64\n  if (callback) {                                                                                                      // 65\n    this.updater.enqueueCallback(this, callback, 'setState');                                                          // 66\n  }                                                                                                                    // 67\n};                                                                                                                     // 68\n                                                                                                                       // 69\n/**                                                                                                                    // 70\n * Forces an update. This should only be invoked when it is known with                                                 // 71\n * certainty that we are **not** in a DOM transaction.                                                                 // 72\n *                                                                                                                     // 73\n * You may want to call this when you know that some deeper aspect of the                                              // 74\n * component's state has changed but `setState` was not called.                                                        // 75\n *                                                                                                                     // 76\n * This will not invoke `shouldComponentUpdate`, but it will invoke                                                    // 77\n * `componentWillUpdate` and `componentDidUpdate`.                                                                     // 78\n *                                                                                                                     // 79\n * @param {?function} callback Called after update is complete.                                                        // 80\n * @final                                                                                                              // 81\n * @protected                                                                                                          // 82\n */                                                                                                                    // 83\nReactComponent.prototype.forceUpdate = function (callback) {                                                           // 84\n  this.updater.enqueueForceUpdate(this);                                                                               // 85\n  if (callback) {                                                                                                      // 86\n    this.updater.enqueueCallback(this, callback, 'forceUpdate');                                                       // 87\n  }                                                                                                                    // 88\n};                                                                                                                     // 89\n                                                                                                                       // 90\n/**                                                                                                                    // 91\n * Deprecated APIs. These APIs used to exist on classic React classes but since                                        // 92\n * we would like to deprecate them, we're not going to move them over to this                                          // 93\n * modern base class. Instead, we define a getter that warns if it's accessed.                                         // 94\n */                                                                                                                    // 95\nif (process.env.NODE_ENV !== 'production') {                                                                           // 96\n  var deprecatedAPIs = {                                                                                               // 97\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };                                                                                                                   // 100\n  var defineDeprecationWarning = function (methodName, info) {                                                         // 101\n    if (canDefineProperty) {                                                                                           // 102\n      Object.defineProperty(ReactComponent.prototype, methodName, {                                                    // 103\n        get: function () {                                                                                             // 104\n          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;\n          return undefined;                                                                                            // 106\n        }                                                                                                              // 107\n      });                                                                                                              // 108\n    }                                                                                                                  // 109\n  };                                                                                                                   // 110\n  for (var fnName in deprecatedAPIs) {                                                                                 // 111\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {                                                                       // 112\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);                                                        // 113\n    }                                                                                                                  // 114\n  }                                                                                                                    // 115\n}                                                                                                                      // 116\n                                                                                                                       // 117\nmodule.exports = ReactComponent;                                                                                       // 118\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactNoopUpdateQueue.js\":[\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactNoopUpdateQueue.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactNoopUpdateQueue                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar warning = require('fbjs/lib/warning');                                                                             // 14\n                                                                                                                       // 15\nfunction warnNoop(publicInstance, callerName) {                                                                        // 16\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 17\n    var constructor = publicInstance.constructor;                                                                      // 18\n    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;\n  }                                                                                                                    // 20\n}                                                                                                                      // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * This is the abstract API for an update queue.                                                                       // 24\n */                                                                                                                    // 25\nvar ReactNoopUpdateQueue = {                                                                                           // 26\n                                                                                                                       // 27\n  /**                                                                                                                  // 28\n   * Checks whether or not this composite component is mounted.                                                        // 29\n   * @param {ReactClass} publicInstance The instance we want to test.                                                  // 30\n   * @return {boolean} True if mounted, false otherwise.                                                               // 31\n   * @protected                                                                                                        // 32\n   * @final                                                                                                            // 33\n   */                                                                                                                  // 34\n  isMounted: function (publicInstance) {                                                                               // 35\n    return false;                                                                                                      // 36\n  },                                                                                                                   // 37\n                                                                                                                       // 38\n  /**                                                                                                                  // 39\n   * Enqueue a callback that will be executed after all the pending updates                                            // 40\n   * have processed.                                                                                                   // 41\n   *                                                                                                                   // 42\n   * @param {ReactClass} publicInstance The instance to use as `this` context.                                         // 43\n   * @param {?function} callback Called after state is updated.                                                        // 44\n   * @internal                                                                                                         // 45\n   */                                                                                                                  // 46\n  enqueueCallback: function (publicInstance, callback) {},                                                             // 47\n                                                                                                                       // 48\n  /**                                                                                                                  // 49\n   * Forces an update. This should only be invoked when it is known with                                               // 50\n   * certainty that we are **not** in a DOM transaction.                                                               // 51\n   *                                                                                                                   // 52\n   * You may want to call this when you know that some deeper aspect of the                                            // 53\n   * component's state has changed but `setState` was not called.                                                      // 54\n   *                                                                                                                   // 55\n   * This will not invoke `shouldComponentUpdate`, but it will invoke                                                  // 56\n   * `componentWillUpdate` and `componentDidUpdate`.                                                                   // 57\n   *                                                                                                                   // 58\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 59\n   * @internal                                                                                                         // 60\n   */                                                                                                                  // 61\n  enqueueForceUpdate: function (publicInstance) {                                                                      // 62\n    warnNoop(publicInstance, 'forceUpdate');                                                                           // 63\n  },                                                                                                                   // 64\n                                                                                                                       // 65\n  /**                                                                                                                  // 66\n   * Replaces all of the state. Always use this or `setState` to mutate state.                                         // 67\n   * You should treat `this.state` as immutable.                                                                       // 68\n   *                                                                                                                   // 69\n   * There is no guarantee that `this.state` will be immediately updated, so                                           // 70\n   * accessing `this.state` after calling this method may return the old value.                                        // 71\n   *                                                                                                                   // 72\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 73\n   * @param {object} completeState Next state.                                                                         // 74\n   * @internal                                                                                                         // 75\n   */                                                                                                                  // 76\n  enqueueReplaceState: function (publicInstance, completeState) {                                                      // 77\n    warnNoop(publicInstance, 'replaceState');                                                                          // 78\n  },                                                                                                                   // 79\n                                                                                                                       // 80\n  /**                                                                                                                  // 81\n   * Sets a subset of the state. This only exists because _pendingState is                                             // 82\n   * internal. This provides a merging strategy that is not available to deep                                          // 83\n   * properties which is confusing. TODO: Expose pendingState or don't use it                                          // 84\n   * during the merge.                                                                                                 // 85\n   *                                                                                                                   // 86\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 87\n   * @param {object} partialState Next partial state to be merged with state.                                          // 88\n   * @internal                                                                                                         // 89\n   */                                                                                                                  // 90\n  enqueueSetState: function (publicInstance, partialState) {                                                           // 91\n    warnNoop(publicInstance, 'setState');                                                                              // 92\n  }                                                                                                                    // 93\n};                                                                                                                     // 94\n                                                                                                                       // 95\nmodule.exports = ReactNoopUpdateQueue;                                                                                 // 96\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactPureComponent.js\":[\"object-assign\",\"./ReactComponent\",\"./ReactNoopUpdateQueue\",\"fbjs/lib/emptyObject\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactPureComponent.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactPureComponent                                                                                  // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar ReactComponent = require('./ReactComponent');                                                                      // 16\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');                                                          // 17\n                                                                                                                       // 18\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                     // 19\n                                                                                                                       // 20\n/**                                                                                                                    // 21\n * Base class helpers for the updating state of a component.                                                           // 22\n */                                                                                                                    // 23\nfunction ReactPureComponent(props, context, updater) {                                                                 // 24\n  // Duplicated from ReactComponent.                                                                                   // 25\n  this.props = props;                                                                                                  // 26\n  this.context = context;                                                                                              // 27\n  this.refs = emptyObject;                                                                                             // 28\n  // We initialize the default updater but the real one gets injected by the                                           // 29\n  // renderer.                                                                                                         // 30\n  this.updater = updater || ReactNoopUpdateQueue;                                                                      // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nfunction ComponentDummy() {}                                                                                           // 34\nComponentDummy.prototype = ReactComponent.prototype;                                                                   // 35\nReactPureComponent.prototype = new ComponentDummy();                                                                   // 36\nReactPureComponent.prototype.constructor = ReactPureComponent;                                                         // 37\n// Avoid an extra prototype jump for these methods.                                                                    // 38\n_assign(ReactPureComponent.prototype, ReactComponent.prototype);                                                       // 39\nReactPureComponent.prototype.isPureReactComponent = true;                                                              // 40\n                                                                                                                       // 41\nmodule.exports = ReactPureComponent;                                                                                   // 42\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactClass.js\":[\"./reactProdInvariant\",\"object-assign\",\"./ReactComponent\",\"./ReactElement\",\"./ReactPropTypeLocations\",\"./ReactPropTypeLocationNames\",\"./ReactNoopUpdateQueue\",\"fbjs/lib/emptyObject\",\"fbjs/lib/invariant\",\"fbjs/lib/keyMirror\",\"fbjs/lib/keyOf\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactClass.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactClass                                                                                          // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 14\n    _assign = require('object-assign');                                                                                // 15\n                                                                                                                       // 16\nvar ReactComponent = require('./ReactComponent');                                                                      // 17\nvar ReactElement = require('./ReactElement');                                                                          // 18\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');                                                      // 19\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');                                              // 20\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');                                                          // 21\n                                                                                                                       // 22\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                     // 23\nvar invariant = require('fbjs/lib/invariant');                                                                         // 24\nvar keyMirror = require('fbjs/lib/keyMirror');                                                                         // 25\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 26\nvar warning = require('fbjs/lib/warning');                                                                             // 27\n                                                                                                                       // 28\nvar MIXINS_KEY = keyOf({ mixins: null });                                                                              // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Policies that describe methods in `ReactClassInterface`.                                                            // 32\n */                                                                                                                    // 33\nvar SpecPolicy = keyMirror({                                                                                           // 34\n  /**                                                                                                                  // 35\n   * These methods may be defined only once by the class specification or mixin.                                       // 36\n   */                                                                                                                  // 37\n  DEFINE_ONCE: null,                                                                                                   // 38\n  /**                                                                                                                  // 39\n   * These methods may be defined by both the class specification and mixins.                                          // 40\n   * Subsequent definitions will be chained. These methods must return void.                                           // 41\n   */                                                                                                                  // 42\n  DEFINE_MANY: null,                                                                                                   // 43\n  /**                                                                                                                  // 44\n   * These methods are overriding the base class.                                                                      // 45\n   */                                                                                                                  // 46\n  OVERRIDE_BASE: null,                                                                                                 // 47\n  /**                                                                                                                  // 48\n   * These methods are similar to DEFINE_MANY, except we assume they return                                            // 49\n   * objects. We try to merge the keys of the return values of all the mixed in                                        // 50\n   * functions. If there is a key conflict we throw.                                                                   // 51\n   */                                                                                                                  // 52\n  DEFINE_MANY_MERGED: null                                                                                             // 53\n});                                                                                                                    // 54\n                                                                                                                       // 55\nvar injectedMixins = [];                                                                                               // 56\n                                                                                                                       // 57\n/**                                                                                                                    // 58\n * Composite components are higher-level components that compose other composite                                       // 59\n * or host components.                                                                                                 // 60\n *                                                                                                                     // 61\n * To create a new type of `ReactClass`, pass a specification of                                                       // 62\n * your new class to `React.createClass`. The only requirement of your class                                           // 63\n * specification is that you implement a `render` method.                                                              // 64\n *                                                                                                                     // 65\n *   var MyComponent = React.createClass({                                                                             // 66\n *     render: function() {                                                                                            // 67\n *       return <div>Hello World</div>;                                                                                // 68\n *     }                                                                                                               // 69\n *   });                                                                                                               // 70\n *                                                                                                                     // 71\n * The class specification supports a specific protocol of methods that have                                           // 72\n * special meaning (e.g. `render`). See `ReactClassInterface` for                                                      // 73\n * more the comprehensive protocol. Any other properties and methods in the                                            // 74\n * class specification will be available on the prototype.                                                             // 75\n *                                                                                                                     // 76\n * @interface ReactClassInterface                                                                                      // 77\n * @internal                                                                                                           // 78\n */                                                                                                                    // 79\nvar ReactClassInterface = {                                                                                            // 80\n                                                                                                                       // 81\n  /**                                                                                                                  // 82\n   * An array of Mixin objects to include when defining your component.                                                // 83\n   *                                                                                                                   // 84\n   * @type {array}                                                                                                     // 85\n   * @optional                                                                                                         // 86\n   */                                                                                                                  // 87\n  mixins: SpecPolicy.DEFINE_MANY,                                                                                      // 88\n                                                                                                                       // 89\n  /**                                                                                                                  // 90\n   * An object containing properties and methods that should be defined on                                             // 91\n   * the component's constructor instead of its prototype (static methods).                                            // 92\n   *                                                                                                                   // 93\n   * @type {object}                                                                                                    // 94\n   * @optional                                                                                                         // 95\n   */                                                                                                                  // 96\n  statics: SpecPolicy.DEFINE_MANY,                                                                                     // 97\n                                                                                                                       // 98\n  /**                                                                                                                  // 99\n   * Definition of prop types for this component.                                                                      // 100\n   *                                                                                                                   // 101\n   * @type {object}                                                                                                    // 102\n   * @optional                                                                                                         // 103\n   */                                                                                                                  // 104\n  propTypes: SpecPolicy.DEFINE_MANY,                                                                                   // 105\n                                                                                                                       // 106\n  /**                                                                                                                  // 107\n   * Definition of context types for this component.                                                                   // 108\n   *                                                                                                                   // 109\n   * @type {object}                                                                                                    // 110\n   * @optional                                                                                                         // 111\n   */                                                                                                                  // 112\n  contextTypes: SpecPolicy.DEFINE_MANY,                                                                                // 113\n                                                                                                                       // 114\n  /**                                                                                                                  // 115\n   * Definition of context types this component sets for its children.                                                 // 116\n   *                                                                                                                   // 117\n   * @type {object}                                                                                                    // 118\n   * @optional                                                                                                         // 119\n   */                                                                                                                  // 120\n  childContextTypes: SpecPolicy.DEFINE_MANY,                                                                           // 121\n                                                                                                                       // 122\n  // ==== Definition methods ====                                                                                      // 123\n                                                                                                                       // 124\n  /**                                                                                                                  // 125\n   * Invoked when the component is mounted. Values in the mapping will be set on                                       // 126\n   * `this.props` if that prop is not specified (i.e. using an `in` check).                                            // 127\n   *                                                                                                                   // 128\n   * This method is invoked before `getInitialState` and therefore cannot rely                                         // 129\n   * on `this.state` or use `this.setState`.                                                                           // 130\n   *                                                                                                                   // 131\n   * @return {object}                                                                                                  // 132\n   * @optional                                                                                                         // 133\n   */                                                                                                                  // 134\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 135\n                                                                                                                       // 136\n  /**                                                                                                                  // 137\n   * Invoked once before the component is mounted. The return value will be used                                       // 138\n   * as the initial value of `this.state`.                                                                             // 139\n   *                                                                                                                   // 140\n   *   getInitialState: function() {                                                                                   // 141\n   *     return {                                                                                                      // 142\n   *       isOn: false,                                                                                                // 143\n   *       fooBaz: new BazFoo()                                                                                        // 144\n   *     }                                                                                                             // 145\n   *   }                                                                                                               // 146\n   *                                                                                                                   // 147\n   * @return {object}                                                                                                  // 148\n   * @optional                                                                                                         // 149\n   */                                                                                                                  // 150\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 151\n                                                                                                                       // 152\n  /**                                                                                                                  // 153\n   * @return {object}                                                                                                  // 154\n   * @optional                                                                                                         // 155\n   */                                                                                                                  // 156\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 157\n                                                                                                                       // 158\n  /**                                                                                                                  // 159\n   * Uses props from `this.props` and state from `this.state` to render the                                            // 160\n   * structure of the component.                                                                                       // 161\n   *                                                                                                                   // 162\n   * No guarantees are made about when or how often this method is invoked, so                                         // 163\n   * it must not have side effects.                                                                                    // 164\n   *                                                                                                                   // 165\n   *   render: function() {                                                                                            // 166\n   *     var name = this.props.name;                                                                                   // 167\n   *     return <div>Hello, {name}!</div>;                                                                             // 168\n   *   }                                                                                                               // 169\n   *                                                                                                                   // 170\n   * @return {ReactComponent}                                                                                          // 171\n   * @nosideeffects                                                                                                    // 172\n   * @required                                                                                                         // 173\n   */                                                                                                                  // 174\n  render: SpecPolicy.DEFINE_ONCE,                                                                                      // 175\n                                                                                                                       // 176\n  // ==== Delegate methods ====                                                                                        // 177\n                                                                                                                       // 178\n  /**                                                                                                                  // 179\n   * Invoked when the component is initially created and about to be mounted.                                          // 180\n   * This may have side effects, but any external subscriptions or data created                                        // 181\n   * by this method must be cleaned up in `componentWillUnmount`.                                                      // 182\n   *                                                                                                                   // 183\n   * @optional                                                                                                         // 184\n   */                                                                                                                  // 185\n  componentWillMount: SpecPolicy.DEFINE_MANY,                                                                          // 186\n                                                                                                                       // 187\n  /**                                                                                                                  // 188\n   * Invoked when the component has been mounted and has a DOM representation.                                         // 189\n   * However, there is no guarantee that the DOM node is in the document.                                              // 190\n   *                                                                                                                   // 191\n   * Use this as an opportunity to operate on the DOM when the component has                                           // 192\n   * been mounted (initialized and rendered) for the first time.                                                       // 193\n   *                                                                                                                   // 194\n   * @param {DOMElement} rootNode DOM element representing the component.                                              // 195\n   * @optional                                                                                                         // 196\n   */                                                                                                                  // 197\n  componentDidMount: SpecPolicy.DEFINE_MANY,                                                                           // 198\n                                                                                                                       // 199\n  /**                                                                                                                  // 200\n   * Invoked before the component receives new props.                                                                  // 201\n   *                                                                                                                   // 202\n   * Use this as an opportunity to react to a prop transition by updating the                                          // 203\n   * state using `this.setState`. Current props are accessed via `this.props`.                                         // 204\n   *                                                                                                                   // 205\n   *   componentWillReceiveProps: function(nextProps, nextContext) {                                                   // 206\n   *     this.setState({                                                                                               // 207\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount                                                 // 208\n   *     });                                                                                                           // 209\n   *   }                                                                                                               // 210\n   *                                                                                                                   // 211\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop                                        // 212\n   * transition may cause a state change, but the opposite is not true. If you                                         // 213\n   * need it, you are probably looking for `componentWillUpdate`.                                                      // 214\n   *                                                                                                                   // 215\n   * @param {object} nextProps                                                                                         // 216\n   * @optional                                                                                                         // 217\n   */                                                                                                                  // 218\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,                                                                   // 219\n                                                                                                                       // 220\n  /**                                                                                                                  // 221\n   * Invoked while deciding if the component should be updated as a result of                                          // 222\n   * receiving new props, state and/or context.                                                                        // 223\n   *                                                                                                                   // 224\n   * Use this as an opportunity to `return false` when you're certain that the                                         // 225\n   * transition to the new props/state/context will not require a component                                            // 226\n   * update.                                                                                                           // 227\n   *                                                                                                                   // 228\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {                                            // 229\n   *     return !equal(nextProps, this.props) ||                                                                       // 230\n   *       !equal(nextState, this.state) ||                                                                            // 231\n   *       !equal(nextContext, this.context);                                                                          // 232\n   *   }                                                                                                               // 233\n   *                                                                                                                   // 234\n   * @param {object} nextProps                                                                                         // 235\n   * @param {?object} nextState                                                                                        // 236\n   * @param {?object} nextContext                                                                                      // 237\n   * @return {boolean} True if the component should update.                                                            // 238\n   * @optional                                                                                                         // 239\n   */                                                                                                                  // 240\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,                                                                       // 241\n                                                                                                                       // 242\n  /**                                                                                                                  // 243\n   * Invoked when the component is about to update due to a transition from                                            // 244\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`                                         // 245\n   * and `nextContext`.                                                                                                // 246\n   *                                                                                                                   // 247\n   * Use this as an opportunity to perform preparation before an update occurs.                                        // 248\n   *                                                                                                                   // 249\n   * NOTE: You **cannot** use `this.setState()` in this method.                                                        // 250\n   *                                                                                                                   // 251\n   * @param {object} nextProps                                                                                         // 252\n   * @param {?object} nextState                                                                                        // 253\n   * @param {?object} nextContext                                                                                      // 254\n   * @param {ReactReconcileTransaction} transaction                                                                    // 255\n   * @optional                                                                                                         // 256\n   */                                                                                                                  // 257\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,                                                                         // 258\n                                                                                                                       // 259\n  /**                                                                                                                  // 260\n   * Invoked when the component's DOM representation has been updated.                                                 // 261\n   *                                                                                                                   // 262\n   * Use this as an opportunity to operate on the DOM when the component has                                           // 263\n   * been updated.                                                                                                     // 264\n   *                                                                                                                   // 265\n   * @param {object} prevProps                                                                                         // 266\n   * @param {?object} prevState                                                                                        // 267\n   * @param {?object} prevContext                                                                                      // 268\n   * @param {DOMElement} rootNode DOM element representing the component.                                              // 269\n   * @optional                                                                                                         // 270\n   */                                                                                                                  // 271\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,                                                                          // 272\n                                                                                                                       // 273\n  /**                                                                                                                  // 274\n   * Invoked when the component is about to be removed from its parent and have                                        // 275\n   * its DOM representation destroyed.                                                                                 // 276\n   *                                                                                                                   // 277\n   * Use this as an opportunity to deallocate any external resources.                                                  // 278\n   *                                                                                                                   // 279\n   * NOTE: There is no `componentDidUnmount` since your component will have been                                       // 280\n   * destroyed by that point.                                                                                          // 281\n   *                                                                                                                   // 282\n   * @optional                                                                                                         // 283\n   */                                                                                                                  // 284\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,                                                                        // 285\n                                                                                                                       // 286\n  // ==== Advanced methods ====                                                                                        // 287\n                                                                                                                       // 288\n  /**                                                                                                                  // 289\n   * Updates the component's currently mounted DOM representation.                                                     // 290\n   *                                                                                                                   // 291\n   * By default, this implements React's rendering and reconciliation algorithm.                                       // 292\n   * Sophisticated clients may wish to override this.                                                                  // 293\n   *                                                                                                                   // 294\n   * @param {ReactReconcileTransaction} transaction                                                                    // 295\n   * @internal                                                                                                         // 296\n   * @overridable                                                                                                      // 297\n   */                                                                                                                  // 298\n  updateComponent: SpecPolicy.OVERRIDE_BASE                                                                            // 299\n                                                                                                                       // 300\n};                                                                                                                     // 301\n                                                                                                                       // 302\n/**                                                                                                                    // 303\n * Mapping from class specification keys to special processing functions.                                              // 304\n *                                                                                                                     // 305\n * Although these are declared like instance properties in the specification                                           // 306\n * when defining classes using `React.createClass`, they are actually static                                           // 307\n * and are accessible on the constructor instead of the prototype. Despite                                             // 308\n * being static, they must be defined outside of the \"statics\" key under                                               // 309\n * which all other static methods are defined.                                                                         // 310\n */                                                                                                                    // 311\nvar RESERVED_SPEC_KEYS = {                                                                                             // 312\n  displayName: function (Constructor, displayName) {                                                                   // 313\n    Constructor.displayName = displayName;                                                                             // 314\n  },                                                                                                                   // 315\n  mixins: function (Constructor, mixins) {                                                                             // 316\n    if (mixins) {                                                                                                      // 317\n      for (var i = 0; i < mixins.length; i++) {                                                                        // 318\n        mixSpecIntoComponent(Constructor, mixins[i]);                                                                  // 319\n      }                                                                                                                // 320\n    }                                                                                                                  // 321\n  },                                                                                                                   // 322\n  childContextTypes: function (Constructor, childContextTypes) {                                                       // 323\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 324\n      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);                            // 325\n    }                                                                                                                  // 326\n    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);                     // 327\n  },                                                                                                                   // 328\n  contextTypes: function (Constructor, contextTypes) {                                                                 // 329\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 330\n      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);                                      // 331\n    }                                                                                                                  // 332\n    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);                                    // 333\n  },                                                                                                                   // 334\n  /**                                                                                                                  // 335\n   * Special case getDefaultProps which should move into statics but requires                                          // 336\n   * automatic merging.                                                                                                // 337\n   */                                                                                                                  // 338\n  getDefaultProps: function (Constructor, getDefaultProps) {                                                           // 339\n    if (Constructor.getDefaultProps) {                                                                                 // 340\n      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);          // 341\n    } else {                                                                                                           // 342\n      Constructor.getDefaultProps = getDefaultProps;                                                                   // 343\n    }                                                                                                                  // 344\n  },                                                                                                                   // 345\n  propTypes: function (Constructor, propTypes) {                                                                       // 346\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 347\n      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);                                            // 348\n    }                                                                                                                  // 349\n    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);                                             // 350\n  },                                                                                                                   // 351\n  statics: function (Constructor, statics) {                                                                           // 352\n    mixStaticSpecIntoComponent(Constructor, statics);                                                                  // 353\n  },                                                                                                                   // 354\n  autobind: function () {} };                                                                                          // 355\n                                                                                                                       // 356\n// noop                                                                                                                // 357\nfunction validateTypeDef(Constructor, typeDef, location) {                                                             // 358\n  for (var propName in typeDef) {                                                                                      // 359\n    if (typeDef.hasOwnProperty(propName)) {                                                                            // 360\n      // use a warning instead of an invariant so components                                                           // 361\n      // don't show up in prod but only in __DEV__                                                                     // 362\n      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;\n    }                                                                                                                  // 364\n  }                                                                                                                    // 365\n}                                                                                                                      // 366\n                                                                                                                       // 367\nfunction validateMethodOverride(isAlreadyDefined, name) {                                                              // 368\n  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;                        // 369\n                                                                                                                       // 370\n  // Disallow overriding of base class methods unless explicitly allowed.                                              // 371\n  if (ReactClassMixin.hasOwnProperty(name)) {                                                                          // 372\n    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;\n  }                                                                                                                    // 374\n                                                                                                                       // 375\n  // Disallow defining methods more than once unless explicitly allowed.                                               // 376\n  if (isAlreadyDefined) {                                                                                              // 377\n    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;\n  }                                                                                                                    // 379\n}                                                                                                                      // 380\n                                                                                                                       // 381\n/**                                                                                                                    // 382\n * Mixin helper which handles policy validation and reserved                                                           // 383\n * specification keys when building React classes.                                                                     // 384\n */                                                                                                                    // 385\nfunction mixSpecIntoComponent(Constructor, spec) {                                                                     // 386\n  if (!spec) {                                                                                                         // 387\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 388\n      var typeofSpec = typeof spec;                                                                                    // 389\n      var isMixinValid = typeofSpec === 'object' && spec !== null;                                                     // 390\n                                                                                                                       // 391\n      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;\n    }                                                                                                                  // 393\n                                                                                                                       // 394\n    return;                                                                                                            // 395\n  }                                                                                                                    // 396\n                                                                                                                       // 397\n  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;\n  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;\n                                                                                                                       // 400\n  var proto = Constructor.prototype;                                                                                   // 401\n  var autoBindPairs = proto.__reactAutoBindPairs;                                                                      // 402\n                                                                                                                       // 403\n  // By handling mixins before any other properties, we ensure the same                                                // 404\n  // chaining order is applied to methods with DEFINE_MANY policy, whether                                             // 405\n  // mixins are listed before or after these methods in the spec.                                                      // 406\n  if (spec.hasOwnProperty(MIXINS_KEY)) {                                                                               // 407\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);                                                               // 408\n  }                                                                                                                    // 409\n                                                                                                                       // 410\n  for (var name in spec) {                                                                                             // 411\n    if (!spec.hasOwnProperty(name)) {                                                                                  // 412\n      continue;                                                                                                        // 413\n    }                                                                                                                  // 414\n                                                                                                                       // 415\n    if (name === MIXINS_KEY) {                                                                                         // 416\n      // We have already handled mixins in a special case above.                                                       // 417\n      continue;                                                                                                        // 418\n    }                                                                                                                  // 419\n                                                                                                                       // 420\n    var property = spec[name];                                                                                         // 421\n    var isAlreadyDefined = proto.hasOwnProperty(name);                                                                 // 422\n    validateMethodOverride(isAlreadyDefined, name);                                                                    // 423\n                                                                                                                       // 424\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {                                                                     // 425\n      RESERVED_SPEC_KEYS[name](Constructor, property);                                                                 // 426\n    } else {                                                                                                           // 427\n      // Setup methods on prototype:                                                                                   // 428\n      // The following member methods should not be automatically bound:                                               // 429\n      // 1. Expected ReactClass methods (in the \"interface\").                                                          // 430\n      // 2. Overridden methods (that were mixed in).                                                                   // 431\n      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);                                               // 432\n      var isFunction = typeof property === 'function';                                                                 // 433\n      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;          // 434\n                                                                                                                       // 435\n      if (shouldAutoBind) {                                                                                            // 436\n        autoBindPairs.push(name, property);                                                                            // 437\n        proto[name] = property;                                                                                        // 438\n      } else {                                                                                                         // 439\n        if (isAlreadyDefined) {                                                                                        // 440\n          var specPolicy = ReactClassInterface[name];                                                                  // 441\n                                                                                                                       // 442\n          // These cases should already be caught by validateMethodOverride.                                           // 443\n          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;\n                                                                                                                       // 445\n          // For methods which are defined more than once, call the existing                                           // 446\n          // methods before calling the new property, merging if appropriate.                                          // 447\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {                                                          // 448\n            proto[name] = createMergedResultFunction(proto[name], property);                                           // 449\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {                                                          // 450\n            proto[name] = createChainedFunction(proto[name], property);                                                // 451\n          }                                                                                                            // 452\n        } else {                                                                                                       // 453\n          proto[name] = property;                                                                                      // 454\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 455\n            // Add verbose displayName to the function, which helps when looking                                       // 456\n            // at profiling tools.                                                                                     // 457\n            if (typeof property === 'function' && spec.displayName) {                                                  // 458\n              proto[name].displayName = spec.displayName + '_' + name;                                                 // 459\n            }                                                                                                          // 460\n          }                                                                                                            // 461\n        }                                                                                                              // 462\n      }                                                                                                                // 463\n    }                                                                                                                  // 464\n  }                                                                                                                    // 465\n}                                                                                                                      // 466\n                                                                                                                       // 467\nfunction mixStaticSpecIntoComponent(Constructor, statics) {                                                            // 468\n  if (!statics) {                                                                                                      // 469\n    return;                                                                                                            // 470\n  }                                                                                                                    // 471\n  for (var name in statics) {                                                                                          // 472\n    var property = statics[name];                                                                                      // 473\n    if (!statics.hasOwnProperty(name)) {                                                                               // 474\n      continue;                                                                                                        // 475\n    }                                                                                                                  // 476\n                                                                                                                       // 477\n    var isReserved = name in RESERVED_SPEC_KEYS;                                                                       // 478\n    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;\n                                                                                                                       // 480\n    var isInherited = name in Constructor;                                                                             // 481\n    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;\n    Constructor[name] = property;                                                                                      // 483\n  }                                                                                                                    // 484\n}                                                                                                                      // 485\n                                                                                                                       // 486\n/**                                                                                                                    // 487\n * Merge two objects, but throw if both contain the same key.                                                          // 488\n *                                                                                                                     // 489\n * @param {object} one The first object, which is mutated.                                                             // 490\n * @param {object} two The second object                                                                               // 491\n * @return {object} one after it has been mutated to contain everything in two.                                        // 492\n */                                                                                                                    // 493\nfunction mergeIntoWithNoDuplicateKeys(one, two) {                                                                      // 494\n  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;\n                                                                                                                       // 496\n  for (var key in two) {                                                                                               // 497\n    if (two.hasOwnProperty(key)) {                                                                                     // 498\n      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;\n      one[key] = two[key];                                                                                             // 500\n    }                                                                                                                  // 501\n  }                                                                                                                    // 502\n  return one;                                                                                                          // 503\n}                                                                                                                      // 504\n                                                                                                                       // 505\n/**                                                                                                                    // 506\n * Creates a function that invokes two functions and merges their return values.                                       // 507\n *                                                                                                                     // 508\n * @param {function} one Function to invoke first.                                                                     // 509\n * @param {function} two Function to invoke second.                                                                    // 510\n * @return {function} Function that invokes the two argument functions.                                                // 511\n * @private                                                                                                            // 512\n */                                                                                                                    // 513\nfunction createMergedResultFunction(one, two) {                                                                        // 514\n  return function mergedResult() {                                                                                     // 515\n    var a = one.apply(this, arguments);                                                                                // 516\n    var b = two.apply(this, arguments);                                                                                // 517\n    if (a == null) {                                                                                                   // 518\n      return b;                                                                                                        // 519\n    } else if (b == null) {                                                                                            // 520\n      return a;                                                                                                        // 521\n    }                                                                                                                  // 522\n    var c = {};                                                                                                        // 523\n    mergeIntoWithNoDuplicateKeys(c, a);                                                                                // 524\n    mergeIntoWithNoDuplicateKeys(c, b);                                                                                // 525\n    return c;                                                                                                          // 526\n  };                                                                                                                   // 527\n}                                                                                                                      // 528\n                                                                                                                       // 529\n/**                                                                                                                    // 530\n * Creates a function that invokes two functions and ignores their return vales.                                       // 531\n *                                                                                                                     // 532\n * @param {function} one Function to invoke first.                                                                     // 533\n * @param {function} two Function to invoke second.                                                                    // 534\n * @return {function} Function that invokes the two argument functions.                                                // 535\n * @private                                                                                                            // 536\n */                                                                                                                    // 537\nfunction createChainedFunction(one, two) {                                                                             // 538\n  return function chainedFunction() {                                                                                  // 539\n    one.apply(this, arguments);                                                                                        // 540\n    two.apply(this, arguments);                                                                                        // 541\n  };                                                                                                                   // 542\n}                                                                                                                      // 543\n                                                                                                                       // 544\n/**                                                                                                                    // 545\n * Binds a method to the component.                                                                                    // 546\n *                                                                                                                     // 547\n * @param {object} component Component whose method is going to be bound.                                              // 548\n * @param {function} method Method to be bound.                                                                        // 549\n * @return {function} The bound method.                                                                                // 550\n */                                                                                                                    // 551\nfunction bindAutoBindMethod(component, method) {                                                                       // 552\n  var boundMethod = method.bind(component);                                                                            // 553\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 554\n    boundMethod.__reactBoundContext = component;                                                                       // 555\n    boundMethod.__reactBoundMethod = method;                                                                           // 556\n    boundMethod.__reactBoundArguments = null;                                                                          // 557\n    var componentName = component.constructor.displayName;                                                             // 558\n    var _bind = boundMethod.bind;                                                                                      // 559\n    boundMethod.bind = function (newThis) {                                                                            // 560\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {        // 561\n        args[_key - 1] = arguments[_key];                                                                              // 562\n      }                                                                                                                // 563\n                                                                                                                       // 564\n      // User is trying to bind() an autobound method; we effectively will                                             // 565\n      // ignore the value of \"this\" that the user is trying to use, so                                                 // 566\n      // let's warn.                                                                                                   // 567\n      if (newThis !== component && newThis !== null) {                                                                 // 568\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;\n      } else if (!args.length) {                                                                                       // 570\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;\n        return boundMethod;                                                                                            // 572\n      }                                                                                                                // 573\n      var reboundMethod = _bind.apply(boundMethod, arguments);                                                         // 574\n      reboundMethod.__reactBoundContext = component;                                                                   // 575\n      reboundMethod.__reactBoundMethod = method;                                                                       // 576\n      reboundMethod.__reactBoundArguments = args;                                                                      // 577\n      return reboundMethod;                                                                                            // 578\n    };                                                                                                                 // 579\n  }                                                                                                                    // 580\n  return boundMethod;                                                                                                  // 581\n}                                                                                                                      // 582\n                                                                                                                       // 583\n/**                                                                                                                    // 584\n * Binds all auto-bound methods in a component.                                                                        // 585\n *                                                                                                                     // 586\n * @param {object} component Component whose method is going to be bound.                                              // 587\n */                                                                                                                    // 588\nfunction bindAutoBindMethods(component) {                                                                              // 589\n  var pairs = component.__reactAutoBindPairs;                                                                          // 590\n  for (var i = 0; i < pairs.length; i += 2) {                                                                          // 591\n    var autoBindKey = pairs[i];                                                                                        // 592\n    var method = pairs[i + 1];                                                                                         // 593\n    component[autoBindKey] = bindAutoBindMethod(component, method);                                                    // 594\n  }                                                                                                                    // 595\n}                                                                                                                      // 596\n                                                                                                                       // 597\n/**                                                                                                                    // 598\n * Add more to the ReactClass base class. These are all legacy features and                                            // 599\n * therefore not already part of the modern ReactComponent.                                                            // 600\n */                                                                                                                    // 601\nvar ReactClassMixin = {                                                                                                // 602\n                                                                                                                       // 603\n  /**                                                                                                                  // 604\n   * TODO: This will be deprecated because state should always keep a consistent                                       // 605\n   * type signature and the only use case for this, is to avoid that.                                                  // 606\n   */                                                                                                                  // 607\n  replaceState: function (newState, callback) {                                                                        // 608\n    this.updater.enqueueReplaceState(this, newState);                                                                  // 609\n    if (callback) {                                                                                                    // 610\n      this.updater.enqueueCallback(this, callback, 'replaceState');                                                    // 611\n    }                                                                                                                  // 612\n  },                                                                                                                   // 613\n                                                                                                                       // 614\n  /**                                                                                                                  // 615\n   * Checks whether or not this composite component is mounted.                                                        // 616\n   * @return {boolean} True if mounted, false otherwise.                                                               // 617\n   * @protected                                                                                                        // 618\n   * @final                                                                                                            // 619\n   */                                                                                                                  // 620\n  isMounted: function () {                                                                                             // 621\n    return this.updater.isMounted(this);                                                                               // 622\n  }                                                                                                                    // 623\n};                                                                                                                     // 624\n                                                                                                                       // 625\nvar ReactClassComponent = function () {};                                                                              // 626\n_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);                                     // 627\n                                                                                                                       // 628\n/**                                                                                                                    // 629\n * Module for creating composite components.                                                                           // 630\n *                                                                                                                     // 631\n * @class ReactClass                                                                                                   // 632\n */                                                                                                                    // 633\nvar ReactClass = {                                                                                                     // 634\n                                                                                                                       // 635\n  /**                                                                                                                  // 636\n   * Creates a composite component class given a class specification.                                                  // 637\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass                                    // 638\n   *                                                                                                                   // 639\n   * @param {object} spec Class specification (which must define `render`).                                            // 640\n   * @return {function} Component constructor function.                                                                // 641\n   * @public                                                                                                           // 642\n   */                                                                                                                  // 643\n  createClass: function (spec) {                                                                                       // 644\n    var Constructor = function (props, context, updater) {                                                             // 645\n      // This constructor gets overridden by mocks. The argument is used                                               // 646\n      // by mocks to assert on what gets mounted.                                                                      // 647\n                                                                                                                       // 648\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 649\n        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;\n      }                                                                                                                // 651\n                                                                                                                       // 652\n      // Wire up auto-binding                                                                                          // 653\n      if (this.__reactAutoBindPairs.length) {                                                                          // 654\n        bindAutoBindMethods(this);                                                                                     // 655\n      }                                                                                                                // 656\n                                                                                                                       // 657\n      this.props = props;                                                                                              // 658\n      this.context = context;                                                                                          // 659\n      this.refs = emptyObject;                                                                                         // 660\n      this.updater = updater || ReactNoopUpdateQueue;                                                                  // 661\n                                                                                                                       // 662\n      this.state = null;                                                                                               // 663\n                                                                                                                       // 664\n      // ReactClasses doesn't have constructors. Instead, they use the                                                 // 665\n      // getInitialState and componentWillMount methods for initialization.                                            // 666\n                                                                                                                       // 667\n      var initialState = this.getInitialState ? this.getInitialState() : null;                                         // 668\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 669\n        // We allow auto-mocks to proceed as if they're returning null.                                                // 670\n        if (initialState === undefined && this.getInitialState._isMockFunction) {                                      // 671\n          // This is probably bad practice. Consider warning here and                                                  // 672\n          // deprecating this convenience.                                                                             // 673\n          initialState = null;                                                                                         // 674\n        }                                                                                                              // 675\n      }                                                                                                                // 676\n      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;\n                                                                                                                       // 678\n      this.state = initialState;                                                                                       // 679\n    };                                                                                                                 // 680\n    Constructor.prototype = new ReactClassComponent();                                                                 // 681\n    Constructor.prototype.constructor = Constructor;                                                                   // 682\n    Constructor.prototype.__reactAutoBindPairs = [];                                                                   // 683\n                                                                                                                       // 684\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));                                              // 685\n                                                                                                                       // 686\n    mixSpecIntoComponent(Constructor, spec);                                                                           // 687\n                                                                                                                       // 688\n    // Initialize the defaultProps property after all mixins have been merged.                                         // 689\n    if (Constructor.getDefaultProps) {                                                                                 // 690\n      Constructor.defaultProps = Constructor.getDefaultProps();                                                        // 691\n    }                                                                                                                  // 692\n                                                                                                                       // 693\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 694\n      // This is a tag to indicate that the use of these method names is ok,                                           // 695\n      // since it's used with createClass. If it's not, then it's likely a                                             // 696\n      // mistake so we'll warn you to use the static property, property                                                // 697\n      // initializer or constructor respectively.                                                                      // 698\n      if (Constructor.getDefaultProps) {                                                                               // 699\n        Constructor.getDefaultProps.isReactClassApproved = {};                                                         // 700\n      }                                                                                                                // 701\n      if (Constructor.prototype.getInitialState) {                                                                     // 702\n        Constructor.prototype.getInitialState.isReactClassApproved = {};                                               // 703\n      }                                                                                                                // 704\n    }                                                                                                                  // 705\n                                                                                                                       // 706\n    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;\n                                                                                                                       // 708\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 709\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;\n    }                                                                                                                  // 712\n                                                                                                                       // 713\n    // Reduce time spent doing lookups by setting these on the prototype.                                              // 714\n    for (var methodName in ReactClassInterface) {                                                                      // 715\n      if (!Constructor.prototype[methodName]) {                                                                        // 716\n        Constructor.prototype[methodName] = null;                                                                      // 717\n      }                                                                                                                // 718\n    }                                                                                                                  // 719\n                                                                                                                       // 720\n    return Constructor;                                                                                                // 721\n  },                                                                                                                   // 722\n                                                                                                                       // 723\n  injection: {                                                                                                         // 724\n    injectMixin: function (mixin) {                                                                                    // 725\n      injectedMixins.push(mixin);                                                                                      // 726\n    }                                                                                                                  // 727\n  }                                                                                                                    // 728\n                                                                                                                       // 729\n};                                                                                                                     // 730\n                                                                                                                       // 731\nmodule.exports = ReactClass;                                                                                           // 732\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactPropTypeLocations.js\":[\"fbjs/lib/keyMirror\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactPropTypeLocations.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactPropTypeLocations                                                                              // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar keyMirror = require('fbjs/lib/keyMirror');                                                                         // 14\n                                                                                                                       // 15\nvar ReactPropTypeLocations = keyMirror({                                                                               // 16\n  prop: null,                                                                                                          // 17\n  context: null,                                                                                                       // 18\n  childContext: null                                                                                                   // 19\n});                                                                                                                    // 20\n                                                                                                                       // 21\nmodule.exports = ReactPropTypeLocations;                                                                               // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactPropTypeLocationNames.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactPropTypeLocationNames.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactPropTypeLocationNames                                                                          // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactPropTypeLocationNames = {};                                                                                   // 14\n                                                                                                                       // 15\nif (process.env.NODE_ENV !== 'production') {                                                                           // 16\n  ReactPropTypeLocationNames = {                                                                                       // 17\n    prop: 'prop',                                                                                                      // 18\n    context: 'context',                                                                                                // 19\n    childContext: 'child context'                                                                                      // 20\n  };                                                                                                                   // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\nmodule.exports = ReactPropTypeLocationNames;                                                                           // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMFactories.js\":[\"./ReactElement\",\"./ReactElementValidator\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMFactories.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMFactories                                                                                   // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactElement = require('./ReactElement');                                                                          // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Create a factory that creates HTML tag elements.                                                                    // 17\n *                                                                                                                     // 18\n * @private                                                                                                            // 19\n */                                                                                                                    // 20\nvar createDOMFactory = ReactElement.createFactory;                                                                     // 21\nif (process.env.NODE_ENV !== 'production') {                                                                           // 22\n  var ReactElementValidator = require('./ReactElementValidator');                                                      // 23\n  createDOMFactory = ReactElementValidator.createFactory;                                                              // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.                                          // 28\n * This is also accessible via `React.DOM`.                                                                            // 29\n *                                                                                                                     // 30\n * @public                                                                                                             // 31\n */                                                                                                                    // 32\nvar ReactDOMFactories = {                                                                                              // 33\n  a: createDOMFactory('a'),                                                                                            // 34\n  abbr: createDOMFactory('abbr'),                                                                                      // 35\n  address: createDOMFactory('address'),                                                                                // 36\n  area: createDOMFactory('area'),                                                                                      // 37\n  article: createDOMFactory('article'),                                                                                // 38\n  aside: createDOMFactory('aside'),                                                                                    // 39\n  audio: createDOMFactory('audio'),                                                                                    // 40\n  b: createDOMFactory('b'),                                                                                            // 41\n  base: createDOMFactory('base'),                                                                                      // 42\n  bdi: createDOMFactory('bdi'),                                                                                        // 43\n  bdo: createDOMFactory('bdo'),                                                                                        // 44\n  big: createDOMFactory('big'),                                                                                        // 45\n  blockquote: createDOMFactory('blockquote'),                                                                          // 46\n  body: createDOMFactory('body'),                                                                                      // 47\n  br: createDOMFactory('br'),                                                                                          // 48\n  button: createDOMFactory('button'),                                                                                  // 49\n  canvas: createDOMFactory('canvas'),                                                                                  // 50\n  caption: createDOMFactory('caption'),                                                                                // 51\n  cite: createDOMFactory('cite'),                                                                                      // 52\n  code: createDOMFactory('code'),                                                                                      // 53\n  col: createDOMFactory('col'),                                                                                        // 54\n  colgroup: createDOMFactory('colgroup'),                                                                              // 55\n  data: createDOMFactory('data'),                                                                                      // 56\n  datalist: createDOMFactory('datalist'),                                                                              // 57\n  dd: createDOMFactory('dd'),                                                                                          // 58\n  del: createDOMFactory('del'),                                                                                        // 59\n  details: createDOMFactory('details'),                                                                                // 60\n  dfn: createDOMFactory('dfn'),                                                                                        // 61\n  dialog: createDOMFactory('dialog'),                                                                                  // 62\n  div: createDOMFactory('div'),                                                                                        // 63\n  dl: createDOMFactory('dl'),                                                                                          // 64\n  dt: createDOMFactory('dt'),                                                                                          // 65\n  em: createDOMFactory('em'),                                                                                          // 66\n  embed: createDOMFactory('embed'),                                                                                    // 67\n  fieldset: createDOMFactory('fieldset'),                                                                              // 68\n  figcaption: createDOMFactory('figcaption'),                                                                          // 69\n  figure: createDOMFactory('figure'),                                                                                  // 70\n  footer: createDOMFactory('footer'),                                                                                  // 71\n  form: createDOMFactory('form'),                                                                                      // 72\n  h1: createDOMFactory('h1'),                                                                                          // 73\n  h2: createDOMFactory('h2'),                                                                                          // 74\n  h3: createDOMFactory('h3'),                                                                                          // 75\n  h4: createDOMFactory('h4'),                                                                                          // 76\n  h5: createDOMFactory('h5'),                                                                                          // 77\n  h6: createDOMFactory('h6'),                                                                                          // 78\n  head: createDOMFactory('head'),                                                                                      // 79\n  header: createDOMFactory('header'),                                                                                  // 80\n  hgroup: createDOMFactory('hgroup'),                                                                                  // 81\n  hr: createDOMFactory('hr'),                                                                                          // 82\n  html: createDOMFactory('html'),                                                                                      // 83\n  i: createDOMFactory('i'),                                                                                            // 84\n  iframe: createDOMFactory('iframe'),                                                                                  // 85\n  img: createDOMFactory('img'),                                                                                        // 86\n  input: createDOMFactory('input'),                                                                                    // 87\n  ins: createDOMFactory('ins'),                                                                                        // 88\n  kbd: createDOMFactory('kbd'),                                                                                        // 89\n  keygen: createDOMFactory('keygen'),                                                                                  // 90\n  label: createDOMFactory('label'),                                                                                    // 91\n  legend: createDOMFactory('legend'),                                                                                  // 92\n  li: createDOMFactory('li'),                                                                                          // 93\n  link: createDOMFactory('link'),                                                                                      // 94\n  main: createDOMFactory('main'),                                                                                      // 95\n  map: createDOMFactory('map'),                                                                                        // 96\n  mark: createDOMFactory('mark'),                                                                                      // 97\n  menu: createDOMFactory('menu'),                                                                                      // 98\n  menuitem: createDOMFactory('menuitem'),                                                                              // 99\n  meta: createDOMFactory('meta'),                                                                                      // 100\n  meter: createDOMFactory('meter'),                                                                                    // 101\n  nav: createDOMFactory('nav'),                                                                                        // 102\n  noscript: createDOMFactory('noscript'),                                                                              // 103\n  object: createDOMFactory('object'),                                                                                  // 104\n  ol: createDOMFactory('ol'),                                                                                          // 105\n  optgroup: createDOMFactory('optgroup'),                                                                              // 106\n  option: createDOMFactory('option'),                                                                                  // 107\n  output: createDOMFactory('output'),                                                                                  // 108\n  p: createDOMFactory('p'),                                                                                            // 109\n  param: createDOMFactory('param'),                                                                                    // 110\n  picture: createDOMFactory('picture'),                                                                                // 111\n  pre: createDOMFactory('pre'),                                                                                        // 112\n  progress: createDOMFactory('progress'),                                                                              // 113\n  q: createDOMFactory('q'),                                                                                            // 114\n  rp: createDOMFactory('rp'),                                                                                          // 115\n  rt: createDOMFactory('rt'),                                                                                          // 116\n  ruby: createDOMFactory('ruby'),                                                                                      // 117\n  s: createDOMFactory('s'),                                                                                            // 118\n  samp: createDOMFactory('samp'),                                                                                      // 119\n  script: createDOMFactory('script'),                                                                                  // 120\n  section: createDOMFactory('section'),                                                                                // 121\n  select: createDOMFactory('select'),                                                                                  // 122\n  small: createDOMFactory('small'),                                                                                    // 123\n  source: createDOMFactory('source'),                                                                                  // 124\n  span: createDOMFactory('span'),                                                                                      // 125\n  strong: createDOMFactory('strong'),                                                                                  // 126\n  style: createDOMFactory('style'),                                                                                    // 127\n  sub: createDOMFactory('sub'),                                                                                        // 128\n  summary: createDOMFactory('summary'),                                                                                // 129\n  sup: createDOMFactory('sup'),                                                                                        // 130\n  table: createDOMFactory('table'),                                                                                    // 131\n  tbody: createDOMFactory('tbody'),                                                                                    // 132\n  td: createDOMFactory('td'),                                                                                          // 133\n  textarea: createDOMFactory('textarea'),                                                                              // 134\n  tfoot: createDOMFactory('tfoot'),                                                                                    // 135\n  th: createDOMFactory('th'),                                                                                          // 136\n  thead: createDOMFactory('thead'),                                                                                    // 137\n  time: createDOMFactory('time'),                                                                                      // 138\n  title: createDOMFactory('title'),                                                                                    // 139\n  tr: createDOMFactory('tr'),                                                                                          // 140\n  track: createDOMFactory('track'),                                                                                    // 141\n  u: createDOMFactory('u'),                                                                                            // 142\n  ul: createDOMFactory('ul'),                                                                                          // 143\n  'var': createDOMFactory('var'),                                                                                      // 144\n  video: createDOMFactory('video'),                                                                                    // 145\n  wbr: createDOMFactory('wbr'),                                                                                        // 146\n                                                                                                                       // 147\n  // SVG                                                                                                               // 148\n  circle: createDOMFactory('circle'),                                                                                  // 149\n  clipPath: createDOMFactory('clipPath'),                                                                              // 150\n  defs: createDOMFactory('defs'),                                                                                      // 151\n  ellipse: createDOMFactory('ellipse'),                                                                                // 152\n  g: createDOMFactory('g'),                                                                                            // 153\n  image: createDOMFactory('image'),                                                                                    // 154\n  line: createDOMFactory('line'),                                                                                      // 155\n  linearGradient: createDOMFactory('linearGradient'),                                                                  // 156\n  mask: createDOMFactory('mask'),                                                                                      // 157\n  path: createDOMFactory('path'),                                                                                      // 158\n  pattern: createDOMFactory('pattern'),                                                                                // 159\n  polygon: createDOMFactory('polygon'),                                                                                // 160\n  polyline: createDOMFactory('polyline'),                                                                              // 161\n  radialGradient: createDOMFactory('radialGradient'),                                                                  // 162\n  rect: createDOMFactory('rect'),                                                                                      // 163\n  stop: createDOMFactory('stop'),                                                                                      // 164\n  svg: createDOMFactory('svg'),                                                                                        // 165\n  text: createDOMFactory('text'),                                                                                      // 166\n  tspan: createDOMFactory('tspan')                                                                                     // 167\n};                                                                                                                     // 168\n                                                                                                                       // 169\nmodule.exports = ReactDOMFactories;                                                                                    // 170\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactElementValidator.js\":[\"./ReactCurrentOwner\",\"./ReactComponentTreeHook\",\"./ReactElement\",\"./ReactPropTypeLocations\",\"./checkReactTypeSpec\",\"./canDefineProperty\",\"./getIteratorFn\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactElementValidator.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactElementValidator                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n/**                                                                                                                    // 12\n * ReactElementValidator provides a wrapper around a element factory                                                   // 13\n * which validates the props passed to the element. This is intended to be                                             // 14\n * used only in DEV and could be replaced by a static type checker for languages                                       // 15\n * that support it.                                                                                                    // 16\n */                                                                                                                    // 17\n                                                                                                                       // 18\n'use strict';                                                                                                          // 19\n                                                                                                                       // 20\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 21\nvar ReactComponentTreeHook = require('./ReactComponentTreeHook');                                                      // 22\nvar ReactElement = require('./ReactElement');                                                                          // 23\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');                                                      // 24\n                                                                                                                       // 25\nvar checkReactTypeSpec = require('./checkReactTypeSpec');                                                              // 26\n                                                                                                                       // 27\nvar canDefineProperty = require('./canDefineProperty');                                                                // 28\nvar getIteratorFn = require('./getIteratorFn');                                                                        // 29\nvar warning = require('fbjs/lib/warning');                                                                             // 30\n                                                                                                                       // 31\nfunction getDeclarationErrorAddendum() {                                                                               // 32\n  if (ReactCurrentOwner.current) {                                                                                     // 33\n    var name = ReactCurrentOwner.current.getName();                                                                    // 34\n    if (name) {                                                                                                        // 35\n      return ' Check the render method of `' + name + '`.';                                                            // 36\n    }                                                                                                                  // 37\n  }                                                                                                                    // 38\n  return '';                                                                                                           // 39\n}                                                                                                                      // 40\n                                                                                                                       // 41\n/**                                                                                                                    // 42\n * Warn if there's no key explicitly set on dynamic arrays of children or                                              // 43\n * object keys are not valid. This allows us to keep track of children between                                         // 44\n * updates.                                                                                                            // 45\n */                                                                                                                    // 46\nvar ownerHasKeyUseWarning = {};                                                                                        // 47\n                                                                                                                       // 48\nfunction getCurrentComponentErrorInfo(parentType) {                                                                    // 49\n  var info = getDeclarationErrorAddendum();                                                                            // 50\n                                                                                                                       // 51\n  if (!info) {                                                                                                         // 52\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;          // 53\n    if (parentName) {                                                                                                  // 54\n      info = ' Check the top-level render call using <' + parentName + '>.';                                           // 55\n    }                                                                                                                  // 56\n  }                                                                                                                    // 57\n  return info;                                                                                                         // 58\n}                                                                                                                      // 59\n                                                                                                                       // 60\n/**                                                                                                                    // 61\n * Warn if the element doesn't have an explicit key assigned to it.                                                    // 62\n * This element is in an array. The array could grow and shrink or be                                                  // 63\n * reordered. All children that haven't already been validated are required to                                         // 64\n * have a \"key\" property assigned to it. Error statuses are cached so a warning                                        // 65\n * will only be shown once.                                                                                            // 66\n *                                                                                                                     // 67\n * @internal                                                                                                           // 68\n * @param {ReactElement} element Element that requires a key.                                                          // 69\n * @param {*} parentType element's parent's type.                                                                      // 70\n */                                                                                                                    // 71\nfunction validateExplicitKey(element, parentType) {                                                                    // 72\n  if (!element._store || element._store.validated || element.key != null) {                                            // 73\n    return;                                                                                                            // 74\n  }                                                                                                                    // 75\n  element._store.validated = true;                                                                                     // 76\n                                                                                                                       // 77\n  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});                            // 78\n                                                                                                                       // 79\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);                                            // 80\n  if (memoizer[currentComponentErrorInfo]) {                                                                           // 81\n    return;                                                                                                            // 82\n  }                                                                                                                    // 83\n  memoizer[currentComponentErrorInfo] = true;                                                                          // 84\n                                                                                                                       // 85\n  // Usually the current owner is the offender, but if it accepts children as a                                        // 86\n  // property, it may be the creator of the child that's responsible for                                               // 87\n  // assigning it a key.                                                                                               // 88\n  var childOwner = '';                                                                                                 // 89\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {                                     // 90\n    // Give the component that originally created this child.                                                          // 91\n    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';                                      // 92\n  }                                                                                                                    // 93\n                                                                                                                       // 94\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;\n}                                                                                                                      // 96\n                                                                                                                       // 97\n/**                                                                                                                    // 98\n * Ensure that every element either is passed in a static location, in an                                              // 99\n * array with an explicit keys property defined, or in an object literal                                               // 100\n * with valid key property.                                                                                            // 101\n *                                                                                                                     // 102\n * @internal                                                                                                           // 103\n * @param {ReactNode} node Statically passed child of any type.                                                        // 104\n * @param {*} parentType node's parent's type.                                                                         // 105\n */                                                                                                                    // 106\nfunction validateChildKeys(node, parentType) {                                                                         // 107\n  if (typeof node !== 'object') {                                                                                      // 108\n    return;                                                                                                            // 109\n  }                                                                                                                    // 110\n  if (Array.isArray(node)) {                                                                                           // 111\n    for (var i = 0; i < node.length; i++) {                                                                            // 112\n      var child = node[i];                                                                                             // 113\n      if (ReactElement.isValidElement(child)) {                                                                        // 114\n        validateExplicitKey(child, parentType);                                                                        // 115\n      }                                                                                                                // 116\n    }                                                                                                                  // 117\n  } else if (ReactElement.isValidElement(node)) {                                                                      // 118\n    // This element was passed in a valid location.                                                                    // 119\n    if (node._store) {                                                                                                 // 120\n      node._store.validated = true;                                                                                    // 121\n    }                                                                                                                  // 122\n  } else if (node) {                                                                                                   // 123\n    var iteratorFn = getIteratorFn(node);                                                                              // 124\n    // Entry iterators provide implicit keys.                                                                          // 125\n    if (iteratorFn) {                                                                                                  // 126\n      if (iteratorFn !== node.entries) {                                                                               // 127\n        var iterator = iteratorFn.call(node);                                                                          // 128\n        var step;                                                                                                      // 129\n        while (!(step = iterator.next()).done) {                                                                       // 130\n          if (ReactElement.isValidElement(step.value)) {                                                               // 131\n            validateExplicitKey(step.value, parentType);                                                               // 132\n          }                                                                                                            // 133\n        }                                                                                                              // 134\n      }                                                                                                                // 135\n    }                                                                                                                  // 136\n  }                                                                                                                    // 137\n}                                                                                                                      // 138\n                                                                                                                       // 139\n/**                                                                                                                    // 140\n * Given an element, validate that its props follow the propTypes definition,                                          // 141\n * provided by the type.                                                                                               // 142\n *                                                                                                                     // 143\n * @param {ReactElement} element                                                                                       // 144\n */                                                                                                                    // 145\nfunction validatePropTypes(element) {                                                                                  // 146\n  var componentClass = element.type;                                                                                   // 147\n  if (typeof componentClass !== 'function') {                                                                          // 148\n    return;                                                                                                            // 149\n  }                                                                                                                    // 150\n  var name = componentClass.displayName || componentClass.name;                                                        // 151\n  if (componentClass.propTypes) {                                                                                      // 152\n    checkReactTypeSpec(componentClass.propTypes, element.props, ReactPropTypeLocations.prop, name, element, null);     // 153\n  }                                                                                                                    // 154\n  if (typeof componentClass.getDefaultProps === 'function') {                                                          // 155\n    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;\n  }                                                                                                                    // 157\n}                                                                                                                      // 158\n                                                                                                                       // 159\nvar ReactElementValidator = {                                                                                          // 160\n                                                                                                                       // 161\n  createElement: function (type, props, children) {                                                                    // 162\n    var validType = typeof type === 'string' || typeof type === 'function';                                            // 163\n    // We warn in this case but don't throw. We expect the element creation to                                         // 164\n    // succeed and there will likely be errors in render.                                                              // 165\n    if (!validType) {                                                                                                  // 166\n      process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;\n    }                                                                                                                  // 168\n                                                                                                                       // 169\n    var element = ReactElement.createElement.apply(this, arguments);                                                   // 170\n                                                                                                                       // 171\n    // The result can be nullish if a mock or a custom function is used.                                               // 172\n    // TODO: Drop this when these are no longer allowed as the type argument.                                          // 173\n    if (element == null) {                                                                                             // 174\n      return element;                                                                                                  // 175\n    }                                                                                                                  // 176\n                                                                                                                       // 177\n    // Skip key warning if the type isn't valid since our key validation logic                                         // 178\n    // doesn't expect a non-string/function type and can throw confusing errors.                                       // 179\n    // We don't want exception behavior to differ between dev and prod.                                                // 180\n    // (Rendering will throw with a helpful message and as soon as the type is                                         // 181\n    // fixed, the key warnings will appear.)                                                                           // 182\n    if (validType) {                                                                                                   // 183\n      for (var i = 2; i < arguments.length; i++) {                                                                     // 184\n        validateChildKeys(arguments[i], type);                                                                         // 185\n      }                                                                                                                // 186\n    }                                                                                                                  // 187\n                                                                                                                       // 188\n    validatePropTypes(element);                                                                                        // 189\n                                                                                                                       // 190\n    return element;                                                                                                    // 191\n  },                                                                                                                   // 192\n                                                                                                                       // 193\n  createFactory: function (type) {                                                                                     // 194\n    var validatedFactory = ReactElementValidator.createElement.bind(null, type);                                       // 195\n    // Legacy hook TODO: Warn if this is accessed                                                                      // 196\n    validatedFactory.type = type;                                                                                      // 197\n                                                                                                                       // 198\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 199\n      if (canDefineProperty) {                                                                                         // 200\n        Object.defineProperty(validatedFactory, 'type', {                                                              // 201\n          enumerable: false,                                                                                           // 202\n          get: function () {                                                                                           // 203\n            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;\n            Object.defineProperty(this, 'type', {                                                                      // 205\n              value: type                                                                                              // 206\n            });                                                                                                        // 207\n            return type;                                                                                               // 208\n          }                                                                                                            // 209\n        });                                                                                                            // 210\n      }                                                                                                                // 211\n    }                                                                                                                  // 212\n                                                                                                                       // 213\n    return validatedFactory;                                                                                           // 214\n  },                                                                                                                   // 215\n                                                                                                                       // 216\n  cloneElement: function (element, props, children) {                                                                  // 217\n    var newElement = ReactElement.cloneElement.apply(this, arguments);                                                 // 218\n    for (var i = 2; i < arguments.length; i++) {                                                                       // 219\n      validateChildKeys(arguments[i], newElement.type);                                                                // 220\n    }                                                                                                                  // 221\n    validatePropTypes(newElement);                                                                                     // 222\n    return newElement;                                                                                                 // 223\n  }                                                                                                                    // 224\n                                                                                                                       // 225\n};                                                                                                                     // 226\n                                                                                                                       // 227\nmodule.exports = ReactElementValidator;                                                                                // 228\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactComponentTreeHook.js\":[\"./reactProdInvariant\",\"./ReactCurrentOwner\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactComponentTreeHook.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2016-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactComponentTreeHook                                                                              // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 16\n                                                                                                                       // 17\nvar invariant = require('fbjs/lib/invariant');                                                                         // 18\nvar warning = require('fbjs/lib/warning');                                                                             // 19\n                                                                                                                       // 20\nfunction isNative(fn) {                                                                                                // 21\n  // Based on isNative() from Lodash                                                                                   // 22\n  var funcToString = Function.prototype.toString;                                                                      // 23\n  var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                // 24\n  var reIsNative = RegExp('^' + funcToString                                                                           // 25\n  // Take an example native function source for comparison                                                             // 26\n  .call(hasOwnProperty)                                                                                                // 27\n  // Strip regex characters so we can use it for regex                                                                 // 28\n  .replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')                                                                              // 29\n  // Remove hasOwnProperty from the template to make it generic                                                        // 30\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');                                  // 31\n  try {                                                                                                                // 32\n    var source = funcToString.call(fn);                                                                                // 33\n    return reIsNative.test(source);                                                                                    // 34\n  } catch (err) {                                                                                                      // 35\n    return false;                                                                                                      // 36\n  }                                                                                                                    // 37\n}                                                                                                                      // 38\n                                                                                                                       // 39\nvar canUseCollections =                                                                                                // 40\n// Array.from                                                                                                          // 41\ntypeof Array.from === 'function' &&                                                                                    // 42\n// Map                                                                                                                 // 43\ntypeof Map === 'function' && isNative(Map) &&                                                                          // 44\n// Map.prototype.keys                                                                                                  // 45\nMap.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&                   // 46\n// Set                                                                                                                 // 47\ntypeof Set === 'function' && isNative(Set) &&                                                                          // 48\n// Set.prototype.keys                                                                                                  // 49\nSet.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);                     // 50\n                                                                                                                       // 51\nvar itemMap;                                                                                                           // 52\nvar rootIDSet;                                                                                                         // 53\n                                                                                                                       // 54\nvar itemByKey;                                                                                                         // 55\nvar rootByKey;                                                                                                         // 56\n                                                                                                                       // 57\nif (canUseCollections) {                                                                                               // 58\n  itemMap = new Map();                                                                                                 // 59\n  rootIDSet = new Set();                                                                                               // 60\n} else {                                                                                                               // 61\n  itemByKey = {};                                                                                                      // 62\n  rootByKey = {};                                                                                                      // 63\n}                                                                                                                      // 64\n                                                                                                                       // 65\nvar unmountedIDs = [];                                                                                                 // 66\n                                                                                                                       // 67\n// Use non-numeric keys to prevent V8 performance issues:                                                              // 68\n// https://github.com/facebook/react/pull/7232                                                                         // 69\nfunction getKeyFromID(id) {                                                                                            // 70\n  return '.' + id;                                                                                                     // 71\n}                                                                                                                      // 72\nfunction getIDFromKey(key) {                                                                                           // 73\n  return parseInt(key.substr(1), 10);                                                                                  // 74\n}                                                                                                                      // 75\n                                                                                                                       // 76\nfunction get(id) {                                                                                                     // 77\n  if (canUseCollections) {                                                                                             // 78\n    return itemMap.get(id);                                                                                            // 79\n  } else {                                                                                                             // 80\n    var key = getKeyFromID(id);                                                                                        // 81\n    return itemByKey[key];                                                                                             // 82\n  }                                                                                                                    // 83\n}                                                                                                                      // 84\n                                                                                                                       // 85\nfunction remove(id) {                                                                                                  // 86\n  if (canUseCollections) {                                                                                             // 87\n    itemMap['delete'](id);                                                                                             // 88\n  } else {                                                                                                             // 89\n    var key = getKeyFromID(id);                                                                                        // 90\n    delete itemByKey[key];                                                                                             // 91\n  }                                                                                                                    // 92\n}                                                                                                                      // 93\n                                                                                                                       // 94\nfunction create(id, element, parentID) {                                                                               // 95\n  var item = {                                                                                                         // 96\n    element: element,                                                                                                  // 97\n    parentID: parentID,                                                                                                // 98\n    text: null,                                                                                                        // 99\n    childIDs: [],                                                                                                      // 100\n    isMounted: false,                                                                                                  // 101\n    updateCount: 0                                                                                                     // 102\n  };                                                                                                                   // 103\n                                                                                                                       // 104\n  if (canUseCollections) {                                                                                             // 105\n    itemMap.set(id, item);                                                                                             // 106\n  } else {                                                                                                             // 107\n    var key = getKeyFromID(id);                                                                                        // 108\n    itemByKey[key] = item;                                                                                             // 109\n  }                                                                                                                    // 110\n}                                                                                                                      // 111\n                                                                                                                       // 112\nfunction addRoot(id) {                                                                                                 // 113\n  if (canUseCollections) {                                                                                             // 114\n    rootIDSet.add(id);                                                                                                 // 115\n  } else {                                                                                                             // 116\n    var key = getKeyFromID(id);                                                                                        // 117\n    rootByKey[key] = true;                                                                                             // 118\n  }                                                                                                                    // 119\n}                                                                                                                      // 120\n                                                                                                                       // 121\nfunction removeRoot(id) {                                                                                              // 122\n  if (canUseCollections) {                                                                                             // 123\n    rootIDSet['delete'](id);                                                                                           // 124\n  } else {                                                                                                             // 125\n    var key = getKeyFromID(id);                                                                                        // 126\n    delete rootByKey[key];                                                                                             // 127\n  }                                                                                                                    // 128\n}                                                                                                                      // 129\n                                                                                                                       // 130\nfunction getRegisteredIDs() {                                                                                          // 131\n  if (canUseCollections) {                                                                                             // 132\n    return Array.from(itemMap.keys());                                                                                 // 133\n  } else {                                                                                                             // 134\n    return Object.keys(itemByKey).map(getIDFromKey);                                                                   // 135\n  }                                                                                                                    // 136\n}                                                                                                                      // 137\n                                                                                                                       // 138\nfunction getRootIDs() {                                                                                                // 139\n  if (canUseCollections) {                                                                                             // 140\n    return Array.from(rootIDSet.keys());                                                                               // 141\n  } else {                                                                                                             // 142\n    return Object.keys(rootByKey).map(getIDFromKey);                                                                   // 143\n  }                                                                                                                    // 144\n}                                                                                                                      // 145\n                                                                                                                       // 146\nfunction purgeDeep(id) {                                                                                               // 147\n  var item = get(id);                                                                                                  // 148\n  if (item) {                                                                                                          // 149\n    var childIDs = item.childIDs;                                                                                      // 150\n                                                                                                                       // 151\n    remove(id);                                                                                                        // 152\n    childIDs.forEach(purgeDeep);                                                                                       // 153\n  }                                                                                                                    // 154\n}                                                                                                                      // 155\n                                                                                                                       // 156\nfunction describeComponentFrame(name, source, ownerName) {                                                             // 157\n  return '\\n    in ' + name + (source ? ' (at ' + source.fileName.replace(/^.*[\\\\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');\n}                                                                                                                      // 159\n                                                                                                                       // 160\nfunction getDisplayName(element) {                                                                                     // 161\n  if (element == null) {                                                                                               // 162\n    return '#empty';                                                                                                   // 163\n  } else if (typeof element === 'string' || typeof element === 'number') {                                             // 164\n    return '#text';                                                                                                    // 165\n  } else if (typeof element.type === 'string') {                                                                       // 166\n    return element.type;                                                                                               // 167\n  } else {                                                                                                             // 168\n    return element.type.displayName || element.type.name || 'Unknown';                                                 // 169\n  }                                                                                                                    // 170\n}                                                                                                                      // 171\n                                                                                                                       // 172\nfunction describeID(id) {                                                                                              // 173\n  var name = ReactComponentTreeHook.getDisplayName(id);                                                                // 174\n  var element = ReactComponentTreeHook.getElement(id);                                                                 // 175\n  var ownerID = ReactComponentTreeHook.getOwnerID(id);                                                                 // 176\n  var ownerName;                                                                                                       // 177\n  if (ownerID) {                                                                                                       // 178\n    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);                                                        // 179\n  }                                                                                                                    // 180\n  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;\n  return describeComponentFrame(name, element && element._source, ownerName);                                          // 182\n}                                                                                                                      // 183\n                                                                                                                       // 184\nvar ReactComponentTreeHook = {                                                                                         // 185\n  onSetChildren: function (id, nextChildIDs) {                                                                         // 186\n    var item = get(id);                                                                                                // 187\n    item.childIDs = nextChildIDs;                                                                                      // 188\n                                                                                                                       // 189\n    for (var i = 0; i < nextChildIDs.length; i++) {                                                                    // 190\n      var nextChildID = nextChildIDs[i];                                                                               // 191\n      var nextChild = get(nextChildID);                                                                                // 192\n      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;\n      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;\n      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;\n      if (nextChild.parentID == null) {                                                                                // 196\n        nextChild.parentID = id;                                                                                       // 197\n        // TODO: This shouldn't be necessary but mounting a new root during in                                         // 198\n        // componentWillMount currently causes not-yet-mounted components to                                           // 199\n        // be purged from our tree data so their parent ID is missing.                                                 // 200\n      }                                                                                                                // 201\n      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;\n    }                                                                                                                  // 203\n  },                                                                                                                   // 204\n  onBeforeMountComponent: function (id, element, parentID) {                                                           // 205\n    create(id, element, parentID);                                                                                     // 206\n  },                                                                                                                   // 207\n  onBeforeUpdateComponent: function (id, element) {                                                                    // 208\n    var item = get(id);                                                                                                // 209\n    if (!item || !item.isMounted) {                                                                                    // 210\n      // We may end up here as a result of setState() in componentWillUnmount().                                       // 211\n      // In this case, ignore the element.                                                                             // 212\n      return;                                                                                                          // 213\n    }                                                                                                                  // 214\n    item.element = element;                                                                                            // 215\n  },                                                                                                                   // 216\n  onMountComponent: function (id) {                                                                                    // 217\n    var item = get(id);                                                                                                // 218\n    item.isMounted = true;                                                                                             // 219\n    var isRoot = item.parentID === 0;                                                                                  // 220\n    if (isRoot) {                                                                                                      // 221\n      addRoot(id);                                                                                                     // 222\n    }                                                                                                                  // 223\n  },                                                                                                                   // 224\n  onUpdateComponent: function (id) {                                                                                   // 225\n    var item = get(id);                                                                                                // 226\n    if (!item || !item.isMounted) {                                                                                    // 227\n      // We may end up here as a result of setState() in componentWillUnmount().                                       // 228\n      // In this case, ignore the element.                                                                             // 229\n      return;                                                                                                          // 230\n    }                                                                                                                  // 231\n    item.updateCount++;                                                                                                // 232\n  },                                                                                                                   // 233\n  onUnmountComponent: function (id) {                                                                                  // 234\n    var item = get(id);                                                                                                // 235\n    if (item) {                                                                                                        // 236\n      // We need to check if it exists.                                                                                // 237\n      // `item` might not exist if it is inside an error boundary, and a sibling                                       // 238\n      // error boundary child threw while mounting. Then this instance never                                           // 239\n      // got a chance to mount, but it still gets an unmounting event during                                           // 240\n      // the error boundary cleanup.                                                                                   // 241\n      item.isMounted = false;                                                                                          // 242\n      var isRoot = item.parentID === 0;                                                                                // 243\n      if (isRoot) {                                                                                                    // 244\n        removeRoot(id);                                                                                                // 245\n      }                                                                                                                // 246\n    }                                                                                                                  // 247\n    unmountedIDs.push(id);                                                                                             // 248\n  },                                                                                                                   // 249\n  purgeUnmountedComponents: function () {                                                                              // 250\n    if (ReactComponentTreeHook._preventPurging) {                                                                      // 251\n      // Should only be used for testing.                                                                              // 252\n      return;                                                                                                          // 253\n    }                                                                                                                  // 254\n                                                                                                                       // 255\n    for (var i = 0; i < unmountedIDs.length; i++) {                                                                    // 256\n      var id = unmountedIDs[i];                                                                                        // 257\n      purgeDeep(id);                                                                                                   // 258\n    }                                                                                                                  // 259\n    unmountedIDs.length = 0;                                                                                           // 260\n  },                                                                                                                   // 261\n  isMounted: function (id) {                                                                                           // 262\n    var item = get(id);                                                                                                // 263\n    return item ? item.isMounted : false;                                                                              // 264\n  },                                                                                                                   // 265\n  getCurrentStackAddendum: function (topElement) {                                                                     // 266\n    var info = '';                                                                                                     // 267\n    if (topElement) {                                                                                                  // 268\n      var type = topElement.type;                                                                                      // 269\n      var name = typeof type === 'function' ? type.displayName || type.name : type;                                    // 270\n      var owner = topElement._owner;                                                                                   // 271\n      info += describeComponentFrame(name || 'Unknown', topElement._source, owner && owner.getName());                 // 272\n    }                                                                                                                  // 273\n                                                                                                                       // 274\n    var currentOwner = ReactCurrentOwner.current;                                                                      // 275\n    var id = currentOwner && currentOwner._debugID;                                                                    // 276\n                                                                                                                       // 277\n    info += ReactComponentTreeHook.getStackAddendumByID(id);                                                           // 278\n    return info;                                                                                                       // 279\n  },                                                                                                                   // 280\n  getStackAddendumByID: function (id) {                                                                                // 281\n    var info = '';                                                                                                     // 282\n    while (id) {                                                                                                       // 283\n      info += describeID(id);                                                                                          // 284\n      id = ReactComponentTreeHook.getParentID(id);                                                                     // 285\n    }                                                                                                                  // 286\n    return info;                                                                                                       // 287\n  },                                                                                                                   // 288\n  getChildIDs: function (id) {                                                                                         // 289\n    var item = get(id);                                                                                                // 290\n    return item ? item.childIDs : [];                                                                                  // 291\n  },                                                                                                                   // 292\n  getDisplayName: function (id) {                                                                                      // 293\n    var element = ReactComponentTreeHook.getElement(id);                                                               // 294\n    if (!element) {                                                                                                    // 295\n      return null;                                                                                                     // 296\n    }                                                                                                                  // 297\n    return getDisplayName(element);                                                                                    // 298\n  },                                                                                                                   // 299\n  getElement: function (id) {                                                                                          // 300\n    var item = get(id);                                                                                                // 301\n    return item ? item.element : null;                                                                                 // 302\n  },                                                                                                                   // 303\n  getOwnerID: function (id) {                                                                                          // 304\n    var element = ReactComponentTreeHook.getElement(id);                                                               // 305\n    if (!element || !element._owner) {                                                                                 // 306\n      return null;                                                                                                     // 307\n    }                                                                                                                  // 308\n    return element._owner._debugID;                                                                                    // 309\n  },                                                                                                                   // 310\n  getParentID: function (id) {                                                                                         // 311\n    var item = get(id);                                                                                                // 312\n    return item ? item.parentID : null;                                                                                // 313\n  },                                                                                                                   // 314\n  getSource: function (id) {                                                                                           // 315\n    var item = get(id);                                                                                                // 316\n    var element = item ? item.element : null;                                                                          // 317\n    var source = element != null ? element._source : null;                                                             // 318\n    return source;                                                                                                     // 319\n  },                                                                                                                   // 320\n  getText: function (id) {                                                                                             // 321\n    var element = ReactComponentTreeHook.getElement(id);                                                               // 322\n    if (typeof element === 'string') {                                                                                 // 323\n      return element;                                                                                                  // 324\n    } else if (typeof element === 'number') {                                                                          // 325\n      return '' + element;                                                                                             // 326\n    } else {                                                                                                           // 327\n      return null;                                                                                                     // 328\n    }                                                                                                                  // 329\n  },                                                                                                                   // 330\n  getUpdateCount: function (id) {                                                                                      // 331\n    var item = get(id);                                                                                                // 332\n    return item ? item.updateCount : 0;                                                                                // 333\n  },                                                                                                                   // 334\n                                                                                                                       // 335\n                                                                                                                       // 336\n  getRegisteredIDs: getRegisteredIDs,                                                                                  // 337\n                                                                                                                       // 338\n  getRootIDs: getRootIDs                                                                                               // 339\n};                                                                                                                     // 340\n                                                                                                                       // 341\nmodule.exports = ReactComponentTreeHook;                                                                               // 342\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"checkReactTypeSpec.js\":[\"./reactProdInvariant\",\"./ReactPropTypeLocationNames\",\"./ReactPropTypesSecret\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",\"./ReactComponentTreeHook\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/checkReactTypeSpec.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule checkReactTypeSpec                                                                                  // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');                                              // 16\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');                                                          // 17\n                                                                                                                       // 18\nvar invariant = require('fbjs/lib/invariant');                                                                         // 19\nvar warning = require('fbjs/lib/warning');                                                                             // 20\n                                                                                                                       // 21\nvar ReactComponentTreeHook;                                                                                            // 22\n                                                                                                                       // 23\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {                                // 24\n  // Temporary hack.                                                                                                   // 25\n  // Inline requires don't work well with Jest:                                                                        // 26\n  // https://github.com/facebook/react/issues/7240                                                                     // 27\n  // Remove the inline requires when we don't need them anymore:                                                       // 28\n  // https://github.com/facebook/react/pull/7178                                                                       // 29\n  ReactComponentTreeHook = require('./ReactComponentTreeHook');                                                        // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nvar loggedTypeFailures = {};                                                                                           // 33\n                                                                                                                       // 34\n/**                                                                                                                    // 35\n * Assert that the values match with the type specs.                                                                   // 36\n * Error messages are memorized and will only be shown once.                                                           // 37\n *                                                                                                                     // 38\n * @param {object} typeSpecs Map of name to a ReactPropType                                                            // 39\n * @param {object} values Runtime values that need to be type-checked                                                  // 40\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"                                                    // 41\n * @param {string} componentName Name of the component for error messages.                                             // 42\n * @param {?object} element The React element that is being type-checked                                               // 43\n * @param {?number} debugID The React component instance that is being type-checked                                    // 44\n * @private                                                                                                            // 45\n */                                                                                                                    // 46\nfunction checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {                            // 47\n  for (var typeSpecName in typeSpecs) {                                                                                // 48\n    if (typeSpecs.hasOwnProperty(typeSpecName)) {                                                                      // 49\n      var error;                                                                                                       // 50\n      // Prop type validation may throw. In case they do, we don't want to                                             // 51\n      // fail the render phase where it didn't fail before. So we log it.                                              // 52\n      // After these have been cleaned up, we'll let them throw.                                                       // 53\n      try {                                                                                                            // 54\n        // This is intentionally an invariant that gets caught. It's the same                                          // 55\n        // behavior as without this statement except with a better message.                                            // 56\n        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;\n        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);    // 58\n      } catch (ex) {                                                                                                   // 59\n        error = ex;                                                                                                    // 60\n      }                                                                                                                // 61\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {                                          // 63\n        // Only monitor this failure once because there tends to be a lot of the                                       // 64\n        // same error.                                                                                                 // 65\n        loggedTypeFailures[error.message] = true;                                                                      // 66\n                                                                                                                       // 67\n        var componentStackInfo = '';                                                                                   // 68\n                                                                                                                       // 69\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 70\n          if (!ReactComponentTreeHook) {                                                                               // 71\n            ReactComponentTreeHook = require('./ReactComponentTreeHook');                                              // 72\n          }                                                                                                            // 73\n          if (debugID !== null) {                                                                                      // 74\n            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);                                 // 75\n          } else if (element !== null) {                                                                               // 76\n            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);                              // 77\n          }                                                                                                            // 78\n        }                                                                                                              // 79\n                                                                                                                       // 80\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;\n      }                                                                                                                // 82\n    }                                                                                                                  // 83\n  }                                                                                                                    // 84\n}                                                                                                                      // 85\n                                                                                                                       // 86\nmodule.exports = checkReactTypeSpec;                                                                                   // 87\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactPropTypesSecret.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactPropTypesSecret.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactPropTypesSecret                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';                                             // 14\n                                                                                                                       // 15\nmodule.exports = ReactPropTypesSecret;                                                                                 // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactPropTypes.js\":[\"./ReactElement\",\"./ReactPropTypeLocationNames\",\"./ReactPropTypesSecret\",\"fbjs/lib/emptyFunction\",\"./getIteratorFn\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactPropTypes.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactPropTypes                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactElement = require('./ReactElement');                                                                          // 14\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');                                              // 15\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');                                                          // 16\n                                                                                                                       // 17\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 18\nvar getIteratorFn = require('./getIteratorFn');                                                                        // 19\nvar warning = require('fbjs/lib/warning');                                                                             // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Collection of methods that allow declaration and validation of props that are                                       // 23\n * supplied to React components. Example usage:                                                                        // 24\n *                                                                                                                     // 25\n *   var Props = require('ReactPropTypes');                                                                            // 26\n *   var MyArticle = React.createClass({                                                                               // 27\n *     propTypes: {                                                                                                    // 28\n *       // An optional string prop named \"description\".                                                               // 29\n *       description: Props.string,                                                                                    // 30\n *                                                                                                                     // 31\n *       // A required enum prop named \"category\".                                                                     // 32\n *       category: Props.oneOf(['News','Photos']).isRequired,                                                          // 33\n *                                                                                                                     // 34\n *       // A prop named \"dialog\" that requires an instance of Dialog.                                                 // 35\n *       dialog: Props.instanceOf(Dialog).isRequired                                                                   // 36\n *     },                                                                                                              // 37\n *     render: function() { ... }                                                                                      // 38\n *   });                                                                                                               // 39\n *                                                                                                                     // 40\n * A more formal specification of how these methods are used:                                                          // 41\n *                                                                                                                     // 42\n *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)                                         // 43\n *   decl := ReactPropTypes.{type}(.isRequired)?                                                                       // 44\n *                                                                                                                     // 45\n * Each and every declaration produces a function with the same signature. This                                        // 46\n * allows the creation of custom validation functions. For example:                                                    // 47\n *                                                                                                                     // 48\n *  var MyLink = React.createClass({                                                                                   // 49\n *    propTypes: {                                                                                                     // 50\n *      // An optional string or URI prop named \"href\".                                                                // 51\n *      href: function(props, propName, componentName) {                                                               // 52\n *        var propValue = props[propName];                                                                             // 53\n *        if (propValue != null && typeof propValue !== 'string' &&                                                    // 54\n *            !(propValue instanceof URI)) {                                                                           // 55\n *          return new Error(                                                                                          // 56\n *            'Expected a string or an URI for ' + propName + ' in ' +                                                 // 57\n *            componentName                                                                                            // 58\n *          );                                                                                                         // 59\n *        }                                                                                                            // 60\n *      }                                                                                                              // 61\n *    },                                                                                                               // 62\n *    render: function() {...}                                                                                         // 63\n *  });                                                                                                                // 64\n *                                                                                                                     // 65\n * @internal                                                                                                           // 66\n */                                                                                                                    // 67\n                                                                                                                       // 68\nvar ANONYMOUS = '<<anonymous>>';                                                                                       // 69\n                                                                                                                       // 70\nvar ReactPropTypes = {                                                                                                 // 71\n  array: createPrimitiveTypeChecker('array'),                                                                          // 72\n  bool: createPrimitiveTypeChecker('boolean'),                                                                         // 73\n  func: createPrimitiveTypeChecker('function'),                                                                        // 74\n  number: createPrimitiveTypeChecker('number'),                                                                        // 75\n  object: createPrimitiveTypeChecker('object'),                                                                        // 76\n  string: createPrimitiveTypeChecker('string'),                                                                        // 77\n  symbol: createPrimitiveTypeChecker('symbol'),                                                                        // 78\n                                                                                                                       // 79\n  any: createAnyTypeChecker(),                                                                                         // 80\n  arrayOf: createArrayOfTypeChecker,                                                                                   // 81\n  element: createElementTypeChecker(),                                                                                 // 82\n  instanceOf: createInstanceTypeChecker,                                                                               // 83\n  node: createNodeChecker(),                                                                                           // 84\n  objectOf: createObjectOfTypeChecker,                                                                                 // 85\n  oneOf: createEnumTypeChecker,                                                                                        // 86\n  oneOfType: createUnionTypeChecker,                                                                                   // 87\n  shape: createShapeTypeChecker                                                                                        // 88\n};                                                                                                                     // 89\n                                                                                                                       // 90\n/**                                                                                                                    // 91\n * inlined Object.is polyfill to avoid requiring consumers ship their own                                              // 92\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is                          // 93\n */                                                                                                                    // 94\n/*eslint-disable no-self-compare*/                                                                                     // 95\nfunction is(x, y) {                                                                                                    // 96\n  // SameValue algorithm                                                                                               // 97\n  if (x === y) {                                                                                                       // 98\n    // Steps 1-5, 7-10                                                                                                 // 99\n    // Steps 6.b-6.e: +0 != -0                                                                                         // 100\n    return x !== 0 || 1 / x === 1 / y;                                                                                 // 101\n  } else {                                                                                                             // 102\n    // Step 6.a: NaN == NaN                                                                                            // 103\n    return x !== x && y !== y;                                                                                         // 104\n  }                                                                                                                    // 105\n}                                                                                                                      // 106\n/*eslint-enable no-self-compare*/                                                                                      // 107\n                                                                                                                       // 108\n/**                                                                                                                    // 109\n * We use an Error-like object for backward compatibility as people may call                                           // 110\n * PropTypes directly and inspect their output. However we don't use real                                              // 111\n * Errors anymore. We don't inspect their stack anyway, and creating them                                              // 112\n * is prohibitively expensive if they are created too often, such as what                                              // 113\n * happens in oneOfType() for any type before the one that matched.                                                    // 114\n */                                                                                                                    // 115\nfunction PropTypeError(message) {                                                                                      // 116\n  this.message = message;                                                                                              // 117\n  this.stack = '';                                                                                                     // 118\n}                                                                                                                      // 119\n// Make `instanceof Error` still work for returned errors.                                                             // 120\nPropTypeError.prototype = Error.prototype;                                                                             // 121\n                                                                                                                       // 122\nfunction createChainableTypeChecker(validate) {                                                                        // 123\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 124\n    var manualPropTypeCallCache = {};                                                                                  // 125\n  }                                                                                                                    // 126\n  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {                     // 127\n    componentName = componentName || ANONYMOUS;                                                                        // 128\n    propFullName = propFullName || propName;                                                                           // 129\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 130\n      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {                                         // 131\n        var cacheKey = componentName + ':' + propName;                                                                 // 132\n        if (!manualPropTypeCallCache[cacheKey]) {                                                                      // 133\n          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in the next major version. You may be ' + 'seeing this warning due to a third-party PropTypes library. ' + 'See https://fb.me/react-warning-dont-call-proptypes for details.', propFullName, componentName) : void 0;\n          manualPropTypeCallCache[cacheKey] = true;                                                                    // 135\n        }                                                                                                              // 136\n      }                                                                                                                // 137\n    }                                                                                                                  // 138\n    if (props[propName] == null) {                                                                                     // 139\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 140\n      if (isRequired) {                                                                                                // 141\n        return new PropTypeError('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));\n      }                                                                                                                // 143\n      return null;                                                                                                     // 144\n    } else {                                                                                                           // 145\n      return validate(props, propName, componentName, location, propFullName);                                         // 146\n    }                                                                                                                  // 147\n  }                                                                                                                    // 148\n                                                                                                                       // 149\n  var chainedCheckType = checkType.bind(null, false);                                                                  // 150\n  chainedCheckType.isRequired = checkType.bind(null, true);                                                            // 151\n                                                                                                                       // 152\n  return chainedCheckType;                                                                                             // 153\n}                                                                                                                      // 154\n                                                                                                                       // 155\nfunction createPrimitiveTypeChecker(expectedType) {                                                                    // 156\n  function validate(props, propName, componentName, location, propFullName, secret) {                                  // 157\n    var propValue = props[propName];                                                                                   // 158\n    var propType = getPropType(propValue);                                                                             // 159\n    if (propType !== expectedType) {                                                                                   // 160\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 161\n      // `propValue` being instance of, say, date/regexp, pass the 'object'                                            // 162\n      // check, but we can offer a more precise error message here rather than                                         // 163\n      // 'of type `object`'.                                                                                           // 164\n      var preciseType = getPreciseType(propValue);                                                                     // 165\n                                                                                                                       // 166\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n    }                                                                                                                  // 168\n    return null;                                                                                                       // 169\n  }                                                                                                                    // 170\n  return createChainableTypeChecker(validate);                                                                         // 171\n}                                                                                                                      // 172\n                                                                                                                       // 173\nfunction createAnyTypeChecker() {                                                                                      // 174\n  return createChainableTypeChecker(emptyFunction.thatReturns(null));                                                  // 175\n}                                                                                                                      // 176\n                                                                                                                       // 177\nfunction createArrayOfTypeChecker(typeChecker) {                                                                       // 178\n  function validate(props, propName, componentName, location, propFullName) {                                          // 179\n    if (typeof typeChecker !== 'function') {                                                                           // 180\n      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n    }                                                                                                                  // 182\n    var propValue = props[propName];                                                                                   // 183\n    if (!Array.isArray(propValue)) {                                                                                   // 184\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 185\n      var propType = getPropType(propValue);                                                                           // 186\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n    }                                                                                                                  // 188\n    for (var i = 0; i < propValue.length; i++) {                                                                       // 189\n      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n      if (error instanceof Error) {                                                                                    // 191\n        return error;                                                                                                  // 192\n      }                                                                                                                // 193\n    }                                                                                                                  // 194\n    return null;                                                                                                       // 195\n  }                                                                                                                    // 196\n  return createChainableTypeChecker(validate);                                                                         // 197\n}                                                                                                                      // 198\n                                                                                                                       // 199\nfunction createElementTypeChecker() {                                                                                  // 200\n  function validate(props, propName, componentName, location, propFullName) {                                          // 201\n    var propValue = props[propName];                                                                                   // 202\n    if (!ReactElement.isValidElement(propValue)) {                                                                     // 203\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 204\n      var propType = getPropType(propValue);                                                                           // 205\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n    }                                                                                                                  // 207\n    return null;                                                                                                       // 208\n  }                                                                                                                    // 209\n  return createChainableTypeChecker(validate);                                                                         // 210\n}                                                                                                                      // 211\n                                                                                                                       // 212\nfunction createInstanceTypeChecker(expectedClass) {                                                                    // 213\n  function validate(props, propName, componentName, location, propFullName) {                                          // 214\n    if (!(props[propName] instanceof expectedClass)) {                                                                 // 215\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 216\n      var expectedClassName = expectedClass.name || ANONYMOUS;                                                         // 217\n      var actualClassName = getClassName(props[propName]);                                                             // 218\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n    }                                                                                                                  // 220\n    return null;                                                                                                       // 221\n  }                                                                                                                    // 222\n  return createChainableTypeChecker(validate);                                                                         // 223\n}                                                                                                                      // 224\n                                                                                                                       // 225\nfunction createEnumTypeChecker(expectedValues) {                                                                       // 226\n  if (!Array.isArray(expectedValues)) {                                                                                // 227\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n    return emptyFunction.thatReturnsNull;                                                                              // 229\n  }                                                                                                                    // 230\n                                                                                                                       // 231\n  function validate(props, propName, componentName, location, propFullName) {                                          // 232\n    var propValue = props[propName];                                                                                   // 233\n    for (var i = 0; i < expectedValues.length; i++) {                                                                  // 234\n      if (is(propValue, expectedValues[i])) {                                                                          // 235\n        return null;                                                                                                   // 236\n      }                                                                                                                // 237\n    }                                                                                                                  // 238\n                                                                                                                       // 239\n    var locationName = ReactPropTypeLocationNames[location];                                                           // 240\n    var valuesString = JSON.stringify(expectedValues);                                                                 // 241\n    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n  }                                                                                                                    // 243\n  return createChainableTypeChecker(validate);                                                                         // 244\n}                                                                                                                      // 245\n                                                                                                                       // 246\nfunction createObjectOfTypeChecker(typeChecker) {                                                                      // 247\n  function validate(props, propName, componentName, location, propFullName) {                                          // 248\n    if (typeof typeChecker !== 'function') {                                                                           // 249\n      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n    }                                                                                                                  // 251\n    var propValue = props[propName];                                                                                   // 252\n    var propType = getPropType(propValue);                                                                             // 253\n    if (propType !== 'object') {                                                                                       // 254\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 255\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n    }                                                                                                                  // 257\n    for (var key in propValue) {                                                                                       // 258\n      if (propValue.hasOwnProperty(key)) {                                                                             // 259\n        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error instanceof Error) {                                                                                  // 261\n          return error;                                                                                                // 262\n        }                                                                                                              // 263\n      }                                                                                                                // 264\n    }                                                                                                                  // 265\n    return null;                                                                                                       // 266\n  }                                                                                                                    // 267\n  return createChainableTypeChecker(validate);                                                                         // 268\n}                                                                                                                      // 269\n                                                                                                                       // 270\nfunction createUnionTypeChecker(arrayOfTypeCheckers) {                                                                 // 271\n  if (!Array.isArray(arrayOfTypeCheckers)) {                                                                           // 272\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n    return emptyFunction.thatReturnsNull;                                                                              // 274\n  }                                                                                                                    // 275\n                                                                                                                       // 276\n  function validate(props, propName, componentName, location, propFullName) {                                          // 277\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {                                                             // 278\n      var checker = arrayOfTypeCheckers[i];                                                                            // 279\n      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {             // 280\n        return null;                                                                                                   // 281\n      }                                                                                                                // 282\n    }                                                                                                                  // 283\n                                                                                                                       // 284\n    var locationName = ReactPropTypeLocationNames[location];                                                           // 285\n    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n  }                                                                                                                    // 287\n  return createChainableTypeChecker(validate);                                                                         // 288\n}                                                                                                                      // 289\n                                                                                                                       // 290\nfunction createNodeChecker() {                                                                                         // 291\n  function validate(props, propName, componentName, location, propFullName) {                                          // 292\n    if (!isNode(props[propName])) {                                                                                    // 293\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 294\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n    }                                                                                                                  // 296\n    return null;                                                                                                       // 297\n  }                                                                                                                    // 298\n  return createChainableTypeChecker(validate);                                                                         // 299\n}                                                                                                                      // 300\n                                                                                                                       // 301\nfunction createShapeTypeChecker(shapeTypes) {                                                                          // 302\n  function validate(props, propName, componentName, location, propFullName) {                                          // 303\n    var propValue = props[propName];                                                                                   // 304\n    var propType = getPropType(propValue);                                                                             // 305\n    if (propType !== 'object') {                                                                                       // 306\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 307\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n    }                                                                                                                  // 309\n    for (var key in shapeTypes) {                                                                                      // 310\n      var checker = shapeTypes[key];                                                                                   // 311\n      if (!checker) {                                                                                                  // 312\n        continue;                                                                                                      // 313\n      }                                                                                                                // 314\n      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);    // 315\n      if (error) {                                                                                                     // 316\n        return error;                                                                                                  // 317\n      }                                                                                                                // 318\n    }                                                                                                                  // 319\n    return null;                                                                                                       // 320\n  }                                                                                                                    // 321\n  return createChainableTypeChecker(validate);                                                                         // 322\n}                                                                                                                      // 323\n                                                                                                                       // 324\nfunction isNode(propValue) {                                                                                           // 325\n  switch (typeof propValue) {                                                                                          // 326\n    case 'number':                                                                                                     // 327\n    case 'string':                                                                                                     // 328\n    case 'undefined':                                                                                                  // 329\n      return true;                                                                                                     // 330\n    case 'boolean':                                                                                                    // 331\n      return !propValue;                                                                                               // 332\n    case 'object':                                                                                                     // 333\n      if (Array.isArray(propValue)) {                                                                                  // 334\n        return propValue.every(isNode);                                                                                // 335\n      }                                                                                                                // 336\n      if (propValue === null || ReactElement.isValidElement(propValue)) {                                              // 337\n        return true;                                                                                                   // 338\n      }                                                                                                                // 339\n                                                                                                                       // 340\n      var iteratorFn = getIteratorFn(propValue);                                                                       // 341\n      if (iteratorFn) {                                                                                                // 342\n        var iterator = iteratorFn.call(propValue);                                                                     // 343\n        var step;                                                                                                      // 344\n        if (iteratorFn !== propValue.entries) {                                                                        // 345\n          while (!(step = iterator.next()).done) {                                                                     // 346\n            if (!isNode(step.value)) {                                                                                 // 347\n              return false;                                                                                            // 348\n            }                                                                                                          // 349\n          }                                                                                                            // 350\n        } else {                                                                                                       // 351\n          // Iterator will provide entry [k,v] tuples rather than values.                                              // 352\n          while (!(step = iterator.next()).done) {                                                                     // 353\n            var entry = step.value;                                                                                    // 354\n            if (entry) {                                                                                               // 355\n              if (!isNode(entry[1])) {                                                                                 // 356\n                return false;                                                                                          // 357\n              }                                                                                                        // 358\n            }                                                                                                          // 359\n          }                                                                                                            // 360\n        }                                                                                                              // 361\n      } else {                                                                                                         // 362\n        return false;                                                                                                  // 363\n      }                                                                                                                // 364\n                                                                                                                       // 365\n      return true;                                                                                                     // 366\n    default:                                                                                                           // 367\n      return false;                                                                                                    // 368\n  }                                                                                                                    // 369\n}                                                                                                                      // 370\n                                                                                                                       // 371\nfunction isSymbol(propType, propValue) {                                                                               // 372\n  // Native Symbol.                                                                                                    // 373\n  if (propType === 'symbol') {                                                                                         // 374\n    return true;                                                                                                       // 375\n  }                                                                                                                    // 376\n                                                                                                                       // 377\n  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'                                                             // 378\n  if (propValue['@@toStringTag'] === 'Symbol') {                                                                       // 379\n    return true;                                                                                                       // 380\n  }                                                                                                                    // 381\n                                                                                                                       // 382\n  // Fallback for non-spec compliant Symbols which are polyfilled.                                                     // 383\n  if (typeof Symbol === 'function' && propValue instanceof Symbol) {                                                   // 384\n    return true;                                                                                                       // 385\n  }                                                                                                                    // 386\n                                                                                                                       // 387\n  return false;                                                                                                        // 388\n}                                                                                                                      // 389\n                                                                                                                       // 390\n// Equivalent of `typeof` but with special handling for array and regexp.                                              // 391\nfunction getPropType(propValue) {                                                                                      // 392\n  var propType = typeof propValue;                                                                                     // 393\n  if (Array.isArray(propValue)) {                                                                                      // 394\n    return 'array';                                                                                                    // 395\n  }                                                                                                                    // 396\n  if (propValue instanceof RegExp) {                                                                                   // 397\n    // Old webkits (at least until Android 4.0) return 'function' rather than                                          // 398\n    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/                                           // 399\n    // passes PropTypes.object.                                                                                        // 400\n    return 'object';                                                                                                   // 401\n  }                                                                                                                    // 402\n  if (isSymbol(propType, propValue)) {                                                                                 // 403\n    return 'symbol';                                                                                                   // 404\n  }                                                                                                                    // 405\n  return propType;                                                                                                     // 406\n}                                                                                                                      // 407\n                                                                                                                       // 408\n// This handles more types than `getPropType`. Only used for error messages.                                           // 409\n// See `createPrimitiveTypeChecker`.                                                                                   // 410\nfunction getPreciseType(propValue) {                                                                                   // 411\n  var propType = getPropType(propValue);                                                                               // 412\n  if (propType === 'object') {                                                                                         // 413\n    if (propValue instanceof Date) {                                                                                   // 414\n      return 'date';                                                                                                   // 415\n    } else if (propValue instanceof RegExp) {                                                                          // 416\n      return 'regexp';                                                                                                 // 417\n    }                                                                                                                  // 418\n  }                                                                                                                    // 419\n  return propType;                                                                                                     // 420\n}                                                                                                                      // 421\n                                                                                                                       // 422\n// Returns class name of the object, if any.                                                                           // 423\nfunction getClassName(propValue) {                                                                                     // 424\n  if (!propValue.constructor || !propValue.constructor.name) {                                                         // 425\n    return ANONYMOUS;                                                                                                  // 426\n  }                                                                                                                    // 427\n  return propValue.constructor.name;                                                                                   // 428\n}                                                                                                                      // 429\n                                                                                                                       // 430\nmodule.exports = ReactPropTypes;                                                                                       // 431\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactVersion.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactVersion.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactVersion                                                                                        // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nmodule.exports = '15.3.2';                                                                                             // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"onlyChild.js\":[\"./reactProdInvariant\",\"./ReactElement\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/onlyChild.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule onlyChild                                                                                           // 9\n */                                                                                                                    // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 13\n                                                                                                                       // 14\nvar ReactElement = require('./ReactElement');                                                                          // 15\n                                                                                                                       // 16\nvar invariant = require('fbjs/lib/invariant');                                                                         // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Returns the first child in a collection of children and verifies that there                                         // 20\n * is only one child in the collection.                                                                                // 21\n *                                                                                                                     // 22\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only                                    // 23\n *                                                                                                                     // 24\n * The current implementation of this function assumes that a single child gets                                        // 25\n * passed without a wrapper, but the purpose of this helper function is to                                             // 26\n * abstract away the particular structure of children.                                                                 // 27\n *                                                                                                                     // 28\n * @param {?object} children Child collection structure.                                                               // 29\n * @return {ReactElement} The first and only `ReactElement` contained in the                                           // 30\n * structure.                                                                                                          // 31\n */                                                                                                                    // 32\nfunction onlyChild(children) {                                                                                         // 33\n  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;\n  return children;                                                                                                     // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\nmodule.exports = onlyChild;                                                                                            // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOM.js\":[\"./ReactDOMComponentTree\",\"./ReactDefaultInjection\",\"./ReactMount\",\"./ReactReconciler\",\"./ReactUpdates\",\"./ReactVersion\",\"./findDOMNode\",\"./getHostComponentFromComposite\",\"./renderSubtreeIntoContainer\",\"fbjs/lib/warning\",\"fbjs/lib/ExecutionEnvironment\",\"./ReactInstrumentation\",\"./ReactDOMUnknownPropertyHook\",\"./ReactDOMNullInputValuePropHook\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOM.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOM                                                                                            // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/                                                                            // 12\n                                                                                                                       // 13\n'use strict';                                                                                                          // 14\n                                                                                                                       // 15\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 16\nvar ReactDefaultInjection = require('./ReactDefaultInjection');                                                        // 17\nvar ReactMount = require('./ReactMount');                                                                              // 18\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 19\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 20\nvar ReactVersion = require('./ReactVersion');                                                                          // 21\n                                                                                                                       // 22\nvar findDOMNode = require('./findDOMNode');                                                                            // 23\nvar getHostComponentFromComposite = require('./getHostComponentFromComposite');                                        // 24\nvar renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');                                              // 25\nvar warning = require('fbjs/lib/warning');                                                                             // 26\n                                                                                                                       // 27\nReactDefaultInjection.inject();                                                                                        // 28\n                                                                                                                       // 29\nvar ReactDOM = {                                                                                                       // 30\n  findDOMNode: findDOMNode,                                                                                            // 31\n  render: ReactMount.render,                                                                                           // 32\n  unmountComponentAtNode: ReactMount.unmountComponentAtNode,                                                           // 33\n  version: ReactVersion,                                                                                               // 34\n                                                                                                                       // 35\n  /* eslint-disable camelcase */                                                                                       // 36\n  unstable_batchedUpdates: ReactUpdates.batchedUpdates,                                                                // 37\n  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer                                                      // 38\n};                                                                                                                     // 39\n                                                                                                                       // 40\n// Inject the runtime into a devtools global hook regardless of browser.                                               // 41\n// Allows for debugging when the hook is injected on the page.                                                         // 42\n/* eslint-enable camelcase */                                                                                          // 43\nif (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({                                                                              // 45\n    ComponentTree: {                                                                                                   // 46\n      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,                                    // 47\n      getNodeFromInstance: function (inst) {                                                                           // 48\n        // inst is an internal instance (but could be a composite)                                                     // 49\n        if (inst._renderedComponent) {                                                                                 // 50\n          inst = getHostComponentFromComposite(inst);                                                                  // 51\n        }                                                                                                              // 52\n        if (inst) {                                                                                                    // 53\n          return ReactDOMComponentTree.getNodeFromInstance(inst);                                                      // 54\n        } else {                                                                                                       // 55\n          return null;                                                                                                 // 56\n        }                                                                                                              // 57\n      }                                                                                                                // 58\n    },                                                                                                                 // 59\n    Mount: ReactMount,                                                                                                 // 60\n    Reconciler: ReactReconciler                                                                                        // 61\n  });                                                                                                                  // 62\n}                                                                                                                      // 63\n                                                                                                                       // 64\nif (process.env.NODE_ENV !== 'production') {                                                                           // 65\n  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                 // 66\n  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {                                                  // 67\n                                                                                                                       // 68\n    // First check if devtools is not installed                                                                        // 69\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {                                                       // 70\n      // If we're in Chrome or Firefox, provide a download link if not installed.                                      // 71\n      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {\n        // Firefox does not have the issue with devtools loaded over file://                                           // 73\n        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;\n        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');\n      }                                                                                                                // 76\n    }                                                                                                                  // 77\n                                                                                                                       // 78\n    var testFunc = function testFn() {};                                                                               // 79\n    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;\n                                                                                                                       // 81\n    // If we're in IE8, check to see if we are in compatibility mode and provide                                       // 82\n    // information on preventing compatibility mode                                                                    // 83\n    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;                                      // 84\n                                                                                                                       // 85\n    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />') : void 0;\n                                                                                                                       // 87\n    var expectedFeatures = [                                                                                           // 88\n    // shims                                                                                                           // 89\n    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim];\n                                                                                                                       // 91\n    for (var i = 0; i < expectedFeatures.length; i++) {                                                                // 92\n      if (!expectedFeatures[i]) {                                                                                      // 93\n        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;\n        break;                                                                                                         // 95\n      }                                                                                                                // 96\n    }                                                                                                                  // 97\n  }                                                                                                                    // 98\n}                                                                                                                      // 99\n                                                                                                                       // 100\nif (process.env.NODE_ENV !== 'production') {                                                                           // 101\n  var ReactInstrumentation = require('./ReactInstrumentation');                                                        // 102\n  var ReactDOMUnknownPropertyHook = require('./ReactDOMUnknownPropertyHook');                                          // 103\n  var ReactDOMNullInputValuePropHook = require('./ReactDOMNullInputValuePropHook');                                    // 104\n                                                                                                                       // 105\n  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);                                                 // 106\n  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);                                              // 107\n}                                                                                                                      // 108\n                                                                                                                       // 109\nmodule.exports = ReactDOM;                                                                                             // 110\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMComponentTree.js\":[\"./reactProdInvariant\",\"./DOMProperty\",\"./ReactDOMComponentFlags\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMComponentTree.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMComponentTree                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar DOMProperty = require('./DOMProperty');                                                                            // 16\nvar ReactDOMComponentFlags = require('./ReactDOMComponentFlags');                                                      // 17\n                                                                                                                       // 18\nvar invariant = require('fbjs/lib/invariant');                                                                         // 19\n                                                                                                                       // 20\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;                                                                         // 21\nvar Flags = ReactDOMComponentFlags;                                                                                    // 22\n                                                                                                                       // 23\nvar internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);                            // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * Drill down (through composites and empty components) until we get a host or                                         // 27\n * host text component.                                                                                                // 28\n *                                                                                                                     // 29\n * This is pretty polymorphic but unavoidable with the current structure we have                                       // 30\n * for `_renderedChildren`.                                                                                            // 31\n */                                                                                                                    // 32\nfunction getRenderedHostOrTextFromComponent(component) {                                                               // 33\n  var rendered;                                                                                                        // 34\n  while (rendered = component._renderedComponent) {                                                                    // 35\n    component = rendered;                                                                                              // 36\n  }                                                                                                                    // 37\n  return component;                                                                                                    // 38\n}                                                                                                                      // 39\n                                                                                                                       // 40\n/**                                                                                                                    // 41\n * Populate `_hostNode` on the rendered host/text component with the given                                             // 42\n * DOM node. The passed `inst` can be a composite.                                                                     // 43\n */                                                                                                                    // 44\nfunction precacheNode(inst, node) {                                                                                    // 45\n  var hostInst = getRenderedHostOrTextFromComponent(inst);                                                             // 46\n  hostInst._hostNode = node;                                                                                           // 47\n  node[internalInstanceKey] = hostInst;                                                                                // 48\n}                                                                                                                      // 49\n                                                                                                                       // 50\nfunction uncacheNode(inst) {                                                                                           // 51\n  var node = inst._hostNode;                                                                                           // 52\n  if (node) {                                                                                                          // 53\n    delete node[internalInstanceKey];                                                                                  // 54\n    inst._hostNode = null;                                                                                             // 55\n  }                                                                                                                    // 56\n}                                                                                                                      // 57\n                                                                                                                       // 58\n/**                                                                                                                    // 59\n * Populate `_hostNode` on each child of `inst`, assuming that the children                                            // 60\n * match up with the DOM (element) children of `node`.                                                                 // 61\n *                                                                                                                     // 62\n * We cache entire levels at once to avoid an n^2 problem where we access the                                          // 63\n * children of a node sequentially and have to walk from the start to our target                                       // 64\n * node every time.                                                                                                    // 65\n *                                                                                                                     // 66\n * Since we update `_renderedChildren` and the actual DOM at (slightly)                                                // 67\n * different times, we could race here and see a newer `_renderedChildren` than                                        // 68\n * the DOM nodes we see. To avoid this, ReactMultiChild calls                                                          // 69\n * `prepareToManageChildren` before we change `_renderedChildren`, at which                                            // 70\n * time the container's child nodes are always cached (until it unmounts).                                             // 71\n */                                                                                                                    // 72\nfunction precacheChildNodes(inst, node) {                                                                              // 73\n  if (inst._flags & Flags.hasCachedChildNodes) {                                                                       // 74\n    return;                                                                                                            // 75\n  }                                                                                                                    // 76\n  var children = inst._renderedChildren;                                                                               // 77\n  var childNode = node.firstChild;                                                                                     // 78\n  outer: for (var name in children) {                                                                                  // 79\n    if (!children.hasOwnProperty(name)) {                                                                              // 80\n      continue;                                                                                                        // 81\n    }                                                                                                                  // 82\n    var childInst = children[name];                                                                                    // 83\n    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;                                                // 84\n    if (childID === 0) {                                                                                               // 85\n      // We're currently unmounting this child in ReactMultiChild; skip it.                                            // 86\n      continue;                                                                                                        // 87\n    }                                                                                                                  // 88\n    // We assume the child nodes are in the same order as the child instances.                                         // 89\n    for (; childNode !== null; childNode = childNode.nextSibling) {                                                    // 90\n      if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {\n        precacheNode(childInst, childNode);                                                                            // 92\n        continue outer;                                                                                                // 93\n      }                                                                                                                // 94\n    }                                                                                                                  // 95\n    // We reached the end of the DOM children without finding an ID match.                                             // 96\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;\n  }                                                                                                                    // 98\n  inst._flags |= Flags.hasCachedChildNodes;                                                                            // 99\n}                                                                                                                      // 100\n                                                                                                                       // 101\n/**                                                                                                                    // 102\n * Given a DOM node, return the closest ReactDOMComponent or                                                           // 103\n * ReactDOMTextComponent instance ancestor.                                                                            // 104\n */                                                                                                                    // 105\nfunction getClosestInstanceFromNode(node) {                                                                            // 106\n  if (node[internalInstanceKey]) {                                                                                     // 107\n    return node[internalInstanceKey];                                                                                  // 108\n  }                                                                                                                    // 109\n                                                                                                                       // 110\n  // Walk up the tree until we find an ancestor whose instance we have cached.                                         // 111\n  var parents = [];                                                                                                    // 112\n  while (!node[internalInstanceKey]) {                                                                                 // 113\n    parents.push(node);                                                                                                // 114\n    if (node.parentNode) {                                                                                             // 115\n      node = node.parentNode;                                                                                          // 116\n    } else {                                                                                                           // 117\n      // Top of the tree. This node must not be part of a React tree (or is                                            // 118\n      // unmounted, potentially).                                                                                      // 119\n      return null;                                                                                                     // 120\n    }                                                                                                                  // 121\n  }                                                                                                                    // 122\n                                                                                                                       // 123\n  var closest;                                                                                                         // 124\n  var inst;                                                                                                            // 125\n  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {                                           // 126\n    closest = inst;                                                                                                    // 127\n    if (parents.length) {                                                                                              // 128\n      precacheChildNodes(inst, node);                                                                                  // 129\n    }                                                                                                                  // 130\n  }                                                                                                                    // 131\n                                                                                                                       // 132\n  return closest;                                                                                                      // 133\n}                                                                                                                      // 134\n                                                                                                                       // 135\n/**                                                                                                                    // 136\n * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent                                             // 137\n * instance, or null if the node was not rendered by this React.                                                       // 138\n */                                                                                                                    // 139\nfunction getInstanceFromNode(node) {                                                                                   // 140\n  var inst = getClosestInstanceFromNode(node);                                                                         // 141\n  if (inst != null && inst._hostNode === node) {                                                                       // 142\n    return inst;                                                                                                       // 143\n  } else {                                                                                                             // 144\n    return null;                                                                                                       // 145\n  }                                                                                                                    // 146\n}                                                                                                                      // 147\n                                                                                                                       // 148\n/**                                                                                                                    // 149\n * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding                                        // 150\n * DOM node.                                                                                                           // 151\n */                                                                                                                    // 152\nfunction getNodeFromInstance(inst) {                                                                                   // 153\n  // Without this first invariant, passing a non-DOM-component triggers the next                                       // 154\n  // invariant for a missing parent, which is super confusing.                                                         // 155\n  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;\n                                                                                                                       // 157\n  if (inst._hostNode) {                                                                                                // 158\n    return inst._hostNode;                                                                                             // 159\n  }                                                                                                                    // 160\n                                                                                                                       // 161\n  // Walk up the tree until we find an ancestor whose DOM node we have cached.                                         // 162\n  var parents = [];                                                                                                    // 163\n  while (!inst._hostNode) {                                                                                            // 164\n    parents.push(inst);                                                                                                // 165\n    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;\n    inst = inst._hostParent;                                                                                           // 167\n  }                                                                                                                    // 168\n                                                                                                                       // 169\n  // Now parents contains each ancestor that does *not* have a cached native                                           // 170\n  // node, and `inst` is the deepest ancestor that does.                                                               // 171\n  for (; parents.length; inst = parents.pop()) {                                                                       // 172\n    precacheChildNodes(inst, inst._hostNode);                                                                          // 173\n  }                                                                                                                    // 174\n                                                                                                                       // 175\n  return inst._hostNode;                                                                                               // 176\n}                                                                                                                      // 177\n                                                                                                                       // 178\nvar ReactDOMComponentTree = {                                                                                          // 179\n  getClosestInstanceFromNode: getClosestInstanceFromNode,                                                              // 180\n  getInstanceFromNode: getInstanceFromNode,                                                                            // 181\n  getNodeFromInstance: getNodeFromInstance,                                                                            // 182\n  precacheChildNodes: precacheChildNodes,                                                                              // 183\n  precacheNode: precacheNode,                                                                                          // 184\n  uncacheNode: uncacheNode                                                                                             // 185\n};                                                                                                                     // 186\n                                                                                                                       // 187\nmodule.exports = ReactDOMComponentTree;                                                                                // 188\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"DOMProperty.js\":[\"./reactProdInvariant\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/DOMProperty.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule DOMProperty                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar invariant = require('fbjs/lib/invariant');                                                                         // 16\n                                                                                                                       // 17\nfunction checkMask(value, bitmask) {                                                                                   // 18\n  return (value & bitmask) === bitmask;                                                                                // 19\n}                                                                                                                      // 20\n                                                                                                                       // 21\nvar DOMPropertyInjection = {                                                                                           // 22\n  /**                                                                                                                  // 23\n   * Mapping from normalized, camelcased property names to a configuration that                                        // 24\n   * specifies how the associated DOM property should be accessed or rendered.                                         // 25\n   */                                                                                                                  // 26\n  MUST_USE_PROPERTY: 0x1,                                                                                              // 27\n  HAS_BOOLEAN_VALUE: 0x4,                                                                                              // 28\n  HAS_NUMERIC_VALUE: 0x8,                                                                                              // 29\n  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,                                                                              // 30\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,                                                                                  // 31\n                                                                                                                       // 32\n  /**                                                                                                                  // 33\n   * Inject some specialized knowledge about the DOM. This takes a config object                                       // 34\n   * with the following properties:                                                                                    // 35\n   *                                                                                                                   // 36\n   * isCustomAttribute: function that given an attribute name will return true                                         // 37\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*                                          // 38\n   * attributes where it's impossible to enumerate all of the possible                                                 // 39\n   * attribute names,                                                                                                  // 40\n   *                                                                                                                   // 41\n   * Properties: object mapping DOM property name to one of the                                                        // 42\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,                                          // 43\n   * it won't get written to the DOM.                                                                                  // 44\n   *                                                                                                                   // 45\n   * DOMAttributeNames: object mapping React attribute name to the DOM                                                 // 46\n   * attribute name. Attribute names not specified use the **lowercase**                                               // 47\n   * normalized name.                                                                                                  // 48\n   *                                                                                                                   // 49\n   * DOMAttributeNamespaces: object mapping React attribute name to the DOM                                            // 50\n   * attribute namespace URL. (Attribute names not specified use no namespace.)                                        // 51\n   *                                                                                                                   // 52\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.                                            // 53\n   * Property names not specified use the normalized name.                                                             // 54\n   *                                                                                                                   // 55\n   * DOMMutationMethods: Properties that require special mutation methods. If                                          // 56\n   * `value` is undefined, the mutation method should unset the property.                                              // 57\n   *                                                                                                                   // 58\n   * @param {object} domPropertyConfig the config as described above.                                                  // 59\n   */                                                                                                                  // 60\n  injectDOMPropertyConfig: function (domPropertyConfig) {                                                              // 61\n    var Injection = DOMPropertyInjection;                                                                              // 62\n    var Properties = domPropertyConfig.Properties || {};                                                               // 63\n    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};                                       // 64\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};                                                 // 65\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};                                                   // 66\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};                                               // 67\n                                                                                                                       // 68\n    if (domPropertyConfig.isCustomAttribute) {                                                                         // 69\n      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);                               // 70\n    }                                                                                                                  // 71\n                                                                                                                       // 72\n    for (var propName in Properties) {                                                                                 // 73\n      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property \\'%s\\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;\n                                                                                                                       // 75\n      var lowerCased = propName.toLowerCase();                                                                         // 76\n      var propConfig = Properties[propName];                                                                           // 77\n                                                                                                                       // 78\n      var propertyInfo = {                                                                                             // 79\n        attributeName: lowerCased,                                                                                     // 80\n        attributeNamespace: null,                                                                                      // 81\n        propertyName: propName,                                                                                        // 82\n        mutationMethod: null,                                                                                          // 83\n                                                                                                                       // 84\n        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),                                           // 85\n        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),                                           // 86\n        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),                                           // 87\n        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),                          // 88\n        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)                       // 89\n      };                                                                                                               // 90\n      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;\n                                                                                                                       // 92\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 93\n        DOMProperty.getPossibleStandardName[lowerCased] = propName;                                                    // 94\n      }                                                                                                                // 95\n                                                                                                                       // 96\n      if (DOMAttributeNames.hasOwnProperty(propName)) {                                                                // 97\n        var attributeName = DOMAttributeNames[propName];                                                               // 98\n        propertyInfo.attributeName = attributeName;                                                                    // 99\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 100\n          DOMProperty.getPossibleStandardName[attributeName] = propName;                                               // 101\n        }                                                                                                              // 102\n      }                                                                                                                // 103\n                                                                                                                       // 104\n      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {                                                           // 105\n        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];                                            // 106\n      }                                                                                                                // 107\n                                                                                                                       // 108\n      if (DOMPropertyNames.hasOwnProperty(propName)) {                                                                 // 109\n        propertyInfo.propertyName = DOMPropertyNames[propName];                                                        // 110\n      }                                                                                                                // 111\n                                                                                                                       // 112\n      if (DOMMutationMethods.hasOwnProperty(propName)) {                                                               // 113\n        propertyInfo.mutationMethod = DOMMutationMethods[propName];                                                    // 114\n      }                                                                                                                // 115\n                                                                                                                       // 116\n      DOMProperty.properties[propName] = propertyInfo;                                                                 // 117\n    }                                                                                                                  // 118\n  }                                                                                                                    // 119\n};                                                                                                                     // 120\n                                                                                                                       // 121\n/* eslint-disable max-len */                                                                                           // 122\nvar ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\n/* eslint-enable max-len */                                                                                            // 124\n                                                                                                                       // 125\n/**                                                                                                                    // 126\n * DOMProperty exports lookup objects that can be used like functions:                                                 // 127\n *                                                                                                                     // 128\n *   > DOMProperty.isValid['id']                                                                                       // 129\n *   true                                                                                                              // 130\n *   > DOMProperty.isValid['foobar']                                                                                   // 131\n *   undefined                                                                                                         // 132\n *                                                                                                                     // 133\n * Although this may be confusing, it performs better in general.                                                      // 134\n *                                                                                                                     // 135\n * @see http://jsperf.com/key-exists                                                                                   // 136\n * @see http://jsperf.com/key-missing                                                                                  // 137\n */                                                                                                                    // 138\nvar DOMProperty = {                                                                                                    // 139\n                                                                                                                       // 140\n  ID_ATTRIBUTE_NAME: 'data-reactid',                                                                                   // 141\n  ROOT_ATTRIBUTE_NAME: 'data-reactroot',                                                                               // 142\n                                                                                                                       // 143\n  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,                                                                // 144\n  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040',                     // 145\n                                                                                                                       // 146\n  /**                                                                                                                  // 147\n   * Map from property \"standard name\" to an object with info about how to set                                         // 148\n   * the property in the DOM. Each object contains:                                                                    // 149\n   *                                                                                                                   // 150\n   * attributeName:                                                                                                    // 151\n   *   Used when rendering markup or with `*Attribute()`.                                                              // 152\n   * attributeNamespace                                                                                                // 153\n   * propertyName:                                                                                                     // 154\n   *   Used on DOM node instances. (This includes properties that mutate due to                                        // 155\n   *   external factors.)                                                                                              // 156\n   * mutationMethod:                                                                                                   // 157\n   *   If non-null, used instead of the property or `setAttribute()` after                                             // 158\n   *   initial render.                                                                                                 // 159\n   * mustUseProperty:                                                                                                  // 160\n   *   Whether the property must be accessed and mutated as an object property.                                        // 161\n   * hasBooleanValue:                                                                                                  // 162\n   *   Whether the property should be removed when set to a falsey value.                                              // 163\n   * hasNumericValue:                                                                                                  // 164\n   *   Whether the property must be numeric or parse as a numeric and should be                                        // 165\n   *   removed when set to a falsey value.                                                                             // 166\n   * hasPositiveNumericValue:                                                                                          // 167\n   *   Whether the property must be positive numeric or parse as a positive                                            // 168\n   *   numeric and should be removed when set to a falsey value.                                                       // 169\n   * hasOverloadedBooleanValue:                                                                                        // 170\n   *   Whether the property can be used as a flag as well as with a value.                                             // 171\n   *   Removed when strictly equal to false; present without a value when                                              // 172\n   *   strictly equal to true; present with a value otherwise.                                                         // 173\n   */                                                                                                                  // 174\n  properties: {},                                                                                                      // 175\n                                                                                                                       // 176\n  /**                                                                                                                  // 177\n   * Mapping from lowercase property names to the properly cased version, used                                         // 178\n   * to warn in the case of missing properties. Available only in __DEV__.                                             // 179\n   * @type {Object}                                                                                                    // 180\n   */                                                                                                                  // 181\n  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,                                          // 182\n                                                                                                                       // 183\n  /**                                                                                                                  // 184\n   * All of the isCustomAttribute() functions that have been injected.                                                 // 185\n   */                                                                                                                  // 186\n  _isCustomAttributeFunctions: [],                                                                                     // 187\n                                                                                                                       // 188\n  /**                                                                                                                  // 189\n   * Checks whether a property name is a custom attribute.                                                             // 190\n   * @method                                                                                                           // 191\n   */                                                                                                                  // 192\n  isCustomAttribute: function (attributeName) {                                                                        // 193\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {                                         // 194\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];                                            // 195\n      if (isCustomAttributeFn(attributeName)) {                                                                        // 196\n        return true;                                                                                                   // 197\n      }                                                                                                                // 198\n    }                                                                                                                  // 199\n    return false;                                                                                                      // 200\n  },                                                                                                                   // 201\n                                                                                                                       // 202\n  injection: DOMPropertyInjection                                                                                      // 203\n};                                                                                                                     // 204\n                                                                                                                       // 205\nmodule.exports = DOMProperty;                                                                                          // 206\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMComponentFlags.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMComponentFlags.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMComponentFlags                                                                              // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactDOMComponentFlags = {                                                                                         // 14\n  hasCachedChildNodes: 1 << 0                                                                                          // 15\n};                                                                                                                     // 16\n                                                                                                                       // 17\nmodule.exports = ReactDOMComponentFlags;                                                                               // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDefaultInjection.js\":[\"./BeforeInputEventPlugin\",\"./ChangeEventPlugin\",\"./DefaultEventPluginOrder\",\"./EnterLeaveEventPlugin\",\"./HTMLDOMPropertyConfig\",\"./ReactComponentBrowserEnvironment\",\"./ReactDOMComponent\",\"./ReactDOMComponentTree\",\"./ReactDOMEmptyComponent\",\"./ReactDOMTreeTraversal\",\"./ReactDOMTextComponent\",\"./ReactDefaultBatchingStrategy\",\"./ReactEventListener\",\"./ReactInjection\",\"./ReactReconcileTransaction\",\"./SVGDOMPropertyConfig\",\"./SelectEventPlugin\",\"./SimpleEventPlugin\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDefaultInjection.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDefaultInjection                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar BeforeInputEventPlugin = require('./BeforeInputEventPlugin');                                                      // 14\nvar ChangeEventPlugin = require('./ChangeEventPlugin');                                                                // 15\nvar DefaultEventPluginOrder = require('./DefaultEventPluginOrder');                                                    // 16\nvar EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');                                                        // 17\nvar HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');                                                        // 18\nvar ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');                                  // 19\nvar ReactDOMComponent = require('./ReactDOMComponent');                                                                // 20\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 21\nvar ReactDOMEmptyComponent = require('./ReactDOMEmptyComponent');                                                      // 22\nvar ReactDOMTreeTraversal = require('./ReactDOMTreeTraversal');                                                        // 23\nvar ReactDOMTextComponent = require('./ReactDOMTextComponent');                                                        // 24\nvar ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');                                          // 25\nvar ReactEventListener = require('./ReactEventListener');                                                              // 26\nvar ReactInjection = require('./ReactInjection');                                                                      // 27\nvar ReactReconcileTransaction = require('./ReactReconcileTransaction');                                                // 28\nvar SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');                                                          // 29\nvar SelectEventPlugin = require('./SelectEventPlugin');                                                                // 30\nvar SimpleEventPlugin = require('./SimpleEventPlugin');                                                                // 31\n                                                                                                                       // 32\nvar alreadyInjected = false;                                                                                           // 33\n                                                                                                                       // 34\nfunction inject() {                                                                                                    // 35\n  if (alreadyInjected) {                                                                                               // 36\n    // TODO: This is currently true because these injections are shared between                                        // 37\n    // the client and the server package. They should be built independently                                           // 38\n    // and not share any injection state. Then this problem will be solved.                                            // 39\n    return;                                                                                                            // 40\n  }                                                                                                                    // 41\n  alreadyInjected = true;                                                                                              // 42\n                                                                                                                       // 43\n  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);                                            // 44\n                                                                                                                       // 45\n  /**                                                                                                                  // 46\n   * Inject modules for resolving DOM hierarchy and plugin ordering.                                                   // 47\n   */                                                                                                                  // 48\n  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);                                       // 49\n  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);                                          // 50\n  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);                                          // 51\n                                                                                                                       // 52\n  /**                                                                                                                  // 53\n   * Some important event plugins included by default (without having to require                                       // 54\n   * them).                                                                                                            // 55\n   */                                                                                                                  // 56\n  ReactInjection.EventPluginHub.injectEventPluginsByName({                                                             // 57\n    SimpleEventPlugin: SimpleEventPlugin,                                                                              // 58\n    EnterLeaveEventPlugin: EnterLeaveEventPlugin,                                                                      // 59\n    ChangeEventPlugin: ChangeEventPlugin,                                                                              // 60\n    SelectEventPlugin: SelectEventPlugin,                                                                              // 61\n    BeforeInputEventPlugin: BeforeInputEventPlugin                                                                     // 62\n  });                                                                                                                  // 63\n                                                                                                                       // 64\n  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);                                         // 65\n                                                                                                                       // 66\n  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);                                        // 67\n                                                                                                                       // 68\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);                                           // 69\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);                                            // 70\n                                                                                                                       // 71\n  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {                                   // 72\n    return new ReactDOMEmptyComponent(instantiate);                                                                    // 73\n  });                                                                                                                  // 74\n                                                                                                                       // 75\n  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);                                        // 76\n  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);                                         // 77\n                                                                                                                       // 78\n  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);                                        // 79\n}                                                                                                                      // 80\n                                                                                                                       // 81\nmodule.exports = {                                                                                                     // 82\n  inject: inject                                                                                                       // 83\n};                                                                                                                     // 84\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"BeforeInputEventPlugin.js\":[\"./EventConstants\",\"./EventPropagators\",\"fbjs/lib/ExecutionEnvironment\",\"./FallbackCompositionState\",\"./SyntheticCompositionEvent\",\"./SyntheticInputEvent\",\"fbjs/lib/keyOf\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/BeforeInputEventPlugin.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present Facebook, Inc.                                                                               // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule BeforeInputEventPlugin                                                                              // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar EventConstants = require('./EventConstants');                                                                      // 14\nvar EventPropagators = require('./EventPropagators');                                                                  // 15\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 16\nvar FallbackCompositionState = require('./FallbackCompositionState');                                                  // 17\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');                                                // 18\nvar SyntheticInputEvent = require('./SyntheticInputEvent');                                                            // 19\n                                                                                                                       // 20\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 21\n                                                                                                                       // 22\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space                                                         // 23\nvar START_KEYCODE = 229;                                                                                               // 24\n                                                                                                                       // 25\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;                           // 26\n                                                                                                                       // 27\nvar documentMode = null;                                                                                               // 28\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {                                                    // 29\n  documentMode = document.documentMode;                                                                                // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\n// Webkit offers a very useful `textInput` event that can be used to                                                   // 33\n// directly represent `beforeInput`. The IE `textinput` event is not as                                                // 34\n// useful, so we don't use it.                                                                                         // 35\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();    // 36\n                                                                                                                       // 37\n// In IE9+, we have access to composition events, but the data supplied                                                // 38\n// by the native compositionend event may be incorrect. Japanese ideographic                                           // 39\n// spaces, for instance (\\u3000) are not recorded correctly.                                                           // 40\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n                                                                                                                       // 42\n/**                                                                                                                    // 43\n * Opera <= 12 includes TextEvent in window, but does not fire                                                         // 44\n * text input events. Rely on keypress instead.                                                                        // 45\n */                                                                                                                    // 46\nfunction isPresto() {                                                                                                  // 47\n  var opera = window.opera;                                                                                            // 48\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;      // 49\n}                                                                                                                      // 50\n                                                                                                                       // 51\nvar SPACEBAR_CODE = 32;                                                                                                // 52\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);                                                                // 53\n                                                                                                                       // 54\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 55\n                                                                                                                       // 56\n// Events and their corresponding property names.                                                                      // 57\nvar eventTypes = {                                                                                                     // 58\n  beforeInput: {                                                                                                       // 59\n    phasedRegistrationNames: {                                                                                         // 60\n      bubbled: keyOf({ onBeforeInput: null }),                                                                         // 61\n      captured: keyOf({ onBeforeInputCapture: null })                                                                  // 62\n    },                                                                                                                 // 63\n    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]\n  },                                                                                                                   // 65\n  compositionEnd: {                                                                                                    // 66\n    phasedRegistrationNames: {                                                                                         // 67\n      bubbled: keyOf({ onCompositionEnd: null }),                                                                      // 68\n      captured: keyOf({ onCompositionEndCapture: null })                                                               // 69\n    },                                                                                                                 // 70\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },                                                                                                                   // 72\n  compositionStart: {                                                                                                  // 73\n    phasedRegistrationNames: {                                                                                         // 74\n      bubbled: keyOf({ onCompositionStart: null }),                                                                    // 75\n      captured: keyOf({ onCompositionStartCapture: null })                                                             // 76\n    },                                                                                                                 // 77\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },                                                                                                                   // 79\n  compositionUpdate: {                                                                                                 // 80\n    phasedRegistrationNames: {                                                                                         // 81\n      bubbled: keyOf({ onCompositionUpdate: null }),                                                                   // 82\n      captured: keyOf({ onCompositionUpdateCapture: null })                                                            // 83\n    },                                                                                                                 // 84\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  }                                                                                                                    // 86\n};                                                                                                                     // 87\n                                                                                                                       // 88\n// Track whether we've ever handled a keypress on the space key.                                                       // 89\nvar hasSpaceKeypress = false;                                                                                          // 90\n                                                                                                                       // 91\n/**                                                                                                                    // 92\n * Return whether a native keypress event is assumed to be a command.                                                  // 93\n * This is required because Firefox fires `keypress` events for key commands                                           // 94\n * (cut, copy, select-all, etc.) even though no character is inserted.                                                 // 95\n */                                                                                                                    // 96\nfunction isKeypressCommand(nativeEvent) {                                                                              // 97\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&                                         // 98\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.                                                   // 99\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);                                                                        // 100\n}                                                                                                                      // 101\n                                                                                                                       // 102\n/**                                                                                                                    // 103\n * Translate native top level events into event types.                                                                 // 104\n *                                                                                                                     // 105\n * @param {string} topLevelType                                                                                        // 106\n * @return {object}                                                                                                    // 107\n */                                                                                                                    // 108\nfunction getCompositionEventType(topLevelType) {                                                                       // 109\n  switch (topLevelType) {                                                                                              // 110\n    case topLevelTypes.topCompositionStart:                                                                            // 111\n      return eventTypes.compositionStart;                                                                              // 112\n    case topLevelTypes.topCompositionEnd:                                                                              // 113\n      return eventTypes.compositionEnd;                                                                                // 114\n    case topLevelTypes.topCompositionUpdate:                                                                           // 115\n      return eventTypes.compositionUpdate;                                                                             // 116\n  }                                                                                                                    // 117\n}                                                                                                                      // 118\n                                                                                                                       // 119\n/**                                                                                                                    // 120\n * Does our fallback best-guess model think this event signifies that                                                  // 121\n * composition has begun?                                                                                              // 122\n *                                                                                                                     // 123\n * @param {string} topLevelType                                                                                        // 124\n * @param {object} nativeEvent                                                                                         // 125\n * @return {boolean}                                                                                                   // 126\n */                                                                                                                    // 127\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {                                                       // 128\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;                           // 129\n}                                                                                                                      // 130\n                                                                                                                       // 131\n/**                                                                                                                    // 132\n * Does our fallback mode think that this event is the end of composition?                                             // 133\n *                                                                                                                     // 134\n * @param {string} topLevelType                                                                                        // 135\n * @param {object} nativeEvent                                                                                         // 136\n * @return {boolean}                                                                                                   // 137\n */                                                                                                                    // 138\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {                                                         // 139\n  switch (topLevelType) {                                                                                              // 140\n    case topLevelTypes.topKeyUp:                                                                                       // 141\n      // Command keys insert or clear IME input.                                                                       // 142\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;                                                         // 143\n    case topLevelTypes.topKeyDown:                                                                                     // 144\n      // Expect IME keyCode on each keydown. If we get any other                                                       // 145\n      // code we must have exited earlier.                                                                             // 146\n      return nativeEvent.keyCode !== START_KEYCODE;                                                                    // 147\n    case topLevelTypes.topKeyPress:                                                                                    // 148\n    case topLevelTypes.topMouseDown:                                                                                   // 149\n    case topLevelTypes.topBlur:                                                                                        // 150\n      // Events are not possible without cancelling IME.                                                               // 151\n      return true;                                                                                                     // 152\n    default:                                                                                                           // 153\n      return false;                                                                                                    // 154\n  }                                                                                                                    // 155\n}                                                                                                                      // 156\n                                                                                                                       // 157\n/**                                                                                                                    // 158\n * Google Input Tools provides composition data via a CustomEvent,                                                     // 159\n * with the `data` property populated in the `detail` object. If this                                                  // 160\n * is available on the event object, use it. If not, this is a plain                                                   // 161\n * composition event and we have nothing special to extract.                                                           // 162\n *                                                                                                                     // 163\n * @param {object} nativeEvent                                                                                         // 164\n * @return {?string}                                                                                                   // 165\n */                                                                                                                    // 166\nfunction getDataFromCustomEvent(nativeEvent) {                                                                         // 167\n  var detail = nativeEvent.detail;                                                                                     // 168\n  if (typeof detail === 'object' && 'data' in detail) {                                                                // 169\n    return detail.data;                                                                                                // 170\n  }                                                                                                                    // 171\n  return null;                                                                                                         // 172\n}                                                                                                                      // 173\n                                                                                                                       // 174\n// Track the current IME composition fallback object, if any.                                                          // 175\nvar currentComposition = null;                                                                                         // 176\n                                                                                                                       // 177\n/**                                                                                                                    // 178\n * @return {?object} A SyntheticCompositionEvent.                                                                      // 179\n */                                                                                                                    // 180\nfunction extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {                           // 181\n  var eventType;                                                                                                       // 182\n  var fallbackData;                                                                                                    // 183\n                                                                                                                       // 184\n  if (canUseCompositionEvent) {                                                                                        // 185\n    eventType = getCompositionEventType(topLevelType);                                                                 // 186\n  } else if (!currentComposition) {                                                                                    // 187\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {                                                       // 188\n      eventType = eventTypes.compositionStart;                                                                         // 189\n    }                                                                                                                  // 190\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {                                                    // 191\n    eventType = eventTypes.compositionEnd;                                                                             // 192\n  }                                                                                                                    // 193\n                                                                                                                       // 194\n  if (!eventType) {                                                                                                    // 195\n    return null;                                                                                                       // 196\n  }                                                                                                                    // 197\n                                                                                                                       // 198\n  if (useFallbackCompositionData) {                                                                                    // 199\n    // The current composition is stored statically and must not be                                                    // 200\n    // overwritten while composition continues.                                                                        // 201\n    if (!currentComposition && eventType === eventTypes.compositionStart) {                                            // 202\n      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);                                      // 203\n    } else if (eventType === eventTypes.compositionEnd) {                                                              // 204\n      if (currentComposition) {                                                                                        // 205\n        fallbackData = currentComposition.getData();                                                                   // 206\n      }                                                                                                                // 207\n    }                                                                                                                  // 208\n  }                                                                                                                    // 209\n                                                                                                                       // 210\n  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);              // 211\n                                                                                                                       // 212\n  if (fallbackData) {                                                                                                  // 213\n    // Inject data generated from fallback path into the synthetic event.                                              // 214\n    // This matches the property of native CompositionEventInterface.                                                  // 215\n    event.data = fallbackData;                                                                                         // 216\n  } else {                                                                                                             // 217\n    var customData = getDataFromCustomEvent(nativeEvent);                                                              // 218\n    if (customData !== null) {                                                                                         // 219\n      event.data = customData;                                                                                         // 220\n    }                                                                                                                  // 221\n  }                                                                                                                    // 222\n                                                                                                                       // 223\n  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 224\n  return event;                                                                                                        // 225\n}                                                                                                                      // 226\n                                                                                                                       // 227\n/**                                                                                                                    // 228\n * @param {string} topLevelType Record from `EventConstants`.                                                          // 229\n * @param {object} nativeEvent Native browser event.                                                                   // 230\n * @return {?string} The string corresponding to this `beforeInput` event.                                             // 231\n */                                                                                                                    // 232\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {                                                        // 233\n  switch (topLevelType) {                                                                                              // 234\n    case topLevelTypes.topCompositionEnd:                                                                              // 235\n      return getDataFromCustomEvent(nativeEvent);                                                                      // 236\n    case topLevelTypes.topKeyPress:                                                                                    // 237\n      /**                                                                                                              // 238\n       * If native `textInput` events are available, our goal is to make                                               // 239\n       * use of them. However, there is a special case: the spacebar key.                                              // 240\n       * In Webkit, preventing default on a spacebar `textInput` event                                                 // 241\n       * cancels character insertion, but it *also* causes the browser                                                 // 242\n       * to fall back to its default spacebar behavior of scrolling the                                                // 243\n       * page.                                                                                                         // 244\n       *                                                                                                               // 245\n       * Tracking at:                                                                                                  // 246\n       * https://code.google.com/p/chromium/issues/detail?id=355103                                                    // 247\n       *                                                                                                               // 248\n       * To avoid this issue, use the keypress event as if no `textInput`                                              // 249\n       * event is available.                                                                                           // 250\n       */                                                                                                              // 251\n      var which = nativeEvent.which;                                                                                   // 252\n      if (which !== SPACEBAR_CODE) {                                                                                   // 253\n        return null;                                                                                                   // 254\n      }                                                                                                                // 255\n                                                                                                                       // 256\n      hasSpaceKeypress = true;                                                                                         // 257\n      return SPACEBAR_CHAR;                                                                                            // 258\n                                                                                                                       // 259\n    case topLevelTypes.topTextInput:                                                                                   // 260\n      // Record the characters to be added to the DOM.                                                                 // 261\n      var chars = nativeEvent.data;                                                                                    // 262\n                                                                                                                       // 263\n      // If it's a spacebar character, assume that we have already handled                                             // 264\n      // it at the keypress level and bail immediately. Android Chrome                                                 // 265\n      // doesn't give us keycodes, so we need to blacklist it.                                                         // 266\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {                                                               // 267\n        return null;                                                                                                   // 268\n      }                                                                                                                // 269\n                                                                                                                       // 270\n      return chars;                                                                                                    // 271\n                                                                                                                       // 272\n    default:                                                                                                           // 273\n      // For other native event types, do nothing.                                                                     // 274\n      return null;                                                                                                     // 275\n  }                                                                                                                    // 276\n}                                                                                                                      // 277\n                                                                                                                       // 278\n/**                                                                                                                    // 279\n * For browsers that do not provide the `textInput` event, extract the                                                 // 280\n * appropriate string to use for SyntheticInputEvent.                                                                  // 281\n *                                                                                                                     // 282\n * @param {string} topLevelType Record from `EventConstants`.                                                          // 283\n * @param {object} nativeEvent Native browser event.                                                                   // 284\n * @return {?string} The fallback string for this `beforeInput` event.                                                 // 285\n */                                                                                                                    // 286\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {                                                      // 287\n  // If we are currently composing (IME) and using a fallback to do so,                                                // 288\n  // try to extract the composed characters from the fallback object.                                                  // 289\n  // If composition event is available, we extract a string only at                                                    // 290\n  // compositionevent, otherwise extract it at fallback events.                                                        // 291\n  if (currentComposition) {                                                                                            // 292\n    if (topLevelType === topLevelTypes.topCompositionEnd || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = currentComposition.getData();                                                                        // 294\n      FallbackCompositionState.release(currentComposition);                                                            // 295\n      currentComposition = null;                                                                                       // 296\n      return chars;                                                                                                    // 297\n    }                                                                                                                  // 298\n    return null;                                                                                                       // 299\n  }                                                                                                                    // 300\n                                                                                                                       // 301\n  switch (topLevelType) {                                                                                              // 302\n    case topLevelTypes.topPaste:                                                                                       // 303\n      // If a paste event occurs after a keypress, throw out the input                                                 // 304\n      // chars. Paste events should not lead to BeforeInput events.                                                    // 305\n      return null;                                                                                                     // 306\n    case topLevelTypes.topKeyPress:                                                                                    // 307\n      /**                                                                                                              // 308\n       * As of v27, Firefox may fire keypress events even when no character                                            // 309\n       * will be inserted. A few possibilities:                                                                        // 310\n       *                                                                                                               // 311\n       * - `which` is `0`. Arrow keys, Esc key, etc.                                                                   // 312\n       *                                                                                                               // 313\n       * - `which` is the pressed key code, but no char is available.                                                  // 314\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for                                               // 315\n       *   this key combination and no character is inserted into the                                                  // 316\n       *   document, but FF fires the keypress for char code `100` anyway.                                             // 317\n       *   No `input` event will occur.                                                                                // 318\n       *                                                                                                               // 319\n       * - `which` is the pressed key code, but a command combination is                                               // 320\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no                                                   // 321\n       *   `input` event will occur.                                                                                   // 322\n       */                                                                                                              // 323\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {                                                      // 324\n        return String.fromCharCode(nativeEvent.which);                                                                 // 325\n      }                                                                                                                // 326\n      return null;                                                                                                     // 327\n    case topLevelTypes.topCompositionEnd:                                                                              // 328\n      return useFallbackCompositionData ? null : nativeEvent.data;                                                     // 329\n    default:                                                                                                           // 330\n      return null;                                                                                                     // 331\n  }                                                                                                                    // 332\n}                                                                                                                      // 333\n                                                                                                                       // 334\n/**                                                                                                                    // 335\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native                                             // 336\n * `textInput` or fallback behavior.                                                                                   // 337\n *                                                                                                                     // 338\n * @return {?object} A SyntheticInputEvent.                                                                            // 339\n */                                                                                                                    // 340\nfunction extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {                           // 341\n  var chars;                                                                                                           // 342\n                                                                                                                       // 343\n  if (canUseTextInputEvent) {                                                                                          // 344\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);                                                      // 345\n  } else {                                                                                                             // 346\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);                                                    // 347\n  }                                                                                                                    // 348\n                                                                                                                       // 349\n  // If no characters are being inserted, no BeforeInput event should                                                  // 350\n  // be fired.                                                                                                         // 351\n  if (!chars) {                                                                                                        // 352\n    return null;                                                                                                       // 353\n  }                                                                                                                    // 354\n                                                                                                                       // 355\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);       // 356\n                                                                                                                       // 357\n  event.data = chars;                                                                                                  // 358\n  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 359\n  return event;                                                                                                        // 360\n}                                                                                                                      // 361\n                                                                                                                       // 362\n/**                                                                                                                    // 363\n * Create an `onBeforeInput` event to match                                                                            // 364\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.                                       // 365\n *                                                                                                                     // 366\n * This event plugin is based on the native `textInput` event                                                          // 367\n * available in Chrome, Safari, Opera, and IE. This event fires after                                                  // 368\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.                                                          // 369\n *                                                                                                                     // 370\n * `beforeInput` is spec'd but not implemented in any browsers, and                                                    // 371\n * the `input` event does not provide any useful information about what has                                            // 372\n * actually been added, contrary to the spec. Thus, `textInput` is the best                                            // 373\n * available event to identify the characters that have actually been inserted                                         // 374\n * into the target node.                                                                                               // 375\n *                                                                                                                     // 376\n * This plugin is also responsible for emitting `composition` events, thus                                             // 377\n * allowing us to share composition fallback code for both `beforeInput` and                                           // 378\n * `composition` event types.                                                                                          // 379\n */                                                                                                                    // 380\nvar BeforeInputEventPlugin = {                                                                                         // 381\n                                                                                                                       // 382\n  eventTypes: eventTypes,                                                                                              // 383\n                                                                                                                       // 384\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 385\n    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];\n  }                                                                                                                    // 387\n};                                                                                                                     // 388\n                                                                                                                       // 389\nmodule.exports = BeforeInputEventPlugin;                                                                               // 390\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"EventConstants.js\":[\"fbjs/lib/keyMirror\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EventConstants.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EventConstants                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar keyMirror = require('fbjs/lib/keyMirror');                                                                         // 14\n                                                                                                                       // 15\nvar PropagationPhases = keyMirror({ bubbled: null, captured: null });                                                  // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Types of raw signals from the browser caught at the top level.                                                      // 19\n */                                                                                                                    // 20\nvar topLevelTypes = keyMirror({                                                                                        // 21\n  topAbort: null,                                                                                                      // 22\n  topAnimationEnd: null,                                                                                               // 23\n  topAnimationIteration: null,                                                                                         // 24\n  topAnimationStart: null,                                                                                             // 25\n  topBlur: null,                                                                                                       // 26\n  topCanPlay: null,                                                                                                    // 27\n  topCanPlayThrough: null,                                                                                             // 28\n  topChange: null,                                                                                                     // 29\n  topClick: null,                                                                                                      // 30\n  topCompositionEnd: null,                                                                                             // 31\n  topCompositionStart: null,                                                                                           // 32\n  topCompositionUpdate: null,                                                                                          // 33\n  topContextMenu: null,                                                                                                // 34\n  topCopy: null,                                                                                                       // 35\n  topCut: null,                                                                                                        // 36\n  topDoubleClick: null,                                                                                                // 37\n  topDrag: null,                                                                                                       // 38\n  topDragEnd: null,                                                                                                    // 39\n  topDragEnter: null,                                                                                                  // 40\n  topDragExit: null,                                                                                                   // 41\n  topDragLeave: null,                                                                                                  // 42\n  topDragOver: null,                                                                                                   // 43\n  topDragStart: null,                                                                                                  // 44\n  topDrop: null,                                                                                                       // 45\n  topDurationChange: null,                                                                                             // 46\n  topEmptied: null,                                                                                                    // 47\n  topEncrypted: null,                                                                                                  // 48\n  topEnded: null,                                                                                                      // 49\n  topError: null,                                                                                                      // 50\n  topFocus: null,                                                                                                      // 51\n  topInput: null,                                                                                                      // 52\n  topInvalid: null,                                                                                                    // 53\n  topKeyDown: null,                                                                                                    // 54\n  topKeyPress: null,                                                                                                   // 55\n  topKeyUp: null,                                                                                                      // 56\n  topLoad: null,                                                                                                       // 57\n  topLoadedData: null,                                                                                                 // 58\n  topLoadedMetadata: null,                                                                                             // 59\n  topLoadStart: null,                                                                                                  // 60\n  topMouseDown: null,                                                                                                  // 61\n  topMouseMove: null,                                                                                                  // 62\n  topMouseOut: null,                                                                                                   // 63\n  topMouseOver: null,                                                                                                  // 64\n  topMouseUp: null,                                                                                                    // 65\n  topPaste: null,                                                                                                      // 66\n  topPause: null,                                                                                                      // 67\n  topPlay: null,                                                                                                       // 68\n  topPlaying: null,                                                                                                    // 69\n  topProgress: null,                                                                                                   // 70\n  topRateChange: null,                                                                                                 // 71\n  topReset: null,                                                                                                      // 72\n  topScroll: null,                                                                                                     // 73\n  topSeeked: null,                                                                                                     // 74\n  topSeeking: null,                                                                                                    // 75\n  topSelectionChange: null,                                                                                            // 76\n  topStalled: null,                                                                                                    // 77\n  topSubmit: null,                                                                                                     // 78\n  topSuspend: null,                                                                                                    // 79\n  topTextInput: null,                                                                                                  // 80\n  topTimeUpdate: null,                                                                                                 // 81\n  topTouchCancel: null,                                                                                                // 82\n  topTouchEnd: null,                                                                                                   // 83\n  topTouchMove: null,                                                                                                  // 84\n  topTouchStart: null,                                                                                                 // 85\n  topTransitionEnd: null,                                                                                              // 86\n  topVolumeChange: null,                                                                                               // 87\n  topWaiting: null,                                                                                                    // 88\n  topWheel: null                                                                                                       // 89\n});                                                                                                                    // 90\n                                                                                                                       // 91\nvar EventConstants = {                                                                                                 // 92\n  topLevelTypes: topLevelTypes,                                                                                        // 93\n  PropagationPhases: PropagationPhases                                                                                 // 94\n};                                                                                                                     // 95\n                                                                                                                       // 96\nmodule.exports = EventConstants;                                                                                       // 97\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"EventPropagators.js\":[\"./EventConstants\",\"./EventPluginHub\",\"./EventPluginUtils\",\"./accumulateInto\",\"./forEachAccumulated\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EventPropagators.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EventPropagators                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar EventConstants = require('./EventConstants');                                                                      // 14\nvar EventPluginHub = require('./EventPluginHub');                                                                      // 15\nvar EventPluginUtils = require('./EventPluginUtils');                                                                  // 16\n                                                                                                                       // 17\nvar accumulateInto = require('./accumulateInto');                                                                      // 18\nvar forEachAccumulated = require('./forEachAccumulated');                                                              // 19\nvar warning = require('fbjs/lib/warning');                                                                             // 20\n                                                                                                                       // 21\nvar PropagationPhases = EventConstants.PropagationPhases;                                                              // 22\nvar getListener = EventPluginHub.getListener;                                                                          // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Some event types have a notion of different registration names for different                                        // 26\n * \"phases\" of propagation. This finds listeners by a given phase.                                                     // 27\n */                                                                                                                    // 28\nfunction listenerAtPhase(inst, event, propagationPhase) {                                                              // 29\n  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];                               // 30\n  return getListener(inst, registrationName);                                                                          // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function                                           // 35\n * here, allows us to not have to bind or create functions for each event.                                             // 36\n * Mutating the event's members allows us to not have to create a wrapping                                             // 37\n * \"dispatch\" object that pairs the event with the listener.                                                           // 38\n */                                                                                                                    // 39\nfunction accumulateDirectionalDispatches(inst, upwards, event) {                                                       // 40\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 41\n    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;               // 42\n  }                                                                                                                    // 43\n  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;                                        // 44\n  var listener = listenerAtPhase(inst, event, phase);                                                                  // 45\n  if (listener) {                                                                                                      // 46\n    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);                                     // 47\n    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);                                         // 48\n  }                                                                                                                    // 49\n}                                                                                                                      // 50\n                                                                                                                       // 51\n/**                                                                                                                    // 52\n * Collect dispatches (must be entirely collected before dispatching - see unit                                        // 53\n * tests). Lazily allocate the array to conserve memory.  We must loop through                                         // 54\n * each event and perform the traversal for each one. We cannot perform a                                              // 55\n * single traversal for the entire collection of events because each event may                                         // 56\n * have a different target.                                                                                            // 57\n */                                                                                                                    // 58\nfunction accumulateTwoPhaseDispatchesSingle(event) {                                                                   // 59\n  if (event && event.dispatchConfig.phasedRegistrationNames) {                                                         // 60\n    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);                      // 61\n  }                                                                                                                    // 62\n}                                                                                                                      // 63\n                                                                                                                       // 64\n/**                                                                                                                    // 65\n * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.                                          // 66\n */                                                                                                                    // 67\nfunction accumulateTwoPhaseDispatchesSingleSkipTarget(event) {                                                         // 68\n  if (event && event.dispatchConfig.phasedRegistrationNames) {                                                         // 69\n    var targetInst = event._targetInst;                                                                                // 70\n    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;                               // 71\n    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);                             // 72\n  }                                                                                                                    // 73\n}                                                                                                                      // 74\n                                                                                                                       // 75\n/**                                                                                                                    // 76\n * Accumulates without regard to direction, does not look for phased                                                   // 77\n * registration names. Same as `accumulateDirectDispatchesSingle` but without                                          // 78\n * requiring that the `dispatchMarker` be the same as the dispatched ID.                                               // 79\n */                                                                                                                    // 80\nfunction accumulateDispatches(inst, ignoredDirection, event) {                                                         // 81\n  if (event && event.dispatchConfig.registrationName) {                                                                // 82\n    var registrationName = event.dispatchConfig.registrationName;                                                      // 83\n    var listener = getListener(inst, registrationName);                                                                // 84\n    if (listener) {                                                                                                    // 85\n      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);                                   // 86\n      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);                                       // 87\n    }                                                                                                                  // 88\n  }                                                                                                                    // 89\n}                                                                                                                      // 90\n                                                                                                                       // 91\n/**                                                                                                                    // 92\n * Accumulates dispatches on an `SyntheticEvent`, but only for the                                                     // 93\n * `dispatchMarker`.                                                                                                   // 94\n * @param {SyntheticEvent} event                                                                                       // 95\n */                                                                                                                    // 96\nfunction accumulateDirectDispatchesSingle(event) {                                                                     // 97\n  if (event && event.dispatchConfig.registrationName) {                                                                // 98\n    accumulateDispatches(event._targetInst, null, event);                                                              // 99\n  }                                                                                                                    // 100\n}                                                                                                                      // 101\n                                                                                                                       // 102\nfunction accumulateTwoPhaseDispatches(events) {                                                                        // 103\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);                                                      // 104\n}                                                                                                                      // 105\n                                                                                                                       // 106\nfunction accumulateTwoPhaseDispatchesSkipTarget(events) {                                                              // 107\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);                                            // 108\n}                                                                                                                      // 109\n                                                                                                                       // 110\nfunction accumulateEnterLeaveDispatches(leave, enter, from, to) {                                                      // 111\n  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);                                   // 112\n}                                                                                                                      // 113\n                                                                                                                       // 114\nfunction accumulateDirectDispatches(events) {                                                                          // 115\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);                                                        // 116\n}                                                                                                                      // 117\n                                                                                                                       // 118\n/**                                                                                                                    // 119\n * A small set of propagation patterns, each of which will accept a small amount                                       // 120\n * of information, and generate a set of \"dispatch ready event objects\" - which                                        // 121\n * are sets of events that have already been annotated with a set of dispatched                                        // 122\n * listener functions/ids. The API is designed this way to discourage these                                            // 123\n * propagation strategies from actually executing the dispatches, since we                                             // 124\n * always want to collect the entire set of dispatches before executing event a                                        // 125\n * single one.                                                                                                         // 126\n *                                                                                                                     // 127\n * @constructor EventPropagators                                                                                       // 128\n */                                                                                                                    // 129\nvar EventPropagators = {                                                                                               // 130\n  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,                                                          // 131\n  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,                                      // 132\n  accumulateDirectDispatches: accumulateDirectDispatches,                                                              // 133\n  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches                                                       // 134\n};                                                                                                                     // 135\n                                                                                                                       // 136\nmodule.exports = EventPropagators;                                                                                     // 137\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"EventPluginHub.js\":[\"./reactProdInvariant\",\"./EventPluginRegistry\",\"./EventPluginUtils\",\"./ReactErrorUtils\",\"./accumulateInto\",\"./forEachAccumulated\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EventPluginHub.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EventPluginHub                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar EventPluginRegistry = require('./EventPluginRegistry');                                                            // 16\nvar EventPluginUtils = require('./EventPluginUtils');                                                                  // 17\nvar ReactErrorUtils = require('./ReactErrorUtils');                                                                    // 18\n                                                                                                                       // 19\nvar accumulateInto = require('./accumulateInto');                                                                      // 20\nvar forEachAccumulated = require('./forEachAccumulated');                                                              // 21\nvar invariant = require('fbjs/lib/invariant');                                                                         // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Internal store for event listeners                                                                                  // 25\n */                                                                                                                    // 26\nvar listenerBank = {};                                                                                                 // 27\n                                                                                                                       // 28\n/**                                                                                                                    // 29\n * Internal queue of events that have accumulated their dispatches and are                                             // 30\n * waiting to have their dispatches executed.                                                                          // 31\n */                                                                                                                    // 32\nvar eventQueue = null;                                                                                                 // 33\n                                                                                                                       // 34\n/**                                                                                                                    // 35\n * Dispatches an event and releases it back into the pool, unless persistent.                                          // 36\n *                                                                                                                     // 37\n * @param {?object} event Synthetic event to be dispatched.                                                            // 38\n * @param {boolean} simulated If the event is simulated (changes exn behavior)                                         // 39\n * @private                                                                                                            // 40\n */                                                                                                                    // 41\nvar executeDispatchesAndRelease = function (event, simulated) {                                                        // 42\n  if (event) {                                                                                                         // 43\n    EventPluginUtils.executeDispatchesInOrder(event, simulated);                                                       // 44\n                                                                                                                       // 45\n    if (!event.isPersistent()) {                                                                                       // 46\n      event.constructor.release(event);                                                                                // 47\n    }                                                                                                                  // 48\n  }                                                                                                                    // 49\n};                                                                                                                     // 50\nvar executeDispatchesAndReleaseSimulated = function (e) {                                                              // 51\n  return executeDispatchesAndRelease(e, true);                                                                         // 52\n};                                                                                                                     // 53\nvar executeDispatchesAndReleaseTopLevel = function (e) {                                                               // 54\n  return executeDispatchesAndRelease(e, false);                                                                        // 55\n};                                                                                                                     // 56\n                                                                                                                       // 57\nvar getDictionaryKey = function (inst) {                                                                               // 58\n  // Prevents V8 performance issue:                                                                                    // 59\n  // https://github.com/facebook/react/pull/7232                                                                       // 60\n  return '.' + inst._rootNodeID;                                                                                       // 61\n};                                                                                                                     // 62\n                                                                                                                       // 63\n/**                                                                                                                    // 64\n * This is a unified interface for event plugins to be installed and configured.                                       // 65\n *                                                                                                                     // 66\n * Event plugins can implement the following properties:                                                               // 67\n *                                                                                                                     // 68\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}                                             // 69\n *     Required. When a top-level event is fired, this method is expected to                                           // 70\n *     extract synthetic events that will in turn be queued and dispatched.                                            // 71\n *                                                                                                                     // 72\n *   `eventTypes` {object}                                                                                             // 73\n *     Optional, plugins that fire events must publish a mapping of registration                                       // 74\n *     names that are used to register listeners. Values of this mapping must                                          // 75\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.                                        // 76\n *                                                                                                                     // 77\n *   `executeDispatch` {function(object, function, string)}                                                            // 78\n *     Optional, allows plugins to override how an event gets dispatched. By                                           // 79\n *     default, the listener is simply invoked.                                                                        // 80\n *                                                                                                                     // 81\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.                                        // 82\n *                                                                                                                     // 83\n * @public                                                                                                             // 84\n */                                                                                                                    // 85\nvar EventPluginHub = {                                                                                                 // 86\n                                                                                                                       // 87\n  /**                                                                                                                  // 88\n   * Methods for injecting dependencies.                                                                               // 89\n   */                                                                                                                  // 90\n  injection: {                                                                                                         // 91\n                                                                                                                       // 92\n    /**                                                                                                                // 93\n     * @param {array} InjectedEventPluginOrder                                                                         // 94\n     * @public                                                                                                         // 95\n     */                                                                                                                // 96\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,                                                // 97\n                                                                                                                       // 98\n    /**                                                                                                                // 99\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                        // 100\n     */                                                                                                                // 101\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName                                             // 102\n                                                                                                                       // 103\n  },                                                                                                                   // 104\n                                                                                                                       // 105\n  /**                                                                                                                  // 106\n   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.                                        // 107\n   *                                                                                                                   // 108\n   * @param {object} inst The instance, which is the source of events.                                                 // 109\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 110\n   * @param {function} listener The callback to store.                                                                 // 111\n   */                                                                                                                  // 112\n  putListener: function (inst, registrationName, listener) {                                                           // 113\n    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;\n                                                                                                                       // 115\n    var key = getDictionaryKey(inst);                                                                                  // 116\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});             // 117\n    bankForRegistrationName[key] = listener;                                                                           // 118\n                                                                                                                       // 119\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];                                  // 120\n    if (PluginModule && PluginModule.didPutListener) {                                                                 // 121\n      PluginModule.didPutListener(inst, registrationName, listener);                                                   // 122\n    }                                                                                                                  // 123\n  },                                                                                                                   // 124\n                                                                                                                       // 125\n  /**                                                                                                                  // 126\n   * @param {object} inst The instance, which is the source of events.                                                 // 127\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 128\n   * @return {?function} The stored callback.                                                                          // 129\n   */                                                                                                                  // 130\n  getListener: function (inst, registrationName) {                                                                     // 131\n    var bankForRegistrationName = listenerBank[registrationName];                                                      // 132\n    var key = getDictionaryKey(inst);                                                                                  // 133\n    return bankForRegistrationName && bankForRegistrationName[key];                                                    // 134\n  },                                                                                                                   // 135\n                                                                                                                       // 136\n  /**                                                                                                                  // 137\n   * Deletes a listener from the registration bank.                                                                    // 138\n   *                                                                                                                   // 139\n   * @param {object} inst The instance, which is the source of events.                                                 // 140\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 141\n   */                                                                                                                  // 142\n  deleteListener: function (inst, registrationName) {                                                                  // 143\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];                                  // 144\n    if (PluginModule && PluginModule.willDeleteListener) {                                                             // 145\n      PluginModule.willDeleteListener(inst, registrationName);                                                         // 146\n    }                                                                                                                  // 147\n                                                                                                                       // 148\n    var bankForRegistrationName = listenerBank[registrationName];                                                      // 149\n    // TODO: This should never be null -- when is it?                                                                  // 150\n    if (bankForRegistrationName) {                                                                                     // 151\n      var key = getDictionaryKey(inst);                                                                                // 152\n      delete bankForRegistrationName[key];                                                                             // 153\n    }                                                                                                                  // 154\n  },                                                                                                                   // 155\n                                                                                                                       // 156\n  /**                                                                                                                  // 157\n   * Deletes all listeners for the DOM element with the supplied ID.                                                   // 158\n   *                                                                                                                   // 159\n   * @param {object} inst The instance, which is the source of events.                                                 // 160\n   */                                                                                                                  // 161\n  deleteAllListeners: function (inst) {                                                                                // 162\n    var key = getDictionaryKey(inst);                                                                                  // 163\n    for (var registrationName in listenerBank) {                                                                       // 164\n      if (!listenerBank.hasOwnProperty(registrationName)) {                                                            // 165\n        continue;                                                                                                      // 166\n      }                                                                                                                // 167\n                                                                                                                       // 168\n      if (!listenerBank[registrationName][key]) {                                                                      // 169\n        continue;                                                                                                      // 170\n      }                                                                                                                // 171\n                                                                                                                       // 172\n      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];                                // 173\n      if (PluginModule && PluginModule.willDeleteListener) {                                                           // 174\n        PluginModule.willDeleteListener(inst, registrationName);                                                       // 175\n      }                                                                                                                // 176\n                                                                                                                       // 177\n      delete listenerBank[registrationName][key];                                                                      // 178\n    }                                                                                                                  // 179\n  },                                                                                                                   // 180\n                                                                                                                       // 181\n  /**                                                                                                                  // 182\n   * Allows registered plugins an opportunity to extract events from top-level                                         // 183\n   * native browser events.                                                                                            // 184\n   *                                                                                                                   // 185\n   * @return {*} An accumulation of synthetic events.                                                                  // 186\n   * @internal                                                                                                         // 187\n   */                                                                                                                  // 188\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 189\n    var events;                                                                                                        // 190\n    var plugins = EventPluginRegistry.plugins;                                                                         // 191\n    for (var i = 0; i < plugins.length; i++) {                                                                         // 192\n      // Not every plugin in the ordering may be loaded at runtime.                                                    // 193\n      var possiblePlugin = plugins[i];                                                                                 // 194\n      if (possiblePlugin) {                                                                                            // 195\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);  // 196\n        if (extractedEvents) {                                                                                         // 197\n          events = accumulateInto(events, extractedEvents);                                                            // 198\n        }                                                                                                              // 199\n      }                                                                                                                // 200\n    }                                                                                                                  // 201\n    return events;                                                                                                     // 202\n  },                                                                                                                   // 203\n                                                                                                                       // 204\n  /**                                                                                                                  // 205\n   * Enqueues a synthetic event that should be dispatched when                                                         // 206\n   * `processEventQueue` is invoked.                                                                                   // 207\n   *                                                                                                                   // 208\n   * @param {*} events An accumulation of synthetic events.                                                            // 209\n   * @internal                                                                                                         // 210\n   */                                                                                                                  // 211\n  enqueueEvents: function (events) {                                                                                   // 212\n    if (events) {                                                                                                      // 213\n      eventQueue = accumulateInto(eventQueue, events);                                                                 // 214\n    }                                                                                                                  // 215\n  },                                                                                                                   // 216\n                                                                                                                       // 217\n  /**                                                                                                                  // 218\n   * Dispatches all synthetic events on the event queue.                                                               // 219\n   *                                                                                                                   // 220\n   * @internal                                                                                                         // 221\n   */                                                                                                                  // 222\n  processEventQueue: function (simulated) {                                                                            // 223\n    // Set `eventQueue` to null before processing it so that we can tell if more                                       // 224\n    // events get enqueued while processing.                                                                           // 225\n    var processingEventQueue = eventQueue;                                                                             // 226\n    eventQueue = null;                                                                                                 // 227\n    if (simulated) {                                                                                                   // 228\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);                                  // 229\n    } else {                                                                                                           // 230\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);                                   // 231\n    }                                                                                                                  // 232\n    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;\n    // This would be a good time to rethrow if any of the event handlers threw.                                        // 234\n    ReactErrorUtils.rethrowCaughtError();                                                                              // 235\n  },                                                                                                                   // 236\n                                                                                                                       // 237\n  /**                                                                                                                  // 238\n   * These are needed for tests only. Do not use!                                                                      // 239\n   */                                                                                                                  // 240\n  __purge: function () {                                                                                               // 241\n    listenerBank = {};                                                                                                 // 242\n  },                                                                                                                   // 243\n                                                                                                                       // 244\n  __getListenerBank: function () {                                                                                     // 245\n    return listenerBank;                                                                                               // 246\n  }                                                                                                                    // 247\n                                                                                                                       // 248\n};                                                                                                                     // 249\n                                                                                                                       // 250\nmodule.exports = EventPluginHub;                                                                                       // 251\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"EventPluginRegistry.js\":[\"./reactProdInvariant\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EventPluginRegistry.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EventPluginRegistry                                                                                 // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar invariant = require('fbjs/lib/invariant');                                                                         // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Injectable ordering of event plugins.                                                                               // 19\n */                                                                                                                    // 20\nvar EventPluginOrder = null;                                                                                           // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Injectable mapping from names to event plugin modules.                                                              // 24\n */                                                                                                                    // 25\nvar namesToPlugins = {};                                                                                               // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Recomputes the plugin list using the injected plugins and plugin ordering.                                          // 29\n *                                                                                                                     // 30\n * @private                                                                                                            // 31\n */                                                                                                                    // 32\nfunction recomputePluginOrdering() {                                                                                   // 33\n  if (!EventPluginOrder) {                                                                                             // 34\n    // Wait until an `EventPluginOrder` is injected.                                                                   // 35\n    return;                                                                                                            // 36\n  }                                                                                                                    // 37\n  for (var pluginName in namesToPlugins) {                                                                             // 38\n    var PluginModule = namesToPlugins[pluginName];                                                                     // 39\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);                                                            // 40\n    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;\n    if (EventPluginRegistry.plugins[pluginIndex]) {                                                                    // 42\n      continue;                                                                                                        // 43\n    }                                                                                                                  // 44\n    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;                                                           // 46\n    var publishedEvents = PluginModule.eventTypes;                                                                     // 47\n    for (var eventName in publishedEvents) {                                                                           // 48\n      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;\n    }                                                                                                                  // 50\n  }                                                                                                                    // 51\n}                                                                                                                      // 52\n                                                                                                                       // 53\n/**                                                                                                                    // 54\n * Publishes an event so that it can be dispatched by the supplied plugin.                                             // 55\n *                                                                                                                     // 56\n * @param {object} dispatchConfig Dispatch configuration for the event.                                                // 57\n * @param {object} PluginModule Plugin publishing the event.                                                           // 58\n * @return {boolean} True if the event was successfully published.                                                     // 59\n * @private                                                                                                            // 60\n */                                                                                                                    // 61\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {                                              // 62\n  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;                                            // 64\n                                                                                                                       // 65\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;                                                // 66\n  if (phasedRegistrationNames) {                                                                                       // 67\n    for (var phaseName in phasedRegistrationNames) {                                                                   // 68\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {                                                         // 69\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];                                               // 70\n        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);                                      // 71\n      }                                                                                                                // 72\n    }                                                                                                                  // 73\n    return true;                                                                                                       // 74\n  } else if (dispatchConfig.registrationName) {                                                                        // 75\n    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);                                 // 76\n    return true;                                                                                                       // 77\n  }                                                                                                                    // 78\n  return false;                                                                                                        // 79\n}                                                                                                                      // 80\n                                                                                                                       // 81\n/**                                                                                                                    // 82\n * Publishes a registration name that is used to identify dispatched events and                                        // 83\n * can be used with `EventPluginHub.putListener` to register listeners.                                                // 84\n *                                                                                                                     // 85\n * @param {string} registrationName Registration name to add.                                                          // 86\n * @param {object} PluginModule Plugin publishing the event.                                                           // 87\n * @private                                                                                                            // 88\n */                                                                                                                    // 89\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {                                          // 90\n  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;                                        // 92\n  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;\n                                                                                                                       // 94\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 95\n    var lowerCasedName = registrationName.toLowerCase();                                                               // 96\n    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;                                  // 97\n                                                                                                                       // 98\n    if (registrationName === 'onDoubleClick') {                                                                        // 99\n      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;                                     // 100\n    }                                                                                                                  // 101\n  }                                                                                                                    // 102\n}                                                                                                                      // 103\n                                                                                                                       // 104\n/**                                                                                                                    // 105\n * Registers plugins so that they can extract and dispatch events.                                                     // 106\n *                                                                                                                     // 107\n * @see {EventPluginHub}                                                                                               // 108\n */                                                                                                                    // 109\nvar EventPluginRegistry = {                                                                                            // 110\n                                                                                                                       // 111\n  /**                                                                                                                  // 112\n   * Ordered list of injected plugins.                                                                                 // 113\n   */                                                                                                                  // 114\n  plugins: [],                                                                                                         // 115\n                                                                                                                       // 116\n  /**                                                                                                                  // 117\n   * Mapping from event name to dispatch config                                                                        // 118\n   */                                                                                                                  // 119\n  eventNameDispatchConfigs: {},                                                                                        // 120\n                                                                                                                       // 121\n  /**                                                                                                                  // 122\n   * Mapping from registration name to plugin module                                                                   // 123\n   */                                                                                                                  // 124\n  registrationNameModules: {},                                                                                         // 125\n                                                                                                                       // 126\n  /**                                                                                                                  // 127\n   * Mapping from registration name to event name                                                                      // 128\n   */                                                                                                                  // 129\n  registrationNameDependencies: {},                                                                                    // 130\n                                                                                                                       // 131\n  /**                                                                                                                  // 132\n   * Mapping from lowercase registration names to the properly cased version,                                          // 133\n   * used to warn in the case of missing event handlers. Available                                                     // 134\n   * only in __DEV__.                                                                                                  // 135\n   * @type {Object}                                                                                                    // 136\n   */                                                                                                                  // 137\n  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,                                        // 138\n                                                                                                                       // 139\n  /**                                                                                                                  // 140\n   * Injects an ordering of plugins (by plugin name). This allows the ordering                                         // 141\n   * to be decoupled from injection of the actual plugins so that ordering is                                          // 142\n   * always deterministic regardless of packaging, on-the-fly injection, etc.                                          // 143\n   *                                                                                                                   // 144\n   * @param {array} InjectedEventPluginOrder                                                                           // 145\n   * @internal                                                                                                         // 146\n   * @see {EventPluginHub.injection.injectEventPluginOrder}                                                            // 147\n   */                                                                                                                  // 148\n  injectEventPluginOrder: function (InjectedEventPluginOrder) {                                                        // 149\n    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;\n    // Clone the ordering so it cannot be dynamically mutated.                                                         // 151\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);                                           // 152\n    recomputePluginOrdering();                                                                                         // 153\n  },                                                                                                                   // 154\n                                                                                                                       // 155\n  /**                                                                                                                  // 156\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be                                          // 157\n   * in the ordering injected by `injectEventPluginOrder`.                                                             // 158\n   *                                                                                                                   // 159\n   * Plugins can be injected as part of page initialization or on-the-fly.                                             // 160\n   *                                                                                                                   // 161\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                          // 162\n   * @internal                                                                                                         // 163\n   * @see {EventPluginHub.injection.injectEventPluginsByName}                                                          // 164\n   */                                                                                                                  // 165\n  injectEventPluginsByName: function (injectedNamesToPlugins) {                                                        // 166\n    var isOrderingDirty = false;                                                                                       // 167\n    for (var pluginName in injectedNamesToPlugins) {                                                                   // 168\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {                                                        // 169\n        continue;                                                                                                      // 170\n      }                                                                                                                // 171\n      var PluginModule = injectedNamesToPlugins[pluginName];                                                           // 172\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {                 // 173\n        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;\n        namesToPlugins[pluginName] = PluginModule;                                                                     // 175\n        isOrderingDirty = true;                                                                                        // 176\n      }                                                                                                                // 177\n    }                                                                                                                  // 178\n    if (isOrderingDirty) {                                                                                             // 179\n      recomputePluginOrdering();                                                                                       // 180\n    }                                                                                                                  // 181\n  },                                                                                                                   // 182\n                                                                                                                       // 183\n  /**                                                                                                                  // 184\n   * Looks up the plugin for the supplied event.                                                                       // 185\n   *                                                                                                                   // 186\n   * @param {object} event A synthetic event.                                                                          // 187\n   * @return {?object} The plugin that created the supplied event.                                                     // 188\n   * @internal                                                                                                         // 189\n   */                                                                                                                  // 190\n  getPluginModuleForEvent: function (event) {                                                                          // 191\n    var dispatchConfig = event.dispatchConfig;                                                                         // 192\n    if (dispatchConfig.registrationName) {                                                                             // 193\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;                     // 194\n    }                                                                                                                  // 195\n    for (var phase in dispatchConfig.phasedRegistrationNames) {                                                        // 196\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {                                             // 197\n        continue;                                                                                                      // 198\n      }                                                                                                                // 199\n      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];   // 200\n      if (PluginModule) {                                                                                              // 201\n        return PluginModule;                                                                                           // 202\n      }                                                                                                                // 203\n    }                                                                                                                  // 204\n    return null;                                                                                                       // 205\n  },                                                                                                                   // 206\n                                                                                                                       // 207\n  /**                                                                                                                  // 208\n   * Exposed for unit testing.                                                                                         // 209\n   * @private                                                                                                          // 210\n   */                                                                                                                  // 211\n  _resetEventPlugins: function () {                                                                                    // 212\n    EventPluginOrder = null;                                                                                           // 213\n    for (var pluginName in namesToPlugins) {                                                                           // 214\n      if (namesToPlugins.hasOwnProperty(pluginName)) {                                                                 // 215\n        delete namesToPlugins[pluginName];                                                                             // 216\n      }                                                                                                                // 217\n    }                                                                                                                  // 218\n    EventPluginRegistry.plugins.length = 0;                                                                            // 219\n                                                                                                                       // 220\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;                                       // 221\n    for (var eventName in eventNameDispatchConfigs) {                                                                  // 222\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {                                                        // 223\n        delete eventNameDispatchConfigs[eventName];                                                                    // 224\n      }                                                                                                                // 225\n    }                                                                                                                  // 226\n                                                                                                                       // 227\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;                                         // 228\n    for (var registrationName in registrationNameModules) {                                                            // 229\n      if (registrationNameModules.hasOwnProperty(registrationName)) {                                                  // 230\n        delete registrationNameModules[registrationName];                                                              // 231\n      }                                                                                                                // 232\n    }                                                                                                                  // 233\n                                                                                                                       // 234\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 235\n      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;                                   // 236\n      for (var lowerCasedName in possibleRegistrationNames) {                                                          // 237\n        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {                                                // 238\n          delete possibleRegistrationNames[lowerCasedName];                                                            // 239\n        }                                                                                                              // 240\n      }                                                                                                                // 241\n    }                                                                                                                  // 242\n  }                                                                                                                    // 243\n                                                                                                                       // 244\n};                                                                                                                     // 245\n                                                                                                                       // 246\nmodule.exports = EventPluginRegistry;                                                                                  // 247\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"EventPluginUtils.js\":[\"./reactProdInvariant\",\"./EventConstants\",\"./ReactErrorUtils\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EventPluginUtils.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EventPluginUtils                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar EventConstants = require('./EventConstants');                                                                      // 16\nvar ReactErrorUtils = require('./ReactErrorUtils');                                                                    // 17\n                                                                                                                       // 18\nvar invariant = require('fbjs/lib/invariant');                                                                         // 19\nvar warning = require('fbjs/lib/warning');                                                                             // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Injected dependencies:                                                                                              // 23\n */                                                                                                                    // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * - `ComponentTree`: [required] Module that can convert between React instances                                       // 27\n *   and actual node references.                                                                                       // 28\n */                                                                                                                    // 29\nvar ComponentTree;                                                                                                     // 30\nvar TreeTraversal;                                                                                                     // 31\nvar injection = {                                                                                                      // 32\n  injectComponentTree: function (Injected) {                                                                           // 33\n    ComponentTree = Injected;                                                                                          // 34\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 35\n      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;\n    }                                                                                                                  // 37\n  },                                                                                                                   // 38\n  injectTreeTraversal: function (Injected) {                                                                           // 39\n    TreeTraversal = Injected;                                                                                          // 40\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 41\n      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;\n    }                                                                                                                  // 43\n  }                                                                                                                    // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 47\n                                                                                                                       // 48\nfunction isEndish(topLevelType) {                                                                                      // 49\n  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;\n}                                                                                                                      // 51\n                                                                                                                       // 52\nfunction isMoveish(topLevelType) {                                                                                     // 53\n  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;                   // 54\n}                                                                                                                      // 55\nfunction isStartish(topLevelType) {                                                                                    // 56\n  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;                  // 57\n}                                                                                                                      // 58\n                                                                                                                       // 59\nvar validateEventDispatches;                                                                                           // 60\nif (process.env.NODE_ENV !== 'production') {                                                                           // 61\n  validateEventDispatches = function (event) {                                                                         // 62\n    var dispatchListeners = event._dispatchListeners;                                                                  // 63\n    var dispatchInstances = event._dispatchInstances;                                                                  // 64\n                                                                                                                       // 65\n    var listenersIsArr = Array.isArray(dispatchListeners);                                                             // 66\n    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;                          // 67\n                                                                                                                       // 68\n    var instancesIsArr = Array.isArray(dispatchInstances);                                                             // 69\n    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;                          // 70\n                                                                                                                       // 71\n    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;\n  };                                                                                                                   // 73\n}                                                                                                                      // 74\n                                                                                                                       // 75\n/**                                                                                                                    // 76\n * Dispatch the event to the listener.                                                                                 // 77\n * @param {SyntheticEvent} event SyntheticEvent to handle                                                              // 78\n * @param {boolean} simulated If the event is simulated (changes exn behavior)                                         // 79\n * @param {function} listener Application-level callback                                                               // 80\n * @param {*} inst Internal component instance                                                                         // 81\n */                                                                                                                    // 82\nfunction executeDispatch(event, simulated, listener, inst) {                                                           // 83\n  var type = event.type || 'unknown-event';                                                                            // 84\n  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);                                                    // 85\n  if (simulated) {                                                                                                     // 86\n    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);                                             // 87\n  } else {                                                                                                             // 88\n    ReactErrorUtils.invokeGuardedCallback(type, listener, event);                                                      // 89\n  }                                                                                                                    // 90\n  event.currentTarget = null;                                                                                          // 91\n}                                                                                                                      // 92\n                                                                                                                       // 93\n/**                                                                                                                    // 94\n * Standard/simple iteration through an event's collected dispatches.                                                  // 95\n */                                                                                                                    // 96\nfunction executeDispatchesInOrder(event, simulated) {                                                                  // 97\n  var dispatchListeners = event._dispatchListeners;                                                                    // 98\n  var dispatchInstances = event._dispatchInstances;                                                                    // 99\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 100\n    validateEventDispatches(event);                                                                                    // 101\n  }                                                                                                                    // 102\n  if (Array.isArray(dispatchListeners)) {                                                                              // 103\n    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 104\n      if (event.isPropagationStopped()) {                                                                              // 105\n        break;                                                                                                         // 106\n      }                                                                                                                // 107\n      // Listeners and Instances are two parallel arrays that are always in sync.                                      // 108\n      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);                                   // 109\n    }                                                                                                                  // 110\n  } else if (dispatchListeners) {                                                                                      // 111\n    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);                                           // 112\n  }                                                                                                                    // 113\n  event._dispatchListeners = null;                                                                                     // 114\n  event._dispatchInstances = null;                                                                                     // 115\n}                                                                                                                      // 116\n                                                                                                                       // 117\n/**                                                                                                                    // 118\n * Standard/simple iteration through an event's collected dispatches, but stops                                        // 119\n * at the first dispatch execution returning true, and returns that id.                                                // 120\n *                                                                                                                     // 121\n * @return {?string} id of the first dispatch execution who's listener returns                                         // 122\n * true, or null if no listener returned true.                                                                         // 123\n */                                                                                                                    // 124\nfunction executeDispatchesInOrderStopAtTrueImpl(event) {                                                               // 125\n  var dispatchListeners = event._dispatchListeners;                                                                    // 126\n  var dispatchInstances = event._dispatchInstances;                                                                    // 127\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 128\n    validateEventDispatches(event);                                                                                    // 129\n  }                                                                                                                    // 130\n  if (Array.isArray(dispatchListeners)) {                                                                              // 131\n    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 132\n      if (event.isPropagationStopped()) {                                                                              // 133\n        break;                                                                                                         // 134\n      }                                                                                                                // 135\n      // Listeners and Instances are two parallel arrays that are always in sync.                                      // 136\n      if (dispatchListeners[i](event, dispatchInstances[i])) {                                                         // 137\n        return dispatchInstances[i];                                                                                   // 138\n      }                                                                                                                // 139\n    }                                                                                                                  // 140\n  } else if (dispatchListeners) {                                                                                      // 141\n    if (dispatchListeners(event, dispatchInstances)) {                                                                 // 142\n      return dispatchInstances;                                                                                        // 143\n    }                                                                                                                  // 144\n  }                                                                                                                    // 145\n  return null;                                                                                                         // 146\n}                                                                                                                      // 147\n                                                                                                                       // 148\n/**                                                                                                                    // 149\n * @see executeDispatchesInOrderStopAtTrueImpl                                                                         // 150\n */                                                                                                                    // 151\nfunction executeDispatchesInOrderStopAtTrue(event) {                                                                   // 152\n  var ret = executeDispatchesInOrderStopAtTrueImpl(event);                                                             // 153\n  event._dispatchInstances = null;                                                                                     // 154\n  event._dispatchListeners = null;                                                                                     // 155\n  return ret;                                                                                                          // 156\n}                                                                                                                      // 157\n                                                                                                                       // 158\n/**                                                                                                                    // 159\n * Execution of a \"direct\" dispatch - there must be at most one dispatch                                               // 160\n * accumulated on the event or it is considered an error. It doesn't really make                                       // 161\n * sense for an event with multiple dispatches (bubbled) to keep track of the                                          // 162\n * return values at each dispatch execution, but it does tend to make sense when                                       // 163\n * dealing with \"direct\" dispatches.                                                                                   // 164\n *                                                                                                                     // 165\n * @return {*} The return value of executing the single dispatch.                                                      // 166\n */                                                                                                                    // 167\nfunction executeDirectDispatch(event) {                                                                                // 168\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 169\n    validateEventDispatches(event);                                                                                    // 170\n  }                                                                                                                    // 171\n  var dispatchListener = event._dispatchListeners;                                                                     // 172\n  var dispatchInstance = event._dispatchInstances;                                                                     // 173\n  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;\n  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;              // 175\n  var res = dispatchListener ? dispatchListener(event) : null;                                                         // 176\n  event.currentTarget = null;                                                                                          // 177\n  event._dispatchListeners = null;                                                                                     // 178\n  event._dispatchInstances = null;                                                                                     // 179\n  return res;                                                                                                          // 180\n}                                                                                                                      // 181\n                                                                                                                       // 182\n/**                                                                                                                    // 183\n * @param {SyntheticEvent} event                                                                                       // 184\n * @return {boolean} True iff number of dispatches accumulated is greater than 0.                                      // 185\n */                                                                                                                    // 186\nfunction hasDispatches(event) {                                                                                        // 187\n  return !!event._dispatchListeners;                                                                                   // 188\n}                                                                                                                      // 189\n                                                                                                                       // 190\n/**                                                                                                                    // 191\n * General utilities that are useful in creating custom Event Plugins.                                                 // 192\n */                                                                                                                    // 193\nvar EventPluginUtils = {                                                                                               // 194\n  isEndish: isEndish,                                                                                                  // 195\n  isMoveish: isMoveish,                                                                                                // 196\n  isStartish: isStartish,                                                                                              // 197\n                                                                                                                       // 198\n  executeDirectDispatch: executeDirectDispatch,                                                                        // 199\n  executeDispatchesInOrder: executeDispatchesInOrder,                                                                  // 200\n  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,                                              // 201\n  hasDispatches: hasDispatches,                                                                                        // 202\n                                                                                                                       // 203\n  getInstanceFromNode: function (node) {                                                                               // 204\n    return ComponentTree.getInstanceFromNode(node);                                                                    // 205\n  },                                                                                                                   // 206\n  getNodeFromInstance: function (node) {                                                                               // 207\n    return ComponentTree.getNodeFromInstance(node);                                                                    // 208\n  },                                                                                                                   // 209\n  isAncestor: function (a, b) {                                                                                        // 210\n    return TreeTraversal.isAncestor(a, b);                                                                             // 211\n  },                                                                                                                   // 212\n  getLowestCommonAncestor: function (a, b) {                                                                           // 213\n    return TreeTraversal.getLowestCommonAncestor(a, b);                                                                // 214\n  },                                                                                                                   // 215\n  getParentInstance: function (inst) {                                                                                 // 216\n    return TreeTraversal.getParentInstance(inst);                                                                      // 217\n  },                                                                                                                   // 218\n  traverseTwoPhase: function (target, fn, arg) {                                                                       // 219\n    return TreeTraversal.traverseTwoPhase(target, fn, arg);                                                            // 220\n  },                                                                                                                   // 221\n  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {                                                        // 222\n    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);                                             // 223\n  },                                                                                                                   // 224\n                                                                                                                       // 225\n  injection: injection                                                                                                 // 226\n};                                                                                                                     // 227\n                                                                                                                       // 228\nmodule.exports = EventPluginUtils;                                                                                     // 229\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactErrorUtils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactErrorUtils.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactErrorUtils                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar caughtError = null;                                                                                                // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Call a function while guarding against errors that happens within it.                                               // 17\n *                                                                                                                     // 18\n * @param {?String} name of the guard to use for logging or debugging                                                  // 19\n * @param {Function} func The function to invoke                                                                       // 20\n * @param {*} a First argument                                                                                         // 21\n * @param {*} b Second argument                                                                                        // 22\n */                                                                                                                    // 23\nfunction invokeGuardedCallback(name, func, a, b) {                                                                     // 24\n  try {                                                                                                                // 25\n    return func(a, b);                                                                                                 // 26\n  } catch (x) {                                                                                                        // 27\n    if (caughtError === null) {                                                                                        // 28\n      caughtError = x;                                                                                                 // 29\n    }                                                                                                                  // 30\n    return undefined;                                                                                                  // 31\n  }                                                                                                                    // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\nvar ReactErrorUtils = {                                                                                                // 35\n  invokeGuardedCallback: invokeGuardedCallback,                                                                        // 36\n                                                                                                                       // 37\n  /**                                                                                                                  // 38\n   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event                                         // 39\n   * handler are sure to be rethrown by rethrowCaughtError.                                                            // 40\n   */                                                                                                                  // 41\n  invokeGuardedCallbackWithCatch: invokeGuardedCallback,                                                               // 42\n                                                                                                                       // 43\n  /**                                                                                                                  // 44\n   * During execution of guarded functions we will capture the first error which                                       // 45\n   * we will rethrow to be handled by the top level error handler.                                                     // 46\n   */                                                                                                                  // 47\n  rethrowCaughtError: function () {                                                                                    // 48\n    if (caughtError) {                                                                                                 // 49\n      var error = caughtError;                                                                                         // 50\n      caughtError = null;                                                                                              // 51\n      throw error;                                                                                                     // 52\n    }                                                                                                                  // 53\n  }                                                                                                                    // 54\n};                                                                                                                     // 55\n                                                                                                                       // 56\nif (process.env.NODE_ENV !== 'production') {                                                                           // 57\n  /**                                                                                                                  // 58\n   * To help development we can get better devtools integration by simulating a                                        // 59\n   * real browser event.                                                                                               // 60\n   */                                                                                                                  // 61\n  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n    var fakeNode = document.createElement('react');                                                                    // 63\n    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {                                              // 64\n      var boundFunc = func.bind(null, a, b);                                                                           // 65\n      var evtType = 'react-' + name;                                                                                   // 66\n      fakeNode.addEventListener(evtType, boundFunc, false);                                                            // 67\n      var evt = document.createEvent('Event');                                                                         // 68\n      evt.initEvent(evtType, false, false);                                                                            // 69\n      fakeNode.dispatchEvent(evt);                                                                                     // 70\n      fakeNode.removeEventListener(evtType, boundFunc, false);                                                         // 71\n    };                                                                                                                 // 72\n  }                                                                                                                    // 73\n}                                                                                                                      // 74\n                                                                                                                       // 75\nmodule.exports = ReactErrorUtils;                                                                                      // 76\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accumulateInto.js\":[\"./reactProdInvariant\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/accumulateInto.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule accumulateInto                                                                                      // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 15\n                                                                                                                       // 16\nvar invariant = require('fbjs/lib/invariant');                                                                         // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Accumulates items that must not be null or undefined into the first one. This                                       // 20\n * is used to conserve memory by avoiding array allocations, and thus sacrifices                                       // 21\n * API cleanness. Since `current` can be null before being passed in and not                                           // 22\n * null after this function, make sure to assign it back to `current`:                                                 // 23\n *                                                                                                                     // 24\n * `a = accumulateInto(a, b);`                                                                                         // 25\n *                                                                                                                     // 26\n * This API should be sparingly used. Try `accumulate` for something cleaner.                                          // 27\n *                                                                                                                     // 28\n * @return {*|array<*>} An accumulation of items.                                                                      // 29\n */                                                                                                                    // 30\n                                                                                                                       // 31\nfunction accumulateInto(current, next) {                                                                               // 32\n  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;\n                                                                                                                       // 34\n  if (current == null) {                                                                                               // 35\n    return next;                                                                                                       // 36\n  }                                                                                                                    // 37\n                                                                                                                       // 38\n  // Both are not empty. Warning: Never call x.concat(y) when you are not                                              // 39\n  // certain that x is an Array (x could be a string with concat method).                                              // 40\n  if (Array.isArray(current)) {                                                                                        // 41\n    if (Array.isArray(next)) {                                                                                         // 42\n      current.push.apply(current, next);                                                                               // 43\n      return current;                                                                                                  // 44\n    }                                                                                                                  // 45\n    current.push(next);                                                                                                // 46\n    return current;                                                                                                    // 47\n  }                                                                                                                    // 48\n                                                                                                                       // 49\n  if (Array.isArray(next)) {                                                                                           // 50\n    // A bit too dangerous to mutate `next`.                                                                           // 51\n    return [current].concat(next);                                                                                     // 52\n  }                                                                                                                    // 53\n                                                                                                                       // 54\n  return [current, next];                                                                                              // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\nmodule.exports = accumulateInto;                                                                                       // 58\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"forEachAccumulated.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/forEachAccumulated.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule forEachAccumulated                                                                                  // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * @param {array} arr an \"accumulation\" of items which is either an Array or                                           // 16\n * a single item. Useful when paired with the `accumulate` module. This is a                                           // 17\n * simple utility that allows us to reason about a collection of items, but                                            // 18\n * handling the case when there is exactly one item (and we do not need to                                             // 19\n * allocate an array).                                                                                                 // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nfunction forEachAccumulated(arr, cb, scope) {                                                                          // 23\n  if (Array.isArray(arr)) {                                                                                            // 24\n    arr.forEach(cb, scope);                                                                                            // 25\n  } else if (arr) {                                                                                                    // 26\n    cb.call(scope, arr);                                                                                               // 27\n  }                                                                                                                    // 28\n}                                                                                                                      // 29\n                                                                                                                       // 30\nmodule.exports = forEachAccumulated;                                                                                   // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"FallbackCompositionState.js\":[\"object-assign\",\"./PooledClass\",\"./getTextContentAccessor\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/FallbackCompositionState.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule FallbackCompositionState                                                                            // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar PooledClass = require('./PooledClass');                                                                            // 16\n                                                                                                                       // 17\nvar getTextContentAccessor = require('./getTextContentAccessor');                                                      // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * This helper class stores information about text content of a target node,                                           // 21\n * allowing comparison of content before and after a given event.                                                      // 22\n *                                                                                                                     // 23\n * Identify the node where selection currently begins, then observe                                                    // 24\n * both its text content and its current position in the DOM. Since the                                                // 25\n * browser may natively replace the target node during composition, we can                                             // 26\n * use its position to find its replacement.                                                                           // 27\n *                                                                                                                     // 28\n * @param {DOMEventTarget} root                                                                                        // 29\n */                                                                                                                    // 30\nfunction FallbackCompositionState(root) {                                                                              // 31\n  this._root = root;                                                                                                   // 32\n  this._startText = this.getText();                                                                                    // 33\n  this._fallbackText = null;                                                                                           // 34\n}                                                                                                                      // 35\n                                                                                                                       // 36\n_assign(FallbackCompositionState.prototype, {                                                                          // 37\n  destructor: function () {                                                                                            // 38\n    this._root = null;                                                                                                 // 39\n    this._startText = null;                                                                                            // 40\n    this._fallbackText = null;                                                                                         // 41\n  },                                                                                                                   // 42\n                                                                                                                       // 43\n  /**                                                                                                                  // 44\n   * Get current text of input.                                                                                        // 45\n   *                                                                                                                   // 46\n   * @return {string}                                                                                                  // 47\n   */                                                                                                                  // 48\n  getText: function () {                                                                                               // 49\n    if ('value' in this._root) {                                                                                       // 50\n      return this._root.value;                                                                                         // 51\n    }                                                                                                                  // 52\n    return this._root[getTextContentAccessor()];                                                                       // 53\n  },                                                                                                                   // 54\n                                                                                                                       // 55\n  /**                                                                                                                  // 56\n   * Determine the differing substring between the initially stored                                                    // 57\n   * text content and the current content.                                                                             // 58\n   *                                                                                                                   // 59\n   * @return {string}                                                                                                  // 60\n   */                                                                                                                  // 61\n  getData: function () {                                                                                               // 62\n    if (this._fallbackText) {                                                                                          // 63\n      return this._fallbackText;                                                                                       // 64\n    }                                                                                                                  // 65\n                                                                                                                       // 66\n    var start;                                                                                                         // 67\n    var startValue = this._startText;                                                                                  // 68\n    var startLength = startValue.length;                                                                               // 69\n    var end;                                                                                                           // 70\n    var endValue = this.getText();                                                                                     // 71\n    var endLength = endValue.length;                                                                                   // 72\n                                                                                                                       // 73\n    for (start = 0; start < startLength; start++) {                                                                    // 74\n      if (startValue[start] !== endValue[start]) {                                                                     // 75\n        break;                                                                                                         // 76\n      }                                                                                                                // 77\n    }                                                                                                                  // 78\n                                                                                                                       // 79\n    var minEnd = startLength - start;                                                                                  // 80\n    for (end = 1; end <= minEnd; end++) {                                                                              // 81\n      if (startValue[startLength - end] !== endValue[endLength - end]) {                                               // 82\n        break;                                                                                                         // 83\n      }                                                                                                                // 84\n    }                                                                                                                  // 85\n                                                                                                                       // 86\n    var sliceTail = end > 1 ? 1 - end : undefined;                                                                     // 87\n    this._fallbackText = endValue.slice(start, sliceTail);                                                             // 88\n    return this._fallbackText;                                                                                         // 89\n  }                                                                                                                    // 90\n});                                                                                                                    // 91\n                                                                                                                       // 92\nPooledClass.addPoolingTo(FallbackCompositionState);                                                                    // 93\n                                                                                                                       // 94\nmodule.exports = FallbackCompositionState;                                                                             // 95\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getTextContentAccessor.js\":[\"fbjs/lib/ExecutionEnvironment\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getTextContentAccessor.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getTextContentAccessor                                                                              // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 14\n                                                                                                                       // 15\nvar contentKey = null;                                                                                                 // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Gets the key used to access text content on a DOM node.                                                             // 19\n *                                                                                                                     // 20\n * @return {?string} Key used to access text content.                                                                  // 21\n * @internal                                                                                                           // 22\n */                                                                                                                    // 23\nfunction getTextContentAccessor() {                                                                                    // 24\n  if (!contentKey && ExecutionEnvironment.canUseDOM) {                                                                 // 25\n    // Prefer textContent to innerText because many browsers support both but                                          // 26\n    // SVG <text> elements don't support innerText even when <div> does.                                               // 27\n    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';                              // 28\n  }                                                                                                                    // 29\n  return contentKey;                                                                                                   // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nmodule.exports = getTextContentAccessor;                                                                               // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticCompositionEvent.js\":[\"./SyntheticEvent\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticCompositionEvent.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticCompositionEvent                                                                           // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * @interface Event                                                                                                    // 17\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents                                              // 18\n */                                                                                                                    // 19\nvar CompositionEventInterface = {                                                                                      // 20\n  data: null                                                                                                           // 21\n};                                                                                                                     // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 25\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 26\n * @param {object} nativeEvent Native browser event.                                                                   // 27\n * @extends {SyntheticUIEvent}                                                                                         // 28\n */                                                                                                                    // 29\nfunction SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                   // 30\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nSyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);                                     // 34\n                                                                                                                       // 35\nmodule.exports = SyntheticCompositionEvent;                                                                            // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticEvent.js\":[\"object-assign\",\"./PooledClass\",\"fbjs/lib/emptyFunction\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticEvent.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticEvent                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar PooledClass = require('./PooledClass');                                                                            // 16\n                                                                                                                       // 17\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 18\nvar warning = require('fbjs/lib/warning');                                                                             // 19\n                                                                                                                       // 20\nvar didWarnForAddedNewProperty = false;                                                                                // 21\nvar isProxySupported = typeof Proxy === 'function';                                                                    // 22\n                                                                                                                       // 23\nvar shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * @interface Event                                                                                                    // 27\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 28\n */                                                                                                                    // 29\nvar EventInterface = {                                                                                                 // 30\n  type: null,                                                                                                          // 31\n  target: null,                                                                                                        // 32\n  // currentTarget is set when dispatching; no use in copying it here                                                  // 33\n  currentTarget: emptyFunction.thatReturnsNull,                                                                        // 34\n  eventPhase: null,                                                                                                    // 35\n  bubbles: null,                                                                                                       // 36\n  cancelable: null,                                                                                                    // 37\n  timeStamp: function (event) {                                                                                        // 38\n    return event.timeStamp || Date.now();                                                                              // 39\n  },                                                                                                                   // 40\n  defaultPrevented: null,                                                                                              // 41\n  isTrusted: null                                                                                                      // 42\n};                                                                                                                     // 43\n                                                                                                                       // 44\n/**                                                                                                                    // 45\n * Synthetic events are dispatched by event plugins, typically in response to a                                        // 46\n * top-level event delegation handler.                                                                                 // 47\n *                                                                                                                     // 48\n * These systems should generally use pooling to reduce the frequency of garbage                                       // 49\n * collection. The system should check `isPersistent` to determine whether the                                         // 50\n * event should be released into the pool after being dispatched. Users that                                           // 51\n * need a persisted event should invoke `persist`.                                                                     // 52\n *                                                                                                                     // 53\n * Synthetic events (and subclasses) implement the DOM Level 3 Events API by                                           // 54\n * normalizing browser quirks. Subclasses do not necessarily have to implement a                                       // 55\n * DOM interface; custom application-specific events can also subclass this.                                           // 56\n *                                                                                                                     // 57\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 58\n * @param {*} targetInst Marker identifying the event target.                                                          // 59\n * @param {object} nativeEvent Native browser event.                                                                   // 60\n * @param {DOMEventTarget} nativeEventTarget Target node.                                                              // 61\n */                                                                                                                    // 62\nfunction SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {                                  // 63\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 64\n    // these have a getter/setter for warnings                                                                         // 65\n    delete this.nativeEvent;                                                                                           // 66\n    delete this.preventDefault;                                                                                        // 67\n    delete this.stopPropagation;                                                                                       // 68\n  }                                                                                                                    // 69\n                                                                                                                       // 70\n  this.dispatchConfig = dispatchConfig;                                                                                // 71\n  this._targetInst = targetInst;                                                                                       // 72\n  this.nativeEvent = nativeEvent;                                                                                      // 73\n                                                                                                                       // 74\n  var Interface = this.constructor.Interface;                                                                          // 75\n  for (var propName in Interface) {                                                                                    // 76\n    if (!Interface.hasOwnProperty(propName)) {                                                                         // 77\n      continue;                                                                                                        // 78\n    }                                                                                                                  // 79\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 80\n      delete this[propName]; // this has a getter/setter for warnings                                                  // 81\n    }                                                                                                                  // 82\n    var normalize = Interface[propName];                                                                               // 83\n    if (normalize) {                                                                                                   // 84\n      this[propName] = normalize(nativeEvent);                                                                         // 85\n    } else {                                                                                                           // 86\n      if (propName === 'target') {                                                                                     // 87\n        this.target = nativeEventTarget;                                                                               // 88\n      } else {                                                                                                         // 89\n        this[propName] = nativeEvent[propName];                                                                        // 90\n      }                                                                                                                // 91\n    }                                                                                                                  // 92\n  }                                                                                                                    // 93\n                                                                                                                       // 94\n  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;\n  if (defaultPrevented) {                                                                                              // 96\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 97\n  } else {                                                                                                             // 98\n    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;                                                          // 99\n  }                                                                                                                    // 100\n  this.isPropagationStopped = emptyFunction.thatReturnsFalse;                                                          // 101\n  return this;                                                                                                         // 102\n}                                                                                                                      // 103\n                                                                                                                       // 104\n_assign(SyntheticEvent.prototype, {                                                                                    // 105\n                                                                                                                       // 106\n  preventDefault: function () {                                                                                        // 107\n    this.defaultPrevented = true;                                                                                      // 108\n    var event = this.nativeEvent;                                                                                      // 109\n    if (!event) {                                                                                                      // 110\n      return;                                                                                                          // 111\n    }                                                                                                                  // 112\n                                                                                                                       // 113\n    if (event.preventDefault) {                                                                                        // 114\n      event.preventDefault();                                                                                          // 115\n    } else if (typeof event.returnValue !== 'unknown') {                                                               // 116\n      // eslint-disable-line valid-typeof                                                                              // 117\n      event.returnValue = false;                                                                                       // 118\n    }                                                                                                                  // 119\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 120\n  },                                                                                                                   // 121\n                                                                                                                       // 122\n  stopPropagation: function () {                                                                                       // 123\n    var event = this.nativeEvent;                                                                                      // 124\n    if (!event) {                                                                                                      // 125\n      return;                                                                                                          // 126\n    }                                                                                                                  // 127\n                                                                                                                       // 128\n    if (event.stopPropagation) {                                                                                       // 129\n      event.stopPropagation();                                                                                         // 130\n    } else if (typeof event.cancelBubble !== 'unknown') {                                                              // 131\n      // eslint-disable-line valid-typeof                                                                              // 132\n      // The ChangeEventPlugin registers a \"propertychange\" event for                                                  // 133\n      // IE. This event does not support bubbling or cancelling, and                                                   // 134\n      // any references to cancelBubble throw \"Member not found\".  A                                                   // 135\n      // typeof check of \"unknown\" circumvents this issue (and is also                                                 // 136\n      // IE specific).                                                                                                 // 137\n      event.cancelBubble = true;                                                                                       // 138\n    }                                                                                                                  // 139\n                                                                                                                       // 140\n    this.isPropagationStopped = emptyFunction.thatReturnsTrue;                                                         // 141\n  },                                                                                                                   // 142\n                                                                                                                       // 143\n  /**                                                                                                                  // 144\n   * We release all dispatched `SyntheticEvent`s after each event loop, adding                                         // 145\n   * them back into the pool. This allows a way to hold onto a reference that                                          // 146\n   * won't be added back into the pool.                                                                                // 147\n   */                                                                                                                  // 148\n  persist: function () {                                                                                               // 149\n    this.isPersistent = emptyFunction.thatReturnsTrue;                                                                 // 150\n  },                                                                                                                   // 151\n                                                                                                                       // 152\n  /**                                                                                                                  // 153\n   * Checks if this event should be released back into the pool.                                                       // 154\n   *                                                                                                                   // 155\n   * @return {boolean} True if this should not be released, false otherwise.                                           // 156\n   */                                                                                                                  // 157\n  isPersistent: emptyFunction.thatReturnsFalse,                                                                        // 158\n                                                                                                                       // 159\n  /**                                                                                                                  // 160\n   * `PooledClass` looks for `destructor` on each instance it releases.                                                // 161\n   */                                                                                                                  // 162\n  destructor: function () {                                                                                            // 163\n    var Interface = this.constructor.Interface;                                                                        // 164\n    for (var propName in Interface) {                                                                                  // 165\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 166\n        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));      // 167\n      } else {                                                                                                         // 168\n        this[propName] = null;                                                                                         // 169\n      }                                                                                                                // 170\n    }                                                                                                                  // 171\n    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {                                                      // 172\n      this[shouldBeReleasedProperties[i]] = null;                                                                      // 173\n    }                                                                                                                  // 174\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 175\n      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));             // 176\n      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));\n      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));\n    }                                                                                                                  // 179\n  }                                                                                                                    // 180\n                                                                                                                       // 181\n});                                                                                                                    // 182\n                                                                                                                       // 183\nSyntheticEvent.Interface = EventInterface;                                                                             // 184\n                                                                                                                       // 185\nif (process.env.NODE_ENV !== 'production') {                                                                           // 186\n  if (isProxySupported) {                                                                                              // 187\n    /*eslint-disable no-func-assign */                                                                                 // 188\n    SyntheticEvent = new Proxy(SyntheticEvent, {                                                                       // 189\n      construct: function (target, args) {                                                                             // 190\n        return this.apply(target, Object.create(target.prototype), args);                                              // 191\n      },                                                                                                               // 192\n      apply: function (constructor, that, args) {                                                                      // 193\n        return new Proxy(constructor.apply(that, args), {                                                              // 194\n          set: function (target, prop, value) {                                                                        // 195\n            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {\n              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\\'re ' + 'seeing this, you\\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;\n              didWarnForAddedNewProperty = true;                                                                       // 198\n            }                                                                                                          // 199\n            target[prop] = value;                                                                                      // 200\n            return true;                                                                                               // 201\n          }                                                                                                            // 202\n        });                                                                                                            // 203\n      }                                                                                                                // 204\n    });                                                                                                                // 205\n    /*eslint-enable no-func-assign */                                                                                  // 206\n  }                                                                                                                    // 207\n}                                                                                                                      // 208\n/**                                                                                                                    // 209\n * Helper to reduce boilerplate when creating subclasses.                                                              // 210\n *                                                                                                                     // 211\n * @param {function} Class                                                                                             // 212\n * @param {?object} Interface                                                                                          // 213\n */                                                                                                                    // 214\nSyntheticEvent.augmentClass = function (Class, Interface) {                                                            // 215\n  var Super = this;                                                                                                    // 216\n                                                                                                                       // 217\n  var E = function () {};                                                                                              // 218\n  E.prototype = Super.prototype;                                                                                       // 219\n  var prototype = new E();                                                                                             // 220\n                                                                                                                       // 221\n  _assign(prototype, Class.prototype);                                                                                 // 222\n  Class.prototype = prototype;                                                                                         // 223\n  Class.prototype.constructor = Class;                                                                                 // 224\n                                                                                                                       // 225\n  Class.Interface = _assign({}, Super.Interface, Interface);                                                           // 226\n  Class.augmentClass = Super.augmentClass;                                                                             // 227\n                                                                                                                       // 228\n  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);                                                     // 229\n};                                                                                                                     // 230\n                                                                                                                       // 231\nPooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);                                              // 232\n                                                                                                                       // 233\nmodule.exports = SyntheticEvent;                                                                                       // 234\n                                                                                                                       // 235\n/**                                                                                                                    // 236\n  * Helper to nullify syntheticEvent instance properties when destructing                                              // 237\n  *                                                                                                                    // 238\n  * @param {object} SyntheticEvent                                                                                     // 239\n  * @param {String} propName                                                                                           // 240\n  * @return {object} defineProperty object                                                                             // 241\n  */                                                                                                                   // 242\nfunction getPooledWarningPropertyDefinition(propName, getVal) {                                                        // 243\n  var isFunction = typeof getVal === 'function';                                                                       // 244\n  return {                                                                                                             // 245\n    configurable: true,                                                                                                // 246\n    set: set,                                                                                                          // 247\n    get: get                                                                                                           // 248\n  };                                                                                                                   // 249\n                                                                                                                       // 250\n  function set(val) {                                                                                                  // 251\n    var action = isFunction ? 'setting the method' : 'setting the property';                                           // 252\n    warn(action, 'This is effectively a no-op');                                                                       // 253\n    return val;                                                                                                        // 254\n  }                                                                                                                    // 255\n                                                                                                                       // 256\n  function get() {                                                                                                     // 257\n    var action = isFunction ? 'accessing the method' : 'accessing the property';                                       // 258\n    var result = isFunction ? 'This is a no-op function' : 'This is set to null';                                      // 259\n    warn(action, result);                                                                                              // 260\n    return getVal;                                                                                                     // 261\n  }                                                                                                                    // 262\n                                                                                                                       // 263\n  function warn(action, result) {                                                                                      // 264\n    var warningCondition = false;                                                                                      // 265\n    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\\'re seeing this, ' + 'you\\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;\n  }                                                                                                                    // 267\n}                                                                                                                      // 268\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticInputEvent.js\":[\"./SyntheticEvent\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticInputEvent.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticInputEvent                                                                                 // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * @interface Event                                                                                                    // 17\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105                                                       // 18\n *      /#events-inputevents                                                                                           // 19\n */                                                                                                                    // 20\nvar InputEventInterface = {                                                                                            // 21\n  data: null                                                                                                           // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 26\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 27\n * @param {object} nativeEvent Native browser event.                                                                   // 28\n * @extends {SyntheticUIEvent}                                                                                         // 29\n */                                                                                                                    // 30\nfunction SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 31\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\nSyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);                                                 // 35\n                                                                                                                       // 36\nmodule.exports = SyntheticInputEvent;                                                                                  // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ChangeEventPlugin.js\":[\"./EventConstants\",\"./EventPluginHub\",\"./EventPropagators\",\"fbjs/lib/ExecutionEnvironment\",\"./ReactDOMComponentTree\",\"./ReactUpdates\",\"./SyntheticEvent\",\"./getEventTarget\",\"./isEventSupported\",\"./isTextInputElement\",\"fbjs/lib/keyOf\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ChangeEventPlugin.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ChangeEventPlugin                                                                                   // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar EventConstants = require('./EventConstants');                                                                      // 14\nvar EventPluginHub = require('./EventPluginHub');                                                                      // 15\nvar EventPropagators = require('./EventPropagators');                                                                  // 16\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 17\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 18\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 19\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 20\n                                                                                                                       // 21\nvar getEventTarget = require('./getEventTarget');                                                                      // 22\nvar isEventSupported = require('./isEventSupported');                                                                  // 23\nvar isTextInputElement = require('./isTextInputElement');                                                              // 24\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 25\n                                                                                                                       // 26\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 27\n                                                                                                                       // 28\nvar eventTypes = {                                                                                                     // 29\n  change: {                                                                                                            // 30\n    phasedRegistrationNames: {                                                                                         // 31\n      bubbled: keyOf({ onChange: null }),                                                                              // 32\n      captured: keyOf({ onChangeCapture: null })                                                                       // 33\n    },                                                                                                                 // 34\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]\n  }                                                                                                                    // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\n/**                                                                                                                    // 39\n * For IE shims                                                                                                        // 40\n */                                                                                                                    // 41\nvar activeElement = null;                                                                                              // 42\nvar activeElementInst = null;                                                                                          // 43\nvar activeElementValue = null;                                                                                         // 44\nvar activeElementValueProp = null;                                                                                     // 45\n                                                                                                                       // 46\n/**                                                                                                                    // 47\n * SECTION: handle `change` event                                                                                      // 48\n */                                                                                                                    // 49\nfunction shouldUseChangeEvent(elem) {                                                                                  // 50\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();                                                         // 51\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';                                        // 52\n}                                                                                                                      // 53\n                                                                                                                       // 54\nvar doesChangeEventBubble = false;                                                                                     // 55\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 56\n  // See `handleChange` comment below                                                                                  // 57\n  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);         // 58\n}                                                                                                                      // 59\n                                                                                                                       // 60\nfunction manualDispatchChangeEvent(nativeEvent) {                                                                      // 61\n  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));\n  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 63\n                                                                                                                       // 64\n  // If change and propertychange bubbled, we'd just bind to it like all the                                           // 65\n  // other events and have it go through ReactBrowserEventEmitter. Since it                                            // 66\n  // doesn't, we manually listen for the events and so we have to enqueue and                                          // 67\n  // process the abstract event manually.                                                                              // 68\n  //                                                                                                                   // 69\n  // Batching is necessary here in order to ensure that all event handlers run                                         // 70\n  // before the next rerender (including event handlers attached to ancestor                                           // 71\n  // elements instead of directly on the input). Without this, controlled                                              // 72\n  // components don't work properly in conjunction with event bubbling because                                         // 73\n  // the component is rerendered and the value reverted before all the event                                           // 74\n  // handlers can run. See https://github.com/facebook/react/issues/708.                                               // 75\n  ReactUpdates.batchedUpdates(runEventInBatch, event);                                                                 // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\nfunction runEventInBatch(event) {                                                                                      // 79\n  EventPluginHub.enqueueEvents(event);                                                                                 // 80\n  EventPluginHub.processEventQueue(false);                                                                             // 81\n}                                                                                                                      // 82\n                                                                                                                       // 83\nfunction startWatchingForChangeEventIE8(target, targetInst) {                                                          // 84\n  activeElement = target;                                                                                              // 85\n  activeElementInst = targetInst;                                                                                      // 86\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);                                                    // 87\n}                                                                                                                      // 88\n                                                                                                                       // 89\nfunction stopWatchingForChangeEventIE8() {                                                                             // 90\n  if (!activeElement) {                                                                                                // 91\n    return;                                                                                                            // 92\n  }                                                                                                                    // 93\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);                                                    // 94\n  activeElement = null;                                                                                                // 95\n  activeElementInst = null;                                                                                            // 96\n}                                                                                                                      // 97\n                                                                                                                       // 98\nfunction getTargetInstForChangeEvent(topLevelType, targetInst) {                                                       // 99\n  if (topLevelType === topLevelTypes.topChange) {                                                                      // 100\n    return targetInst;                                                                                                 // 101\n  }                                                                                                                    // 102\n}                                                                                                                      // 103\nfunction handleEventsForChangeEventIE8(topLevelType, target, targetInst) {                                             // 104\n  if (topLevelType === topLevelTypes.topFocus) {                                                                       // 105\n    // stopWatching() should be a noop here but we call it just in case we                                             // 106\n    // missed a blur event somehow.                                                                                    // 107\n    stopWatchingForChangeEventIE8();                                                                                   // 108\n    startWatchingForChangeEventIE8(target, targetInst);                                                                // 109\n  } else if (topLevelType === topLevelTypes.topBlur) {                                                                 // 110\n    stopWatchingForChangeEventIE8();                                                                                   // 111\n  }                                                                                                                    // 112\n}                                                                                                                      // 113\n                                                                                                                       // 114\n/**                                                                                                                    // 115\n * SECTION: handle `input` event                                                                                       // 116\n */                                                                                                                    // 117\nvar isInputEventSupported = false;                                                                                     // 118\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 119\n  // IE9 claims to support the input event but fails to trigger it when                                                // 120\n  // deleting text, so we ignore its input events.                                                                     // 121\n  // IE10+ fire input events to often, such when a placeholder                                                         // 122\n  // changes or when an input with a placeholder is focused.                                                           // 123\n  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);         // 124\n}                                                                                                                      // 125\n                                                                                                                       // 126\n/**                                                                                                                    // 127\n * (For IE <=11) Replacement getter/setter for the `value` property that gets                                          // 128\n * set on the active element.                                                                                          // 129\n */                                                                                                                    // 130\nvar newValueProp = {                                                                                                   // 131\n  get: function () {                                                                                                   // 132\n    return activeElementValueProp.get.call(this);                                                                      // 133\n  },                                                                                                                   // 134\n  set: function (val) {                                                                                                // 135\n    // Cast to a string so we can do equality checks.                                                                  // 136\n    activeElementValue = '' + val;                                                                                     // 137\n    activeElementValueProp.set.call(this, val);                                                                        // 138\n  }                                                                                                                    // 139\n};                                                                                                                     // 140\n                                                                                                                       // 141\n/**                                                                                                                    // 142\n * (For IE <=11) Starts tracking propertychange events on the passed-in element                                        // 143\n * and override the value property so that we can distinguish user events from                                         // 144\n * value changes in JS.                                                                                                // 145\n */                                                                                                                    // 146\nfunction startWatchingForValueChange(target, targetInst) {                                                             // 147\n  activeElement = target;                                                                                              // 148\n  activeElementInst = targetInst;                                                                                      // 149\n  activeElementValue = target.value;                                                                                   // 150\n  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');                     // 151\n                                                                                                                       // 152\n  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only                                        // 153\n  // on DOM elements                                                                                                   // 154\n  Object.defineProperty(activeElement, 'value', newValueProp);                                                         // 155\n  if (activeElement.attachEvent) {                                                                                     // 156\n    activeElement.attachEvent('onpropertychange', handlePropertyChange);                                               // 157\n  } else {                                                                                                             // 158\n    activeElement.addEventListener('propertychange', handlePropertyChange, false);                                     // 159\n  }                                                                                                                    // 160\n}                                                                                                                      // 161\n                                                                                                                       // 162\n/**                                                                                                                    // 163\n * (For IE <=11) Removes the event listeners from the currently-tracked element,                                       // 164\n * if any exists.                                                                                                      // 165\n */                                                                                                                    // 166\nfunction stopWatchingForValueChange() {                                                                                // 167\n  if (!activeElement) {                                                                                                // 168\n    return;                                                                                                            // 169\n  }                                                                                                                    // 170\n                                                                                                                       // 171\n  // delete restores the original property definition                                                                  // 172\n  delete activeElement.value;                                                                                          // 173\n                                                                                                                       // 174\n  if (activeElement.detachEvent) {                                                                                     // 175\n    activeElement.detachEvent('onpropertychange', handlePropertyChange);                                               // 176\n  } else {                                                                                                             // 177\n    activeElement.removeEventListener('propertychange', handlePropertyChange, false);                                  // 178\n  }                                                                                                                    // 179\n                                                                                                                       // 180\n  activeElement = null;                                                                                                // 181\n  activeElementInst = null;                                                                                            // 182\n  activeElementValue = null;                                                                                           // 183\n  activeElementValueProp = null;                                                                                       // 184\n}                                                                                                                      // 185\n                                                                                                                       // 186\n/**                                                                                                                    // 187\n * (For IE <=11) Handles a propertychange event, sending a `change` event if                                           // 188\n * the value of the active element has changed.                                                                        // 189\n */                                                                                                                    // 190\nfunction handlePropertyChange(nativeEvent) {                                                                           // 191\n  if (nativeEvent.propertyName !== 'value') {                                                                          // 192\n    return;                                                                                                            // 193\n  }                                                                                                                    // 194\n  var value = nativeEvent.srcElement.value;                                                                            // 195\n  if (value === activeElementValue) {                                                                                  // 196\n    return;                                                                                                            // 197\n  }                                                                                                                    // 198\n  activeElementValue = value;                                                                                          // 199\n                                                                                                                       // 200\n  manualDispatchChangeEvent(nativeEvent);                                                                              // 201\n}                                                                                                                      // 202\n                                                                                                                       // 203\n/**                                                                                                                    // 204\n * If a `change` event should be fired, returns the target's ID.                                                       // 205\n */                                                                                                                    // 206\nfunction getTargetInstForInputEvent(topLevelType, targetInst) {                                                        // 207\n  if (topLevelType === topLevelTypes.topInput) {                                                                       // 208\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly                                           // 209\n    // what we want so fall through here and trigger an abstract event                                                 // 210\n    return targetInst;                                                                                                 // 211\n  }                                                                                                                    // 212\n}                                                                                                                      // 213\n                                                                                                                       // 214\nfunction handleEventsForInputEventIE(topLevelType, target, targetInst) {                                               // 215\n  if (topLevelType === topLevelTypes.topFocus) {                                                                       // 216\n    // In IE8, we can capture almost all .value changes by adding a                                                    // 217\n    // propertychange handler and looking for events with propertyName                                                 // 218\n    // equal to 'value'                                                                                                // 219\n    // In IE9-11, propertychange fires for most input events but is buggy and                                          // 220\n    // doesn't fire when text is deleted, but conveniently, selectionchange                                            // 221\n    // appears to fire in all of the remaining cases so we catch those and                                             // 222\n    // forward the event if the value has changed                                                                      // 223\n    // In either case, we don't want to call the event handler if the value                                            // 224\n    // is changed from JS so we redefine a setter for `.value` that updates                                            // 225\n    // our activeElementValue variable, allowing us to ignore those changes                                            // 226\n    //                                                                                                                 // 227\n    // stopWatching() should be a noop here but we call it just in case we                                             // 228\n    // missed a blur event somehow.                                                                                    // 229\n    stopWatchingForValueChange();                                                                                      // 230\n    startWatchingForValueChange(target, targetInst);                                                                   // 231\n  } else if (topLevelType === topLevelTypes.topBlur) {                                                                 // 232\n    stopWatchingForValueChange();                                                                                      // 233\n  }                                                                                                                    // 234\n}                                                                                                                      // 235\n                                                                                                                       // 236\n// For IE8 and IE9.                                                                                                    // 237\nfunction getTargetInstForInputEventIE(topLevelType, targetInst) {                                                      // 238\n  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn't                                           // 240\n    // helpful for us so just check activeElement instead.                                                             // 241\n    //                                                                                                                 // 242\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire                                          // 243\n    // propertychange on the first input event after setting `value` from a                                            // 244\n    // script and fires only keydown, keypress, keyup. Catching keyup usually                                          // 245\n    // gets it and catching keydown lets us fire an event for the first                                                // 246\n    // keystroke if user does a key repeat (it'll be a little delayed: right                                           // 247\n    // before the second keystroke). Other input methods (e.g., paste) seem to                                         // 248\n    // fire selectionchange normally.                                                                                  // 249\n    if (activeElement && activeElement.value !== activeElementValue) {                                                 // 250\n      activeElementValue = activeElement.value;                                                                        // 251\n      return activeElementInst;                                                                                        // 252\n    }                                                                                                                  // 253\n  }                                                                                                                    // 254\n}                                                                                                                      // 255\n                                                                                                                       // 256\n/**                                                                                                                    // 257\n * SECTION: handle `click` event                                                                                       // 258\n */                                                                                                                    // 259\nfunction shouldUseClickEvent(elem) {                                                                                   // 260\n  // Use the `click` event to detect changes to checkbox and radio inputs.                                             // 261\n  // This approach works across all browsers, whereas `change` does not fire                                           // 262\n  // until `blur` in IE8.                                                                                              // 263\n  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\n}                                                                                                                      // 265\n                                                                                                                       // 266\nfunction getTargetInstForClickEvent(topLevelType, targetInst) {                                                        // 267\n  if (topLevelType === topLevelTypes.topClick) {                                                                       // 268\n    return targetInst;                                                                                                 // 269\n  }                                                                                                                    // 270\n}                                                                                                                      // 271\n                                                                                                                       // 272\n/**                                                                                                                    // 273\n * This plugin creates an `onChange` event that normalizes change events                                               // 274\n * across form elements. This event fires at a time when it's possible to                                              // 275\n * change the element's value without seeing a flicker.                                                                // 276\n *                                                                                                                     // 277\n * Supported elements are:                                                                                             // 278\n * - input (see `isTextInputElement`)                                                                                  // 279\n * - textarea                                                                                                          // 280\n * - select                                                                                                            // 281\n */                                                                                                                    // 282\nvar ChangeEventPlugin = {                                                                                              // 283\n                                                                                                                       // 284\n  eventTypes: eventTypes,                                                                                              // 285\n                                                                                                                       // 286\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 287\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;                      // 288\n                                                                                                                       // 289\n    var getTargetInstFunc, handleEventFunc;                                                                            // 290\n    if (shouldUseChangeEvent(targetNode)) {                                                                            // 291\n      if (doesChangeEventBubble) {                                                                                     // 292\n        getTargetInstFunc = getTargetInstForChangeEvent;                                                               // 293\n      } else {                                                                                                         // 294\n        handleEventFunc = handleEventsForChangeEventIE8;                                                               // 295\n      }                                                                                                                // 296\n    } else if (isTextInputElement(targetNode)) {                                                                       // 297\n      if (isInputEventSupported) {                                                                                     // 298\n        getTargetInstFunc = getTargetInstForInputEvent;                                                                // 299\n      } else {                                                                                                         // 300\n        getTargetInstFunc = getTargetInstForInputEventIE;                                                              // 301\n        handleEventFunc = handleEventsForInputEventIE;                                                                 // 302\n      }                                                                                                                // 303\n    } else if (shouldUseClickEvent(targetNode)) {                                                                      // 304\n      getTargetInstFunc = getTargetInstForClickEvent;                                                                  // 305\n    }                                                                                                                  // 306\n                                                                                                                       // 307\n    if (getTargetInstFunc) {                                                                                           // 308\n      var inst = getTargetInstFunc(topLevelType, targetInst);                                                          // 309\n      if (inst) {                                                                                                      // 310\n        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);                 // 311\n        event.type = 'change';                                                                                         // 312\n        EventPropagators.accumulateTwoPhaseDispatches(event);                                                          // 313\n        return event;                                                                                                  // 314\n      }                                                                                                                // 315\n    }                                                                                                                  // 316\n                                                                                                                       // 317\n    if (handleEventFunc) {                                                                                             // 318\n      handleEventFunc(topLevelType, targetNode, targetInst);                                                           // 319\n    }                                                                                                                  // 320\n  }                                                                                                                    // 321\n                                                                                                                       // 322\n};                                                                                                                     // 323\n                                                                                                                       // 324\nmodule.exports = ChangeEventPlugin;                                                                                    // 325\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactUpdates.js\":[\"./reactProdInvariant\",\"object-assign\",\"./CallbackQueue\",\"./PooledClass\",\"./ReactFeatureFlags\",\"./ReactReconciler\",\"./Transaction\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactUpdates.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactUpdates                                                                                        // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 14\n    _assign = require('object-assign');                                                                                // 15\n                                                                                                                       // 16\nvar CallbackQueue = require('./CallbackQueue');                                                                        // 17\nvar PooledClass = require('./PooledClass');                                                                            // 18\nvar ReactFeatureFlags = require('./ReactFeatureFlags');                                                                // 19\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 20\nvar Transaction = require('./Transaction');                                                                            // 21\n                                                                                                                       // 22\nvar invariant = require('fbjs/lib/invariant');                                                                         // 23\n                                                                                                                       // 24\nvar dirtyComponents = [];                                                                                              // 25\nvar updateBatchNumber = 0;                                                                                             // 26\nvar asapCallbackQueue = CallbackQueue.getPooled();                                                                     // 27\nvar asapEnqueued = false;                                                                                              // 28\n                                                                                                                       // 29\nvar batchingStrategy = null;                                                                                           // 30\n                                                                                                                       // 31\nfunction ensureInjected() {                                                                                            // 32\n  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;\n}                                                                                                                      // 34\n                                                                                                                       // 35\nvar NESTED_UPDATES = {                                                                                                 // 36\n  initialize: function () {                                                                                            // 37\n    this.dirtyComponentsLength = dirtyComponents.length;                                                               // 38\n  },                                                                                                                   // 39\n  close: function () {                                                                                                 // 40\n    if (this.dirtyComponentsLength !== dirtyComponents.length) {                                                       // 41\n      // Additional updates were enqueued by componentDidUpdate handlers or                                            // 42\n      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run                                        // 43\n      // these new updates so that if A's componentDidUpdate calls setState on                                         // 44\n      // B, B will update before the callback A's updater provided when calling                                        // 45\n      // setState.                                                                                                     // 46\n      dirtyComponents.splice(0, this.dirtyComponentsLength);                                                           // 47\n      flushBatchedUpdates();                                                                                           // 48\n    } else {                                                                                                           // 49\n      dirtyComponents.length = 0;                                                                                      // 50\n    }                                                                                                                  // 51\n  }                                                                                                                    // 52\n};                                                                                                                     // 53\n                                                                                                                       // 54\nvar UPDATE_QUEUEING = {                                                                                                // 55\n  initialize: function () {                                                                                            // 56\n    this.callbackQueue.reset();                                                                                        // 57\n  },                                                                                                                   // 58\n  close: function () {                                                                                                 // 59\n    this.callbackQueue.notifyAll();                                                                                    // 60\n  }                                                                                                                    // 61\n};                                                                                                                     // 62\n                                                                                                                       // 63\nvar TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];                                                          // 64\n                                                                                                                       // 65\nfunction ReactUpdatesFlushTransaction() {                                                                              // 66\n  this.reinitializeTransaction();                                                                                      // 67\n  this.dirtyComponentsLength = null;                                                                                   // 68\n  this.callbackQueue = CallbackQueue.getPooled();                                                                      // 69\n  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(                                        // 70\n  /* useCreateElement */true);                                                                                         // 71\n}                                                                                                                      // 72\n                                                                                                                       // 73\n_assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {                                                   // 74\n  getTransactionWrappers: function () {                                                                                // 75\n    return TRANSACTION_WRAPPERS;                                                                                       // 76\n  },                                                                                                                   // 77\n                                                                                                                       // 78\n  destructor: function () {                                                                                            // 79\n    this.dirtyComponentsLength = null;                                                                                 // 80\n    CallbackQueue.release(this.callbackQueue);                                                                         // 81\n    this.callbackQueue = null;                                                                                         // 82\n    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);                                         // 83\n    this.reconcileTransaction = null;                                                                                  // 84\n  },                                                                                                                   // 85\n                                                                                                                       // 86\n  perform: function (method, scope, a) {                                                                               // 87\n    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`                                         // 88\n    // with this transaction's wrappers around it.                                                                     // 89\n    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);\n  }                                                                                                                    // 91\n});                                                                                                                    // 92\n                                                                                                                       // 93\nPooledClass.addPoolingTo(ReactUpdatesFlushTransaction);                                                                // 94\n                                                                                                                       // 95\nfunction batchedUpdates(callback, a, b, c, d, e) {                                                                     // 96\n  ensureInjected();                                                                                                    // 97\n  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);                                                            // 98\n}                                                                                                                      // 99\n                                                                                                                       // 100\n/**                                                                                                                    // 101\n * Array comparator for ReactComponents by mount ordering.                                                             // 102\n *                                                                                                                     // 103\n * @param {ReactComponent} c1 first component you're comparing                                                         // 104\n * @param {ReactComponent} c2 second component you're comparing                                                        // 105\n * @return {number} Return value usable by Array.prototype.sort().                                                     // 106\n */                                                                                                                    // 107\nfunction mountOrderComparator(c1, c2) {                                                                                // 108\n  return c1._mountOrder - c2._mountOrder;                                                                              // 109\n}                                                                                                                      // 110\n                                                                                                                       // 111\nfunction runBatchedUpdates(transaction) {                                                                              // 112\n  var len = transaction.dirtyComponentsLength;                                                                         // 113\n  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;\n                                                                                                                       // 115\n  // Since reconciling a component higher in the owner hierarchy usually (not                                          // 116\n  // always -- see shouldComponentUpdate()) will reconcile children, reconcile                                         // 117\n  // them before their children by sorting the array.                                                                  // 118\n  dirtyComponents.sort(mountOrderComparator);                                                                          // 119\n                                                                                                                       // 120\n  // Any updates enqueued while reconciling must be performed after this entire                                        // 121\n  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and                                         // 122\n  // C, B could update twice in a single batch if C's render enqueues an update                                        // 123\n  // to B (since B would have already updated, we should skip it, and the only                                         // 124\n  // way we can know to do so is by checking the batch counter).                                                       // 125\n  updateBatchNumber++;                                                                                                 // 126\n                                                                                                                       // 127\n  for (var i = 0; i < len; i++) {                                                                                      // 128\n    // If a component is unmounted before pending changes apply, it will still                                         // 129\n    // be here, but we assume that it has cleared its _pendingCallbacks and                                            // 130\n    // that performUpdateIfNecessary is a noop.                                                                        // 131\n    var component = dirtyComponents[i];                                                                                // 132\n                                                                                                                       // 133\n    // If performUpdateIfNecessary happens to enqueue any new updates, we                                              // 134\n    // shouldn't execute the callbacks until the next render happens, so                                               // 135\n    // stash the callbacks first                                                                                       // 136\n    var callbacks = component._pendingCallbacks;                                                                       // 137\n    component._pendingCallbacks = null;                                                                                // 138\n                                                                                                                       // 139\n    var markerName;                                                                                                    // 140\n    if (ReactFeatureFlags.logTopLevelRenders) {                                                                        // 141\n      var namedComponent = component;                                                                                  // 142\n      // Duck type TopLevelWrapper. This is probably always true.                                                      // 143\n      if (component._currentElement.props === component._renderedComponent._currentElement) {                          // 144\n        namedComponent = component._renderedComponent;                                                                 // 145\n      }                                                                                                                // 146\n      markerName = 'React update: ' + namedComponent.getName();                                                        // 147\n      console.time(markerName);                                                                                        // 148\n    }                                                                                                                  // 149\n                                                                                                                       // 150\n    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);          // 151\n                                                                                                                       // 152\n    if (markerName) {                                                                                                  // 153\n      console.timeEnd(markerName);                                                                                     // 154\n    }                                                                                                                  // 155\n                                                                                                                       // 156\n    if (callbacks) {                                                                                                   // 157\n      for (var j = 0; j < callbacks.length; j++) {                                                                     // 158\n        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());                                // 159\n      }                                                                                                                // 160\n    }                                                                                                                  // 161\n  }                                                                                                                    // 162\n}                                                                                                                      // 163\n                                                                                                                       // 164\nvar flushBatchedUpdates = function () {                                                                                // 165\n  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents                                            // 166\n  // array and perform any updates enqueued by mount-ready handlers (i.e.,                                             // 167\n  // componentDidUpdate) but we need to check here too in order to catch                                               // 168\n  // updates enqueued by setState callbacks and asap calls.                                                            // 169\n  while (dirtyComponents.length || asapEnqueued) {                                                                     // 170\n    if (dirtyComponents.length) {                                                                                      // 171\n      var transaction = ReactUpdatesFlushTransaction.getPooled();                                                      // 172\n      transaction.perform(runBatchedUpdates, null, transaction);                                                       // 173\n      ReactUpdatesFlushTransaction.release(transaction);                                                               // 174\n    }                                                                                                                  // 175\n                                                                                                                       // 176\n    if (asapEnqueued) {                                                                                                // 177\n      asapEnqueued = false;                                                                                            // 178\n      var queue = asapCallbackQueue;                                                                                   // 179\n      asapCallbackQueue = CallbackQueue.getPooled();                                                                   // 180\n      queue.notifyAll();                                                                                               // 181\n      CallbackQueue.release(queue);                                                                                    // 182\n    }                                                                                                                  // 183\n  }                                                                                                                    // 184\n};                                                                                                                     // 185\n                                                                                                                       // 186\n/**                                                                                                                    // 187\n * Mark a component as needing a rerender, adding an optional callback to a                                            // 188\n * list of functions which will be executed once the rerender occurs.                                                  // 189\n */                                                                                                                    // 190\nfunction enqueueUpdate(component) {                                                                                    // 191\n  ensureInjected();                                                                                                    // 192\n                                                                                                                       // 193\n  // Various parts of our code (such as ReactCompositeComponent's                                                      // 194\n  // _renderValidatedComponent) assume that calls to render aren't nested;                                             // 195\n  // verify that that's the case. (This is called by each top-level update                                             // 196\n  // function, like setState, forceUpdate, etc.; creation and                                                          // 197\n  // destruction of top-level components is guarded in ReactMount.)                                                    // 198\n                                                                                                                       // 199\n  if (!batchingStrategy.isBatchingUpdates) {                                                                           // 200\n    batchingStrategy.batchedUpdates(enqueueUpdate, component);                                                         // 201\n    return;                                                                                                            // 202\n  }                                                                                                                    // 203\n                                                                                                                       // 204\n  dirtyComponents.push(component);                                                                                     // 205\n  if (component._updateBatchNumber == null) {                                                                          // 206\n    component._updateBatchNumber = updateBatchNumber + 1;                                                              // 207\n  }                                                                                                                    // 208\n}                                                                                                                      // 209\n                                                                                                                       // 210\n/**                                                                                                                    // 211\n * Enqueue a callback to be run at the end of the current batching cycle. Throws                                       // 212\n * if no updates are currently being performed.                                                                        // 213\n */                                                                                                                    // 214\nfunction asap(callback, context) {                                                                                     // 215\n  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;\n  asapCallbackQueue.enqueue(callback, context);                                                                        // 217\n  asapEnqueued = true;                                                                                                 // 218\n}                                                                                                                      // 219\n                                                                                                                       // 220\nvar ReactUpdatesInjection = {                                                                                          // 221\n  injectReconcileTransaction: function (ReconcileTransaction) {                                                        // 222\n    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;\n    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;                                                     // 224\n  },                                                                                                                   // 225\n                                                                                                                       // 226\n  injectBatchingStrategy: function (_batchingStrategy) {                                                               // 227\n    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;\n    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;\n    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;\n    batchingStrategy = _batchingStrategy;                                                                              // 231\n  }                                                                                                                    // 232\n};                                                                                                                     // 233\n                                                                                                                       // 234\nvar ReactUpdates = {                                                                                                   // 235\n  /**                                                                                                                  // 236\n   * React references `ReactReconcileTransaction` using this property in order                                         // 237\n   * to allow dependency injection.                                                                                    // 238\n   *                                                                                                                   // 239\n   * @internal                                                                                                         // 240\n   */                                                                                                                  // 241\n  ReactReconcileTransaction: null,                                                                                     // 242\n                                                                                                                       // 243\n  batchedUpdates: batchedUpdates,                                                                                      // 244\n  enqueueUpdate: enqueueUpdate,                                                                                        // 245\n  flushBatchedUpdates: flushBatchedUpdates,                                                                            // 246\n  injection: ReactUpdatesInjection,                                                                                    // 247\n  asap: asap                                                                                                           // 248\n};                                                                                                                     // 249\n                                                                                                                       // 250\nmodule.exports = ReactUpdates;                                                                                         // 251\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"CallbackQueue.js\":[\"./reactProdInvariant\",\"object-assign\",\"./PooledClass\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/CallbackQueue.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule CallbackQueue                                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 14\n    _assign = require('object-assign');                                                                                // 15\n                                                                                                                       // 16\nvar PooledClass = require('./PooledClass');                                                                            // 17\n                                                                                                                       // 18\nvar invariant = require('fbjs/lib/invariant');                                                                         // 19\n                                                                                                                       // 20\n/**                                                                                                                    // 21\n * A specialized pseudo-event module to help keep track of components waiting to                                       // 22\n * be notified when their DOM representations are available for use.                                                   // 23\n *                                                                                                                     // 24\n * This implements `PooledClass`, so you should never need to instantiate this.                                        // 25\n * Instead, use `CallbackQueue.getPooled()`.                                                                           // 26\n *                                                                                                                     // 27\n * @class ReactMountReady                                                                                              // 28\n * @implements PooledClass                                                                                             // 29\n * @internal                                                                                                           // 30\n */                                                                                                                    // 31\nfunction CallbackQueue() {                                                                                             // 32\n  this._callbacks = null;                                                                                              // 33\n  this._contexts = null;                                                                                               // 34\n}                                                                                                                      // 35\n                                                                                                                       // 36\n_assign(CallbackQueue.prototype, {                                                                                     // 37\n                                                                                                                       // 38\n  /**                                                                                                                  // 39\n   * Enqueues a callback to be invoked when `notifyAll` is invoked.                                                    // 40\n   *                                                                                                                   // 41\n   * @param {function} callback Invoked when `notifyAll` is invoked.                                                   // 42\n   * @param {?object} context Context to call `callback` with.                                                         // 43\n   * @internal                                                                                                         // 44\n   */                                                                                                                  // 45\n  enqueue: function (callback, context) {                                                                              // 46\n    this._callbacks = this._callbacks || [];                                                                           // 47\n    this._contexts = this._contexts || [];                                                                             // 48\n    this._callbacks.push(callback);                                                                                    // 49\n    this._contexts.push(context);                                                                                      // 50\n  },                                                                                                                   // 51\n                                                                                                                       // 52\n  /**                                                                                                                  // 53\n   * Invokes all enqueued callbacks and clears the queue. This is invoked after                                        // 54\n   * the DOM representation of a component has been created or updated.                                                // 55\n   *                                                                                                                   // 56\n   * @internal                                                                                                         // 57\n   */                                                                                                                  // 58\n  notifyAll: function () {                                                                                             // 59\n    var callbacks = this._callbacks;                                                                                   // 60\n    var contexts = this._contexts;                                                                                     // 61\n    if (callbacks) {                                                                                                   // 62\n      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;\n      this._callbacks = null;                                                                                          // 64\n      this._contexts = null;                                                                                           // 65\n      for (var i = 0; i < callbacks.length; i++) {                                                                     // 66\n        callbacks[i].call(contexts[i]);                                                                                // 67\n      }                                                                                                                // 68\n      callbacks.length = 0;                                                                                            // 69\n      contexts.length = 0;                                                                                             // 70\n    }                                                                                                                  // 71\n  },                                                                                                                   // 72\n                                                                                                                       // 73\n  checkpoint: function () {                                                                                            // 74\n    return this._callbacks ? this._callbacks.length : 0;                                                               // 75\n  },                                                                                                                   // 76\n                                                                                                                       // 77\n  rollback: function (len) {                                                                                           // 78\n    if (this._callbacks) {                                                                                             // 79\n      this._callbacks.length = len;                                                                                    // 80\n      this._contexts.length = len;                                                                                     // 81\n    }                                                                                                                  // 82\n  },                                                                                                                   // 83\n                                                                                                                       // 84\n  /**                                                                                                                  // 85\n   * Resets the internal queue.                                                                                        // 86\n   *                                                                                                                   // 87\n   * @internal                                                                                                         // 88\n   */                                                                                                                  // 89\n  reset: function () {                                                                                                 // 90\n    this._callbacks = null;                                                                                            // 91\n    this._contexts = null;                                                                                             // 92\n  },                                                                                                                   // 93\n                                                                                                                       // 94\n  /**                                                                                                                  // 95\n   * `PooledClass` looks for this.                                                                                     // 96\n   */                                                                                                                  // 97\n  destructor: function () {                                                                                            // 98\n    this.reset();                                                                                                      // 99\n  }                                                                                                                    // 100\n                                                                                                                       // 101\n});                                                                                                                    // 102\n                                                                                                                       // 103\nPooledClass.addPoolingTo(CallbackQueue);                                                                               // 104\n                                                                                                                       // 105\nmodule.exports = CallbackQueue;                                                                                        // 106\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactFeatureFlags.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactFeatureFlags.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactFeatureFlags                                                                                   // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar ReactFeatureFlags = {                                                                                              // 15\n  // When true, call console.time() before and .timeEnd() after each top-level                                         // 16\n  // render (both initial renders and updates). Useful when looking at prod-mode                                       // 17\n  // timeline profiles in Chrome, for example.                                                                         // 18\n  logTopLevelRenders: false                                                                                            // 19\n};                                                                                                                     // 20\n                                                                                                                       // 21\nmodule.exports = ReactFeatureFlags;                                                                                    // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactReconciler.js\":[\"./ReactRef\",\"./ReactInstrumentation\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactReconciler.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactReconciler                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactRef = require('./ReactRef');                                                                                  // 14\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 15\n                                                                                                                       // 16\nvar warning = require('fbjs/lib/warning');                                                                             // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Helper to call ReactRef.attachRefs with this composite component, split out                                         // 20\n * to avoid allocations in the transaction mount-ready queue.                                                          // 21\n */                                                                                                                    // 22\nfunction attachRefs() {                                                                                                // 23\n  ReactRef.attachRefs(this, this._currentElement);                                                                     // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\nvar ReactReconciler = {                                                                                                // 27\n                                                                                                                       // 28\n  /**                                                                                                                  // 29\n   * Initializes the component, renders markup, and registers event listeners.                                         // 30\n   *                                                                                                                   // 31\n   * @param {ReactComponent} internalInstance                                                                          // 32\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 33\n   * @param {?object} the containing host component instance                                                           // 34\n   * @param {?object} info about the host container                                                                    // 35\n   * @return {?string} Rendered markup to be inserted into the DOM.                                                    // 36\n   * @final                                                                                                            // 37\n   * @internal                                                                                                         // 38\n   */                                                                                                                  // 39\n  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots\n  ) {                                                                                                                  // 41\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 42\n      if (internalInstance._debugID !== 0) {                                                                           // 43\n        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);\n      }                                                                                                                // 45\n    }                                                                                                                  // 46\n    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);  // 47\n    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {                            // 48\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);                                          // 49\n    }                                                                                                                  // 50\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 51\n      if (internalInstance._debugID !== 0) {                                                                           // 52\n        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);                                    // 53\n      }                                                                                                                // 54\n    }                                                                                                                  // 55\n    return markup;                                                                                                     // 56\n  },                                                                                                                   // 57\n                                                                                                                       // 58\n  /**                                                                                                                  // 59\n   * Returns a value that can be passed to                                                                             // 60\n   * ReactComponentEnvironment.replaceNodeWithMarkup.                                                                  // 61\n   */                                                                                                                  // 62\n  getHostNode: function (internalInstance) {                                                                           // 63\n    return internalInstance.getHostNode();                                                                             // 64\n  },                                                                                                                   // 65\n                                                                                                                       // 66\n  /**                                                                                                                  // 67\n   * Releases any resources allocated by `mountComponent`.                                                             // 68\n   *                                                                                                                   // 69\n   * @final                                                                                                            // 70\n   * @internal                                                                                                         // 71\n   */                                                                                                                  // 72\n  unmountComponent: function (internalInstance, safely) {                                                              // 73\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 74\n      if (internalInstance._debugID !== 0) {                                                                           // 75\n        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);                            // 76\n      }                                                                                                                // 77\n    }                                                                                                                  // 78\n    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);                                           // 79\n    internalInstance.unmountComponent(safely);                                                                         // 80\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 81\n      if (internalInstance._debugID !== 0) {                                                                           // 82\n        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);                                  // 83\n      }                                                                                                                // 84\n    }                                                                                                                  // 85\n  },                                                                                                                   // 86\n                                                                                                                       // 87\n  /**                                                                                                                  // 88\n   * Update a component using a new element.                                                                           // 89\n   *                                                                                                                   // 90\n   * @param {ReactComponent} internalInstance                                                                          // 91\n   * @param {ReactElement} nextElement                                                                                 // 92\n   * @param {ReactReconcileTransaction} transaction                                                                    // 93\n   * @param {object} context                                                                                           // 94\n   * @internal                                                                                                         // 95\n   */                                                                                                                  // 96\n  receiveComponent: function (internalInstance, nextElement, transaction, context) {                                   // 97\n    var prevElement = internalInstance._currentElement;                                                                // 98\n                                                                                                                       // 99\n    if (nextElement === prevElement && context === internalInstance._context) {                                        // 100\n      // Since elements are immutable after the owner is rendered,                                                     // 101\n      // we can do a cheap identity compare here to determine if this is a                                             // 102\n      // superfluous reconcile. It's possible for state to be mutable but such                                         // 103\n      // change should trigger an update of the owner which would recreate                                             // 104\n      // the element. We explicitly check for the existence of an owner since                                          // 105\n      // it's possible for an element created outside a composite to be                                                // 106\n      // deeply mutated and reused.                                                                                    // 107\n                                                                                                                       // 108\n      // TODO: Bailing out early is just a perf optimization right?                                                    // 109\n      // TODO: Removing the return statement should affect correctness?                                                // 110\n      return;                                                                                                          // 111\n    }                                                                                                                  // 112\n                                                                                                                       // 113\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 114\n      if (internalInstance._debugID !== 0) {                                                                           // 115\n        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);                // 116\n      }                                                                                                                // 117\n    }                                                                                                                  // 118\n                                                                                                                       // 119\n    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);                                             // 120\n                                                                                                                       // 121\n    if (refsChanged) {                                                                                                 // 122\n      ReactRef.detachRefs(internalInstance, prevElement);                                                              // 123\n    }                                                                                                                  // 124\n                                                                                                                       // 125\n    internalInstance.receiveComponent(nextElement, transaction, context);                                              // 126\n                                                                                                                       // 127\n    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {             // 128\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);                                          // 129\n    }                                                                                                                  // 130\n                                                                                                                       // 131\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 132\n      if (internalInstance._debugID !== 0) {                                                                           // 133\n        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);                                   // 134\n      }                                                                                                                // 135\n    }                                                                                                                  // 136\n  },                                                                                                                   // 137\n                                                                                                                       // 138\n  /**                                                                                                                  // 139\n   * Flush any dirty changes in a component.                                                                           // 140\n   *                                                                                                                   // 141\n   * @param {ReactComponent} internalInstance                                                                          // 142\n   * @param {ReactReconcileTransaction} transaction                                                                    // 143\n   * @internal                                                                                                         // 144\n   */                                                                                                                  // 145\n  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {                              // 146\n    if (internalInstance._updateBatchNumber !== updateBatchNumber) {                                                   // 147\n      // The component's enqueued batch number should always be the current                                            // 148\n      // batch or the following one.                                                                                   // 149\n      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;\n      return;                                                                                                          // 151\n    }                                                                                                                  // 152\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 153\n      if (internalInstance._debugID !== 0) {                                                                           // 154\n        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);\n      }                                                                                                                // 156\n    }                                                                                                                  // 157\n    internalInstance.performUpdateIfNecessary(transaction);                                                            // 158\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 159\n      if (internalInstance._debugID !== 0) {                                                                           // 160\n        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);                                   // 161\n      }                                                                                                                // 162\n    }                                                                                                                  // 163\n  }                                                                                                                    // 164\n                                                                                                                       // 165\n};                                                                                                                     // 166\n                                                                                                                       // 167\nmodule.exports = ReactReconciler;                                                                                      // 168\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactRef.js\":[\"./ReactOwner\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactRef.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactRef                                                                                            // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactOwner = require('./ReactOwner');                                                                              // 14\n                                                                                                                       // 15\nvar ReactRef = {};                                                                                                     // 16\n                                                                                                                       // 17\nfunction attachRef(ref, component, owner) {                                                                            // 18\n  if (typeof ref === 'function') {                                                                                     // 19\n    ref(component.getPublicInstance());                                                                                // 20\n  } else {                                                                                                             // 21\n    // Legacy ref                                                                                                      // 22\n    ReactOwner.addComponentAsRefTo(component, ref, owner);                                                             // 23\n  }                                                                                                                    // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\nfunction detachRef(ref, component, owner) {                                                                            // 27\n  if (typeof ref === 'function') {                                                                                     // 28\n    ref(null);                                                                                                         // 29\n  } else {                                                                                                             // 30\n    // Legacy ref                                                                                                      // 31\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);                                                        // 32\n  }                                                                                                                    // 33\n}                                                                                                                      // 34\n                                                                                                                       // 35\nReactRef.attachRefs = function (instance, element) {                                                                   // 36\n  if (element === null || element === false) {                                                                         // 37\n    return;                                                                                                            // 38\n  }                                                                                                                    // 39\n  var ref = element.ref;                                                                                               // 40\n  if (ref != null) {                                                                                                   // 41\n    attachRef(ref, instance, element._owner);                                                                          // 42\n  }                                                                                                                    // 43\n};                                                                                                                     // 44\n                                                                                                                       // 45\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {                                                      // 46\n  // If either the owner or a `ref` has changed, make sure the newest owner                                            // 47\n  // has stored a reference to `this`, and the previous owner (if different)                                           // 48\n  // has forgotten the reference to `this`. We use the element instead                                                 // 49\n  // of the public this.props because the post processing cannot determine                                             // 50\n  // a ref. The ref conceptually lives on the element.                                                                 // 51\n                                                                                                                       // 52\n  // TODO: Should this even be possible? The owner cannot change because                                               // 53\n  // it's forbidden by shouldUpdateReactComponent. The ref can change                                                  // 54\n  // if you swap the keys of but not the refs. Reconsider where this check                                             // 55\n  // is made. It probably belongs where the key checking and                                                           // 56\n  // instantiateReactComponent is done.                                                                                // 57\n                                                                                                                       // 58\n  var prevEmpty = prevElement === null || prevElement === false;                                                       // 59\n  var nextEmpty = nextElement === null || nextElement === false;                                                       // 60\n                                                                                                                       // 61\n  return (                                                                                                             // 62\n    // This has a few false positives w/r/t empty components.                                                          // 63\n    prevEmpty || nextEmpty || nextElement.ref !== prevElement.ref ||                                                   // 64\n    // If owner changes but we have an unchanged function ref, don't update refs                                       // 65\n    typeof nextElement.ref === 'string' && nextElement._owner !== prevElement._owner                                   // 66\n  );                                                                                                                   // 67\n};                                                                                                                     // 68\n                                                                                                                       // 69\nReactRef.detachRefs = function (instance, element) {                                                                   // 70\n  if (element === null || element === false) {                                                                         // 71\n    return;                                                                                                            // 72\n  }                                                                                                                    // 73\n  var ref = element.ref;                                                                                               // 74\n  if (ref != null) {                                                                                                   // 75\n    detachRef(ref, instance, element._owner);                                                                          // 76\n  }                                                                                                                    // 77\n};                                                                                                                     // 78\n                                                                                                                       // 79\nmodule.exports = ReactRef;                                                                                             // 80\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactOwner.js\":[\"./reactProdInvariant\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactOwner.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactOwner                                                                                          // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar invariant = require('fbjs/lib/invariant');                                                                         // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * ReactOwners are capable of storing references to owned components.                                                  // 19\n *                                                                                                                     // 20\n * All components are capable of //being// referenced by owner components, but                                         // 21\n * only ReactOwner components are capable of //referencing// owned components.                                         // 22\n * The named reference is known as a \"ref\".                                                                            // 23\n *                                                                                                                     // 24\n * Refs are available when mounted and updated during reconciliation.                                                  // 25\n *                                                                                                                     // 26\n *   var MyComponent = React.createClass({                                                                             // 27\n *     render: function() {                                                                                            // 28\n *       return (                                                                                                      // 29\n *         <div onClick={this.handleClick}>                                                                            // 30\n *           <CustomComponent ref=\"custom\" />                                                                          // 31\n *         </div>                                                                                                      // 32\n *       );                                                                                                            // 33\n *     },                                                                                                              // 34\n *     handleClick: function() {                                                                                       // 35\n *       this.refs.custom.handleClick();                                                                               // 36\n *     },                                                                                                              // 37\n *     componentDidMount: function() {                                                                                 // 38\n *       this.refs.custom.initialize();                                                                                // 39\n *     }                                                                                                               // 40\n *   });                                                                                                               // 41\n *                                                                                                                     // 42\n * Refs should rarely be used. When refs are used, they should only be done to                                         // 43\n * control data that is not handled by React's data flow.                                                              // 44\n *                                                                                                                     // 45\n * @class ReactOwner                                                                                                   // 46\n */                                                                                                                    // 47\nvar ReactOwner = {                                                                                                     // 48\n                                                                                                                       // 49\n  /**                                                                                                                  // 50\n   * @param {?object} object                                                                                           // 51\n   * @return {boolean} True if `object` is a valid owner.                                                              // 52\n   * @final                                                                                                            // 53\n   */                                                                                                                  // 54\n  isValidOwner: function (object) {                                                                                    // 55\n    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');             // 56\n  },                                                                                                                   // 57\n                                                                                                                       // 58\n  /**                                                                                                                  // 59\n   * Adds a component by ref to an owner component.                                                                    // 60\n   *                                                                                                                   // 61\n   * @param {ReactComponent} component Component to reference.                                                         // 62\n   * @param {string} ref Name by which to refer to the component.                                                      // 63\n   * @param {ReactOwner} owner Component on which to record the ref.                                                   // 64\n   * @final                                                                                                            // 65\n   * @internal                                                                                                         // 66\n   */                                                                                                                  // 67\n  addComponentAsRefTo: function (component, ref, owner) {                                                              // 68\n    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;\n    owner.attachRef(ref, component);                                                                                   // 70\n  },                                                                                                                   // 71\n                                                                                                                       // 72\n  /**                                                                                                                  // 73\n   * Removes a component by ref from an owner component.                                                               // 74\n   *                                                                                                                   // 75\n   * @param {ReactComponent} component Component to dereference.                                                       // 76\n   * @param {string} ref Name of the ref to remove.                                                                    // 77\n   * @param {ReactOwner} owner Component on which the ref is recorded.                                                 // 78\n   * @final                                                                                                            // 79\n   * @internal                                                                                                         // 80\n   */                                                                                                                  // 81\n  removeComponentAsRefFrom: function (component, ref, owner) {                                                         // 82\n    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;\n    var ownerPublicInstance = owner.getPublicInstance();                                                               // 84\n    // Check that `component`'s owner is still alive and that `component` is still the current ref                     // 85\n    // because we do not want to detach the ref if another component stole it.                                         // 86\n    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {                      // 87\n      owner.detachRef(ref);                                                                                            // 88\n    }                                                                                                                  // 89\n  }                                                                                                                    // 90\n                                                                                                                       // 91\n};                                                                                                                     // 92\n                                                                                                                       // 93\nmodule.exports = ReactOwner;                                                                                           // 94\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactInstrumentation.js\":[\"./ReactDebugTool\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactInstrumentation.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2016-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactInstrumentation                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar debugTool = null;                                                                                                  // 14\n                                                                                                                       // 15\nif (process.env.NODE_ENV !== 'production') {                                                                           // 16\n  var ReactDebugTool = require('./ReactDebugTool');                                                                    // 17\n  debugTool = ReactDebugTool;                                                                                          // 18\n}                                                                                                                      // 19\n                                                                                                                       // 20\nmodule.exports = { debugTool: debugTool };                                                                             // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDebugTool.js\":[\"./ReactInvalidSetStateWarningHook\",\"./ReactHostOperationHistoryHook\",\"./ReactComponentTreeHook\",\"./ReactChildrenMutationWarningHook\",\"fbjs/lib/ExecutionEnvironment\",\"fbjs/lib/performanceNow\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDebugTool.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2016-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDebugTool                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactInvalidSetStateWarningHook = require('./ReactInvalidSetStateWarningHook');                                    // 14\nvar ReactHostOperationHistoryHook = require('./ReactHostOperationHistoryHook');                                        // 15\nvar ReactComponentTreeHook = require('./ReactComponentTreeHook');                                                      // 16\nvar ReactChildrenMutationWarningHook = require('./ReactChildrenMutationWarningHook');                                  // 17\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 18\n                                                                                                                       // 19\nvar performanceNow = require('fbjs/lib/performanceNow');                                                               // 20\nvar warning = require('fbjs/lib/warning');                                                                             // 21\n                                                                                                                       // 22\nvar hooks = [];                                                                                                        // 23\nvar didHookThrowForEvent = {};                                                                                         // 24\n                                                                                                                       // 25\nfunction callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {                                                  // 26\n  try {                                                                                                                // 27\n    fn.call(context, arg1, arg2, arg3, arg4, arg5);                                                                    // 28\n  } catch (e) {                                                                                                        // 29\n    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\\n' + e.stack) : void 0;\n    didHookThrowForEvent[event] = true;                                                                                // 31\n  }                                                                                                                    // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\nfunction emitEvent(event, arg1, arg2, arg3, arg4, arg5) {                                                              // 35\n  for (var i = 0; i < hooks.length; i++) {                                                                             // 36\n    var hook = hooks[i];                                                                                               // 37\n    var fn = hook[event];                                                                                              // 38\n    if (fn) {                                                                                                          // 39\n      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);                                                         // 40\n    }                                                                                                                  // 41\n  }                                                                                                                    // 42\n}                                                                                                                      // 43\n                                                                                                                       // 44\nvar isProfiling = false;                                                                                               // 45\nvar flushHistory = [];                                                                                                 // 46\nvar lifeCycleTimerStack = [];                                                                                          // 47\nvar currentFlushNesting = 0;                                                                                           // 48\nvar currentFlushMeasurements = null;                                                                                   // 49\nvar currentFlushStartTime = null;                                                                                      // 50\nvar currentTimerDebugID = null;                                                                                        // 51\nvar currentTimerStartTime = null;                                                                                      // 52\nvar currentTimerNestedFlushDuration = null;                                                                            // 53\nvar currentTimerType = null;                                                                                           // 54\n                                                                                                                       // 55\nvar lifeCycleTimerHasWarned = false;                                                                                   // 56\n                                                                                                                       // 57\nfunction clearHistory() {                                                                                              // 58\n  ReactComponentTreeHook.purgeUnmountedComponents();                                                                   // 59\n  ReactHostOperationHistoryHook.clearHistory();                                                                        // 60\n}                                                                                                                      // 61\n                                                                                                                       // 62\nfunction getTreeSnapshot(registeredIDs) {                                                                              // 63\n  return registeredIDs.reduce(function (tree, id) {                                                                    // 64\n    var ownerID = ReactComponentTreeHook.getOwnerID(id);                                                               // 65\n    var parentID = ReactComponentTreeHook.getParentID(id);                                                             // 66\n    tree[id] = {                                                                                                       // 67\n      displayName: ReactComponentTreeHook.getDisplayName(id),                                                          // 68\n      text: ReactComponentTreeHook.getText(id),                                                                        // 69\n      updateCount: ReactComponentTreeHook.getUpdateCount(id),                                                          // 70\n      childIDs: ReactComponentTreeHook.getChildIDs(id),                                                                // 71\n      // Text nodes don't have owners but this is close enough.                                                        // 72\n      ownerID: ownerID || ReactComponentTreeHook.getOwnerID(parentID),                                                 // 73\n      parentID: parentID                                                                                               // 74\n    };                                                                                                                 // 75\n    return tree;                                                                                                       // 76\n  }, {});                                                                                                              // 77\n}                                                                                                                      // 78\n                                                                                                                       // 79\nfunction resetMeasurements() {                                                                                         // 80\n  var previousStartTime = currentFlushStartTime;                                                                       // 81\n  var previousMeasurements = currentFlushMeasurements || [];                                                           // 82\n  var previousOperations = ReactHostOperationHistoryHook.getHistory();                                                 // 83\n                                                                                                                       // 84\n  if (currentFlushNesting === 0) {                                                                                     // 85\n    currentFlushStartTime = null;                                                                                      // 86\n    currentFlushMeasurements = null;                                                                                   // 87\n    clearHistory();                                                                                                    // 88\n    return;                                                                                                            // 89\n  }                                                                                                                    // 90\n                                                                                                                       // 91\n  if (previousMeasurements.length || previousOperations.length) {                                                      // 92\n    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();                                                     // 93\n    flushHistory.push({                                                                                                // 94\n      duration: performanceNow() - previousStartTime,                                                                  // 95\n      measurements: previousMeasurements || [],                                                                        // 96\n      operations: previousOperations || [],                                                                            // 97\n      treeSnapshot: getTreeSnapshot(registeredIDs)                                                                     // 98\n    });                                                                                                                // 99\n  }                                                                                                                    // 100\n                                                                                                                       // 101\n  clearHistory();                                                                                                      // 102\n  currentFlushStartTime = performanceNow();                                                                            // 103\n  currentFlushMeasurements = [];                                                                                       // 104\n}                                                                                                                      // 105\n                                                                                                                       // 106\nfunction checkDebugID(debugID) {                                                                                       // 107\n  var allowRoot = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];                          // 108\n                                                                                                                       // 109\n  if (allowRoot && debugID === 0) {                                                                                    // 110\n    return;                                                                                                            // 111\n  }                                                                                                                    // 112\n  if (!debugID) {                                                                                                      // 113\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;      // 114\n  }                                                                                                                    // 115\n}                                                                                                                      // 116\n                                                                                                                       // 117\nfunction beginLifeCycleTimer(debugID, timerType) {                                                                     // 118\n  if (currentFlushNesting === 0) {                                                                                     // 119\n    return;                                                                                                            // 120\n  }                                                                                                                    // 121\n  if (currentTimerType && !lifeCycleTimerHasWarned) {                                                                  // 122\n    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;\n    lifeCycleTimerHasWarned = true;                                                                                    // 124\n  }                                                                                                                    // 125\n  currentTimerStartTime = performanceNow();                                                                            // 126\n  currentTimerNestedFlushDuration = 0;                                                                                 // 127\n  currentTimerDebugID = debugID;                                                                                       // 128\n  currentTimerType = timerType;                                                                                        // 129\n}                                                                                                                      // 130\n                                                                                                                       // 131\nfunction endLifeCycleTimer(debugID, timerType) {                                                                       // 132\n  if (currentFlushNesting === 0) {                                                                                     // 133\n    return;                                                                                                            // 134\n  }                                                                                                                    // 135\n  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {                                                    // 136\n    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;\n    lifeCycleTimerHasWarned = true;                                                                                    // 138\n  }                                                                                                                    // 139\n  if (isProfiling) {                                                                                                   // 140\n    currentFlushMeasurements.push({                                                                                    // 141\n      timerType: timerType,                                                                                            // 142\n      instanceID: debugID,                                                                                             // 143\n      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration                             // 144\n    });                                                                                                                // 145\n  }                                                                                                                    // 146\n  currentTimerStartTime = null;                                                                                        // 147\n  currentTimerNestedFlushDuration = null;                                                                              // 148\n  currentTimerDebugID = null;                                                                                          // 149\n  currentTimerType = null;                                                                                             // 150\n}                                                                                                                      // 151\n                                                                                                                       // 152\nfunction pauseCurrentLifeCycleTimer() {                                                                                // 153\n  var currentTimer = {                                                                                                 // 154\n    startTime: currentTimerStartTime,                                                                                  // 155\n    nestedFlushStartTime: performanceNow(),                                                                            // 156\n    debugID: currentTimerDebugID,                                                                                      // 157\n    timerType: currentTimerType                                                                                        // 158\n  };                                                                                                                   // 159\n  lifeCycleTimerStack.push(currentTimer);                                                                              // 160\n  currentTimerStartTime = null;                                                                                        // 161\n  currentTimerNestedFlushDuration = null;                                                                              // 162\n  currentTimerDebugID = null;                                                                                          // 163\n  currentTimerType = null;                                                                                             // 164\n}                                                                                                                      // 165\n                                                                                                                       // 166\nfunction resumeCurrentLifeCycleTimer() {                                                                               // 167\n  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop();                                                               // 168\n                                                                                                                       // 169\n  var startTime = _lifeCycleTimerStack$.startTime;                                                                     // 170\n  var nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime;                                               // 171\n  var debugID = _lifeCycleTimerStack$.debugID;                                                                         // 172\n  var timerType = _lifeCycleTimerStack$.timerType;                                                                     // 173\n                                                                                                                       // 174\n  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;                                                   // 175\n  currentTimerStartTime = startTime;                                                                                   // 176\n  currentTimerNestedFlushDuration += nestedFlushDuration;                                                              // 177\n  currentTimerDebugID = debugID;                                                                                       // 178\n  currentTimerType = timerType;                                                                                        // 179\n}                                                                                                                      // 180\n                                                                                                                       // 181\nvar ReactDebugTool = {                                                                                                 // 182\n  addHook: function (hook) {                                                                                           // 183\n    hooks.push(hook);                                                                                                  // 184\n  },                                                                                                                   // 185\n  removeHook: function (hook) {                                                                                        // 186\n    for (var i = 0; i < hooks.length; i++) {                                                                           // 187\n      if (hooks[i] === hook) {                                                                                         // 188\n        hooks.splice(i, 1);                                                                                            // 189\n        i--;                                                                                                           // 190\n      }                                                                                                                // 191\n    }                                                                                                                  // 192\n  },                                                                                                                   // 193\n  isProfiling: function () {                                                                                           // 194\n    return isProfiling;                                                                                                // 195\n  },                                                                                                                   // 196\n  beginProfiling: function () {                                                                                        // 197\n    if (isProfiling) {                                                                                                 // 198\n      return;                                                                                                          // 199\n    }                                                                                                                  // 200\n                                                                                                                       // 201\n    isProfiling = true;                                                                                                // 202\n    flushHistory.length = 0;                                                                                           // 203\n    resetMeasurements();                                                                                               // 204\n    ReactDebugTool.addHook(ReactHostOperationHistoryHook);                                                             // 205\n  },                                                                                                                   // 206\n  endProfiling: function () {                                                                                          // 207\n    if (!isProfiling) {                                                                                                // 208\n      return;                                                                                                          // 209\n    }                                                                                                                  // 210\n                                                                                                                       // 211\n    isProfiling = false;                                                                                               // 212\n    resetMeasurements();                                                                                               // 213\n    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);                                                          // 214\n  },                                                                                                                   // 215\n  getFlushHistory: function () {                                                                                       // 216\n    return flushHistory;                                                                                               // 217\n  },                                                                                                                   // 218\n  onBeginFlush: function () {                                                                                          // 219\n    currentFlushNesting++;                                                                                             // 220\n    resetMeasurements();                                                                                               // 221\n    pauseCurrentLifeCycleTimer();                                                                                      // 222\n    emitEvent('onBeginFlush');                                                                                         // 223\n  },                                                                                                                   // 224\n  onEndFlush: function () {                                                                                            // 225\n    resetMeasurements();                                                                                               // 226\n    currentFlushNesting--;                                                                                             // 227\n    resumeCurrentLifeCycleTimer();                                                                                     // 228\n    emitEvent('onEndFlush');                                                                                           // 229\n  },                                                                                                                   // 230\n  onBeginLifeCycleTimer: function (debugID, timerType) {                                                               // 231\n    checkDebugID(debugID);                                                                                             // 232\n    emitEvent('onBeginLifeCycleTimer', debugID, timerType);                                                            // 233\n    beginLifeCycleTimer(debugID, timerType);                                                                           // 234\n  },                                                                                                                   // 235\n  onEndLifeCycleTimer: function (debugID, timerType) {                                                                 // 236\n    checkDebugID(debugID);                                                                                             // 237\n    endLifeCycleTimer(debugID, timerType);                                                                             // 238\n    emitEvent('onEndLifeCycleTimer', debugID, timerType);                                                              // 239\n  },                                                                                                                   // 240\n  onBeginProcessingChildContext: function () {                                                                         // 241\n    emitEvent('onBeginProcessingChildContext');                                                                        // 242\n  },                                                                                                                   // 243\n  onEndProcessingChildContext: function () {                                                                           // 244\n    emitEvent('onEndProcessingChildContext');                                                                          // 245\n  },                                                                                                                   // 246\n  onHostOperation: function (debugID, type, payload) {                                                                 // 247\n    checkDebugID(debugID);                                                                                             // 248\n    emitEvent('onHostOperation', debugID, type, payload);                                                              // 249\n  },                                                                                                                   // 250\n  onSetState: function () {                                                                                            // 251\n    emitEvent('onSetState');                                                                                           // 252\n  },                                                                                                                   // 253\n  onSetChildren: function (debugID, childDebugIDs) {                                                                   // 254\n    checkDebugID(debugID);                                                                                             // 255\n    childDebugIDs.forEach(checkDebugID);                                                                               // 256\n    emitEvent('onSetChildren', debugID, childDebugIDs);                                                                // 257\n  },                                                                                                                   // 258\n  onBeforeMountComponent: function (debugID, element, parentDebugID) {                                                 // 259\n    checkDebugID(debugID);                                                                                             // 260\n    checkDebugID(parentDebugID, true);                                                                                 // 261\n    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);                                              // 262\n  },                                                                                                                   // 263\n  onMountComponent: function (debugID) {                                                                               // 264\n    checkDebugID(debugID);                                                                                             // 265\n    emitEvent('onMountComponent', debugID);                                                                            // 266\n  },                                                                                                                   // 267\n  onBeforeUpdateComponent: function (debugID, element) {                                                               // 268\n    checkDebugID(debugID);                                                                                             // 269\n    emitEvent('onBeforeUpdateComponent', debugID, element);                                                            // 270\n  },                                                                                                                   // 271\n  onUpdateComponent: function (debugID) {                                                                              // 272\n    checkDebugID(debugID);                                                                                             // 273\n    emitEvent('onUpdateComponent', debugID);                                                                           // 274\n  },                                                                                                                   // 275\n  onBeforeUnmountComponent: function (debugID) {                                                                       // 276\n    checkDebugID(debugID);                                                                                             // 277\n    emitEvent('onBeforeUnmountComponent', debugID);                                                                    // 278\n  },                                                                                                                   // 279\n  onUnmountComponent: function (debugID) {                                                                             // 280\n    checkDebugID(debugID);                                                                                             // 281\n    emitEvent('onUnmountComponent', debugID);                                                                          // 282\n  },                                                                                                                   // 283\n  onTestEvent: function () {                                                                                           // 284\n    emitEvent('onTestEvent');                                                                                          // 285\n  }                                                                                                                    // 286\n};                                                                                                                     // 287\n                                                                                                                       // 288\n// TODO remove these when RN/www gets updated                                                                          // 289\nReactDebugTool.addDevtool = ReactDebugTool.addHook;                                                                    // 290\nReactDebugTool.removeDevtool = ReactDebugTool.removeHook;                                                              // 291\n                                                                                                                       // 292\nReactDebugTool.addHook(ReactInvalidSetStateWarningHook);                                                               // 293\nReactDebugTool.addHook(ReactComponentTreeHook);                                                                        // 294\nReactDebugTool.addHook(ReactChildrenMutationWarningHook);                                                              // 295\nvar url = ExecutionEnvironment.canUseDOM && window.location.href || '';                                                // 296\nif (/[?&]react_perf\\b/.test(url)) {                                                                                    // 297\n  ReactDebugTool.beginProfiling();                                                                                     // 298\n}                                                                                                                      // 299\n                                                                                                                       // 300\nmodule.exports = ReactDebugTool;                                                                                       // 301\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactInvalidSetStateWarningHook.js\":[\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactInvalidSetStateWarningHook.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2016-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactInvalidSetStateWarningHook                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar warning = require('fbjs/lib/warning');                                                                             // 14\n                                                                                                                       // 15\nif (process.env.NODE_ENV !== 'production') {                                                                           // 16\n  var processingChildContext = false;                                                                                  // 17\n                                                                                                                       // 18\n  var warnInvalidSetState = function () {                                                                              // 19\n    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;\n  };                                                                                                                   // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\nvar ReactInvalidSetStateWarningHook = {                                                                                // 24\n  onBeginProcessingChildContext: function () {                                                                         // 25\n    processingChildContext = true;                                                                                     // 26\n  },                                                                                                                   // 27\n  onEndProcessingChildContext: function () {                                                                           // 28\n    processingChildContext = false;                                                                                    // 29\n  },                                                                                                                   // 30\n  onSetState: function () {                                                                                            // 31\n    warnInvalidSetState();                                                                                             // 32\n  }                                                                                                                    // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nmodule.exports = ReactInvalidSetStateWarningHook;                                                                      // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactHostOperationHistoryHook.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactHostOperationHistoryHook.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2016-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactHostOperationHistoryHook                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar history = [];                                                                                                      // 14\n                                                                                                                       // 15\nvar ReactHostOperationHistoryHook = {                                                                                  // 16\n  onHostOperation: function (debugID, type, payload) {                                                                 // 17\n    history.push({                                                                                                     // 18\n      instanceID: debugID,                                                                                             // 19\n      type: type,                                                                                                      // 20\n      payload: payload                                                                                                 // 21\n    });                                                                                                                // 22\n  },                                                                                                                   // 23\n  clearHistory: function () {                                                                                          // 24\n    if (ReactHostOperationHistoryHook._preventClearing) {                                                              // 25\n      // Should only be used for tests.                                                                                // 26\n      return;                                                                                                          // 27\n    }                                                                                                                  // 28\n                                                                                                                       // 29\n    history = [];                                                                                                      // 30\n  },                                                                                                                   // 31\n  getHistory: function () {                                                                                            // 32\n    return history;                                                                                                    // 33\n  }                                                                                                                    // 34\n};                                                                                                                     // 35\n                                                                                                                       // 36\nmodule.exports = ReactHostOperationHistoryHook;                                                                        // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactChildrenMutationWarningHook.js\":[\"./ReactComponentTreeHook\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactChildrenMutationWarningHook.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactChildrenMutationWarningHook                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactComponentTreeHook = require('./ReactComponentTreeHook');                                                      // 14\n                                                                                                                       // 15\nvar warning = require('fbjs/lib/warning');                                                                             // 16\n                                                                                                                       // 17\nfunction handleElement(debugID, element) {                                                                             // 18\n  if (element == null) {                                                                                               // 19\n    return;                                                                                                            // 20\n  }                                                                                                                    // 21\n  if (element._shadowChildren === undefined) {                                                                         // 22\n    return;                                                                                                            // 23\n  }                                                                                                                    // 24\n  if (element._shadowChildren === element.props.children) {                                                            // 25\n    return;                                                                                                            // 26\n  }                                                                                                                    // 27\n  var isMutated = false;                                                                                               // 28\n  if (Array.isArray(element._shadowChildren)) {                                                                        // 29\n    if (element._shadowChildren.length === element.props.children.length) {                                            // 30\n      for (var i = 0; i < element._shadowChildren.length; i++) {                                                       // 31\n        if (element._shadowChildren[i] !== element.props.children[i]) {                                                // 32\n          isMutated = true;                                                                                            // 33\n        }                                                                                                              // 34\n      }                                                                                                                // 35\n    } else {                                                                                                           // 36\n      isMutated = true;                                                                                                // 37\n    }                                                                                                                  // 38\n  }                                                                                                                    // 39\n  if (!Array.isArray(element._shadowChildren) || isMutated) {                                                          // 40\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Component\\'s children should not be mutated.%s', ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n  }                                                                                                                    // 42\n}                                                                                                                      // 43\n                                                                                                                       // 44\nvar ReactChildrenMutationWarningHook = {                                                                               // 45\n  onMountComponent: function (debugID) {                                                                               // 46\n    handleElement(debugID, ReactComponentTreeHook.getElement(debugID));                                                // 47\n  },                                                                                                                   // 48\n  onUpdateComponent: function (debugID) {                                                                              // 49\n    handleElement(debugID, ReactComponentTreeHook.getElement(debugID));                                                // 50\n  }                                                                                                                    // 51\n};                                                                                                                     // 52\n                                                                                                                       // 53\nmodule.exports = ReactChildrenMutationWarningHook;                                                                     // 54\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"Transaction.js\":[\"./reactProdInvariant\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/Transaction.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule Transaction                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar invariant = require('fbjs/lib/invariant');                                                                         // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * `Transaction` creates a black box that is able to wrap any method such that                                         // 19\n * certain invariants are maintained before and after the method is invoked                                            // 20\n * (Even if an exception is thrown while invoking the wrapped method). Whoever                                         // 21\n * instantiates a transaction can provide enforcers of the invariants at                                               // 22\n * creation time. The `Transaction` class itself will supply one additional                                            // 23\n * automatic invariant for you - the invariant that any transaction instance                                           // 24\n * should not be run while it is already being run. You would typically create a                                       // 25\n * single instance of a `Transaction` for reuse multiple times, that potentially                                       // 26\n * is used to wrap several different methods. Wrappers are extremely simple -                                          // 27\n * they only require implementing two methods.                                                                         // 28\n *                                                                                                                     // 29\n * <pre>                                                                                                               // 30\n *                       wrappers (injected at creation time)                                                          // 31\n *                                      +        +                                                                     // 32\n *                                      |        |                                                                     // 33\n *                    +-----------------|--------|--------------+                                                      // 34\n *                    |                 v        |              |                                                      // 35\n *                    |      +---------------+   |              |                                                      // 36\n *                    |   +--|    wrapper1   |---|----+         |                                                      // 37\n *                    |   |  +---------------+   v    |         |                                                      // 38\n *                    |   |          +-------------+  |         |                                                      // 39\n *                    |   |     +----|   wrapper2  |--------+   |                                                      // 40\n *                    |   |     |    +-------------+  |     |   |                                                      // 41\n *                    |   |     |                     |     |   |                                                      // 42\n *                    |   v     v                     v     v   | wrapper                                              // 43\n *                    | +---+ +---+   +---------+   +---+ +---+ | invariants                                           // 44\n * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained                                           // 45\n * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->                                             // 46\n *                    | |   | |   |   |         |   |   | |   | |                                                      // 47\n *                    | |   | |   |   |         |   |   | |   | |                                                      // 48\n *                    | |   | |   |   |         |   |   | |   | |                                                      // 49\n *                    | +---+ +---+   +---------+   +---+ +---+ |                                                      // 50\n *                    |  initialize                    close    |                                                      // 51\n *                    +-----------------------------------------+                                                      // 52\n * </pre>                                                                                                              // 53\n *                                                                                                                     // 54\n * Use cases:                                                                                                          // 55\n * - Preserving the input selection ranges before/after reconciliation.                                                // 56\n *   Restoring selection even in the event of an unexpected error.                                                     // 57\n * - Deactivating events while rearranging the DOM, preventing blurs/focuses,                                          // 58\n *   while guaranteeing that afterwards, the event system is reactivated.                                              // 59\n * - Flushing a queue of collected DOM mutations to the main UI thread after a                                         // 60\n *   reconciliation takes place in a worker thread.                                                                    // 61\n * - Invoking any collected `componentDidUpdate` callbacks after rendering new                                         // 62\n *   content.                                                                                                          // 63\n * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue                                         // 64\n *   to preserve the `scrollTop` (an automatic scroll aware DOM).                                                      // 65\n * - (Future use case): Layout calculations before and after DOM updates.                                              // 66\n *                                                                                                                     // 67\n * Transactional plugin API:                                                                                           // 68\n * - A module that has an `initialize` method that returns any precomputation.                                         // 69\n * - and a `close` method that accepts the precomputation. `close` is invoked                                          // 70\n *   when the wrapped process is completed, or has failed.                                                             // 71\n *                                                                                                                     // 72\n * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules                                             // 73\n * that implement `initialize` and `close`.                                                                            // 74\n * @return {Transaction} Single transaction for reuse in thread.                                                       // 75\n *                                                                                                                     // 76\n * @class Transaction                                                                                                  // 77\n */                                                                                                                    // 78\nvar Mixin = {                                                                                                          // 79\n  /**                                                                                                                  // 80\n   * Sets up this instance so that it is prepared for collecting metrics. Does                                         // 81\n   * so such that this setup method may be used on an instance that is already                                         // 82\n   * initialized, in a way that does not consume additional memory upon reuse.                                         // 83\n   * That can be useful if you decide to make your subclass of this mixin a                                            // 84\n   * \"PooledClass\".                                                                                                    // 85\n   */                                                                                                                  // 86\n  reinitializeTransaction: function () {                                                                               // 87\n    this.transactionWrappers = this.getTransactionWrappers();                                                          // 88\n    if (this.wrapperInitData) {                                                                                        // 89\n      this.wrapperInitData.length = 0;                                                                                 // 90\n    } else {                                                                                                           // 91\n      this.wrapperInitData = [];                                                                                       // 92\n    }                                                                                                                  // 93\n    this._isInTransaction = false;                                                                                     // 94\n  },                                                                                                                   // 95\n                                                                                                                       // 96\n  _isInTransaction: false,                                                                                             // 97\n                                                                                                                       // 98\n  /**                                                                                                                  // 99\n   * @abstract                                                                                                         // 100\n   * @return {Array<TransactionWrapper>} Array of transaction wrappers.                                                // 101\n   */                                                                                                                  // 102\n  getTransactionWrappers: null,                                                                                        // 103\n                                                                                                                       // 104\n  isInTransaction: function () {                                                                                       // 105\n    return !!this._isInTransaction;                                                                                    // 106\n  },                                                                                                                   // 107\n                                                                                                                       // 108\n  /**                                                                                                                  // 109\n   * Executes the function within a safety window. Use this for the top level                                          // 110\n   * methods that result in large amounts of computation/mutations that would                                          // 111\n   * need to be safety checked. The optional arguments helps prevent the need                                          // 112\n   * to bind in many cases.                                                                                            // 113\n   *                                                                                                                   // 114\n   * @param {function} method Member of scope to call.                                                                 // 115\n   * @param {Object} scope Scope to invoke from.                                                                       // 116\n   * @param {Object?=} a Argument to pass to the method.                                                               // 117\n   * @param {Object?=} b Argument to pass to the method.                                                               // 118\n   * @param {Object?=} c Argument to pass to the method.                                                               // 119\n   * @param {Object?=} d Argument to pass to the method.                                                               // 120\n   * @param {Object?=} e Argument to pass to the method.                                                               // 121\n   * @param {Object?=} f Argument to pass to the method.                                                               // 122\n   *                                                                                                                   // 123\n   * @return {*} Return value from `method`.                                                                           // 124\n   */                                                                                                                  // 125\n  perform: function (method, scope, a, b, c, d, e, f) {                                                                // 126\n    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;\n    var errorThrown;                                                                                                   // 128\n    var ret;                                                                                                           // 129\n    try {                                                                                                              // 130\n      this._isInTransaction = true;                                                                                    // 131\n      // Catching errors makes debugging more difficult, so we start with                                              // 132\n      // errorThrown set to true before setting it to false after calling                                              // 133\n      // close -- if it's still set to true in the finally block, it means                                             // 134\n      // one of these calls threw.                                                                                     // 135\n      errorThrown = true;                                                                                              // 136\n      this.initializeAll(0);                                                                                           // 137\n      ret = method.call(scope, a, b, c, d, e, f);                                                                      // 138\n      errorThrown = false;                                                                                             // 139\n    } finally {                                                                                                        // 140\n      try {                                                                                                            // 141\n        if (errorThrown) {                                                                                             // 142\n          // If `method` throws, prefer to show that stack trace over any thrown                                       // 143\n          // by invoking `closeAll`.                                                                                   // 144\n          try {                                                                                                        // 145\n            this.closeAll(0);                                                                                          // 146\n          } catch (err) {}                                                                                             // 147\n        } else {                                                                                                       // 148\n          // Since `method` didn't throw, we don't want to silence the exception                                       // 149\n          // here.                                                                                                     // 150\n          this.closeAll(0);                                                                                            // 151\n        }                                                                                                              // 152\n      } finally {                                                                                                      // 153\n        this._isInTransaction = false;                                                                                 // 154\n      }                                                                                                                // 155\n    }                                                                                                                  // 156\n    return ret;                                                                                                        // 157\n  },                                                                                                                   // 158\n                                                                                                                       // 159\n  initializeAll: function (startIndex) {                                                                               // 160\n    var transactionWrappers = this.transactionWrappers;                                                                // 161\n    for (var i = startIndex; i < transactionWrappers.length; i++) {                                                    // 162\n      var wrapper = transactionWrappers[i];                                                                            // 163\n      try {                                                                                                            // 164\n        // Catching errors makes debugging more difficult, so we start with the                                        // 165\n        // OBSERVED_ERROR state before overwriting it with the real return value                                       // 166\n        // of initialize -- if it's still set to OBSERVED_ERROR in the finally                                         // 167\n        // block, it means wrapper.initialize threw.                                                                   // 168\n        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;                                                          // 169\n        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;                           // 170\n      } finally {                                                                                                      // 171\n        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {                                                  // 172\n          // The initializer for wrapper i threw an error; initialize the                                              // 173\n          // remaining wrappers but silence any exceptions from them to ensure                                         // 174\n          // that the first error is the one to bubble up.                                                             // 175\n          try {                                                                                                        // 176\n            this.initializeAll(i + 1);                                                                                 // 177\n          } catch (err) {}                                                                                             // 178\n        }                                                                                                              // 179\n      }                                                                                                                // 180\n    }                                                                                                                  // 181\n  },                                                                                                                   // 182\n                                                                                                                       // 183\n  /**                                                                                                                  // 184\n   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into                                       // 185\n   * them the respective return values of `this.transactionWrappers.init[i]`                                           // 186\n   * (`close`rs that correspond to initializers that failed will not be                                                // 187\n   * invoked).                                                                                                         // 188\n   */                                                                                                                  // 189\n  closeAll: function (startIndex) {                                                                                    // 190\n    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;\n    var transactionWrappers = this.transactionWrappers;                                                                // 192\n    for (var i = startIndex; i < transactionWrappers.length; i++) {                                                    // 193\n      var wrapper = transactionWrappers[i];                                                                            // 194\n      var initData = this.wrapperInitData[i];                                                                          // 195\n      var errorThrown;                                                                                                 // 196\n      try {                                                                                                            // 197\n        // Catching errors makes debugging more difficult, so we start with                                            // 198\n        // errorThrown set to true before setting it to false after calling                                            // 199\n        // close -- if it's still set to true in the finally block, it means                                           // 200\n        // wrapper.close threw.                                                                                        // 201\n        errorThrown = true;                                                                                            // 202\n        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {                                                // 203\n          wrapper.close.call(this, initData);                                                                          // 204\n        }                                                                                                              // 205\n        errorThrown = false;                                                                                           // 206\n      } finally {                                                                                                      // 207\n        if (errorThrown) {                                                                                             // 208\n          // The closer for wrapper i threw an error; close the remaining                                              // 209\n          // wrappers but silence any exceptions from them to ensure that the                                          // 210\n          // first error is the one to bubble up.                                                                      // 211\n          try {                                                                                                        // 212\n            this.closeAll(i + 1);                                                                                      // 213\n          } catch (e) {}                                                                                               // 214\n        }                                                                                                              // 215\n      }                                                                                                                // 216\n    }                                                                                                                  // 217\n    this.wrapperInitData.length = 0;                                                                                   // 218\n  }                                                                                                                    // 219\n};                                                                                                                     // 220\n                                                                                                                       // 221\nvar Transaction = {                                                                                                    // 222\n                                                                                                                       // 223\n  Mixin: Mixin,                                                                                                        // 224\n                                                                                                                       // 225\n  /**                                                                                                                  // 226\n   * Token to look for to determine if an error occurred.                                                              // 227\n   */                                                                                                                  // 228\n  OBSERVED_ERROR: {}                                                                                                   // 229\n                                                                                                                       // 230\n};                                                                                                                     // 231\n                                                                                                                       // 232\nmodule.exports = Transaction;                                                                                          // 233\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getEventTarget.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getEventTarget.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getEventTarget                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Gets the target node from a native browser event by accounting for                                                  // 15\n * inconsistencies in browser DOM APIs.                                                                                // 16\n *                                                                                                                     // 17\n * @param {object} nativeEvent Native browser event.                                                                   // 18\n * @return {DOMEventTarget} Target node.                                                                               // 19\n */                                                                                                                    // 20\n                                                                                                                       // 21\nfunction getEventTarget(nativeEvent) {                                                                                 // 22\n  var target = nativeEvent.target || nativeEvent.srcElement || window;                                                 // 23\n                                                                                                                       // 24\n  // Normalize SVG <use> element events #4963                                                                          // 25\n  if (target.correspondingUseElement) {                                                                                // 26\n    target = target.correspondingUseElement;                                                                           // 27\n  }                                                                                                                    // 28\n                                                                                                                       // 29\n  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).                                                       // 30\n  // @see http://www.quirksmode.org/js/events_properties.html                                                          // 31\n  return target.nodeType === 3 ? target.parentNode : target;                                                           // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\nmodule.exports = getEventTarget;                                                                                       // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isEventSupported.js\":[\"fbjs/lib/ExecutionEnvironment\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/isEventSupported.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule isEventSupported                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 14\n                                                                                                                       // 15\nvar useHasFeature;                                                                                                     // 16\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 17\n  useHasFeature = document.implementation && document.implementation.hasFeature &&                                     // 18\n  // always returns true in newer browsers as per the standard.                                                        // 19\n  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature                                                 // 20\n  document.implementation.hasFeature('', '') !== true;                                                                 // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Checks if an event is supported in the current execution environment.                                               // 25\n *                                                                                                                     // 26\n * NOTE: This will not work correctly for non-generic events such as `change`,                                         // 27\n * `reset`, `load`, `error`, and `select`.                                                                             // 28\n *                                                                                                                     // 29\n * Borrows from Modernizr.                                                                                             // 30\n *                                                                                                                     // 31\n * @param {string} eventNameSuffix Event name, e.g. \"click\".                                                           // 32\n * @param {?boolean} capture Check if the capture phase is supported.                                                  // 33\n * @return {boolean} True if the event is supported.                                                                   // 34\n * @internal                                                                                                           // 35\n * @license Modernizr 3.0.0pre (Custom Build) | MIT                                                                    // 36\n */                                                                                                                    // 37\nfunction isEventSupported(eventNameSuffix, capture) {                                                                  // 38\n  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {                               // 39\n    return false;                                                                                                      // 40\n  }                                                                                                                    // 41\n                                                                                                                       // 42\n  var eventName = 'on' + eventNameSuffix;                                                                              // 43\n  var isSupported = eventName in document;                                                                             // 44\n                                                                                                                       // 45\n  if (!isSupported) {                                                                                                  // 46\n    var element = document.createElement('div');                                                                       // 47\n    element.setAttribute(eventName, 'return;');                                                                        // 48\n    isSupported = typeof element[eventName] === 'function';                                                            // 49\n  }                                                                                                                    // 50\n                                                                                                                       // 51\n  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {                                                  // 52\n    // This is the only way to test support for the `wheel` event in IE9+.                                             // 53\n    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');                                           // 54\n  }                                                                                                                    // 55\n                                                                                                                       // 56\n  return isSupported;                                                                                                  // 57\n}                                                                                                                      // 58\n                                                                                                                       // 59\nmodule.exports = isEventSupported;                                                                                     // 60\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"isTextInputElement.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/isTextInputElement.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule isTextInputElement                                                                                  // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary     // 16\n */                                                                                                                    // 17\n                                                                                                                       // 18\nvar supportedInputTypes = {                                                                                            // 19\n  'color': true,                                                                                                       // 20\n  'date': true,                                                                                                        // 21\n  'datetime': true,                                                                                                    // 22\n  'datetime-local': true,                                                                                              // 23\n  'email': true,                                                                                                       // 24\n  'month': true,                                                                                                       // 25\n  'number': true,                                                                                                      // 26\n  'password': true,                                                                                                    // 27\n  'range': true,                                                                                                       // 28\n  'search': true,                                                                                                      // 29\n  'tel': true,                                                                                                         // 30\n  'text': true,                                                                                                        // 31\n  'time': true,                                                                                                        // 32\n  'url': true,                                                                                                         // 33\n  'week': true                                                                                                         // 34\n};                                                                                                                     // 35\n                                                                                                                       // 36\nfunction isTextInputElement(elem) {                                                                                    // 37\n  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();                                                 // 38\n                                                                                                                       // 39\n  if (nodeName === 'input') {                                                                                          // 40\n    return !!supportedInputTypes[elem.type];                                                                           // 41\n  }                                                                                                                    // 42\n                                                                                                                       // 43\n  if (nodeName === 'textarea') {                                                                                       // 44\n    return true;                                                                                                       // 45\n  }                                                                                                                    // 46\n                                                                                                                       // 47\n  return false;                                                                                                        // 48\n}                                                                                                                      // 49\n                                                                                                                       // 50\nmodule.exports = isTextInputElement;                                                                                   // 51\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"DefaultEventPluginOrder.js\":[\"fbjs/lib/keyOf\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/DefaultEventPluginOrder.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule DefaultEventPluginOrder                                                                             // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Module that is injectable into `EventPluginHub`, that specifies a                                                   // 17\n * deterministic ordering of `EventPlugin`s. A convenient way to reason about                                          // 18\n * plugins, without having to package every one of them. This is better than                                           // 19\n * having plugins be ordered in the same order that they are injected because                                          // 20\n * that ordering would be influenced by the packaging order.                                                           // 21\n * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that                                                // 22\n * preventing default on events is convenient in `SimpleEventPlugin` handlers.                                         // 23\n */                                                                                                                    // 24\nvar DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];\n                                                                                                                       // 26\nmodule.exports = DefaultEventPluginOrder;                                                                              // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"EnterLeaveEventPlugin.js\":[\"./EventConstants\",\"./EventPropagators\",\"./ReactDOMComponentTree\",\"./SyntheticMouseEvent\",\"fbjs/lib/keyOf\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EnterLeaveEventPlugin.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EnterLeaveEventPlugin                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar EventConstants = require('./EventConstants');                                                                      // 14\nvar EventPropagators = require('./EventPropagators');                                                                  // 15\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 16\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');                                                            // 17\n                                                                                                                       // 18\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 19\n                                                                                                                       // 20\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 21\n                                                                                                                       // 22\nvar eventTypes = {                                                                                                     // 23\n  mouseEnter: {                                                                                                        // 24\n    registrationName: keyOf({ onMouseEnter: null }),                                                                   // 25\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]                                              // 26\n  },                                                                                                                   // 27\n  mouseLeave: {                                                                                                        // 28\n    registrationName: keyOf({ onMouseLeave: null }),                                                                   // 29\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]                                              // 30\n  }                                                                                                                    // 31\n};                                                                                                                     // 32\n                                                                                                                       // 33\nvar EnterLeaveEventPlugin = {                                                                                          // 34\n                                                                                                                       // 35\n  eventTypes: eventTypes,                                                                                              // 36\n                                                                                                                       // 37\n  /**                                                                                                                  // 38\n   * For almost every interaction we care about, there will be both a top-level                                        // 39\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that                                         // 40\n   * we do not extract duplicate events. However, moving the mouse into the                                            // 41\n   * browser from outside will not fire a `mouseout` event. In this case, we use                                       // 42\n   * the `mouseover` top-level event.                                                                                  // 43\n   */                                                                                                                  // 44\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 45\n    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {       // 46\n      return null;                                                                                                     // 47\n    }                                                                                                                  // 48\n    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {                   // 49\n      // Must not be a mouse in or mouse out - ignoring.                                                               // 50\n      return null;                                                                                                     // 51\n    }                                                                                                                  // 52\n                                                                                                                       // 53\n    var win;                                                                                                           // 54\n    if (nativeEventTarget.window === nativeEventTarget) {                                                              // 55\n      // `nativeEventTarget` is probably a window object.                                                              // 56\n      win = nativeEventTarget;                                                                                         // 57\n    } else {                                                                                                           // 58\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.                                           // 59\n      var doc = nativeEventTarget.ownerDocument;                                                                       // 60\n      if (doc) {                                                                                                       // 61\n        win = doc.defaultView || doc.parentWindow;                                                                     // 62\n      } else {                                                                                                         // 63\n        win = window;                                                                                                  // 64\n      }                                                                                                                // 65\n    }                                                                                                                  // 66\n                                                                                                                       // 67\n    var from;                                                                                                          // 68\n    var to;                                                                                                            // 69\n    if (topLevelType === topLevelTypes.topMouseOut) {                                                                  // 70\n      from = targetInst;                                                                                               // 71\n      var related = nativeEvent.relatedTarget || nativeEvent.toElement;                                                // 72\n      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;                                 // 73\n    } else {                                                                                                           // 74\n      // Moving to a node from outside the window.                                                                     // 75\n      from = null;                                                                                                     // 76\n      to = targetInst;                                                                                                 // 77\n    }                                                                                                                  // 78\n                                                                                                                       // 79\n    if (from === to) {                                                                                                 // 80\n      // Nothing pertains to our managed components.                                                                   // 81\n      return null;                                                                                                     // 82\n    }                                                                                                                  // 83\n                                                                                                                       // 84\n    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);                               // 85\n    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);                                     // 86\n                                                                                                                       // 87\n    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);            // 88\n    leave.type = 'mouseleave';                                                                                         // 89\n    leave.target = fromNode;                                                                                           // 90\n    leave.relatedTarget = toNode;                                                                                      // 91\n                                                                                                                       // 92\n    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);              // 93\n    enter.type = 'mouseenter';                                                                                         // 94\n    enter.target = toNode;                                                                                             // 95\n    enter.relatedTarget = fromNode;                                                                                    // 96\n                                                                                                                       // 97\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);                                           // 98\n                                                                                                                       // 99\n    return [leave, enter];                                                                                             // 100\n  }                                                                                                                    // 101\n                                                                                                                       // 102\n};                                                                                                                     // 103\n                                                                                                                       // 104\nmodule.exports = EnterLeaveEventPlugin;                                                                                // 105\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticMouseEvent.js\":[\"./SyntheticUIEvent\",\"./ViewportMetrics\",\"./getEventModifierState\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticMouseEvent.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticMouseEvent                                                                                 // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 14\nvar ViewportMetrics = require('./ViewportMetrics');                                                                    // 15\n                                                                                                                       // 16\nvar getEventModifierState = require('./getEventModifierState');                                                        // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * @interface MouseEvent                                                                                               // 20\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 21\n */                                                                                                                    // 22\nvar MouseEventInterface = {                                                                                            // 23\n  screenX: null,                                                                                                       // 24\n  screenY: null,                                                                                                       // 25\n  clientX: null,                                                                                                       // 26\n  clientY: null,                                                                                                       // 27\n  ctrlKey: null,                                                                                                       // 28\n  shiftKey: null,                                                                                                      // 29\n  altKey: null,                                                                                                        // 30\n  metaKey: null,                                                                                                       // 31\n  getModifierState: getEventModifierState,                                                                             // 32\n  button: function (event) {                                                                                           // 33\n    // Webkit, Firefox, IE9+                                                                                           // 34\n    // which:  1 2 3                                                                                                   // 35\n    // button: 0 1 2 (standard)                                                                                        // 36\n    var button = event.button;                                                                                         // 37\n    if ('which' in event) {                                                                                            // 38\n      return button;                                                                                                   // 39\n    }                                                                                                                  // 40\n    // IE<9                                                                                                            // 41\n    // which:  undefined                                                                                               // 42\n    // button: 0 0 0                                                                                                   // 43\n    // button: 1 4 2 (onmouseup)                                                                                       // 44\n    return button === 2 ? 2 : button === 4 ? 1 : 0;                                                                    // 45\n  },                                                                                                                   // 46\n  buttons: null,                                                                                                       // 47\n  relatedTarget: function (event) {                                                                                    // 48\n    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);      // 49\n  },                                                                                                                   // 50\n  // \"Proprietary\" Interface.                                                                                          // 51\n  pageX: function (event) {                                                                                            // 52\n    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;                         // 53\n  },                                                                                                                   // 54\n  pageY: function (event) {                                                                                            // 55\n    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;                          // 56\n  }                                                                                                                    // 57\n};                                                                                                                     // 58\n                                                                                                                       // 59\n/**                                                                                                                    // 60\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 61\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 62\n * @param {object} nativeEvent Native browser event.                                                                   // 63\n * @extends {SyntheticUIEvent}                                                                                         // 64\n */                                                                                                                    // 65\nfunction SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 66\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                  // 67\n}                                                                                                                      // 68\n                                                                                                                       // 69\nSyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);                                               // 70\n                                                                                                                       // 71\nmodule.exports = SyntheticMouseEvent;                                                                                  // 72\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticUIEvent.js\":[\"./SyntheticEvent\",\"./getEventTarget\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticUIEvent.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticUIEvent                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 14\n                                                                                                                       // 15\nvar getEventTarget = require('./getEventTarget');                                                                      // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * @interface UIEvent                                                                                                  // 19\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 20\n */                                                                                                                    // 21\nvar UIEventInterface = {                                                                                               // 22\n  view: function (event) {                                                                                             // 23\n    if (event.view) {                                                                                                  // 24\n      return event.view;                                                                                               // 25\n    }                                                                                                                  // 26\n                                                                                                                       // 27\n    var target = getEventTarget(event);                                                                                // 28\n    if (target.window === target) {                                                                                    // 29\n      // target is a window object                                                                                     // 30\n      return target;                                                                                                   // 31\n    }                                                                                                                  // 32\n                                                                                                                       // 33\n    var doc = target.ownerDocument;                                                                                    // 34\n    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.                                             // 35\n    if (doc) {                                                                                                         // 36\n      return doc.defaultView || doc.parentWindow;                                                                      // 37\n    } else {                                                                                                           // 38\n      return window;                                                                                                   // 39\n    }                                                                                                                  // 40\n  },                                                                                                                   // 41\n  detail: function (event) {                                                                                           // 42\n    return event.detail || 0;                                                                                          // 43\n  }                                                                                                                    // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\n/**                                                                                                                    // 47\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 48\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 49\n * @param {object} nativeEvent Native browser event.                                                                   // 50\n * @extends {SyntheticEvent}                                                                                           // 51\n */                                                                                                                    // 52\nfunction SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                            // 53\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 54\n}                                                                                                                      // 55\n                                                                                                                       // 56\nSyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);                                                       // 57\n                                                                                                                       // 58\nmodule.exports = SyntheticUIEvent;                                                                                     // 59\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ViewportMetrics.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ViewportMetrics.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ViewportMetrics                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ViewportMetrics = {                                                                                                // 14\n                                                                                                                       // 15\n  currentScrollLeft: 0,                                                                                                // 16\n                                                                                                                       // 17\n  currentScrollTop: 0,                                                                                                 // 18\n                                                                                                                       // 19\n  refreshScrollValues: function (scrollPosition) {                                                                     // 20\n    ViewportMetrics.currentScrollLeft = scrollPosition.x;                                                              // 21\n    ViewportMetrics.currentScrollTop = scrollPosition.y;                                                               // 22\n  }                                                                                                                    // 23\n                                                                                                                       // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\nmodule.exports = ViewportMetrics;                                                                                      // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getEventModifierState.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getEventModifierState.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getEventModifierState                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Translation from modifier key to the associated property in the event.                                              // 15\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers                                                        // 16\n */                                                                                                                    // 17\n                                                                                                                       // 18\nvar modifierKeyToProp = {                                                                                              // 19\n  'Alt': 'altKey',                                                                                                     // 20\n  'Control': 'ctrlKey',                                                                                                // 21\n  'Meta': 'metaKey',                                                                                                   // 22\n  'Shift': 'shiftKey'                                                                                                  // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\n// IE8 does not implement getModifierState so we simply map it to the only                                             // 26\n// modifier keys exposed by the event itself, does not support Lock-keys.                                              // 27\n// Currently, all major browsers except Chrome seems to support Lock-keys.                                             // 28\nfunction modifierStateGetter(keyArg) {                                                                                 // 29\n  var syntheticEvent = this;                                                                                           // 30\n  var nativeEvent = syntheticEvent.nativeEvent;                                                                        // 31\n  if (nativeEvent.getModifierState) {                                                                                  // 32\n    return nativeEvent.getModifierState(keyArg);                                                                       // 33\n  }                                                                                                                    // 34\n  var keyProp = modifierKeyToProp[keyArg];                                                                             // 35\n  return keyProp ? !!nativeEvent[keyProp] : false;                                                                     // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\nfunction getEventModifierState(nativeEvent) {                                                                          // 39\n  return modifierStateGetter;                                                                                          // 40\n}                                                                                                                      // 41\n                                                                                                                       // 42\nmodule.exports = getEventModifierState;                                                                                // 43\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"HTMLDOMPropertyConfig.js\":[\"./DOMProperty\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/HTMLDOMPropertyConfig.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule HTMLDOMPropertyConfig                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar DOMProperty = require('./DOMProperty');                                                                            // 14\n                                                                                                                       // 15\nvar MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;                                                       // 16\nvar HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;                                                       // 17\nvar HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;                                                       // 18\nvar HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;                                     // 19\nvar HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;                                 // 20\n                                                                                                                       // 21\nvar HTMLDOMPropertyConfig = {                                                                                          // 22\n  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),\n  Properties: {                                                                                                        // 24\n    /**                                                                                                                // 25\n     * Standard Properties                                                                                             // 26\n     */                                                                                                                // 27\n    accept: 0,                                                                                                         // 28\n    acceptCharset: 0,                                                                                                  // 29\n    accessKey: 0,                                                                                                      // 30\n    action: 0,                                                                                                         // 31\n    allowFullScreen: HAS_BOOLEAN_VALUE,                                                                                // 32\n    allowTransparency: 0,                                                                                              // 33\n    alt: 0,                                                                                                            // 34\n    // specifies target context for links with `preload` type                                                          // 35\n    as: 0,                                                                                                             // 36\n    async: HAS_BOOLEAN_VALUE,                                                                                          // 37\n    autoComplete: 0,                                                                                                   // 38\n    // autoFocus is polyfilled/normalized by AutoFocusUtils                                                            // 39\n    // autoFocus: HAS_BOOLEAN_VALUE,                                                                                   // 40\n    autoPlay: HAS_BOOLEAN_VALUE,                                                                                       // 41\n    capture: HAS_BOOLEAN_VALUE,                                                                                        // 42\n    cellPadding: 0,                                                                                                    // 43\n    cellSpacing: 0,                                                                                                    // 44\n    charSet: 0,                                                                                                        // 45\n    challenge: 0,                                                                                                      // 46\n    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                    // 47\n    cite: 0,                                                                                                           // 48\n    classID: 0,                                                                                                        // 49\n    className: 0,                                                                                                      // 50\n    cols: HAS_POSITIVE_NUMERIC_VALUE,                                                                                  // 51\n    colSpan: 0,                                                                                                        // 52\n    content: 0,                                                                                                        // 53\n    contentEditable: 0,                                                                                                // 54\n    contextMenu: 0,                                                                                                    // 55\n    controls: HAS_BOOLEAN_VALUE,                                                                                       // 56\n    coords: 0,                                                                                                         // 57\n    crossOrigin: 0,                                                                                                    // 58\n    data: 0, // For `<object />` acts as `src`.                                                                        // 59\n    dateTime: 0,                                                                                                       // 60\n    'default': HAS_BOOLEAN_VALUE,                                                                                      // 61\n    defer: HAS_BOOLEAN_VALUE,                                                                                          // 62\n    dir: 0,                                                                                                            // 63\n    disabled: HAS_BOOLEAN_VALUE,                                                                                       // 64\n    download: HAS_OVERLOADED_BOOLEAN_VALUE,                                                                            // 65\n    draggable: 0,                                                                                                      // 66\n    encType: 0,                                                                                                        // 67\n    form: 0,                                                                                                           // 68\n    formAction: 0,                                                                                                     // 69\n    formEncType: 0,                                                                                                    // 70\n    formMethod: 0,                                                                                                     // 71\n    formNoValidate: HAS_BOOLEAN_VALUE,                                                                                 // 72\n    formTarget: 0,                                                                                                     // 73\n    frameBorder: 0,                                                                                                    // 74\n    headers: 0,                                                                                                        // 75\n    height: 0,                                                                                                         // 76\n    hidden: HAS_BOOLEAN_VALUE,                                                                                         // 77\n    high: 0,                                                                                                           // 78\n    href: 0,                                                                                                           // 79\n    hrefLang: 0,                                                                                                       // 80\n    htmlFor: 0,                                                                                                        // 81\n    httpEquiv: 0,                                                                                                      // 82\n    icon: 0,                                                                                                           // 83\n    id: 0,                                                                                                             // 84\n    inputMode: 0,                                                                                                      // 85\n    integrity: 0,                                                                                                      // 86\n    is: 0,                                                                                                             // 87\n    keyParams: 0,                                                                                                      // 88\n    keyType: 0,                                                                                                        // 89\n    kind: 0,                                                                                                           // 90\n    label: 0,                                                                                                          // 91\n    lang: 0,                                                                                                           // 92\n    list: 0,                                                                                                           // 93\n    loop: HAS_BOOLEAN_VALUE,                                                                                           // 94\n    low: 0,                                                                                                            // 95\n    manifest: 0,                                                                                                       // 96\n    marginHeight: 0,                                                                                                   // 97\n    marginWidth: 0,                                                                                                    // 98\n    max: 0,                                                                                                            // 99\n    maxLength: 0,                                                                                                      // 100\n    media: 0,                                                                                                          // 101\n    mediaGroup: 0,                                                                                                     // 102\n    method: 0,                                                                                                         // 103\n    min: 0,                                                                                                            // 104\n    minLength: 0,                                                                                                      // 105\n    // Caution; `option.selected` is not updated if `select.multiple` is                                               // 106\n    // disabled with `removeAttribute`.                                                                                // 107\n    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 108\n    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                      // 109\n    name: 0,                                                                                                           // 110\n    nonce: 0,                                                                                                          // 111\n    noValidate: HAS_BOOLEAN_VALUE,                                                                                     // 112\n    open: HAS_BOOLEAN_VALUE,                                                                                           // 113\n    optimum: 0,                                                                                                        // 114\n    pattern: 0,                                                                                                        // 115\n    placeholder: 0,                                                                                                    // 116\n    playsInline: HAS_BOOLEAN_VALUE,                                                                                    // 117\n    poster: 0,                                                                                                         // 118\n    preload: 0,                                                                                                        // 119\n    profile: 0,                                                                                                        // 120\n    radioGroup: 0,                                                                                                     // 121\n    readOnly: HAS_BOOLEAN_VALUE,                                                                                       // 122\n    referrerPolicy: 0,                                                                                                 // 123\n    rel: 0,                                                                                                            // 124\n    required: HAS_BOOLEAN_VALUE,                                                                                       // 125\n    reversed: HAS_BOOLEAN_VALUE,                                                                                       // 126\n    role: 0,                                                                                                           // 127\n    rows: HAS_POSITIVE_NUMERIC_VALUE,                                                                                  // 128\n    rowSpan: HAS_NUMERIC_VALUE,                                                                                        // 129\n    sandbox: 0,                                                                                                        // 130\n    scope: 0,                                                                                                          // 131\n    scoped: HAS_BOOLEAN_VALUE,                                                                                         // 132\n    scrolling: 0,                                                                                                      // 133\n    seamless: HAS_BOOLEAN_VALUE,                                                                                       // 134\n    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 135\n    shape: 0,                                                                                                          // 136\n    size: HAS_POSITIVE_NUMERIC_VALUE,                                                                                  // 137\n    sizes: 0,                                                                                                          // 138\n    span: HAS_POSITIVE_NUMERIC_VALUE,                                                                                  // 139\n    spellCheck: 0,                                                                                                     // 140\n    src: 0,                                                                                                            // 141\n    srcDoc: 0,                                                                                                         // 142\n    srcLang: 0,                                                                                                        // 143\n    srcSet: 0,                                                                                                         // 144\n    start: HAS_NUMERIC_VALUE,                                                                                          // 145\n    step: 0,                                                                                                           // 146\n    style: 0,                                                                                                          // 147\n    summary: 0,                                                                                                        // 148\n    tabIndex: 0,                                                                                                       // 149\n    target: 0,                                                                                                         // 150\n    title: 0,                                                                                                          // 151\n    // Setting .type throws on non-<input> tags                                                                        // 152\n    type: 0,                                                                                                           // 153\n    useMap: 0,                                                                                                         // 154\n    value: 0,                                                                                                          // 155\n    width: 0,                                                                                                          // 156\n    wmode: 0,                                                                                                          // 157\n    wrap: 0,                                                                                                           // 158\n                                                                                                                       // 159\n    /**                                                                                                                // 160\n     * RDFa Properties                                                                                                 // 161\n     */                                                                                                                // 162\n    about: 0,                                                                                                          // 163\n    datatype: 0,                                                                                                       // 164\n    inlist: 0,                                                                                                         // 165\n    prefix: 0,                                                                                                         // 166\n    // property is also supported for OpenGraph in meta tags.                                                          // 167\n    property: 0,                                                                                                       // 168\n    resource: 0,                                                                                                       // 169\n    'typeof': 0,                                                                                                       // 170\n    vocab: 0,                                                                                                          // 171\n                                                                                                                       // 172\n    /**                                                                                                                // 173\n     * Non-standard Properties                                                                                         // 174\n     */                                                                                                                // 175\n    // autoCapitalize and autoCorrect are supported in Mobile Safari for                                               // 176\n    // keyboard hints.                                                                                                 // 177\n    autoCapitalize: 0,                                                                                                 // 178\n    autoCorrect: 0,                                                                                                    // 179\n    // autoSave allows WebKit/Blink to persist values of input fields on page reloads                                  // 180\n    autoSave: 0,                                                                                                       // 181\n    // color is for Safari mask-icon link                                                                              // 182\n    color: 0,                                                                                                          // 183\n    // itemProp, itemScope, itemType are for                                                                           // 184\n    // Microdata support. See http://schema.org/docs/gs.html                                                           // 185\n    itemProp: 0,                                                                                                       // 186\n    itemScope: HAS_BOOLEAN_VALUE,                                                                                      // 187\n    itemType: 0,                                                                                                       // 188\n    // itemID and itemRef are for Microdata support as well but                                                        // 189\n    // only specified in the WHATWG spec document. See                                                                 // 190\n    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api                                         // 191\n    itemID: 0,                                                                                                         // 192\n    itemRef: 0,                                                                                                        // 193\n    // results show looking glass icon and recent searches on input                                                    // 194\n    // search fields in WebKit/Blink                                                                                   // 195\n    results: 0,                                                                                                        // 196\n    // IE-only attribute that specifies security restrictions on an iframe                                             // 197\n    // as an alternative to the sandbox attribute on IE<10                                                             // 198\n    security: 0,                                                                                                       // 199\n    // IE-only attribute that controls focus behavior                                                                  // 200\n    unselectable: 0                                                                                                    // 201\n  },                                                                                                                   // 202\n  DOMAttributeNames: {                                                                                                 // 203\n    acceptCharset: 'accept-charset',                                                                                   // 204\n    className: 'class',                                                                                                // 205\n    htmlFor: 'for',                                                                                                    // 206\n    httpEquiv: 'http-equiv'                                                                                            // 207\n  },                                                                                                                   // 208\n  DOMPropertyNames: {}                                                                                                 // 209\n};                                                                                                                     // 210\n                                                                                                                       // 211\nmodule.exports = HTMLDOMPropertyConfig;                                                                                // 212\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactComponentBrowserEnvironment.js\":[\"./DOMChildrenOperations\",\"./ReactDOMIDOperations\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactComponentBrowserEnvironment.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactComponentBrowserEnvironment                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar DOMChildrenOperations = require('./DOMChildrenOperations');                                                        // 14\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');                                                          // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Abstracts away all functionality of the reconciler that requires knowledge of                                       // 18\n * the browser context. TODO: These callers should be refactored to avoid the                                          // 19\n * need for this injection.                                                                                            // 20\n */                                                                                                                    // 21\nvar ReactComponentBrowserEnvironment = {                                                                               // 22\n                                                                                                                       // 23\n  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,                                      // 24\n                                                                                                                       // 25\n  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup                                        // 26\n                                                                                                                       // 27\n};                                                                                                                     // 28\n                                                                                                                       // 29\nmodule.exports = ReactComponentBrowserEnvironment;                                                                     // 30\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"DOMChildrenOperations.js\":[\"./DOMLazyTree\",\"./Danger\",\"./ReactMultiChildUpdateTypes\",\"./ReactDOMComponentTree\",\"./ReactInstrumentation\",\"./createMicrosoftUnsafeLocalFunction\",\"./setInnerHTML\",\"./setTextContent\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/DOMChildrenOperations.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule DOMChildrenOperations                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar DOMLazyTree = require('./DOMLazyTree');                                                                            // 14\nvar Danger = require('./Danger');                                                                                      // 15\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');                                              // 16\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 17\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 18\n                                                                                                                       // 19\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');                              // 20\nvar setInnerHTML = require('./setInnerHTML');                                                                          // 21\nvar setTextContent = require('./setTextContent');                                                                      // 22\n                                                                                                                       // 23\nfunction getNodeAfter(parentNode, node) {                                                                              // 24\n  // Special case for text components, which return [open, close] comments                                             // 25\n  // from getHostNode.                                                                                                 // 26\n  if (Array.isArray(node)) {                                                                                           // 27\n    node = node[1];                                                                                                    // 28\n  }                                                                                                                    // 29\n  return node ? node.nextSibling : parentNode.firstChild;                                                              // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * Inserts `childNode` as a child of `parentNode` at the `index`.                                                      // 34\n *                                                                                                                     // 35\n * @param {DOMElement} parentNode Parent node in which to insert.                                                      // 36\n * @param {DOMElement} childNode Child node to insert.                                                                 // 37\n * @param {number} index Index at which to insert the child.                                                           // 38\n * @internal                                                                                                           // 39\n */                                                                                                                    // 40\nvar insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {               // 41\n  // We rely exclusively on `insertBefore(node, null)` instead of also using                                           // 42\n  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so                                         // 43\n  // we are careful to use `null`.)                                                                                    // 44\n  parentNode.insertBefore(childNode, referenceNode);                                                                   // 45\n});                                                                                                                    // 46\n                                                                                                                       // 47\nfunction insertLazyTreeChildAt(parentNode, childTree, referenceNode) {                                                 // 48\n  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);                                                  // 49\n}                                                                                                                      // 50\n                                                                                                                       // 51\nfunction moveChild(parentNode, childNode, referenceNode) {                                                             // 52\n  if (Array.isArray(childNode)) {                                                                                      // 53\n    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);                                          // 54\n  } else {                                                                                                             // 55\n    insertChildAt(parentNode, childNode, referenceNode);                                                               // 56\n  }                                                                                                                    // 57\n}                                                                                                                      // 58\n                                                                                                                       // 59\nfunction removeChild(parentNode, childNode) {                                                                          // 60\n  if (Array.isArray(childNode)) {                                                                                      // 61\n    var closingComment = childNode[1];                                                                                 // 62\n    childNode = childNode[0];                                                                                          // 63\n    removeDelimitedText(parentNode, childNode, closingComment);                                                        // 64\n    parentNode.removeChild(closingComment);                                                                            // 65\n  }                                                                                                                    // 66\n  parentNode.removeChild(childNode);                                                                                   // 67\n}                                                                                                                      // 68\n                                                                                                                       // 69\nfunction moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {                                // 70\n  var node = openingComment;                                                                                           // 71\n  while (true) {                                                                                                       // 72\n    var nextNode = node.nextSibling;                                                                                   // 73\n    insertChildAt(parentNode, node, referenceNode);                                                                    // 74\n    if (node === closingComment) {                                                                                     // 75\n      break;                                                                                                           // 76\n    }                                                                                                                  // 77\n    node = nextNode;                                                                                                   // 78\n  }                                                                                                                    // 79\n}                                                                                                                      // 80\n                                                                                                                       // 81\nfunction removeDelimitedText(parentNode, startNode, closingComment) {                                                  // 82\n  while (true) {                                                                                                       // 83\n    var node = startNode.nextSibling;                                                                                  // 84\n    if (node === closingComment) {                                                                                     // 85\n      // The closing comment is removed by ReactMultiChild.                                                            // 86\n      break;                                                                                                           // 87\n    } else {                                                                                                           // 88\n      parentNode.removeChild(node);                                                                                    // 89\n    }                                                                                                                  // 90\n  }                                                                                                                    // 91\n}                                                                                                                      // 92\n                                                                                                                       // 93\nfunction replaceDelimitedText(openingComment, closingComment, stringText) {                                            // 94\n  var parentNode = openingComment.parentNode;                                                                          // 95\n  var nodeAfterComment = openingComment.nextSibling;                                                                   // 96\n  if (nodeAfterComment === closingComment) {                                                                           // 97\n    // There are no text nodes between the opening and closing comments; insert                                        // 98\n    // a new one if stringText isn't empty.                                                                            // 99\n    if (stringText) {                                                                                                  // 100\n      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);                                // 101\n    }                                                                                                                  // 102\n  } else {                                                                                                             // 103\n    if (stringText) {                                                                                                  // 104\n      // Set the text content of the first node after the opening comment, and                                         // 105\n      // remove all following nodes up until the closing comment.                                                      // 106\n      setTextContent(nodeAfterComment, stringText);                                                                    // 107\n      removeDelimitedText(parentNode, nodeAfterComment, closingComment);                                               // 108\n    } else {                                                                                                           // 109\n      removeDelimitedText(parentNode, openingComment, closingComment);                                                 // 110\n    }                                                                                                                  // 111\n  }                                                                                                                    // 112\n                                                                                                                       // 113\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 114\n    ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID, 'replace text', stringText);\n  }                                                                                                                    // 116\n}                                                                                                                      // 117\n                                                                                                                       // 118\nvar dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;                                        // 119\nif (process.env.NODE_ENV !== 'production') {                                                                           // 120\n  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {                                       // 121\n    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);                                                         // 122\n    if (prevInstance._debugID !== 0) {                                                                                 // 123\n      ReactInstrumentation.debugTool.onHostOperation(prevInstance._debugID, 'replace with', markup.toString());        // 124\n    } else {                                                                                                           // 125\n      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);                                       // 126\n      if (nextInstance._debugID !== 0) {                                                                               // 127\n        ReactInstrumentation.debugTool.onHostOperation(nextInstance._debugID, 'mount', markup.toString());             // 128\n      }                                                                                                                // 129\n    }                                                                                                                  // 130\n  };                                                                                                                   // 131\n}                                                                                                                      // 132\n                                                                                                                       // 133\n/**                                                                                                                    // 134\n * Operations for updating with DOM children.                                                                          // 135\n */                                                                                                                    // 136\nvar DOMChildrenOperations = {                                                                                          // 137\n                                                                                                                       // 138\n  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,                                                  // 139\n                                                                                                                       // 140\n  replaceDelimitedText: replaceDelimitedText,                                                                          // 141\n                                                                                                                       // 142\n  /**                                                                                                                  // 143\n   * Updates a component's children by processing a series of updates. The                                             // 144\n   * update configurations are each expected to have a `parentNode` property.                                          // 145\n   *                                                                                                                   // 146\n   * @param {array<object>} updates List of update configurations.                                                     // 147\n   * @internal                                                                                                         // 148\n   */                                                                                                                  // 149\n  processUpdates: function (parentNode, updates) {                                                                     // 150\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 151\n      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;                          // 152\n    }                                                                                                                  // 153\n                                                                                                                       // 154\n    for (var k = 0; k < updates.length; k++) {                                                                         // 155\n      var update = updates[k];                                                                                         // 156\n      switch (update.type) {                                                                                           // 157\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:                                                                 // 158\n          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));               // 159\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 160\n            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'insert child', { toIndex: update.toIndex, content: update.content.toString() });\n          }                                                                                                            // 162\n          break;                                                                                                       // 163\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:                                                                 // 164\n          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));                          // 165\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 166\n            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'move child', { fromIndex: update.fromIndex, toIndex: update.toIndex });\n          }                                                                                                            // 168\n          break;                                                                                                       // 169\n        case ReactMultiChildUpdateTypes.SET_MARKUP:                                                                    // 170\n          setInnerHTML(parentNode, update.content);                                                                    // 171\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 172\n            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'replace children', update.content.toString());\n          }                                                                                                            // 174\n          break;                                                                                                       // 175\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:                                                                  // 176\n          setTextContent(parentNode, update.content);                                                                  // 177\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 178\n            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'replace text', update.content.toString());\n          }                                                                                                            // 180\n          break;                                                                                                       // 181\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:                                                                   // 182\n          removeChild(parentNode, update.fromNode);                                                                    // 183\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 184\n            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'remove child', { fromIndex: update.fromIndex });\n          }                                                                                                            // 186\n          break;                                                                                                       // 187\n      }                                                                                                                // 188\n    }                                                                                                                  // 189\n  }                                                                                                                    // 190\n                                                                                                                       // 191\n};                                                                                                                     // 192\n                                                                                                                       // 193\nmodule.exports = DOMChildrenOperations;                                                                                // 194\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"DOMLazyTree.js\":[\"./DOMNamespaces\",\"./setInnerHTML\",\"./createMicrosoftUnsafeLocalFunction\",\"./setTextContent\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/DOMLazyTree.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule DOMLazyTree                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar DOMNamespaces = require('./DOMNamespaces');                                                                        // 14\nvar setInnerHTML = require('./setInnerHTML');                                                                          // 15\n                                                                                                                       // 16\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');                              // 17\nvar setTextContent = require('./setTextContent');                                                                      // 18\n                                                                                                                       // 19\nvar ELEMENT_NODE_TYPE = 1;                                                                                             // 20\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;                                                                                  // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * In IE (8-11) and Edge, appending nodes with no children is dramatically                                             // 24\n * faster than appending a full subtree, so we essentially queue up the                                                // 25\n * .appendChild calls here and apply them so each node is added to its parent                                          // 26\n * before any children are added.                                                                                      // 27\n *                                                                                                                     // 28\n * In other browsers, doing so is slower or neutral compared to the other order                                        // 29\n * (in Firefox, twice as slow) so we only do this inversion in IE.                                                     // 30\n *                                                                                                                     // 31\n * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.                                              // 32\n */                                                                                                                    // 33\nvar enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\\bEdge\\/\\d/.test(navigator.userAgent);\n                                                                                                                       // 35\nfunction insertTreeChildren(tree) {                                                                                    // 36\n  if (!enableLazy) {                                                                                                   // 37\n    return;                                                                                                            // 38\n  }                                                                                                                    // 39\n  var node = tree.node;                                                                                                // 40\n  var children = tree.children;                                                                                        // 41\n  if (children.length) {                                                                                               // 42\n    for (var i = 0; i < children.length; i++) {                                                                        // 43\n      insertTreeBefore(node, children[i], null);                                                                       // 44\n    }                                                                                                                  // 45\n  } else if (tree.html != null) {                                                                                      // 46\n    setInnerHTML(node, tree.html);                                                                                     // 47\n  } else if (tree.text != null) {                                                                                      // 48\n    setTextContent(node, tree.text);                                                                                   // 49\n  }                                                                                                                    // 50\n}                                                                                                                      // 51\n                                                                                                                       // 52\nvar insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {                 // 53\n  // DocumentFragments aren't actually part of the DOM after insertion so                                              // 54\n  // appending children won't update the DOM. We need to ensure the fragment                                           // 55\n  // is properly populated first, breaking out of our lazy approach for just                                           // 56\n  // this level. Also, some <object> plugins (like Flash Player) will read                                             // 57\n  // <param> nodes immediately upon insertion into the DOM, so <object>                                                // 58\n  // must also be populated prior to insertion into the DOM.                                                           // 59\n  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {\n    insertTreeChildren(tree);                                                                                          // 61\n    parentNode.insertBefore(tree.node, referenceNode);                                                                 // 62\n  } else {                                                                                                             // 63\n    parentNode.insertBefore(tree.node, referenceNode);                                                                 // 64\n    insertTreeChildren(tree);                                                                                          // 65\n  }                                                                                                                    // 66\n});                                                                                                                    // 67\n                                                                                                                       // 68\nfunction replaceChildWithTree(oldNode, newTree) {                                                                      // 69\n  oldNode.parentNode.replaceChild(newTree.node, oldNode);                                                              // 70\n  insertTreeChildren(newTree);                                                                                         // 71\n}                                                                                                                      // 72\n                                                                                                                       // 73\nfunction queueChild(parentTree, childTree) {                                                                           // 74\n  if (enableLazy) {                                                                                                    // 75\n    parentTree.children.push(childTree);                                                                               // 76\n  } else {                                                                                                             // 77\n    parentTree.node.appendChild(childTree.node);                                                                       // 78\n  }                                                                                                                    // 79\n}                                                                                                                      // 80\n                                                                                                                       // 81\nfunction queueHTML(tree, html) {                                                                                       // 82\n  if (enableLazy) {                                                                                                    // 83\n    tree.html = html;                                                                                                  // 84\n  } else {                                                                                                             // 85\n    setInnerHTML(tree.node, html);                                                                                     // 86\n  }                                                                                                                    // 87\n}                                                                                                                      // 88\n                                                                                                                       // 89\nfunction queueText(tree, text) {                                                                                       // 90\n  if (enableLazy) {                                                                                                    // 91\n    tree.text = text;                                                                                                  // 92\n  } else {                                                                                                             // 93\n    setTextContent(tree.node, text);                                                                                   // 94\n  }                                                                                                                    // 95\n}                                                                                                                      // 96\n                                                                                                                       // 97\nfunction toString() {                                                                                                  // 98\n  return this.node.nodeName;                                                                                           // 99\n}                                                                                                                      // 100\n                                                                                                                       // 101\nfunction DOMLazyTree(node) {                                                                                           // 102\n  return {                                                                                                             // 103\n    node: node,                                                                                                        // 104\n    children: [],                                                                                                      // 105\n    html: null,                                                                                                        // 106\n    text: null,                                                                                                        // 107\n    toString: toString                                                                                                 // 108\n  };                                                                                                                   // 109\n}                                                                                                                      // 110\n                                                                                                                       // 111\nDOMLazyTree.insertTreeBefore = insertTreeBefore;                                                                       // 112\nDOMLazyTree.replaceChildWithTree = replaceChildWithTree;                                                               // 113\nDOMLazyTree.queueChild = queueChild;                                                                                   // 114\nDOMLazyTree.queueHTML = queueHTML;                                                                                     // 115\nDOMLazyTree.queueText = queueText;                                                                                     // 116\n                                                                                                                       // 117\nmodule.exports = DOMLazyTree;                                                                                          // 118\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"DOMNamespaces.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/DOMNamespaces.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule DOMNamespaces                                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar DOMNamespaces = {                                                                                                  // 14\n  html: 'http://www.w3.org/1999/xhtml',                                                                                // 15\n  mathml: 'http://www.w3.org/1998/Math/MathML',                                                                        // 16\n  svg: 'http://www.w3.org/2000/svg'                                                                                    // 17\n};                                                                                                                     // 18\n                                                                                                                       // 19\nmodule.exports = DOMNamespaces;                                                                                        // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"setInnerHTML.js\":[\"fbjs/lib/ExecutionEnvironment\",\"./DOMNamespaces\",\"./createMicrosoftUnsafeLocalFunction\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/setInnerHTML.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule setInnerHTML                                                                                        // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 14\nvar DOMNamespaces = require('./DOMNamespaces');                                                                        // 15\n                                                                                                                       // 16\nvar WHITESPACE_TEST = /^[ \\r\\n\\t\\f]/;                                                                                  // 17\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/;                                          // 18\n                                                                                                                       // 19\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');                              // 20\n                                                                                                                       // 21\n// SVG temp container for IE lacking innerHTML                                                                         // 22\nvar reusableSVGContainer;                                                                                              // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Set the innerHTML property of a node, ensuring that whitespace is preserved                                         // 26\n * even in IE8.                                                                                                        // 27\n *                                                                                                                     // 28\n * @param {DOMElement} node                                                                                            // 29\n * @param {string} html                                                                                                // 30\n * @internal                                                                                                           // 31\n */                                                                                                                    // 32\nvar setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {                                          // 33\n  // IE does not have innerHTML for SVG nodes, so instead we inject the                                                // 34\n  // new markup in a temp node and then move the child nodes across into                                               // 35\n  // the target node                                                                                                   // 36\n  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {                                             // 37\n    reusableSVGContainer = reusableSVGContainer || document.createElement('div');                                      // 38\n    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';                                                        // 39\n    var svgNode = reusableSVGContainer.firstChild;                                                                     // 40\n    while (svgNode.firstChild) {                                                                                       // 41\n      node.appendChild(svgNode.firstChild);                                                                            // 42\n    }                                                                                                                  // 43\n  } else {                                                                                                             // 44\n    node.innerHTML = html;                                                                                             // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 47\n                                                                                                                       // 48\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 49\n  // IE8: When updating a just created node with innerHTML only leading                                                // 50\n  // whitespace is removed. When updating an existing node with innerHTML                                              // 51\n  // whitespace in root TextNodes is also collapsed.                                                                   // 52\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html                                              // 53\n                                                                                                                       // 54\n  // Feature detection; only IE8 is known to behave improperly like this.                                              // 55\n  var testElement = document.createElement('div');                                                                     // 56\n  testElement.innerHTML = ' ';                                                                                         // 57\n  if (testElement.innerHTML === '') {                                                                                  // 58\n    setInnerHTML = function (node, html) {                                                                             // 59\n      // Magic theory: IE8 supposedly differentiates between added and updated                                         // 60\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers                                           // 61\n      // from worse whitespace behavior. Re-adding a node like this triggers                                           // 62\n      // the initial and more favorable whitespace behavior.                                                           // 63\n      // TODO: What to do on a detached node?                                                                          // 64\n      if (node.parentNode) {                                                                                           // 65\n        node.parentNode.replaceChild(node, node);                                                                      // 66\n      }                                                                                                                // 67\n                                                                                                                       // 68\n      // We also implement a workaround for non-visible tags disappearing into                                         // 69\n      // thin air on IE8, this only happens if there is no visible text                                                // 70\n      // in-front of the non-visible tags. Piggyback on the whitespace fix                                             // 71\n      // and simply check if any non-visible tags appear in the source.                                                // 72\n      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {                               // 73\n        // Recover leading whitespace by temporarily prepending any character.                                         // 74\n        // \\uFEFF has the potential advantage of being zero-width/invisible.                                           // 75\n        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode                                        // 76\n        // in hopes that this is preserved even if \"\\uFEFF\" is transformed to                                          // 77\n        // the actual Unicode character (by Babel, for example).                                                       // 78\n        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216                                          // 79\n        node.innerHTML = String.fromCharCode(0xFEFF) + html;                                                           // 80\n                                                                                                                       // 81\n        // deleteData leaves an empty `TextNode` which offsets the index of all                                        // 82\n        // children. Definitely want to avoid this.                                                                    // 83\n        var textNode = node.firstChild;                                                                                // 84\n        if (textNode.data.length === 1) {                                                                              // 85\n          node.removeChild(textNode);                                                                                  // 86\n        } else {                                                                                                       // 87\n          textNode.deleteData(0, 1);                                                                                   // 88\n        }                                                                                                              // 89\n      } else {                                                                                                         // 90\n        node.innerHTML = html;                                                                                         // 91\n      }                                                                                                                // 92\n    };                                                                                                                 // 93\n  }                                                                                                                    // 94\n  testElement = null;                                                                                                  // 95\n}                                                                                                                      // 96\n                                                                                                                       // 97\nmodule.exports = setInnerHTML;                                                                                         // 98\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"createMicrosoftUnsafeLocalFunction.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/createMicrosoftUnsafeLocalFunction.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule createMicrosoftUnsafeLocalFunction                                                                  // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n/* globals MSApp */                                                                                                    // 12\n                                                                                                                       // 13\n'use strict';                                                                                                          // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Create a function which has 'unsafe' privileges (required by windows8 apps)                                         // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\nvar createMicrosoftUnsafeLocalFunction = function (func) {                                                             // 20\n  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {                                                 // 21\n    return function (arg0, arg1, arg2, arg3) {                                                                         // 22\n      MSApp.execUnsafeLocalFunction(function () {                                                                      // 23\n        return func(arg0, arg1, arg2, arg3);                                                                           // 24\n      });                                                                                                              // 25\n    };                                                                                                                 // 26\n  } else {                                                                                                             // 27\n    return func;                                                                                                       // 28\n  }                                                                                                                    // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\nmodule.exports = createMicrosoftUnsafeLocalFunction;                                                                   // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"setTextContent.js\":[\"fbjs/lib/ExecutionEnvironment\",\"./escapeTextContentForBrowser\",\"./setInnerHTML\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/setTextContent.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule setTextContent                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 14\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');                                            // 15\nvar setInnerHTML = require('./setInnerHTML');                                                                          // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Set the textContent property of a node, ensuring that whitespace is preserved                                       // 19\n * even in IE8. innerText is a poor substitute for textContent and, among many                                         // 20\n * issues, inserts <br> instead of the literal newline chars. innerHTML behaves                                        // 21\n * as it should.                                                                                                       // 22\n *                                                                                                                     // 23\n * @param {DOMElement} node                                                                                            // 24\n * @param {string} text                                                                                                // 25\n * @internal                                                                                                           // 26\n */                                                                                                                    // 27\nvar setTextContent = function (node, text) {                                                                           // 28\n  if (text) {                                                                                                          // 29\n    var firstChild = node.firstChild;                                                                                  // 30\n                                                                                                                       // 31\n    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {                                    // 32\n      firstChild.nodeValue = text;                                                                                     // 33\n      return;                                                                                                          // 34\n    }                                                                                                                  // 35\n  }                                                                                                                    // 36\n  node.textContent = text;                                                                                             // 37\n};                                                                                                                     // 38\n                                                                                                                       // 39\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 40\n  if (!('textContent' in document.documentElement)) {                                                                  // 41\n    setTextContent = function (node, text) {                                                                           // 42\n      setInnerHTML(node, escapeTextContentForBrowser(text));                                                           // 43\n    };                                                                                                                 // 44\n  }                                                                                                                    // 45\n}                                                                                                                      // 46\n                                                                                                                       // 47\nmodule.exports = setTextContent;                                                                                       // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"escapeTextContentForBrowser.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/escapeTextContentForBrowser.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2016-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * Based on the escape-html library, which is used under the MIT License below:                                        // 9\n *                                                                                                                     // 10\n * Copyright (c) 2012-2013 TJ Holowaychuk                                                                              // 11\n * Copyright (c) 2015 Andreas Lubbe                                                                                    // 12\n * Copyright (c) 2015 Tiancheng \"Timothy\" Gu                                                                           // 13\n *                                                                                                                     // 14\n * Permission is hereby granted, free of charge, to any person obtaining                                               // 15\n * a copy of this software and associated documentation files (the                                                     // 16\n * 'Software'), to deal in the Software without restriction, including                                                 // 17\n * without limitation the rights to use, copy, modify, merge, publish,                                                 // 18\n * distribute, sublicense, and/or sell copies of the Software, and to                                                  // 19\n * permit persons to whom the Software is furnished to do so, subject to                                               // 20\n * the following conditions:                                                                                           // 21\n *                                                                                                                     // 22\n * The above copyright notice and this permission notice shall be                                                      // 23\n * included in all copies or substantial portions of the Software.                                                     // 24\n *                                                                                                                     // 25\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,                                                     // 26\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                  // 27\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.                                              // 28\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY                                                // 29\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,                                                // 30\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE                                                   // 31\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                              // 32\n *                                                                                                                     // 33\n * @providesModule escapeTextContentForBrowser                                                                         // 34\n */                                                                                                                    // 35\n                                                                                                                       // 36\n'use strict';                                                                                                          // 37\n                                                                                                                       // 38\n// code copied and modified from escape-html                                                                           // 39\n/**                                                                                                                    // 40\n * Module variables.                                                                                                   // 41\n * @private                                                                                                            // 42\n */                                                                                                                    // 43\n                                                                                                                       // 44\nvar matchHtmlRegExp = /[\"'&<>]/;                                                                                       // 45\n                                                                                                                       // 46\n/**                                                                                                                    // 47\n * Escape special characters in the given string of html.                                                              // 48\n *                                                                                                                     // 49\n * @param  {string} string The string to escape for inserting into HTML                                                // 50\n * @return {string}                                                                                                    // 51\n * @public                                                                                                             // 52\n */                                                                                                                    // 53\n                                                                                                                       // 54\nfunction escapeHtml(string) {                                                                                          // 55\n  var str = '' + string;                                                                                               // 56\n  var match = matchHtmlRegExp.exec(str);                                                                               // 57\n                                                                                                                       // 58\n  if (!match) {                                                                                                        // 59\n    return str;                                                                                                        // 60\n  }                                                                                                                    // 61\n                                                                                                                       // 62\n  var escape;                                                                                                          // 63\n  var html = '';                                                                                                       // 64\n  var index = 0;                                                                                                       // 65\n  var lastIndex = 0;                                                                                                   // 66\n                                                                                                                       // 67\n  for (index = match.index; index < str.length; index++) {                                                             // 68\n    switch (str.charCodeAt(index)) {                                                                                   // 69\n      case 34:                                                                                                         // 70\n        // \"                                                                                                           // 71\n        escape = '&quot;';                                                                                             // 72\n        break;                                                                                                         // 73\n      case 38:                                                                                                         // 74\n        // &                                                                                                           // 75\n        escape = '&amp;';                                                                                              // 76\n        break;                                                                                                         // 77\n      case 39:                                                                                                         // 78\n        // '                                                                                                           // 79\n        escape = '&#x27;'; // modified from escape-html; used to be '&#39'                                             // 80\n        break;                                                                                                         // 81\n      case 60:                                                                                                         // 82\n        // <                                                                                                           // 83\n        escape = '&lt;';                                                                                               // 84\n        break;                                                                                                         // 85\n      case 62:                                                                                                         // 86\n        // >                                                                                                           // 87\n        escape = '&gt;';                                                                                               // 88\n        break;                                                                                                         // 89\n      default:                                                                                                         // 90\n        continue;                                                                                                      // 91\n    }                                                                                                                  // 92\n                                                                                                                       // 93\n    if (lastIndex !== index) {                                                                                         // 94\n      html += str.substring(lastIndex, index);                                                                         // 95\n    }                                                                                                                  // 96\n                                                                                                                       // 97\n    lastIndex = index + 1;                                                                                             // 98\n    html += escape;                                                                                                    // 99\n  }                                                                                                                    // 100\n                                                                                                                       // 101\n  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;                                          // 102\n}                                                                                                                      // 103\n// end code copied and modified from escape-html                                                                       // 104\n                                                                                                                       // 105\n                                                                                                                       // 106\n/**                                                                                                                    // 107\n * Escapes text to prevent scripting attacks.                                                                          // 108\n *                                                                                                                     // 109\n * @param {*} text Text value to escape.                                                                               // 110\n * @return {string} An escaped string.                                                                                 // 111\n */                                                                                                                    // 112\nfunction escapeTextContentForBrowser(text) {                                                                           // 113\n  if (typeof text === 'boolean' || typeof text === 'number') {                                                         // 114\n    // this shortcircuit helps perf for types that we know will never have                                             // 115\n    // special characters, especially given that this function is used often                                           // 116\n    // for numeric dom ids.                                                                                            // 117\n    return '' + text;                                                                                                  // 118\n  }                                                                                                                    // 119\n  return escapeHtml(text);                                                                                             // 120\n}                                                                                                                      // 121\n                                                                                                                       // 122\nmodule.exports = escapeTextContentForBrowser;                                                                          // 123\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Danger.js\":[\"./reactProdInvariant\",\"./DOMLazyTree\",\"fbjs/lib/ExecutionEnvironment\",\"fbjs/lib/createNodesFromMarkup\",\"fbjs/lib/emptyFunction\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/Danger.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule Danger                                                                                              // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar DOMLazyTree = require('./DOMLazyTree');                                                                            // 16\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 17\n                                                                                                                       // 18\nvar createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');                                                 // 19\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 20\nvar invariant = require('fbjs/lib/invariant');                                                                         // 21\n                                                                                                                       // 22\nvar Danger = {                                                                                                         // 23\n                                                                                                                       // 24\n  /**                                                                                                                  // 25\n   * Replaces a node with a string of markup at its current position within its                                        // 26\n   * parent. The markup must render into a single root node.                                                           // 27\n   *                                                                                                                   // 28\n   * @param {DOMElement} oldChild Child node to replace.                                                               // 29\n   * @param {string} markup Markup to render in place of the child node.                                               // 30\n   * @internal                                                                                                         // 31\n   */                                                                                                                  // 32\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {                                                      // 33\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;\n    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;\n    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;\n                                                                                                                       // 37\n    if (typeof markup === 'string') {                                                                                  // 38\n      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];                                                  // 39\n      oldChild.parentNode.replaceChild(newChild, oldChild);                                                            // 40\n    } else {                                                                                                           // 41\n      DOMLazyTree.replaceChildWithTree(oldChild, markup);                                                              // 42\n    }                                                                                                                  // 43\n  }                                                                                                                    // 44\n                                                                                                                       // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\nmodule.exports = Danger;                                                                                               // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactMultiChildUpdateTypes.js\":[\"fbjs/lib/keyMirror\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactMultiChildUpdateTypes.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactMultiChildUpdateTypes                                                                          // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar keyMirror = require('fbjs/lib/keyMirror');                                                                         // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * When a component's children are updated, a series of update configuration                                           // 17\n * objects are created in order to batch and serialize the required changes.                                           // 18\n *                                                                                                                     // 19\n * Enumerates all the possible types of update configurations.                                                         // 20\n *                                                                                                                     // 21\n * @internal                                                                                                           // 22\n */                                                                                                                    // 23\nvar ReactMultiChildUpdateTypes = keyMirror({                                                                           // 24\n  INSERT_MARKUP: null,                                                                                                 // 25\n  MOVE_EXISTING: null,                                                                                                 // 26\n  REMOVE_NODE: null,                                                                                                   // 27\n  SET_MARKUP: null,                                                                                                    // 28\n  TEXT_CONTENT: null                                                                                                   // 29\n});                                                                                                                    // 30\n                                                                                                                       // 31\nmodule.exports = ReactMultiChildUpdateTypes;                                                                           // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMIDOperations.js\":[\"./DOMChildrenOperations\",\"./ReactDOMComponentTree\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMIDOperations.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMIDOperations                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar DOMChildrenOperations = require('./DOMChildrenOperations');                                                        // 14\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Operations used to process updates to DOM nodes.                                                                    // 18\n */                                                                                                                    // 19\nvar ReactDOMIDOperations = {                                                                                           // 20\n                                                                                                                       // 21\n  /**                                                                                                                  // 22\n   * Updates a component's children by processing a series of updates.                                                 // 23\n   *                                                                                                                   // 24\n   * @param {array<object>} updates List of update configurations.                                                     // 25\n   * @internal                                                                                                         // 26\n   */                                                                                                                  // 27\n  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {                                                  // 28\n    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);                                                  // 29\n    DOMChildrenOperations.processUpdates(node, updates);                                                               // 30\n  }                                                                                                                    // 31\n};                                                                                                                     // 32\n                                                                                                                       // 33\nmodule.exports = ReactDOMIDOperations;                                                                                 // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMComponent.js\":[\"./reactProdInvariant\",\"object-assign\",\"./AutoFocusUtils\",\"./CSSPropertyOperations\",\"./DOMLazyTree\",\"./DOMNamespaces\",\"./DOMProperty\",\"./DOMPropertyOperations\",\"./EventConstants\",\"./EventPluginHub\",\"./EventPluginRegistry\",\"./ReactBrowserEventEmitter\",\"./ReactDOMButton\",\"./ReactDOMComponentFlags\",\"./ReactDOMComponentTree\",\"./ReactDOMInput\",\"./ReactDOMOption\",\"./ReactDOMSelect\",\"./ReactDOMTextarea\",\"./ReactInstrumentation\",\"./ReactMultiChild\",\"./ReactServerRenderingTransaction\",\"fbjs/lib/emptyFunction\",\"./escapeTextContentForBrowser\",\"fbjs/lib/invariant\",\"./isEventSupported\",\"fbjs/lib/keyOf\",\"fbjs/lib/shallowEqual\",\"./validateDOMNesting\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMComponent.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMComponent                                                                                   // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n/* global hasOwnProperty:true */                                                                                       // 12\n                                                                                                                       // 13\n'use strict';                                                                                                          // 14\n                                                                                                                       // 15\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 16\n    _assign = require('object-assign');                                                                                // 17\n                                                                                                                       // 18\nvar AutoFocusUtils = require('./AutoFocusUtils');                                                                      // 19\nvar CSSPropertyOperations = require('./CSSPropertyOperations');                                                        // 20\nvar DOMLazyTree = require('./DOMLazyTree');                                                                            // 21\nvar DOMNamespaces = require('./DOMNamespaces');                                                                        // 22\nvar DOMProperty = require('./DOMProperty');                                                                            // 23\nvar DOMPropertyOperations = require('./DOMPropertyOperations');                                                        // 24\nvar EventConstants = require('./EventConstants');                                                                      // 25\nvar EventPluginHub = require('./EventPluginHub');                                                                      // 26\nvar EventPluginRegistry = require('./EventPluginRegistry');                                                            // 27\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');                                                  // 28\nvar ReactDOMButton = require('./ReactDOMButton');                                                                      // 29\nvar ReactDOMComponentFlags = require('./ReactDOMComponentFlags');                                                      // 30\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 31\nvar ReactDOMInput = require('./ReactDOMInput');                                                                        // 32\nvar ReactDOMOption = require('./ReactDOMOption');                                                                      // 33\nvar ReactDOMSelect = require('./ReactDOMSelect');                                                                      // 34\nvar ReactDOMTextarea = require('./ReactDOMTextarea');                                                                  // 35\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 36\nvar ReactMultiChild = require('./ReactMultiChild');                                                                    // 37\nvar ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');                                    // 38\n                                                                                                                       // 39\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 40\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');                                            // 41\nvar invariant = require('fbjs/lib/invariant');                                                                         // 42\nvar isEventSupported = require('./isEventSupported');                                                                  // 43\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 44\nvar shallowEqual = require('fbjs/lib/shallowEqual');                                                                   // 45\nvar validateDOMNesting = require('./validateDOMNesting');                                                              // 46\nvar warning = require('fbjs/lib/warning');                                                                             // 47\n                                                                                                                       // 48\nvar Flags = ReactDOMComponentFlags;                                                                                    // 49\nvar deleteListener = EventPluginHub.deleteListener;                                                                    // 50\nvar getNode = ReactDOMComponentTree.getNodeFromInstance;                                                               // 51\nvar listenTo = ReactBrowserEventEmitter.listenTo;                                                                      // 52\nvar registrationNameModules = EventPluginRegistry.registrationNameModules;                                             // 53\n                                                                                                                       // 54\n// For quickly matching children type, to test if can be treated as content.                                           // 55\nvar CONTENT_TYPES = { 'string': true, 'number': true };                                                                // 56\n                                                                                                                       // 57\nvar STYLE = keyOf({ style: null });                                                                                    // 58\nvar HTML = keyOf({ __html: null });                                                                                    // 59\nvar RESERVED_PROPS = {                                                                                                 // 60\n  children: null,                                                                                                      // 61\n  dangerouslySetInnerHTML: null,                                                                                       // 62\n  suppressContentEditableWarning: null                                                                                 // 63\n};                                                                                                                     // 64\n                                                                                                                       // 65\n// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).                                                     // 66\nvar DOC_FRAGMENT_TYPE = 11;                                                                                            // 67\n                                                                                                                       // 68\nfunction getDeclarationErrorAddendum(internalInstance) {                                                               // 69\n  if (internalInstance) {                                                                                              // 70\n    var owner = internalInstance._currentElement._owner || null;                                                       // 71\n    if (owner) {                                                                                                       // 72\n      var name = owner.getName();                                                                                      // 73\n      if (name) {                                                                                                      // 74\n        return ' This DOM node was rendered by `' + name + '`.';                                                       // 75\n      }                                                                                                                // 76\n    }                                                                                                                  // 77\n  }                                                                                                                    // 78\n  return '';                                                                                                           // 79\n}                                                                                                                      // 80\n                                                                                                                       // 81\nfunction friendlyStringify(obj) {                                                                                      // 82\n  if (typeof obj === 'object') {                                                                                       // 83\n    if (Array.isArray(obj)) {                                                                                          // 84\n      return '[' + obj.map(friendlyStringify).join(', ') + ']';                                                        // 85\n    } else {                                                                                                           // 86\n      var pairs = [];                                                                                                  // 87\n      for (var key in obj) {                                                                                           // 88\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {                                                          // 89\n          var keyEscaped = /^[a-z$_][\\w$_]*$/i.test(key) ? key : JSON.stringify(key);                                  // 90\n          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));                                                 // 91\n        }                                                                                                              // 92\n      }                                                                                                                // 93\n      return '{' + pairs.join(', ') + '}';                                                                             // 94\n    }                                                                                                                  // 95\n  } else if (typeof obj === 'string') {                                                                                // 96\n    return JSON.stringify(obj);                                                                                        // 97\n  } else if (typeof obj === 'function') {                                                                              // 98\n    return '[function object]';                                                                                        // 99\n  }                                                                                                                    // 100\n  // Differs from JSON.stringify in that undefined because undefined and that                                          // 101\n  // inf and nan don't become null                                                                                     // 102\n  return String(obj);                                                                                                  // 103\n}                                                                                                                      // 104\n                                                                                                                       // 105\nvar styleMutationWarning = {};                                                                                         // 106\n                                                                                                                       // 107\nfunction checkAndWarnForMutatedStyle(style1, style2, component) {                                                      // 108\n  if (style1 == null || style2 == null) {                                                                              // 109\n    return;                                                                                                            // 110\n  }                                                                                                                    // 111\n  if (shallowEqual(style1, style2)) {                                                                                  // 112\n    return;                                                                                                            // 113\n  }                                                                                                                    // 114\n                                                                                                                       // 115\n  var componentName = component._tag;                                                                                  // 116\n  var owner = component._currentElement._owner;                                                                        // 117\n  var ownerName;                                                                                                       // 118\n  if (owner) {                                                                                                         // 119\n    ownerName = owner.getName();                                                                                       // 120\n  }                                                                                                                    // 121\n                                                                                                                       // 122\n  var hash = ownerName + '|' + componentName;                                                                          // 123\n                                                                                                                       // 124\n  if (styleMutationWarning.hasOwnProperty(hash)) {                                                                     // 125\n    return;                                                                                                            // 126\n  }                                                                                                                    // 127\n                                                                                                                       // 128\n  styleMutationWarning[hash] = true;                                                                                   // 129\n                                                                                                                       // 130\n  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;\n}                                                                                                                      // 132\n                                                                                                                       // 133\n/**                                                                                                                    // 134\n * @param {object} component                                                                                           // 135\n * @param {?object} props                                                                                              // 136\n */                                                                                                                    // 137\nfunction assertValidProps(component, props) {                                                                          // 138\n  if (!props) {                                                                                                        // 139\n    return;                                                                                                            // 140\n  }                                                                                                                    // 141\n  // Note the use of `==` which checks for null or undefined.                                                          // 142\n  if (voidElementTags[component._tag]) {                                                                               // 143\n    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;\n  }                                                                                                                    // 145\n  if (props.dangerouslySetInnerHTML != null) {                                                                         // 146\n    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;\n    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;\n  }                                                                                                                    // 149\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 150\n    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;\n    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;\n    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;\n  }                                                                                                                    // 154\n  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \\'em\\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;\n}                                                                                                                      // 156\n                                                                                                                       // 157\nfunction enqueuePutListener(inst, registrationName, listener, transaction) {                                           // 158\n  if (transaction instanceof ReactServerRenderingTransaction) {                                                        // 159\n    return;                                                                                                            // 160\n  }                                                                                                                    // 161\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 162\n    // IE8 has no API for event capturing and the `onScroll` event doesn't                                             // 163\n    // bubble.                                                                                                         // 164\n    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\\'t support the `onScroll` event') : void 0;\n  }                                                                                                                    // 166\n  var containerInfo = inst._hostContainerInfo;                                                                         // 167\n  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;                  // 168\n  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;                                   // 169\n  listenTo(registrationName, doc);                                                                                     // 170\n  transaction.getReactMountReady().enqueue(putListener, {                                                              // 171\n    inst: inst,                                                                                                        // 172\n    registrationName: registrationName,                                                                                // 173\n    listener: listener                                                                                                 // 174\n  });                                                                                                                  // 175\n}                                                                                                                      // 176\n                                                                                                                       // 177\nfunction putListener() {                                                                                               // 178\n  var listenerToPut = this;                                                                                            // 179\n  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);              // 180\n}                                                                                                                      // 181\n                                                                                                                       // 182\nfunction inputPostMount() {                                                                                            // 183\n  var inst = this;                                                                                                     // 184\n  ReactDOMInput.postMountWrapper(inst);                                                                                // 185\n}                                                                                                                      // 186\n                                                                                                                       // 187\nfunction textareaPostMount() {                                                                                         // 188\n  var inst = this;                                                                                                     // 189\n  ReactDOMTextarea.postMountWrapper(inst);                                                                             // 190\n}                                                                                                                      // 191\n                                                                                                                       // 192\nfunction optionPostMount() {                                                                                           // 193\n  var inst = this;                                                                                                     // 194\n  ReactDOMOption.postMountWrapper(inst);                                                                               // 195\n}                                                                                                                      // 196\n                                                                                                                       // 197\nvar setAndValidateContentChildDev = emptyFunction;                                                                     // 198\nif (process.env.NODE_ENV !== 'production') {                                                                           // 199\n  setAndValidateContentChildDev = function (content) {                                                                 // 200\n    var hasExistingContent = this._contentDebugID != null;                                                             // 201\n    var debugID = this._debugID;                                                                                       // 202\n    // This ID represents the inlined child that has no backing instance:                                              // 203\n    var contentDebugID = -debugID;                                                                                     // 204\n                                                                                                                       // 205\n    if (content == null) {                                                                                             // 206\n      if (hasExistingContent) {                                                                                        // 207\n        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);                                       // 208\n      }                                                                                                                // 209\n      this._contentDebugID = null;                                                                                     // 210\n      return;                                                                                                          // 211\n    }                                                                                                                  // 212\n                                                                                                                       // 213\n    validateDOMNesting(null, String(content), this, this._ancestorInfo);                                               // 214\n    this._contentDebugID = contentDebugID;                                                                             // 215\n    if (hasExistingContent) {                                                                                          // 216\n      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);                                 // 217\n      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);                                                // 218\n    } else {                                                                                                           // 219\n      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);                         // 220\n      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);                                                 // 221\n      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);                                         // 222\n    }                                                                                                                  // 223\n  };                                                                                                                   // 224\n}                                                                                                                      // 225\n                                                                                                                       // 226\n// There are so many media events, it makes sense to just                                                              // 227\n// maintain a list rather than create a `trapBubbledEvent` for each                                                    // 228\nvar mediaEvents = {                                                                                                    // 229\n  topAbort: 'abort',                                                                                                   // 230\n  topCanPlay: 'canplay',                                                                                               // 231\n  topCanPlayThrough: 'canplaythrough',                                                                                 // 232\n  topDurationChange: 'durationchange',                                                                                 // 233\n  topEmptied: 'emptied',                                                                                               // 234\n  topEncrypted: 'encrypted',                                                                                           // 235\n  topEnded: 'ended',                                                                                                   // 236\n  topError: 'error',                                                                                                   // 237\n  topLoadedData: 'loadeddata',                                                                                         // 238\n  topLoadedMetadata: 'loadedmetadata',                                                                                 // 239\n  topLoadStart: 'loadstart',                                                                                           // 240\n  topPause: 'pause',                                                                                                   // 241\n  topPlay: 'play',                                                                                                     // 242\n  topPlaying: 'playing',                                                                                               // 243\n  topProgress: 'progress',                                                                                             // 244\n  topRateChange: 'ratechange',                                                                                         // 245\n  topSeeked: 'seeked',                                                                                                 // 246\n  topSeeking: 'seeking',                                                                                               // 247\n  topStalled: 'stalled',                                                                                               // 248\n  topSuspend: 'suspend',                                                                                               // 249\n  topTimeUpdate: 'timeupdate',                                                                                         // 250\n  topVolumeChange: 'volumechange',                                                                                     // 251\n  topWaiting: 'waiting'                                                                                                // 252\n};                                                                                                                     // 253\n                                                                                                                       // 254\nfunction trapBubbledEventsLocal() {                                                                                    // 255\n  var inst = this;                                                                                                     // 256\n  // If a component renders to null or if another component fatals and causes                                          // 257\n  // the state of the tree to be corrupted, `node` here can be null.                                                   // 258\n  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;\n  var node = getNode(inst);                                                                                            // 260\n  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;\n                                                                                                                       // 262\n  switch (inst._tag) {                                                                                                 // 263\n    case 'iframe':                                                                                                     // 264\n    case 'object':                                                                                                     // 265\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];\n      break;                                                                                                           // 267\n    case 'video':                                                                                                      // 268\n    case 'audio':                                                                                                      // 269\n                                                                                                                       // 270\n      inst._wrapperState.listeners = [];                                                                               // 271\n      // Create listener for each media event                                                                          // 272\n      for (var event in mediaEvents) {                                                                                 // 273\n        if (mediaEvents.hasOwnProperty(event)) {                                                                       // 274\n          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));\n        }                                                                                                              // 276\n      }                                                                                                                // 277\n      break;                                                                                                           // 278\n    case 'source':                                                                                                     // 279\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node)];\n      break;                                                                                                           // 281\n    case 'img':                                                                                                        // 282\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];\n      break;                                                                                                           // 284\n    case 'form':                                                                                                       // 285\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];\n      break;                                                                                                           // 287\n    case 'input':                                                                                                      // 288\n    case 'select':                                                                                                     // 289\n    case 'textarea':                                                                                                   // 290\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topInvalid, 'invalid', node)];\n      break;                                                                                                           // 292\n  }                                                                                                                    // 293\n}                                                                                                                      // 294\n                                                                                                                       // 295\nfunction postUpdateSelectWrapper() {                                                                                   // 296\n  ReactDOMSelect.postUpdateWrapper(this);                                                                              // 297\n}                                                                                                                      // 298\n                                                                                                                       // 299\n// For HTML, certain tags should omit their close tag. We keep a whitelist for                                         // 300\n// those special-case tags.                                                                                            // 301\n                                                                                                                       // 302\nvar omittedCloseTags = {                                                                                               // 303\n  'area': true,                                                                                                        // 304\n  'base': true,                                                                                                        // 305\n  'br': true,                                                                                                          // 306\n  'col': true,                                                                                                         // 307\n  'embed': true,                                                                                                       // 308\n  'hr': true,                                                                                                          // 309\n  'img': true,                                                                                                         // 310\n  'input': true,                                                                                                       // 311\n  'keygen': true,                                                                                                      // 312\n  'link': true,                                                                                                        // 313\n  'meta': true,                                                                                                        // 314\n  'param': true,                                                                                                       // 315\n  'source': true,                                                                                                      // 316\n  'track': true,                                                                                                       // 317\n  'wbr': true                                                                                                          // 318\n};                                                                                                                     // 319\n                                                                                                                       // 320\n// NOTE: menuitem's close tag should be omitted, but that causes problems.                                             // 321\nvar newlineEatingTags = {                                                                                              // 322\n  'listing': true,                                                                                                     // 323\n  'pre': true,                                                                                                         // 324\n  'textarea': true                                                                                                     // 325\n};                                                                                                                     // 326\n                                                                                                                       // 327\n// For HTML, certain tags cannot have children. This has the same purpose as                                           // 328\n// `omittedCloseTags` except that `menuitem` should still have its closing tag.                                        // 329\n                                                                                                                       // 330\nvar voidElementTags = _assign({                                                                                        // 331\n  'menuitem': true                                                                                                     // 332\n}, omittedCloseTags);                                                                                                  // 333\n                                                                                                                       // 334\n// We accept any tag to be rendered but since this gets injected into arbitrary                                        // 335\n// HTML, we want to make sure that it's a safe tag.                                                                    // 336\n// http://www.w3.org/TR/REC-xml/#NT-Name                                                                               // 337\n                                                                                                                       // 338\nvar VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/; // Simplified subset                                              // 339\nvar validatedTagCache = {};                                                                                            // 340\nvar hasOwnProperty = {}.hasOwnProperty;                                                                                // 341\n                                                                                                                       // 342\nfunction validateDangerousTag(tag) {                                                                                   // 343\n  if (!hasOwnProperty.call(validatedTagCache, tag)) {                                                                  // 344\n    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;\n    validatedTagCache[tag] = true;                                                                                     // 346\n  }                                                                                                                    // 347\n}                                                                                                                      // 348\n                                                                                                                       // 349\nfunction isCustomComponent(tagName, props) {                                                                           // 350\n  return tagName.indexOf('-') >= 0 || props.is != null;                                                                // 351\n}                                                                                                                      // 352\n                                                                                                                       // 353\nvar globalIdCounter = 1;                                                                                               // 354\n                                                                                                                       // 355\n/**                                                                                                                    // 356\n * Creates a new React class that is idempotent and capable of containing other                                        // 357\n * React components. It accepts event listeners and DOM properties that are                                            // 358\n * valid according to `DOMProperty`.                                                                                   // 359\n *                                                                                                                     // 360\n *  - Event listeners: `onClick`, `onMouseDown`, etc.                                                                  // 361\n *  - DOM properties: `className`, `name`, `title`, etc.                                                               // 362\n *                                                                                                                     // 363\n * The `style` property functions differently from the DOM API. It accepts an                                          // 364\n * object mapping of style properties to values.                                                                       // 365\n *                                                                                                                     // 366\n * @constructor ReactDOMComponent                                                                                      // 367\n * @extends ReactMultiChild                                                                                            // 368\n */                                                                                                                    // 369\nfunction ReactDOMComponent(element) {                                                                                  // 370\n  var tag = element.type;                                                                                              // 371\n  validateDangerousTag(tag);                                                                                           // 372\n  this._currentElement = element;                                                                                      // 373\n  this._tag = tag.toLowerCase();                                                                                       // 374\n  this._namespaceURI = null;                                                                                           // 375\n  this._renderedChildren = null;                                                                                       // 376\n  this._previousStyle = null;                                                                                          // 377\n  this._previousStyleCopy = null;                                                                                      // 378\n  this._hostNode = null;                                                                                               // 379\n  this._hostParent = null;                                                                                             // 380\n  this._rootNodeID = 0;                                                                                                // 381\n  this._domID = 0;                                                                                                     // 382\n  this._hostContainerInfo = null;                                                                                      // 383\n  this._wrapperState = null;                                                                                           // 384\n  this._topLevelWrapper = null;                                                                                        // 385\n  this._flags = 0;                                                                                                     // 386\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 387\n    this._ancestorInfo = null;                                                                                         // 388\n    setAndValidateContentChildDev.call(this, null);                                                                    // 389\n  }                                                                                                                    // 390\n}                                                                                                                      // 391\n                                                                                                                       // 392\nReactDOMComponent.displayName = 'ReactDOMComponent';                                                                   // 393\n                                                                                                                       // 394\nReactDOMComponent.Mixin = {                                                                                            // 395\n                                                                                                                       // 396\n  /**                                                                                                                  // 397\n   * Generates root tag markup then recurses. This method has side effects and                                         // 398\n   * is not idempotent.                                                                                                // 399\n   *                                                                                                                   // 400\n   * @internal                                                                                                         // 401\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 402\n   * @param {?ReactDOMComponent} the parent component instance                                                         // 403\n   * @param {?object} info about the host container                                                                    // 404\n   * @param {object} context                                                                                           // 405\n   * @return {string} The computed markup.                                                                             // 406\n   */                                                                                                                  // 407\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {                                     // 408\n    this._rootNodeID = globalIdCounter++;                                                                              // 409\n    this._domID = hostContainerInfo._idCounter++;                                                                      // 410\n    this._hostParent = hostParent;                                                                                     // 411\n    this._hostContainerInfo = hostContainerInfo;                                                                       // 412\n                                                                                                                       // 413\n    var props = this._currentElement.props;                                                                            // 414\n                                                                                                                       // 415\n    switch (this._tag) {                                                                                               // 416\n      case 'audio':                                                                                                    // 417\n      case 'form':                                                                                                     // 418\n      case 'iframe':                                                                                                   // 419\n      case 'img':                                                                                                      // 420\n      case 'link':                                                                                                     // 421\n      case 'object':                                                                                                   // 422\n      case 'source':                                                                                                   // 423\n      case 'video':                                                                                                    // 424\n        this._wrapperState = {                                                                                         // 425\n          listeners: null                                                                                              // 426\n        };                                                                                                             // 427\n        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);                                        // 428\n        break;                                                                                                         // 429\n      case 'button':                                                                                                   // 430\n        props = ReactDOMButton.getHostProps(this, props, hostParent);                                                  // 431\n        break;                                                                                                         // 432\n      case 'input':                                                                                                    // 433\n        ReactDOMInput.mountWrapper(this, props, hostParent);                                                           // 434\n        props = ReactDOMInput.getHostProps(this, props);                                                               // 435\n        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);                                        // 436\n        break;                                                                                                         // 437\n      case 'option':                                                                                                   // 438\n        ReactDOMOption.mountWrapper(this, props, hostParent);                                                          // 439\n        props = ReactDOMOption.getHostProps(this, props);                                                              // 440\n        break;                                                                                                         // 441\n      case 'select':                                                                                                   // 442\n        ReactDOMSelect.mountWrapper(this, props, hostParent);                                                          // 443\n        props = ReactDOMSelect.getHostProps(this, props);                                                              // 444\n        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);                                        // 445\n        break;                                                                                                         // 446\n      case 'textarea':                                                                                                 // 447\n        ReactDOMTextarea.mountWrapper(this, props, hostParent);                                                        // 448\n        props = ReactDOMTextarea.getHostProps(this, props);                                                            // 449\n        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);                                        // 450\n        break;                                                                                                         // 451\n    }                                                                                                                  // 452\n                                                                                                                       // 453\n    assertValidProps(this, props);                                                                                     // 454\n                                                                                                                       // 455\n    // We create tags in the namespace of their parent container, except HTML                                          // 456\n    // tags get no namespace.                                                                                          // 457\n    var namespaceURI;                                                                                                  // 458\n    var parentTag;                                                                                                     // 459\n    if (hostParent != null) {                                                                                          // 460\n      namespaceURI = hostParent._namespaceURI;                                                                         // 461\n      parentTag = hostParent._tag;                                                                                     // 462\n    } else if (hostContainerInfo._tag) {                                                                               // 463\n      namespaceURI = hostContainerInfo._namespaceURI;                                                                  // 464\n      parentTag = hostContainerInfo._tag;                                                                              // 465\n    }                                                                                                                  // 466\n    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {                 // 467\n      namespaceURI = DOMNamespaces.html;                                                                               // 468\n    }                                                                                                                  // 469\n    if (namespaceURI === DOMNamespaces.html) {                                                                         // 470\n      if (this._tag === 'svg') {                                                                                       // 471\n        namespaceURI = DOMNamespaces.svg;                                                                              // 472\n      } else if (this._tag === 'math') {                                                                               // 473\n        namespaceURI = DOMNamespaces.mathml;                                                                           // 474\n      }                                                                                                                // 475\n    }                                                                                                                  // 476\n    this._namespaceURI = namespaceURI;                                                                                 // 477\n                                                                                                                       // 478\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 479\n      var parentInfo;                                                                                                  // 480\n      if (hostParent != null) {                                                                                        // 481\n        parentInfo = hostParent._ancestorInfo;                                                                         // 482\n      } else if (hostContainerInfo._tag) {                                                                             // 483\n        parentInfo = hostContainerInfo._ancestorInfo;                                                                  // 484\n      }                                                                                                                // 485\n      if (parentInfo) {                                                                                                // 486\n        // parentInfo should always be present except for the top-level                                                // 487\n        // component when server rendering                                                                             // 488\n        validateDOMNesting(this._tag, null, this, parentInfo);                                                         // 489\n      }                                                                                                                // 490\n      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);                        // 491\n    }                                                                                                                  // 492\n                                                                                                                       // 493\n    var mountImage;                                                                                                    // 494\n    if (transaction.useCreateElement) {                                                                                // 495\n      var ownerDocument = hostContainerInfo._ownerDocument;                                                            // 496\n      var el;                                                                                                          // 497\n      if (namespaceURI === DOMNamespaces.html) {                                                                       // 498\n        if (this._tag === 'script') {                                                                                  // 499\n          // Create the script via .innerHTML so its \"parser-inserted\" flag is                                         // 500\n          // set to true and it does not execute                                                                       // 501\n          var div = ownerDocument.createElement('div');                                                                // 502\n          var type = this._currentElement.type;                                                                        // 503\n          div.innerHTML = '<' + type + '></' + type + '>';                                                             // 504\n          el = div.removeChild(div.firstChild);                                                                        // 505\n        } else if (props.is) {                                                                                         // 506\n          el = ownerDocument.createElement(this._currentElement.type, props.is);                                       // 507\n        } else {                                                                                                       // 508\n          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.             // 509\n          // See discussion in https://github.com/facebook/react/pull/6896                                             // 510\n          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240                                    // 511\n          el = ownerDocument.createElement(this._currentElement.type);                                                 // 512\n        }                                                                                                              // 513\n      } else {                                                                                                         // 514\n        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);                                   // 515\n      }                                                                                                                // 516\n      ReactDOMComponentTree.precacheNode(this, el);                                                                    // 517\n      this._flags |= Flags.hasCachedChildNodes;                                                                        // 518\n      if (!this._hostParent) {                                                                                         // 519\n        DOMPropertyOperations.setAttributeForRoot(el);                                                                 // 520\n      }                                                                                                                // 521\n      this._updateDOMProperties(null, props, transaction);                                                             // 522\n      var lazyTree = DOMLazyTree(el);                                                                                  // 523\n      this._createInitialChildren(transaction, props, context, lazyTree);                                              // 524\n      mountImage = lazyTree;                                                                                           // 525\n    } else {                                                                                                           // 526\n      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);                                      // 527\n      var tagContent = this._createContentMarkup(transaction, props, context);                                         // 528\n      if (!tagContent && omittedCloseTags[this._tag]) {                                                                // 529\n        mountImage = tagOpen + '/>';                                                                                   // 530\n      } else {                                                                                                         // 531\n        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';                              // 532\n      }                                                                                                                // 533\n    }                                                                                                                  // 534\n                                                                                                                       // 535\n    switch (this._tag) {                                                                                               // 536\n      case 'input':                                                                                                    // 537\n        transaction.getReactMountReady().enqueue(inputPostMount, this);                                                // 538\n        if (props.autoFocus) {                                                                                         // 539\n          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);                            // 540\n        }                                                                                                              // 541\n        break;                                                                                                         // 542\n      case 'textarea':                                                                                                 // 543\n        transaction.getReactMountReady().enqueue(textareaPostMount, this);                                             // 544\n        if (props.autoFocus) {                                                                                         // 545\n          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);                            // 546\n        }                                                                                                              // 547\n        break;                                                                                                         // 548\n      case 'select':                                                                                                   // 549\n        if (props.autoFocus) {                                                                                         // 550\n          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);                            // 551\n        }                                                                                                              // 552\n        break;                                                                                                         // 553\n      case 'button':                                                                                                   // 554\n        if (props.autoFocus) {                                                                                         // 555\n          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);                            // 556\n        }                                                                                                              // 557\n        break;                                                                                                         // 558\n      case 'option':                                                                                                   // 559\n        transaction.getReactMountReady().enqueue(optionPostMount, this);                                               // 560\n        break;                                                                                                         // 561\n    }                                                                                                                  // 562\n                                                                                                                       // 563\n    return mountImage;                                                                                                 // 564\n  },                                                                                                                   // 565\n                                                                                                                       // 566\n  /**                                                                                                                  // 567\n   * Creates markup for the open tag and all attributes.                                                               // 568\n   *                                                                                                                   // 569\n   * This method has side effects because events get registered.                                                       // 570\n   *                                                                                                                   // 571\n   * Iterating over object properties is faster than iterating over arrays.                                            // 572\n   * @see http://jsperf.com/obj-vs-arr-iteration                                                                       // 573\n   *                                                                                                                   // 574\n   * @private                                                                                                          // 575\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 576\n   * @param {object} props                                                                                             // 577\n   * @return {string} Markup of opening tag.                                                                           // 578\n   */                                                                                                                  // 579\n  _createOpenTagMarkupAndPutListeners: function (transaction, props) {                                                 // 580\n    var ret = '<' + this._currentElement.type;                                                                         // 581\n                                                                                                                       // 582\n    for (var propKey in props) {                                                                                       // 583\n      if (!props.hasOwnProperty(propKey)) {                                                                            // 584\n        continue;                                                                                                      // 585\n      }                                                                                                                // 586\n      var propValue = props[propKey];                                                                                  // 587\n      if (propValue == null) {                                                                                         // 588\n        continue;                                                                                                      // 589\n      }                                                                                                                // 590\n      if (registrationNameModules.hasOwnProperty(propKey)) {                                                           // 591\n        if (propValue) {                                                                                               // 592\n          enqueuePutListener(this, propKey, propValue, transaction);                                                   // 593\n        }                                                                                                              // 594\n      } else {                                                                                                         // 595\n        if (propKey === STYLE) {                                                                                       // 596\n          if (propValue) {                                                                                             // 597\n            if (process.env.NODE_ENV !== 'production') {                                                               // 598\n              // See `_updateDOMProperties`. style block                                                               // 599\n              this._previousStyle = propValue;                                                                         // 600\n            }                                                                                                          // 601\n            propValue = this._previousStyleCopy = _assign({}, props.style);                                            // 602\n          }                                                                                                            // 603\n          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);                                    // 604\n        }                                                                                                              // 605\n        var markup = null;                                                                                             // 606\n        if (this._tag != null && isCustomComponent(this._tag, props)) {                                                // 607\n          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {                                                               // 608\n            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);                         // 609\n          }                                                                                                            // 610\n        } else {                                                                                                       // 611\n          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);                                  // 612\n        }                                                                                                              // 613\n        if (markup) {                                                                                                  // 614\n          ret += ' ' + markup;                                                                                         // 615\n        }                                                                                                              // 616\n      }                                                                                                                // 617\n    }                                                                                                                  // 618\n                                                                                                                       // 619\n    // For static pages, no need to put React ID and checksum. Saves lots of                                           // 620\n    // bytes.                                                                                                          // 621\n    if (transaction.renderToStaticMarkup) {                                                                            // 622\n      return ret;                                                                                                      // 623\n    }                                                                                                                  // 624\n                                                                                                                       // 625\n    if (!this._hostParent) {                                                                                           // 626\n      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();                                                        // 627\n    }                                                                                                                  // 628\n    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);                                                 // 629\n    return ret;                                                                                                        // 630\n  },                                                                                                                   // 631\n                                                                                                                       // 632\n  /**                                                                                                                  // 633\n   * Creates markup for the content between the tags.                                                                  // 634\n   *                                                                                                                   // 635\n   * @private                                                                                                          // 636\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 637\n   * @param {object} props                                                                                             // 638\n   * @param {object} context                                                                                           // 639\n   * @return {string} Content markup.                                                                                  // 640\n   */                                                                                                                  // 641\n  _createContentMarkup: function (transaction, props, context) {                                                       // 642\n    var ret = '';                                                                                                      // 643\n                                                                                                                       // 644\n    // Intentional use of != to avoid catching zero/false.                                                             // 645\n    var innerHTML = props.dangerouslySetInnerHTML;                                                                     // 646\n    if (innerHTML != null) {                                                                                           // 647\n      if (innerHTML.__html != null) {                                                                                  // 648\n        ret = innerHTML.__html;                                                                                        // 649\n      }                                                                                                                // 650\n    } else {                                                                                                           // 651\n      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;                                 // 652\n      var childrenToUse = contentToUse != null ? null : props.children;                                                // 653\n      if (contentToUse != null) {                                                                                      // 654\n        // TODO: Validate that text is allowed as a child of this node                                                 // 655\n        ret = escapeTextContentForBrowser(contentToUse);                                                               // 656\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 657\n          setAndValidateContentChildDev.call(this, contentToUse);                                                      // 658\n        }                                                                                                              // 659\n      } else if (childrenToUse != null) {                                                                              // 660\n        var mountImages = this.mountChildren(childrenToUse, transaction, context);                                     // 661\n        ret = mountImages.join('');                                                                                    // 662\n      }                                                                                                                // 663\n    }                                                                                                                  // 664\n    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\\n') {                                                      // 665\n      // text/html ignores the first character in these tags if it's a newline                                         // 666\n      // Prefer to break application/xml over text/html (for now) by adding                                            // 667\n      // a newline specifically to get eaten by the parser. (Alternately for                                           // 668\n      // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first                                       // 669\n      // \\r is normalized out by HTMLTextAreaElement#value.)                                                           // 670\n      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>                                       // 671\n      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>                                            // 672\n      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>                                                        // 673\n      // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements                                                       // 674\n      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>                                            // 675\n      return '\\n' + ret;                                                                                               // 676\n    } else {                                                                                                           // 677\n      return ret;                                                                                                      // 678\n    }                                                                                                                  // 679\n  },                                                                                                                   // 680\n                                                                                                                       // 681\n  _createInitialChildren: function (transaction, props, context, lazyTree) {                                           // 682\n    // Intentional use of != to avoid catching zero/false.                                                             // 683\n    var innerHTML = props.dangerouslySetInnerHTML;                                                                     // 684\n    if (innerHTML != null) {                                                                                           // 685\n      if (innerHTML.__html != null) {                                                                                  // 686\n        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);                                                             // 687\n      }                                                                                                                // 688\n    } else {                                                                                                           // 689\n      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;                                 // 690\n      var childrenToUse = contentToUse != null ? null : props.children;                                                // 691\n      if (contentToUse != null) {                                                                                      // 692\n        // TODO: Validate that text is allowed as a child of this node                                                 // 693\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 694\n          setAndValidateContentChildDev.call(this, contentToUse);                                                      // 695\n        }                                                                                                              // 696\n        DOMLazyTree.queueText(lazyTree, contentToUse);                                                                 // 697\n      } else if (childrenToUse != null) {                                                                              // 698\n        var mountImages = this.mountChildren(childrenToUse, transaction, context);                                     // 699\n        for (var i = 0; i < mountImages.length; i++) {                                                                 // 700\n          DOMLazyTree.queueChild(lazyTree, mountImages[i]);                                                            // 701\n        }                                                                                                              // 702\n      }                                                                                                                // 703\n    }                                                                                                                  // 704\n  },                                                                                                                   // 705\n                                                                                                                       // 706\n  /**                                                                                                                  // 707\n   * Receives a next element and updates the component.                                                                // 708\n   *                                                                                                                   // 709\n   * @internal                                                                                                         // 710\n   * @param {ReactElement} nextElement                                                                                 // 711\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 712\n   * @param {object} context                                                                                           // 713\n   */                                                                                                                  // 714\n  receiveComponent: function (nextElement, transaction, context) {                                                     // 715\n    var prevElement = this._currentElement;                                                                            // 716\n    this._currentElement = nextElement;                                                                                // 717\n    this.updateComponent(transaction, prevElement, nextElement, context);                                              // 718\n  },                                                                                                                   // 719\n                                                                                                                       // 720\n  /**                                                                                                                  // 721\n   * Updates a DOM component after it has already been allocated and                                                   // 722\n   * attached to the DOM. Reconciles the root DOM node, then recurses.                                                 // 723\n   *                                                                                                                   // 724\n   * @param {ReactReconcileTransaction} transaction                                                                    // 725\n   * @param {ReactElement} prevElement                                                                                 // 726\n   * @param {ReactElement} nextElement                                                                                 // 727\n   * @internal                                                                                                         // 728\n   * @overridable                                                                                                      // 729\n   */                                                                                                                  // 730\n  updateComponent: function (transaction, prevElement, nextElement, context) {                                         // 731\n    var lastProps = prevElement.props;                                                                                 // 732\n    var nextProps = this._currentElement.props;                                                                        // 733\n                                                                                                                       // 734\n    switch (this._tag) {                                                                                               // 735\n      case 'button':                                                                                                   // 736\n        lastProps = ReactDOMButton.getHostProps(this, lastProps);                                                      // 737\n        nextProps = ReactDOMButton.getHostProps(this, nextProps);                                                      // 738\n        break;                                                                                                         // 739\n      case 'input':                                                                                                    // 740\n        lastProps = ReactDOMInput.getHostProps(this, lastProps);                                                       // 741\n        nextProps = ReactDOMInput.getHostProps(this, nextProps);                                                       // 742\n        break;                                                                                                         // 743\n      case 'option':                                                                                                   // 744\n        lastProps = ReactDOMOption.getHostProps(this, lastProps);                                                      // 745\n        nextProps = ReactDOMOption.getHostProps(this, nextProps);                                                      // 746\n        break;                                                                                                         // 747\n      case 'select':                                                                                                   // 748\n        lastProps = ReactDOMSelect.getHostProps(this, lastProps);                                                      // 749\n        nextProps = ReactDOMSelect.getHostProps(this, nextProps);                                                      // 750\n        break;                                                                                                         // 751\n      case 'textarea':                                                                                                 // 752\n        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);                                                    // 753\n        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);                                                    // 754\n        break;                                                                                                         // 755\n    }                                                                                                                  // 756\n                                                                                                                       // 757\n    assertValidProps(this, nextProps);                                                                                 // 758\n    this._updateDOMProperties(lastProps, nextProps, transaction);                                                      // 759\n    this._updateDOMChildren(lastProps, nextProps, transaction, context);                                               // 760\n                                                                                                                       // 761\n    switch (this._tag) {                                                                                               // 762\n      case 'input':                                                                                                    // 763\n        // Update the wrapper around inputs *after* updating props. This has to                                        // 764\n        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations                                      // 765\n        // raise warnings and prevent the new value from being assigned.                                               // 766\n        ReactDOMInput.updateWrapper(this);                                                                             // 767\n        break;                                                                                                         // 768\n      case 'textarea':                                                                                                 // 769\n        ReactDOMTextarea.updateWrapper(this);                                                                          // 770\n        break;                                                                                                         // 771\n      case 'select':                                                                                                   // 772\n        // <select> value update needs to occur after <option> children                                                // 773\n        // reconciliation                                                                                              // 774\n        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);                                       // 775\n        break;                                                                                                         // 776\n    }                                                                                                                  // 777\n  },                                                                                                                   // 778\n                                                                                                                       // 779\n  /**                                                                                                                  // 780\n   * Reconciles the properties by detecting differences in property values and                                         // 781\n   * updating the DOM as necessary. This function is probably the single most                                          // 782\n   * critical path for performance optimization.                                                                       // 783\n   *                                                                                                                   // 784\n   * TODO: Benchmark whether checking for changed values in memory actually                                            // 785\n   *       improves performance (especially statically positioned elements).                                           // 786\n   * TODO: Benchmark the effects of putting this at the top since 99% of props                                         // 787\n   *       do not change for a given reconciliation.                                                                   // 788\n   * TODO: Benchmark areas that can be improved with caching.                                                          // 789\n   *                                                                                                                   // 790\n   * @private                                                                                                          // 791\n   * @param {object} lastProps                                                                                         // 792\n   * @param {object} nextProps                                                                                         // 793\n   * @param {?DOMElement} node                                                                                         // 794\n   */                                                                                                                  // 795\n  _updateDOMProperties: function (lastProps, nextProps, transaction) {                                                 // 796\n    var propKey;                                                                                                       // 797\n    var styleName;                                                                                                     // 798\n    var styleUpdates;                                                                                                  // 799\n    for (propKey in lastProps) {                                                                                       // 800\n      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {     // 801\n        continue;                                                                                                      // 802\n      }                                                                                                                // 803\n      if (propKey === STYLE) {                                                                                         // 804\n        var lastStyle = this._previousStyleCopy;                                                                       // 805\n        for (styleName in lastStyle) {                                                                                 // 806\n          if (lastStyle.hasOwnProperty(styleName)) {                                                                   // 807\n            styleUpdates = styleUpdates || {};                                                                         // 808\n            styleUpdates[styleName] = '';                                                                              // 809\n          }                                                                                                            // 810\n        }                                                                                                              // 811\n        this._previousStyleCopy = null;                                                                                // 812\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {                                                    // 813\n        if (lastProps[propKey]) {                                                                                      // 814\n          // Only call deleteListener if there was a listener previously or                                            // 815\n          // else willDeleteListener gets called when there wasn't actually a                                          // 816\n          // listener (e.g., onClick={null})                                                                           // 817\n          deleteListener(this, propKey);                                                                               // 818\n        }                                                                                                              // 819\n      } else if (isCustomComponent(this._tag, lastProps)) {                                                            // 820\n        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {                                                                 // 821\n          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);                                       // 822\n        }                                                                                                              // 823\n      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {                          // 824\n        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);                                          // 825\n      }                                                                                                                // 826\n    }                                                                                                                  // 827\n    for (propKey in nextProps) {                                                                                       // 828\n      var nextProp = nextProps[propKey];                                                                               // 829\n      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;\n      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {       // 831\n        continue;                                                                                                      // 832\n      }                                                                                                                // 833\n      if (propKey === STYLE) {                                                                                         // 834\n        if (nextProp) {                                                                                                // 835\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 836\n            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);                           // 837\n            this._previousStyle = nextProp;                                                                            // 838\n          }                                                                                                            // 839\n          nextProp = this._previousStyleCopy = _assign({}, nextProp);                                                  // 840\n        } else {                                                                                                       // 841\n          this._previousStyleCopy = null;                                                                              // 842\n        }                                                                                                              // 843\n        if (lastProp) {                                                                                                // 844\n          // Unset styles on `lastProp` but not on `nextProp`.                                                         // 845\n          for (styleName in lastProp) {                                                                                // 846\n            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {            // 847\n              styleUpdates = styleUpdates || {};                                                                       // 848\n              styleUpdates[styleName] = '';                                                                            // 849\n            }                                                                                                          // 850\n          }                                                                                                            // 851\n          // Update styles that changed since `lastProp`.                                                              // 852\n          for (styleName in nextProp) {                                                                                // 853\n            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {                   // 854\n              styleUpdates = styleUpdates || {};                                                                       // 855\n              styleUpdates[styleName] = nextProp[styleName];                                                           // 856\n            }                                                                                                          // 857\n          }                                                                                                            // 858\n        } else {                                                                                                       // 859\n          // Relies on `updateStylesByID` not mutating `styleUpdates`.                                                 // 860\n          styleUpdates = nextProp;                                                                                     // 861\n        }                                                                                                              // 862\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {                                                    // 863\n        if (nextProp) {                                                                                                // 864\n          enqueuePutListener(this, propKey, nextProp, transaction);                                                    // 865\n        } else if (lastProp) {                                                                                         // 866\n          deleteListener(this, propKey);                                                                               // 867\n        }                                                                                                              // 868\n      } else if (isCustomComponent(this._tag, nextProps)) {                                                            // 869\n        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {                                                                 // 870\n          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);                                // 871\n        }                                                                                                              // 872\n      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {                          // 873\n        var node = getNode(this);                                                                                      // 874\n        // If we're updating to null or undefined, we should remove the property                                       // 875\n        // from the DOM node instead of inadvertently setting to a string. This                                        // 876\n        // brings us in line with the same behavior we have on initial render.                                         // 877\n        if (nextProp != null) {                                                                                        // 878\n          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);                                          // 879\n        } else {                                                                                                       // 880\n          DOMPropertyOperations.deleteValueForProperty(node, propKey);                                                 // 881\n        }                                                                                                              // 882\n      }                                                                                                                // 883\n    }                                                                                                                  // 884\n    if (styleUpdates) {                                                                                                // 885\n      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);                                      // 886\n    }                                                                                                                  // 887\n  },                                                                                                                   // 888\n                                                                                                                       // 889\n  /**                                                                                                                  // 890\n   * Reconciles the children with the various properties that affect the                                               // 891\n   * children content.                                                                                                 // 892\n   *                                                                                                                   // 893\n   * @param {object} lastProps                                                                                         // 894\n   * @param {object} nextProps                                                                                         // 895\n   * @param {ReactReconcileTransaction} transaction                                                                    // 896\n   * @param {object} context                                                                                           // 897\n   */                                                                                                                  // 898\n  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {                                          // 899\n    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;                            // 900\n    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;                            // 901\n                                                                                                                       // 902\n    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;                      // 903\n    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;                      // 904\n                                                                                                                       // 905\n    // Note the use of `!=` which checks for null or undefined.                                                        // 906\n    var lastChildren = lastContent != null ? null : lastProps.children;                                                // 907\n    var nextChildren = nextContent != null ? null : nextProps.children;                                                // 908\n                                                                                                                       // 909\n    // If we're switching from children to content/html or vice versa, remove                                          // 910\n    // the old content                                                                                                 // 911\n    var lastHasContentOrHtml = lastContent != null || lastHtml != null;                                                // 912\n    var nextHasContentOrHtml = nextContent != null || nextHtml != null;                                                // 913\n    if (lastChildren != null && nextChildren == null) {                                                                // 914\n      this.updateChildren(null, transaction, context);                                                                 // 915\n    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {                                                        // 916\n      this.updateTextContent('');                                                                                      // 917\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 918\n        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);                                               // 919\n      }                                                                                                                // 920\n    }                                                                                                                  // 921\n                                                                                                                       // 922\n    if (nextContent != null) {                                                                                         // 923\n      if (lastContent !== nextContent) {                                                                               // 924\n        this.updateTextContent('' + nextContent);                                                                      // 925\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 926\n          setAndValidateContentChildDev.call(this, nextContent);                                                       // 927\n        }                                                                                                              // 928\n      }                                                                                                                // 929\n    } else if (nextHtml != null) {                                                                                     // 930\n      if (lastHtml !== nextHtml) {                                                                                     // 931\n        this.updateMarkup('' + nextHtml);                                                                              // 932\n      }                                                                                                                // 933\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 934\n        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);                                               // 935\n      }                                                                                                                // 936\n    } else if (nextChildren != null) {                                                                                 // 937\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 938\n        setAndValidateContentChildDev.call(this, null);                                                                // 939\n      }                                                                                                                // 940\n                                                                                                                       // 941\n      this.updateChildren(nextChildren, transaction, context);                                                         // 942\n    }                                                                                                                  // 943\n  },                                                                                                                   // 944\n                                                                                                                       // 945\n  getHostNode: function () {                                                                                           // 946\n    return getNode(this);                                                                                              // 947\n  },                                                                                                                   // 948\n                                                                                                                       // 949\n  /**                                                                                                                  // 950\n   * Destroys all event registrations for this instance. Does not remove from                                          // 951\n   * the DOM. That must be done by the parent.                                                                         // 952\n   *                                                                                                                   // 953\n   * @internal                                                                                                         // 954\n   */                                                                                                                  // 955\n  unmountComponent: function (safely) {                                                                                // 956\n    switch (this._tag) {                                                                                               // 957\n      case 'audio':                                                                                                    // 958\n      case 'form':                                                                                                     // 959\n      case 'iframe':                                                                                                   // 960\n      case 'img':                                                                                                      // 961\n      case 'link':                                                                                                     // 962\n      case 'object':                                                                                                   // 963\n      case 'source':                                                                                                   // 964\n      case 'video':                                                                                                    // 965\n        var listeners = this._wrapperState.listeners;                                                                  // 966\n        if (listeners) {                                                                                               // 967\n          for (var i = 0; i < listeners.length; i++) {                                                                 // 968\n            listeners[i].remove();                                                                                     // 969\n          }                                                                                                            // 970\n        }                                                                                                              // 971\n        break;                                                                                                         // 972\n      case 'html':                                                                                                     // 973\n      case 'head':                                                                                                     // 974\n      case 'body':                                                                                                     // 975\n        /**                                                                                                            // 976\n         * Components like <html> <head> and <body> can't be removed or added                                          // 977\n         * easily in a cross-browser way, however it's valuable to be able to                                          // 978\n         * take advantage of React's reconciliation for styling and <title>                                            // 979\n         * management. So we just document it and throw in dangerous cases.                                            // 980\n         */                                                                                                            // 981\n        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;\n        break;                                                                                                         // 983\n    }                                                                                                                  // 984\n                                                                                                                       // 985\n    this.unmountChildren(safely);                                                                                      // 986\n    ReactDOMComponentTree.uncacheNode(this);                                                                           // 987\n    EventPluginHub.deleteAllListeners(this);                                                                           // 988\n    this._rootNodeID = 0;                                                                                              // 989\n    this._domID = 0;                                                                                                   // 990\n    this._wrapperState = null;                                                                                         // 991\n                                                                                                                       // 992\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 993\n      setAndValidateContentChildDev.call(this, null);                                                                  // 994\n    }                                                                                                                  // 995\n  },                                                                                                                   // 996\n                                                                                                                       // 997\n  getPublicInstance: function () {                                                                                     // 998\n    return getNode(this);                                                                                              // 999\n  }                                                                                                                    // 1000\n                                                                                                                       // 1001\n};                                                                                                                     // 1002\n                                                                                                                       // 1003\n_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);                                  // 1004\n                                                                                                                       // 1005\nmodule.exports = ReactDOMComponent;                                                                                    // 1006\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"AutoFocusUtils.js\":[\"./ReactDOMComponentTree\",\"fbjs/lib/focusNode\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/AutoFocusUtils.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule AutoFocusUtils                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 14\n                                                                                                                       // 15\nvar focusNode = require('fbjs/lib/focusNode');                                                                         // 16\n                                                                                                                       // 17\nvar AutoFocusUtils = {                                                                                                 // 18\n  focusDOMComponent: function () {                                                                                     // 19\n    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));                                                        // 20\n  }                                                                                                                    // 21\n};                                                                                                                     // 22\n                                                                                                                       // 23\nmodule.exports = AutoFocusUtils;                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"CSSPropertyOperations.js\":[\"./CSSProperty\",\"fbjs/lib/ExecutionEnvironment\",\"./ReactInstrumentation\",\"fbjs/lib/camelizeStyleName\",\"./dangerousStyleValue\",\"fbjs/lib/hyphenateStyleName\",\"fbjs/lib/memoizeStringOnly\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/CSSPropertyOperations.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule CSSPropertyOperations                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar CSSProperty = require('./CSSProperty');                                                                            // 14\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 15\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 16\n                                                                                                                       // 17\nvar camelizeStyleName = require('fbjs/lib/camelizeStyleName');                                                         // 18\nvar dangerousStyleValue = require('./dangerousStyleValue');                                                            // 19\nvar hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');                                                       // 20\nvar memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');                                                         // 21\nvar warning = require('fbjs/lib/warning');                                                                             // 22\n                                                                                                                       // 23\nvar processStyleName = memoizeStringOnly(function (styleName) {                                                        // 24\n  return hyphenateStyleName(styleName);                                                                                // 25\n});                                                                                                                    // 26\n                                                                                                                       // 27\nvar hasShorthandPropertyBug = false;                                                                                   // 28\nvar styleFloatAccessor = 'cssFloat';                                                                                   // 29\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 30\n  var tempStyle = document.createElement('div').style;                                                                 // 31\n  try {                                                                                                                // 32\n    // IE8 throws \"Invalid argument.\" if resetting shorthand style properties.                                         // 33\n    tempStyle.font = '';                                                                                               // 34\n  } catch (e) {                                                                                                        // 35\n    hasShorthandPropertyBug = true;                                                                                    // 36\n  }                                                                                                                    // 37\n  // IE8 only supports accessing cssFloat (standard) as styleFloat                                                     // 38\n  if (document.documentElement.style.cssFloat === undefined) {                                                         // 39\n    styleFloatAccessor = 'styleFloat';                                                                                 // 40\n  }                                                                                                                    // 41\n}                                                                                                                      // 42\n                                                                                                                       // 43\nif (process.env.NODE_ENV !== 'production') {                                                                           // 44\n  // 'msTransform' is correct, but the other prefixes should be capitalized                                            // 45\n  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;                                                          // 46\n                                                                                                                       // 47\n  // style values shouldn't contain a semicolon                                                                        // 48\n  var badStyleValueWithSemicolonPattern = /;\\s*$/;                                                                     // 49\n                                                                                                                       // 50\n  var warnedStyleNames = {};                                                                                           // 51\n  var warnedStyleValues = {};                                                                                          // 52\n  var warnedForNaNValue = false;                                                                                       // 53\n                                                                                                                       // 54\n  var warnHyphenatedStyleName = function (name, owner) {                                                               // 55\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {                                             // 56\n      return;                                                                                                          // 57\n    }                                                                                                                  // 58\n                                                                                                                       // 59\n    warnedStyleNames[name] = true;                                                                                     // 60\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;\n  };                                                                                                                   // 62\n                                                                                                                       // 63\n  var warnBadVendoredStyleName = function (name, owner) {                                                              // 64\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {                                             // 65\n      return;                                                                                                          // 66\n    }                                                                                                                  // 67\n                                                                                                                       // 68\n    warnedStyleNames[name] = true;                                                                                     // 69\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;\n  };                                                                                                                   // 71\n                                                                                                                       // 72\n  var warnStyleValueWithSemicolon = function (name, value, owner) {                                                    // 73\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {                                         // 74\n      return;                                                                                                          // 75\n    }                                                                                                                  // 76\n                                                                                                                       // 77\n    warnedStyleValues[value] = true;                                                                                   // 78\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\\'t contain a semicolon.%s ' + 'Try \"%s: %s\" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;\n  };                                                                                                                   // 80\n                                                                                                                       // 81\n  var warnStyleValueIsNaN = function (name, value, owner) {                                                            // 82\n    if (warnedForNaNValue) {                                                                                           // 83\n      return;                                                                                                          // 84\n    }                                                                                                                  // 85\n                                                                                                                       // 86\n    warnedForNaNValue = true;                                                                                          // 87\n    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;\n  };                                                                                                                   // 89\n                                                                                                                       // 90\n  var checkRenderMessage = function (owner) {                                                                          // 91\n    if (owner) {                                                                                                       // 92\n      var name = owner.getName();                                                                                      // 93\n      if (name) {                                                                                                      // 94\n        return ' Check the render method of `' + name + '`.';                                                          // 95\n      }                                                                                                                // 96\n    }                                                                                                                  // 97\n    return '';                                                                                                         // 98\n  };                                                                                                                   // 99\n                                                                                                                       // 100\n  /**                                                                                                                  // 101\n   * @param {string} name                                                                                              // 102\n   * @param {*} value                                                                                                  // 103\n   * @param {ReactDOMComponent} component                                                                              // 104\n   */                                                                                                                  // 105\n  var warnValidStyle = function (name, value, component) {                                                             // 106\n    var owner;                                                                                                         // 107\n    if (component) {                                                                                                   // 108\n      owner = component._currentElement._owner;                                                                        // 109\n    }                                                                                                                  // 110\n    if (name.indexOf('-') > -1) {                                                                                      // 111\n      warnHyphenatedStyleName(name, owner);                                                                            // 112\n    } else if (badVendoredStyleNamePattern.test(name)) {                                                               // 113\n      warnBadVendoredStyleName(name, owner);                                                                           // 114\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {                                                        // 115\n      warnStyleValueWithSemicolon(name, value, owner);                                                                 // 116\n    }                                                                                                                  // 117\n                                                                                                                       // 118\n    if (typeof value === 'number' && isNaN(value)) {                                                                   // 119\n      warnStyleValueIsNaN(name, value, owner);                                                                         // 120\n    }                                                                                                                  // 121\n  };                                                                                                                   // 122\n}                                                                                                                      // 123\n                                                                                                                       // 124\n/**                                                                                                                    // 125\n * Operations for dealing with CSS properties.                                                                         // 126\n */                                                                                                                    // 127\nvar CSSPropertyOperations = {                                                                                          // 128\n                                                                                                                       // 129\n  /**                                                                                                                  // 130\n   * Serializes a mapping of style properties for use as inline styles:                                                // 131\n   *                                                                                                                   // 132\n   *   > createMarkupForStyles({width: '200px', height: 0})                                                            // 133\n   *   \"width:200px;height:0;\"                                                                                         // 134\n   *                                                                                                                   // 135\n   * Undefined values are ignored so that declarative programming is easier.                                           // 136\n   * The result should be HTML-escaped before insertion into the DOM.                                                  // 137\n   *                                                                                                                   // 138\n   * @param {object} styles                                                                                            // 139\n   * @param {ReactDOMComponent} component                                                                              // 140\n   * @return {?string}                                                                                                 // 141\n   */                                                                                                                  // 142\n  createMarkupForStyles: function (styles, component) {                                                                // 143\n    var serialized = '';                                                                                               // 144\n    for (var styleName in styles) {                                                                                    // 145\n      if (!styles.hasOwnProperty(styleName)) {                                                                         // 146\n        continue;                                                                                                      // 147\n      }                                                                                                                // 148\n      var styleValue = styles[styleName];                                                                              // 149\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 150\n        warnValidStyle(styleName, styleValue, component);                                                              // 151\n      }                                                                                                                // 152\n      if (styleValue != null) {                                                                                        // 153\n        serialized += processStyleName(styleName) + ':';                                                               // 154\n        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';                                     // 155\n      }                                                                                                                // 156\n    }                                                                                                                  // 157\n    return serialized || null;                                                                                         // 158\n  },                                                                                                                   // 159\n                                                                                                                       // 160\n  /**                                                                                                                  // 161\n   * Sets the value for multiple styles on a node.  If a value is specified as                                         // 162\n   * '' (empty string), the corresponding style property will be unset.                                                // 163\n   *                                                                                                                   // 164\n   * @param {DOMElement} node                                                                                          // 165\n   * @param {object} styles                                                                                            // 166\n   * @param {ReactDOMComponent} component                                                                              // 167\n   */                                                                                                                  // 168\n  setValueForStyles: function (node, styles, component) {                                                              // 169\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 170\n      ReactInstrumentation.debugTool.onHostOperation(component._debugID, 'update styles', styles);                     // 171\n    }                                                                                                                  // 172\n                                                                                                                       // 173\n    var style = node.style;                                                                                            // 174\n    for (var styleName in styles) {                                                                                    // 175\n      if (!styles.hasOwnProperty(styleName)) {                                                                         // 176\n        continue;                                                                                                      // 177\n      }                                                                                                                // 178\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 179\n        warnValidStyle(styleName, styles[styleName], component);                                                       // 180\n      }                                                                                                                // 181\n      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);                                   // 182\n      if (styleName === 'float' || styleName === 'cssFloat') {                                                         // 183\n        styleName = styleFloatAccessor;                                                                                // 184\n      }                                                                                                                // 185\n      if (styleValue) {                                                                                                // 186\n        style[styleName] = styleValue;                                                                                 // 187\n      } else {                                                                                                         // 188\n        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];                 // 189\n        if (expansion) {                                                                                               // 190\n          // Shorthand property that IE8 won't like unsetting, so unset each                                           // 191\n          // component to placate it                                                                                   // 192\n          for (var individualStyleName in expansion) {                                                                 // 193\n            style[individualStyleName] = '';                                                                           // 194\n          }                                                                                                            // 195\n        } else {                                                                                                       // 196\n          style[styleName] = '';                                                                                       // 197\n        }                                                                                                              // 198\n      }                                                                                                                // 199\n    }                                                                                                                  // 200\n  }                                                                                                                    // 201\n                                                                                                                       // 202\n};                                                                                                                     // 203\n                                                                                                                       // 204\nmodule.exports = CSSPropertyOperations;                                                                                // 205\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"CSSProperty.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/CSSProperty.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule CSSProperty                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * CSS properties which accept numbers but are not in units of \"px\".                                                   // 15\n */                                                                                                                    // 16\n                                                                                                                       // 17\nvar isUnitlessNumber = {                                                                                               // 18\n  animationIterationCount: true,                                                                                       // 19\n  borderImageOutset: true,                                                                                             // 20\n  borderImageSlice: true,                                                                                              // 21\n  borderImageWidth: true,                                                                                              // 22\n  boxFlex: true,                                                                                                       // 23\n  boxFlexGroup: true,                                                                                                  // 24\n  boxOrdinalGroup: true,                                                                                               // 25\n  columnCount: true,                                                                                                   // 26\n  flex: true,                                                                                                          // 27\n  flexGrow: true,                                                                                                      // 28\n  flexPositive: true,                                                                                                  // 29\n  flexShrink: true,                                                                                                    // 30\n  flexNegative: true,                                                                                                  // 31\n  flexOrder: true,                                                                                                     // 32\n  gridRow: true,                                                                                                       // 33\n  gridColumn: true,                                                                                                    // 34\n  fontWeight: true,                                                                                                    // 35\n  lineClamp: true,                                                                                                     // 36\n  lineHeight: true,                                                                                                    // 37\n  opacity: true,                                                                                                       // 38\n  order: true,                                                                                                         // 39\n  orphans: true,                                                                                                       // 40\n  tabSize: true,                                                                                                       // 41\n  widows: true,                                                                                                        // 42\n  zIndex: true,                                                                                                        // 43\n  zoom: true,                                                                                                          // 44\n                                                                                                                       // 45\n  // SVG-related properties                                                                                            // 46\n  fillOpacity: true,                                                                                                   // 47\n  floodOpacity: true,                                                                                                  // 48\n  stopOpacity: true,                                                                                                   // 49\n  strokeDasharray: true,                                                                                               // 50\n  strokeDashoffset: true,                                                                                              // 51\n  strokeMiterlimit: true,                                                                                              // 52\n  strokeOpacity: true,                                                                                                 // 53\n  strokeWidth: true                                                                                                    // 54\n};                                                                                                                     // 55\n                                                                                                                       // 56\n/**                                                                                                                    // 57\n * @param {string} prefix vendor-specific prefix, eg: Webkit                                                           // 58\n * @param {string} key style name, eg: transitionDuration                                                              // 59\n * @return {string} style name prefixed with `prefix`, properly camelCased, eg:                                        // 60\n * WebkitTransitionDuration                                                                                            // 61\n */                                                                                                                    // 62\nfunction prefixKey(prefix, key) {                                                                                      // 63\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);                                                      // 64\n}                                                                                                                      // 65\n                                                                                                                       // 66\n/**                                                                                                                    // 67\n * Support style names that may come passed in prefixed by adding permutations                                         // 68\n * of vendor prefixes.                                                                                                 // 69\n */                                                                                                                    // 70\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];                                                                           // 71\n                                                                                                                       // 72\n// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an                                        // 73\n// infinite loop, because it iterates over the newly added props too.                                                  // 74\nObject.keys(isUnitlessNumber).forEach(function (prop) {                                                                // 75\n  prefixes.forEach(function (prefix) {                                                                                 // 76\n    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];                                                // 77\n  });                                                                                                                  // 78\n});                                                                                                                    // 79\n                                                                                                                       // 80\n/**                                                                                                                    // 81\n * Most style properties can be unset by doing .style[prop] = '' but IE8                                               // 82\n * doesn't like doing that with shorthand properties so for the properties that                                        // 83\n * IE8 breaks on, which are listed here, we instead unset each of the                                                  // 84\n * individual properties. See http://bugs.jquery.com/ticket/12385.                                                     // 85\n * The 4-value 'clock' properties like margin, padding, border-width seem to                                           // 86\n * behave without any problems. Curiously, list-style works too without any                                            // 87\n * special prodding.                                                                                                   // 88\n */                                                                                                                    // 89\nvar shorthandPropertyExpansions = {                                                                                    // 90\n  background: {                                                                                                        // 91\n    backgroundAttachment: true,                                                                                        // 92\n    backgroundColor: true,                                                                                             // 93\n    backgroundImage: true,                                                                                             // 94\n    backgroundPositionX: true,                                                                                         // 95\n    backgroundPositionY: true,                                                                                         // 96\n    backgroundRepeat: true                                                                                             // 97\n  },                                                                                                                   // 98\n  backgroundPosition: {                                                                                                // 99\n    backgroundPositionX: true,                                                                                         // 100\n    backgroundPositionY: true                                                                                          // 101\n  },                                                                                                                   // 102\n  border: {                                                                                                            // 103\n    borderWidth: true,                                                                                                 // 104\n    borderStyle: true,                                                                                                 // 105\n    borderColor: true                                                                                                  // 106\n  },                                                                                                                   // 107\n  borderBottom: {                                                                                                      // 108\n    borderBottomWidth: true,                                                                                           // 109\n    borderBottomStyle: true,                                                                                           // 110\n    borderBottomColor: true                                                                                            // 111\n  },                                                                                                                   // 112\n  borderLeft: {                                                                                                        // 113\n    borderLeftWidth: true,                                                                                             // 114\n    borderLeftStyle: true,                                                                                             // 115\n    borderLeftColor: true                                                                                              // 116\n  },                                                                                                                   // 117\n  borderRight: {                                                                                                       // 118\n    borderRightWidth: true,                                                                                            // 119\n    borderRightStyle: true,                                                                                            // 120\n    borderRightColor: true                                                                                             // 121\n  },                                                                                                                   // 122\n  borderTop: {                                                                                                         // 123\n    borderTopWidth: true,                                                                                              // 124\n    borderTopStyle: true,                                                                                              // 125\n    borderTopColor: true                                                                                               // 126\n  },                                                                                                                   // 127\n  font: {                                                                                                              // 128\n    fontStyle: true,                                                                                                   // 129\n    fontVariant: true,                                                                                                 // 130\n    fontWeight: true,                                                                                                  // 131\n    fontSize: true,                                                                                                    // 132\n    lineHeight: true,                                                                                                  // 133\n    fontFamily: true                                                                                                   // 134\n  },                                                                                                                   // 135\n  outline: {                                                                                                           // 136\n    outlineWidth: true,                                                                                                // 137\n    outlineStyle: true,                                                                                                // 138\n    outlineColor: true                                                                                                 // 139\n  }                                                                                                                    // 140\n};                                                                                                                     // 141\n                                                                                                                       // 142\nvar CSSProperty = {                                                                                                    // 143\n  isUnitlessNumber: isUnitlessNumber,                                                                                  // 144\n  shorthandPropertyExpansions: shorthandPropertyExpansions                                                             // 145\n};                                                                                                                     // 146\n                                                                                                                       // 147\nmodule.exports = CSSProperty;                                                                                          // 148\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"dangerousStyleValue.js\":[\"./CSSProperty\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/dangerousStyleValue.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule dangerousStyleValue                                                                                 // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar CSSProperty = require('./CSSProperty');                                                                            // 14\nvar warning = require('fbjs/lib/warning');                                                                             // 15\n                                                                                                                       // 16\nvar isUnitlessNumber = CSSProperty.isUnitlessNumber;                                                                   // 17\nvar styleWarnings = {};                                                                                                // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * Convert a value into the proper css writable value. The style name `name`                                           // 21\n * should be logical (no hyphens), as specified                                                                        // 22\n * in `CSSProperty.isUnitlessNumber`.                                                                                  // 23\n *                                                                                                                     // 24\n * @param {string} name CSS property name such as `topMargin`.                                                         // 25\n * @param {*} value CSS property value such as `10px`.                                                                 // 26\n * @param {ReactDOMComponent} component                                                                                // 27\n * @return {string} Normalized style value with dimensions applied.                                                    // 28\n */                                                                                                                    // 29\nfunction dangerousStyleValue(name, value, component) {                                                                 // 30\n  // Note that we've removed escapeTextForBrowser() calls here since the                                               // 31\n  // whole string will be escaped when the attribute is injected into                                                  // 32\n  // the markup. If you provide unsafe user data here they can inject                                                  // 33\n  // arbitrary CSS which may be problematic (I couldn't repro this):                                                   // 34\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet                                                    // 35\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/                                                // 36\n  // This is not an XSS hole but instead a potential CSS injection issue                                               // 37\n  // which has lead to a greater discussion about how we're going to                                                   // 38\n  // trust URLs moving forward. See #2115901                                                                           // 39\n                                                                                                                       // 40\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';                                           // 41\n  if (isEmpty) {                                                                                                       // 42\n    return '';                                                                                                         // 43\n  }                                                                                                                    // 44\n                                                                                                                       // 45\n  var isNonNumeric = isNaN(value);                                                                                     // 46\n  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {                // 47\n    return '' + value; // cast to string                                                                               // 48\n  }                                                                                                                    // 49\n                                                                                                                       // 50\n  if (typeof value === 'string') {                                                                                     // 51\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 52\n      // Allow '0' to pass through without warning. 0 is already special and                                           // 53\n      // doesn't require units, so we don't need to warn about it.                                                     // 54\n      if (component && value !== '0') {                                                                                // 55\n        var owner = component._currentElement._owner;                                                                  // 56\n        var ownerName = owner ? owner.getName() : null;                                                                // 57\n        if (ownerName && !styleWarnings[ownerName]) {                                                                  // 58\n          styleWarnings[ownerName] = {};                                                                               // 59\n        }                                                                                                              // 60\n        var warned = false;                                                                                            // 61\n        if (ownerName) {                                                                                               // 62\n          var warnings = styleWarnings[ownerName];                                                                     // 63\n          warned = warnings[name];                                                                                     // 64\n          if (!warned) {                                                                                               // 65\n            warnings[name] = true;                                                                                     // 66\n          }                                                                                                            // 67\n        }                                                                                                              // 68\n        if (!warned) {                                                                                                 // 69\n          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;\n        }                                                                                                              // 71\n      }                                                                                                                // 72\n    }                                                                                                                  // 73\n    value = value.trim();                                                                                              // 74\n  }                                                                                                                    // 75\n  return value + 'px';                                                                                                 // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\nmodule.exports = dangerousStyleValue;                                                                                  // 79\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"DOMPropertyOperations.js\":[\"./DOMProperty\",\"./ReactDOMComponentTree\",\"./ReactInstrumentation\",\"./quoteAttributeValueForBrowser\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/DOMPropertyOperations.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule DOMPropertyOperations                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar DOMProperty = require('./DOMProperty');                                                                            // 14\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 15\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 16\n                                                                                                                       // 17\nvar quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');                                        // 18\nvar warning = require('fbjs/lib/warning');                                                                             // 19\n                                                                                                                       // 20\nvar VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');\nvar illegalAttributeNameCache = {};                                                                                    // 22\nvar validatedAttributeNameCache = {};                                                                                  // 23\n                                                                                                                       // 24\nfunction isAttributeNameSafe(attributeName) {                                                                          // 25\n  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {                                                     // 26\n    return true;                                                                                                       // 27\n  }                                                                                                                    // 28\n  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {                                                       // 29\n    return false;                                                                                                      // 30\n  }                                                                                                                    // 31\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {                                                                // 32\n    validatedAttributeNameCache[attributeName] = true;                                                                 // 33\n    return true;                                                                                                       // 34\n  }                                                                                                                    // 35\n  illegalAttributeNameCache[attributeName] = true;                                                                     // 36\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;      // 37\n  return false;                                                                                                        // 38\n}                                                                                                                      // 39\n                                                                                                                       // 40\nfunction shouldIgnoreValue(propertyInfo, value) {                                                                      // 41\n  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;\n}                                                                                                                      // 43\n                                                                                                                       // 44\n/**                                                                                                                    // 45\n * Operations for dealing with DOM properties.                                                                         // 46\n */                                                                                                                    // 47\nvar DOMPropertyOperations = {                                                                                          // 48\n                                                                                                                       // 49\n  /**                                                                                                                  // 50\n   * Creates markup for the ID property.                                                                               // 51\n   *                                                                                                                   // 52\n   * @param {string} id Unescaped ID.                                                                                  // 53\n   * @return {string} Markup string.                                                                                   // 54\n   */                                                                                                                  // 55\n  createMarkupForID: function (id) {                                                                                   // 56\n    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);                                    // 57\n  },                                                                                                                   // 58\n                                                                                                                       // 59\n  setAttributeForID: function (node, id) {                                                                             // 60\n    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);                                                              // 61\n  },                                                                                                                   // 62\n                                                                                                                       // 63\n  createMarkupForRoot: function () {                                                                                   // 64\n    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=\"\"';                                                                    // 65\n  },                                                                                                                   // 66\n                                                                                                                       // 67\n  setAttributeForRoot: function (node) {                                                                               // 68\n    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');                                                            // 69\n  },                                                                                                                   // 70\n                                                                                                                       // 71\n  /**                                                                                                                  // 72\n   * Creates markup for a property.                                                                                    // 73\n   *                                                                                                                   // 74\n   * @param {string} name                                                                                              // 75\n   * @param {*} value                                                                                                  // 76\n   * @return {?string} Markup string, or null if the property was invalid.                                             // 77\n   */                                                                                                                  // 78\n  createMarkupForProperty: function (name, value) {                                                                    // 79\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;              // 80\n    if (propertyInfo) {                                                                                                // 81\n      if (shouldIgnoreValue(propertyInfo, value)) {                                                                    // 82\n        return '';                                                                                                     // 83\n      }                                                                                                                // 84\n      var attributeName = propertyInfo.attributeName;                                                                  // 85\n      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {                  // 86\n        return attributeName + '=\"\"';                                                                                  // 87\n      }                                                                                                                // 88\n      return attributeName + '=' + quoteAttributeValueForBrowser(value);                                               // 89\n    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 90\n      if (value == null) {                                                                                             // 91\n        return '';                                                                                                     // 92\n      }                                                                                                                // 93\n      return name + '=' + quoteAttributeValueForBrowser(value);                                                        // 94\n    }                                                                                                                  // 95\n    return null;                                                                                                       // 96\n  },                                                                                                                   // 97\n                                                                                                                       // 98\n  /**                                                                                                                  // 99\n   * Creates markup for a custom property.                                                                             // 100\n   *                                                                                                                   // 101\n   * @param {string} name                                                                                              // 102\n   * @param {*} value                                                                                                  // 103\n   * @return {string} Markup string, or empty string if the property was invalid.                                      // 104\n   */                                                                                                                  // 105\n  createMarkupForCustomAttribute: function (name, value) {                                                             // 106\n    if (!isAttributeNameSafe(name) || value == null) {                                                                 // 107\n      return '';                                                                                                       // 108\n    }                                                                                                                  // 109\n    return name + '=' + quoteAttributeValueForBrowser(value);                                                          // 110\n  },                                                                                                                   // 111\n                                                                                                                       // 112\n  /**                                                                                                                  // 113\n   * Sets the value for a property on a node.                                                                          // 114\n   *                                                                                                                   // 115\n   * @param {DOMElement} node                                                                                          // 116\n   * @param {string} name                                                                                              // 117\n   * @param {*} value                                                                                                  // 118\n   */                                                                                                                  // 119\n  setValueForProperty: function (node, name, value) {                                                                  // 120\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;              // 121\n    if (propertyInfo) {                                                                                                // 122\n      var mutationMethod = propertyInfo.mutationMethod;                                                                // 123\n      if (mutationMethod) {                                                                                            // 124\n        mutationMethod(node, value);                                                                                   // 125\n      } else if (shouldIgnoreValue(propertyInfo, value)) {                                                             // 126\n        this.deleteValueForProperty(node, name);                                                                       // 127\n        return;                                                                                                        // 128\n      } else if (propertyInfo.mustUseProperty) {                                                                       // 129\n        // Contrary to `setAttribute`, object properties are properly                                                  // 130\n        // `toString`ed by IE8/9.                                                                                      // 131\n        node[propertyInfo.propertyName] = value;                                                                       // 132\n      } else {                                                                                                         // 133\n        var attributeName = propertyInfo.attributeName;                                                                // 134\n        var namespace = propertyInfo.attributeNamespace;                                                               // 135\n        // `setAttribute` with objects becomes only `[object]` in IE8/9,                                               // 136\n        // ('' + value) makes it output the correct toString()-value.                                                  // 137\n        if (namespace) {                                                                                               // 138\n          node.setAttributeNS(namespace, attributeName, '' + value);                                                   // 139\n        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {         // 140\n          node.setAttribute(attributeName, '');                                                                        // 141\n        } else {                                                                                                       // 142\n          node.setAttribute(attributeName, '' + value);                                                                // 143\n        }                                                                                                              // 144\n      }                                                                                                                // 145\n    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 146\n      DOMPropertyOperations.setValueForAttribute(node, name, value);                                                   // 147\n      return;                                                                                                          // 148\n    }                                                                                                                  // 149\n                                                                                                                       // 150\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 151\n      var payload = {};                                                                                                // 152\n      payload[name] = value;                                                                                           // 153\n      ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'update attribute', payload);\n    }                                                                                                                  // 155\n  },                                                                                                                   // 156\n                                                                                                                       // 157\n  setValueForAttribute: function (node, name, value) {                                                                 // 158\n    if (!isAttributeNameSafe(name)) {                                                                                  // 159\n      return;                                                                                                          // 160\n    }                                                                                                                  // 161\n    if (value == null) {                                                                                               // 162\n      node.removeAttribute(name);                                                                                      // 163\n    } else {                                                                                                           // 164\n      node.setAttribute(name, '' + value);                                                                             // 165\n    }                                                                                                                  // 166\n                                                                                                                       // 167\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 168\n      var payload = {};                                                                                                // 169\n      payload[name] = value;                                                                                           // 170\n      ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'update attribute', payload);\n    }                                                                                                                  // 172\n  },                                                                                                                   // 173\n                                                                                                                       // 174\n  /**                                                                                                                  // 175\n   * Deletes an attributes from a node.                                                                                // 176\n   *                                                                                                                   // 177\n   * @param {DOMElement} node                                                                                          // 178\n   * @param {string} name                                                                                              // 179\n   */                                                                                                                  // 180\n  deleteValueForAttribute: function (node, name) {                                                                     // 181\n    node.removeAttribute(name);                                                                                        // 182\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 183\n      ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'remove attribute', name);\n    }                                                                                                                  // 185\n  },                                                                                                                   // 186\n                                                                                                                       // 187\n  /**                                                                                                                  // 188\n   * Deletes the value for a property on a node.                                                                       // 189\n   *                                                                                                                   // 190\n   * @param {DOMElement} node                                                                                          // 191\n   * @param {string} name                                                                                              // 192\n   */                                                                                                                  // 193\n  deleteValueForProperty: function (node, name) {                                                                      // 194\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;              // 195\n    if (propertyInfo) {                                                                                                // 196\n      var mutationMethod = propertyInfo.mutationMethod;                                                                // 197\n      if (mutationMethod) {                                                                                            // 198\n        mutationMethod(node, undefined);                                                                               // 199\n      } else if (propertyInfo.mustUseProperty) {                                                                       // 200\n        var propName = propertyInfo.propertyName;                                                                      // 201\n        if (propertyInfo.hasBooleanValue) {                                                                            // 202\n          node[propName] = false;                                                                                      // 203\n        } else {                                                                                                       // 204\n          node[propName] = '';                                                                                         // 205\n        }                                                                                                              // 206\n      } else {                                                                                                         // 207\n        node.removeAttribute(propertyInfo.attributeName);                                                              // 208\n      }                                                                                                                // 209\n    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 210\n      node.removeAttribute(name);                                                                                      // 211\n    }                                                                                                                  // 212\n                                                                                                                       // 213\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 214\n      ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'remove attribute', name);\n    }                                                                                                                  // 216\n  }                                                                                                                    // 217\n                                                                                                                       // 218\n};                                                                                                                     // 219\n                                                                                                                       // 220\nmodule.exports = DOMPropertyOperations;                                                                                // 221\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"quoteAttributeValueForBrowser.js\":[\"./escapeTextContentForBrowser\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/quoteAttributeValueForBrowser.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule quoteAttributeValueForBrowser                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');                                            // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Escapes attribute value to prevent scripting attacks.                                                               // 17\n *                                                                                                                     // 18\n * @param {*} value Value to escape.                                                                                   // 19\n * @return {string} An escaped string.                                                                                 // 20\n */                                                                                                                    // 21\nfunction quoteAttributeValueForBrowser(value) {                                                                        // 22\n  return '\"' + escapeTextContentForBrowser(value) + '\"';                                                               // 23\n}                                                                                                                      // 24\n                                                                                                                       // 25\nmodule.exports = quoteAttributeValueForBrowser;                                                                        // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactBrowserEventEmitter.js\":[\"object-assign\",\"./EventConstants\",\"./EventPluginRegistry\",\"./ReactEventEmitterMixin\",\"./ViewportMetrics\",\"./getVendorPrefixedEventName\",\"./isEventSupported\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactBrowserEventEmitter.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactBrowserEventEmitter                                                                            // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar EventConstants = require('./EventConstants');                                                                      // 16\nvar EventPluginRegistry = require('./EventPluginRegistry');                                                            // 17\nvar ReactEventEmitterMixin = require('./ReactEventEmitterMixin');                                                      // 18\nvar ViewportMetrics = require('./ViewportMetrics');                                                                    // 19\n                                                                                                                       // 20\nvar getVendorPrefixedEventName = require('./getVendorPrefixedEventName');                                              // 21\nvar isEventSupported = require('./isEventSupported');                                                                  // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Summary of `ReactBrowserEventEmitter` event handling:                                                               // 25\n *                                                                                                                     // 26\n *  - Top-level delegation is used to trap most native browser events. This                                            // 27\n *    may only occur in the main thread and is the responsibility of                                                   // 28\n *    ReactEventListener, which is injected and can therefore support pluggable                                        // 29\n *    event sources. This is the only work that occurs in the main thread.                                             // 30\n *                                                                                                                     // 31\n *  - We normalize and de-duplicate events to account for browser quirks. This                                         // 32\n *    may be done in the worker thread.                                                                                // 33\n *                                                                                                                     // 34\n *  - Forward these native events (with the associated top-level type used to                                          // 35\n *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want                                        // 36\n *    to extract any synthetic events.                                                                                 // 37\n *                                                                                                                     // 38\n *  - The `EventPluginHub` will then process each event by annotating them with                                        // 39\n *    \"dispatches\", a sequence of listeners and IDs that care about that event.                                        // 40\n *                                                                                                                     // 41\n *  - The `EventPluginHub` then dispatches the events.                                                                 // 42\n *                                                                                                                     // 43\n * Overview of React and the event system:                                                                             // 44\n *                                                                                                                     // 45\n * +------------+    .                                                                                                 // 46\n * |    DOM     |    .                                                                                                 // 47\n * +------------+    .                                                                                                 // 48\n *       |           .                                                                                                 // 49\n *       v           .                                                                                                 // 50\n * +------------+    .                                                                                                 // 51\n * | ReactEvent |    .                                                                                                 // 52\n * |  Listener  |    .                                                                                                 // 53\n * +------------+    .                         +-----------+                                                           // 54\n *       |           .               +--------+|SimpleEvent|                                                           // 55\n *       |           .               |         |Plugin     |                                                           // 56\n * +-----|------+    .               v         +-----------+                                                           // 57\n * |     |      |    .    +--------------+                    +------------+                                           // 58\n * |     +-----------.--->|EventPluginHub|                    |    Event   |                                           // 59\n * |            |    .    |              |     +-----------+  | Propagators|                                           // 60\n * | ReactEvent |    .    |              |     |TapEvent   |  |------------|                                           // 61\n * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|                                           // 62\n * |            |    .    |              |     +-----------+  |  utilities |                                           // 63\n * |     +-----------.--->|              |                    +------------+                                           // 64\n * |     |      |    .    +--------------+                                                                             // 65\n * +-----|------+    .                ^        +-----------+                                                           // 66\n *       |           .                |        |Enter/Leave|                                                           // 67\n *       +           .                +-------+|Plugin     |                                                           // 68\n * +-------------+   .                         +-----------+                                                           // 69\n * | application |   .                                                                                                 // 70\n * |-------------|   .                                                                                                 // 71\n * |             |   .                                                                                                 // 72\n * |             |   .                                                                                                 // 73\n * +-------------+   .                                                                                                 // 74\n *                   .                                                                                                 // 75\n *    React Core     .  General Purpose Event Plugin System                                                            // 76\n */                                                                                                                    // 77\n                                                                                                                       // 78\nvar hasEventPageXY;                                                                                                    // 79\nvar alreadyListeningTo = {};                                                                                           // 80\nvar isMonitoringScrollValue = false;                                                                                   // 81\nvar reactTopListenersCounter = 0;                                                                                      // 82\n                                                                                                                       // 83\n// For events like 'submit' which don't consistently bubble (which we trap at a                                        // 84\n// lower node than `document`), binding at `document` would cause duplicate                                            // 85\n// events so we don't include them here                                                                                // 86\nvar topEventMapping = {                                                                                                // 87\n  topAbort: 'abort',                                                                                                   // 88\n  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',                                       // 89\n  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',                     // 90\n  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',                                 // 91\n  topBlur: 'blur',                                                                                                     // 92\n  topCanPlay: 'canplay',                                                                                               // 93\n  topCanPlayThrough: 'canplaythrough',                                                                                 // 94\n  topChange: 'change',                                                                                                 // 95\n  topClick: 'click',                                                                                                   // 96\n  topCompositionEnd: 'compositionend',                                                                                 // 97\n  topCompositionStart: 'compositionstart',                                                                             // 98\n  topCompositionUpdate: 'compositionupdate',                                                                           // 99\n  topContextMenu: 'contextmenu',                                                                                       // 100\n  topCopy: 'copy',                                                                                                     // 101\n  topCut: 'cut',                                                                                                       // 102\n  topDoubleClick: 'dblclick',                                                                                          // 103\n  topDrag: 'drag',                                                                                                     // 104\n  topDragEnd: 'dragend',                                                                                               // 105\n  topDragEnter: 'dragenter',                                                                                           // 106\n  topDragExit: 'dragexit',                                                                                             // 107\n  topDragLeave: 'dragleave',                                                                                           // 108\n  topDragOver: 'dragover',                                                                                             // 109\n  topDragStart: 'dragstart',                                                                                           // 110\n  topDrop: 'drop',                                                                                                     // 111\n  topDurationChange: 'durationchange',                                                                                 // 112\n  topEmptied: 'emptied',                                                                                               // 113\n  topEncrypted: 'encrypted',                                                                                           // 114\n  topEnded: 'ended',                                                                                                   // 115\n  topError: 'error',                                                                                                   // 116\n  topFocus: 'focus',                                                                                                   // 117\n  topInput: 'input',                                                                                                   // 118\n  topKeyDown: 'keydown',                                                                                               // 119\n  topKeyPress: 'keypress',                                                                                             // 120\n  topKeyUp: 'keyup',                                                                                                   // 121\n  topLoadedData: 'loadeddata',                                                                                         // 122\n  topLoadedMetadata: 'loadedmetadata',                                                                                 // 123\n  topLoadStart: 'loadstart',                                                                                           // 124\n  topMouseDown: 'mousedown',                                                                                           // 125\n  topMouseMove: 'mousemove',                                                                                           // 126\n  topMouseOut: 'mouseout',                                                                                             // 127\n  topMouseOver: 'mouseover',                                                                                           // 128\n  topMouseUp: 'mouseup',                                                                                               // 129\n  topPaste: 'paste',                                                                                                   // 130\n  topPause: 'pause',                                                                                                   // 131\n  topPlay: 'play',                                                                                                     // 132\n  topPlaying: 'playing',                                                                                               // 133\n  topProgress: 'progress',                                                                                             // 134\n  topRateChange: 'ratechange',                                                                                         // 135\n  topScroll: 'scroll',                                                                                                 // 136\n  topSeeked: 'seeked',                                                                                                 // 137\n  topSeeking: 'seeking',                                                                                               // 138\n  topSelectionChange: 'selectionchange',                                                                               // 139\n  topStalled: 'stalled',                                                                                               // 140\n  topSuspend: 'suspend',                                                                                               // 141\n  topTextInput: 'textInput',                                                                                           // 142\n  topTimeUpdate: 'timeupdate',                                                                                         // 143\n  topTouchCancel: 'touchcancel',                                                                                       // 144\n  topTouchEnd: 'touchend',                                                                                             // 145\n  topTouchMove: 'touchmove',                                                                                           // 146\n  topTouchStart: 'touchstart',                                                                                         // 147\n  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',                                    // 148\n  topVolumeChange: 'volumechange',                                                                                     // 149\n  topWaiting: 'waiting',                                                                                               // 150\n  topWheel: 'wheel'                                                                                                    // 151\n};                                                                                                                     // 152\n                                                                                                                       // 153\n/**                                                                                                                    // 154\n * To ensure no conflicts with other potential React instances on the page                                             // 155\n */                                                                                                                    // 156\nvar topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);                                          // 157\n                                                                                                                       // 158\nfunction getListeningForDocument(mountAt) {                                                                            // 159\n  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`                                              // 160\n  // directly.                                                                                                         // 161\n  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {                                             // 162\n    mountAt[topListenersIDKey] = reactTopListenersCounter++;                                                           // 163\n    alreadyListeningTo[mountAt[topListenersIDKey]] = {};                                                               // 164\n  }                                                                                                                    // 165\n  return alreadyListeningTo[mountAt[topListenersIDKey]];                                                               // 166\n}                                                                                                                      // 167\n                                                                                                                       // 168\n/**                                                                                                                    // 169\n * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For                                         // 170\n * example:                                                                                                            // 171\n *                                                                                                                     // 172\n *   EventPluginHub.putListener('myID', 'onClick', myFunction);                                                        // 173\n *                                                                                                                     // 174\n * This would allocate a \"registration\" of `('onClick', myFunction)` on 'myID'.                                        // 175\n *                                                                                                                     // 176\n * @internal                                                                                                           // 177\n */                                                                                                                    // 178\nvar ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {                                                   // 179\n                                                                                                                       // 180\n  /**                                                                                                                  // 181\n   * Injectable event backend                                                                                          // 182\n   */                                                                                                                  // 183\n  ReactEventListener: null,                                                                                            // 184\n                                                                                                                       // 185\n  injection: {                                                                                                         // 186\n    /**                                                                                                                // 187\n     * @param {object} ReactEventListener                                                                              // 188\n     */                                                                                                                // 189\n    injectReactEventListener: function (ReactEventListener) {                                                          // 190\n      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);                                   // 191\n      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;                                                // 192\n    }                                                                                                                  // 193\n  },                                                                                                                   // 194\n                                                                                                                       // 195\n  /**                                                                                                                  // 196\n   * Sets whether or not any created callbacks should be enabled.                                                      // 197\n   *                                                                                                                   // 198\n   * @param {boolean} enabled True if callbacks should be enabled.                                                     // 199\n   */                                                                                                                  // 200\n  setEnabled: function (enabled) {                                                                                     // 201\n    if (ReactBrowserEventEmitter.ReactEventListener) {                                                                 // 202\n      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);                                                 // 203\n    }                                                                                                                  // 204\n  },                                                                                                                   // 205\n                                                                                                                       // 206\n  /**                                                                                                                  // 207\n   * @return {boolean} True if callbacks are enabled.                                                                  // 208\n   */                                                                                                                  // 209\n  isEnabled: function () {                                                                                             // 210\n    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());\n  },                                                                                                                   // 212\n                                                                                                                       // 213\n  /**                                                                                                                  // 214\n   * We listen for bubbled touch events on the document object.                                                        // 215\n   *                                                                                                                   // 216\n   * Firefox v8.01 (and possibly others) exhibited strange behavior when                                               // 217\n   * mounting `onmousemove` events at some node that was not the document                                              // 218\n   * element. The symptoms were that if your mouse is not moving over something                                        // 219\n   * contained within that mount point (for example on the background) the                                             // 220\n   * top-level listeners for `onmousemove` won't be called. However, if you                                            // 221\n   * register the `mousemove` on the document object, then it will of course                                           // 222\n   * catch all `mousemove`s. This along with iOS quirks, justifies restricting                                         // 223\n   * top-level listeners to the document object only, at least for these                                               // 224\n   * movement types of events and possibly all events.                                                                 // 225\n   *                                                                                                                   // 226\n   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html                                         // 227\n   *                                                                                                                   // 228\n   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but                                         // 229\n   * they bubble to document.                                                                                          // 230\n   *                                                                                                                   // 231\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 232\n   * @param {object} contentDocumentHandle Document which owns the container                                           // 233\n   */                                                                                                                  // 234\n  listenTo: function (registrationName, contentDocumentHandle) {                                                       // 235\n    var mountAt = contentDocumentHandle;                                                                               // 236\n    var isListening = getListeningForDocument(mountAt);                                                                // 237\n    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];                             // 238\n                                                                                                                       // 239\n    var topLevelTypes = EventConstants.topLevelTypes;                                                                  // 240\n    for (var i = 0; i < dependencies.length; i++) {                                                                    // 241\n      var dependency = dependencies[i];                                                                                // 242\n      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {                                      // 243\n        if (dependency === topLevelTypes.topWheel) {                                                                   // 244\n          if (isEventSupported('wheel')) {                                                                             // 245\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);    // 246\n          } else if (isEventSupported('mousewheel')) {                                                                 // 247\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);\n          } else {                                                                                                     // 249\n            // Firefox needs to capture a different mouse scroll event.                                                // 250\n            // @see http://www.quirksmode.org/dom/events/tests/scroll.html                                             // 251\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);\n          }                                                                                                            // 253\n        } else if (dependency === topLevelTypes.topScroll) {                                                           // 254\n                                                                                                                       // 255\n          if (isEventSupported('scroll', true)) {                                                                      // 256\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);\n          } else {                                                                                                     // 258\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);\n          }                                                                                                            // 260\n        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {                    // 261\n                                                                                                                       // 262\n          if (isEventSupported('focus', true)) {                                                                       // 263\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);   // 264\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);     // 265\n          } else if (isEventSupported('focusin')) {                                                                    // 266\n            // IE has `focusin` and `focusout` events which bubble.                                                    // 267\n            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html                                // 268\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);  // 269\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);  // 270\n          }                                                                                                            // 271\n                                                                                                                       // 272\n          // to make sure blur and focus event listeners are only attached once                                        // 273\n          isListening[topLevelTypes.topBlur] = true;                                                                   // 274\n          isListening[topLevelTypes.topFocus] = true;                                                                  // 275\n        } else if (topEventMapping.hasOwnProperty(dependency)) {                                                       // 276\n          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);\n        }                                                                                                              // 278\n                                                                                                                       // 279\n        isListening[dependency] = true;                                                                                // 280\n      }                                                                                                                // 281\n    }                                                                                                                  // 282\n  },                                                                                                                   // 283\n                                                                                                                       // 284\n  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {                                                 // 285\n    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);        // 286\n  },                                                                                                                   // 287\n                                                                                                                       // 288\n  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {                                                // 289\n    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);       // 290\n  },                                                                                                                   // 291\n                                                                                                                       // 292\n  /**                                                                                                                  // 293\n   * Protect against document.createEvent() returning null                                                             // 294\n   * Some popup blocker extensions appear to do this:                                                                  // 295\n   * https://github.com/facebook/react/issues/6887                                                                     // 296\n   */                                                                                                                  // 297\n  supportsEventPageXY: function () {                                                                                   // 298\n    if (!document.createEvent) {                                                                                       // 299\n      return false;                                                                                                    // 300\n    }                                                                                                                  // 301\n    var ev = document.createEvent('MouseEvent');                                                                       // 302\n    return ev != null && 'pageX' in ev;                                                                                // 303\n  },                                                                                                                   // 304\n                                                                                                                       // 305\n  /**                                                                                                                  // 306\n   * Listens to window scroll and resize events. We cache scroll values so that                                        // 307\n   * application code can access them without triggering reflows.                                                      // 308\n   *                                                                                                                   // 309\n   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when                                           // 310\n   * pageX/pageY isn't supported (legacy browsers).                                                                    // 311\n   *                                                                                                                   // 312\n   * NOTE: Scroll events do not bubble.                                                                                // 313\n   *                                                                                                                   // 314\n   * @see http://www.quirksmode.org/dom/events/scroll.html                                                             // 315\n   */                                                                                                                  // 316\n  ensureScrollValueMonitoring: function () {                                                                           // 317\n    if (hasEventPageXY === undefined) {                                                                                // 318\n      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();                                                 // 319\n    }                                                                                                                  // 320\n    if (!hasEventPageXY && !isMonitoringScrollValue) {                                                                 // 321\n      var refresh = ViewportMetrics.refreshScrollValues;                                                               // 322\n      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);                                         // 323\n      isMonitoringScrollValue = true;                                                                                  // 324\n    }                                                                                                                  // 325\n  }                                                                                                                    // 326\n                                                                                                                       // 327\n});                                                                                                                    // 328\n                                                                                                                       // 329\nmodule.exports = ReactBrowserEventEmitter;                                                                             // 330\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactEventEmitterMixin.js\":[\"./EventPluginHub\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactEventEmitterMixin.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactEventEmitterMixin                                                                              // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar EventPluginHub = require('./EventPluginHub');                                                                      // 14\n                                                                                                                       // 15\nfunction runEventQueueInBatch(events) {                                                                                // 16\n  EventPluginHub.enqueueEvents(events);                                                                                // 17\n  EventPluginHub.processEventQueue(false);                                                                             // 18\n}                                                                                                                      // 19\n                                                                                                                       // 20\nvar ReactEventEmitterMixin = {                                                                                         // 21\n                                                                                                                       // 22\n  /**                                                                                                                  // 23\n   * Streams a fired top-level event to `EventPluginHub` where plugins have the                                        // 24\n   * opportunity to create `ReactEvent`s to be dispatched.                                                             // 25\n   */                                                                                                                  // 26\n  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                // 27\n    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);               // 28\n    runEventQueueInBatch(events);                                                                                      // 29\n  }                                                                                                                    // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\nmodule.exports = ReactEventEmitterMixin;                                                                               // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getVendorPrefixedEventName.js\":[\"fbjs/lib/ExecutionEnvironment\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getVendorPrefixedEventName.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getVendorPrefixedEventName                                                                          // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Generate a mapping of standard vendor prefixes using the defined style property and event name.                     // 17\n *                                                                                                                     // 18\n * @param {string} styleProp                                                                                           // 19\n * @param {string} eventName                                                                                           // 20\n * @returns {object}                                                                                                   // 21\n */                                                                                                                    // 22\nfunction makePrefixMap(styleProp, eventName) {                                                                         // 23\n  var prefixes = {};                                                                                                   // 24\n                                                                                                                       // 25\n  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();                                                         // 26\n  prefixes['Webkit' + styleProp] = 'webkit' + eventName;                                                               // 27\n  prefixes['Moz' + styleProp] = 'moz' + eventName;                                                                     // 28\n  prefixes['ms' + styleProp] = 'MS' + eventName;                                                                       // 29\n  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();                                                           // 30\n                                                                                                                       // 31\n  return prefixes;                                                                                                     // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\n/**                                                                                                                    // 35\n * A list of event names to a configurable list of vendor prefixes.                                                    // 36\n */                                                                                                                    // 37\nvar vendorPrefixes = {                                                                                                 // 38\n  animationend: makePrefixMap('Animation', 'AnimationEnd'),                                                            // 39\n  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),                                                // 40\n  animationstart: makePrefixMap('Animation', 'AnimationStart'),                                                        // 41\n  transitionend: makePrefixMap('Transition', 'TransitionEnd')                                                          // 42\n};                                                                                                                     // 43\n                                                                                                                       // 44\n/**                                                                                                                    // 45\n * Event names that have already been detected and prefixed (if applicable).                                           // 46\n */                                                                                                                    // 47\nvar prefixedEventNames = {};                                                                                           // 48\n                                                                                                                       // 49\n/**                                                                                                                    // 50\n * Element to check for prefixes on.                                                                                   // 51\n */                                                                                                                    // 52\nvar style = {};                                                                                                        // 53\n                                                                                                                       // 54\n/**                                                                                                                    // 55\n * Bootstrap if a DOM exists.                                                                                          // 56\n */                                                                                                                    // 57\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 58\n  style = document.createElement('div').style;                                                                         // 59\n                                                                                                                       // 60\n  // On some platforms, in particular some releases of Android 4.x,                                                    // 61\n  // the un-prefixed \"animation\" and \"transition\" properties are defined on the                                        // 62\n  // style object but the events that fire will still be prefixed, so we need                                          // 63\n  // to check if the un-prefixed events are usable, and if not remove them from the map.                               // 64\n  if (!('AnimationEvent' in window)) {                                                                                 // 65\n    delete vendorPrefixes.animationend.animation;                                                                      // 66\n    delete vendorPrefixes.animationiteration.animation;                                                                // 67\n    delete vendorPrefixes.animationstart.animation;                                                                    // 68\n  }                                                                                                                    // 69\n                                                                                                                       // 70\n  // Same as above                                                                                                     // 71\n  if (!('TransitionEvent' in window)) {                                                                                // 72\n    delete vendorPrefixes.transitionend.transition;                                                                    // 73\n  }                                                                                                                    // 74\n}                                                                                                                      // 75\n                                                                                                                       // 76\n/**                                                                                                                    // 77\n * Attempts to determine the correct vendor prefixed event name.                                                       // 78\n *                                                                                                                     // 79\n * @param {string} eventName                                                                                           // 80\n * @returns {string}                                                                                                   // 81\n */                                                                                                                    // 82\nfunction getVendorPrefixedEventName(eventName) {                                                                       // 83\n  if (prefixedEventNames[eventName]) {                                                                                 // 84\n    return prefixedEventNames[eventName];                                                                              // 85\n  } else if (!vendorPrefixes[eventName]) {                                                                             // 86\n    return eventName;                                                                                                  // 87\n  }                                                                                                                    // 88\n                                                                                                                       // 89\n  var prefixMap = vendorPrefixes[eventName];                                                                           // 90\n                                                                                                                       // 91\n  for (var styleProp in prefixMap) {                                                                                   // 92\n    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {                                                   // 93\n      return prefixedEventNames[eventName] = prefixMap[styleProp];                                                     // 94\n    }                                                                                                                  // 95\n  }                                                                                                                    // 96\n                                                                                                                       // 97\n  return '';                                                                                                           // 98\n}                                                                                                                      // 99\n                                                                                                                       // 100\nmodule.exports = getVendorPrefixedEventName;                                                                           // 101\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMButton.js\":[\"./DisabledInputUtils\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMButton.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMButton                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar DisabledInputUtils = require('./DisabledInputUtils');                                                              // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Implements a <button> host component that does not receive mouse events                                             // 17\n * when `disabled` is set.                                                                                             // 18\n */                                                                                                                    // 19\nvar ReactDOMButton = {                                                                                                 // 20\n  getHostProps: DisabledInputUtils.getHostProps                                                                        // 21\n};                                                                                                                     // 22\n                                                                                                                       // 23\nmodule.exports = ReactDOMButton;                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"DisabledInputUtils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/DisabledInputUtils.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule DisabledInputUtils                                                                                  // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar disableableMouseListenerNames = {                                                                                  // 14\n  onClick: true,                                                                                                       // 15\n  onDoubleClick: true,                                                                                                 // 16\n  onMouseDown: true,                                                                                                   // 17\n  onMouseMove: true,                                                                                                   // 18\n  onMouseUp: true,                                                                                                     // 19\n                                                                                                                       // 20\n  onClickCapture: true,                                                                                                // 21\n  onDoubleClickCapture: true,                                                                                          // 22\n  onMouseDownCapture: true,                                                                                            // 23\n  onMouseMoveCapture: true,                                                                                            // 24\n  onMouseUpCapture: true                                                                                               // 25\n};                                                                                                                     // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Implements a host component that does not receive mouse events                                                      // 29\n * when `disabled` is set.                                                                                             // 30\n */                                                                                                                    // 31\nvar DisabledInputUtils = {                                                                                             // 32\n  getHostProps: function (inst, props) {                                                                               // 33\n    if (!props.disabled) {                                                                                             // 34\n      return props;                                                                                                    // 35\n    }                                                                                                                  // 36\n                                                                                                                       // 37\n    // Copy the props, except the mouse listeners                                                                      // 38\n    var hostProps = {};                                                                                                // 39\n    for (var key in props) {                                                                                           // 40\n      if (!disableableMouseListenerNames[key] && props.hasOwnProperty(key)) {                                          // 41\n        hostProps[key] = props[key];                                                                                   // 42\n      }                                                                                                                // 43\n    }                                                                                                                  // 44\n                                                                                                                       // 45\n    return hostProps;                                                                                                  // 46\n  }                                                                                                                    // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\nmodule.exports = DisabledInputUtils;                                                                                   // 50\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMInput.js\":[\"./reactProdInvariant\",\"object-assign\",\"./DisabledInputUtils\",\"./DOMPropertyOperations\",\"./LinkedValueUtils\",\"./ReactDOMComponentTree\",\"./ReactUpdates\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMInput.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMInput                                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 14\n    _assign = require('object-assign');                                                                                // 15\n                                                                                                                       // 16\nvar DisabledInputUtils = require('./DisabledInputUtils');                                                              // 17\nvar DOMPropertyOperations = require('./DOMPropertyOperations');                                                        // 18\nvar LinkedValueUtils = require('./LinkedValueUtils');                                                                  // 19\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 20\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 21\n                                                                                                                       // 22\nvar invariant = require('fbjs/lib/invariant');                                                                         // 23\nvar warning = require('fbjs/lib/warning');                                                                             // 24\n                                                                                                                       // 25\nvar didWarnValueLink = false;                                                                                          // 26\nvar didWarnCheckedLink = false;                                                                                        // 27\nvar didWarnValueDefaultValue = false;                                                                                  // 28\nvar didWarnCheckedDefaultChecked = false;                                                                              // 29\nvar didWarnControlledToUncontrolled = false;                                                                           // 30\nvar didWarnUncontrolledToControlled = false;                                                                           // 31\n                                                                                                                       // 32\nfunction forceUpdateIfMounted() {                                                                                      // 33\n  if (this._rootNodeID) {                                                                                              // 34\n    // DOM component is still mounted; update                                                                          // 35\n    ReactDOMInput.updateWrapper(this);                                                                                 // 36\n  }                                                                                                                    // 37\n}                                                                                                                      // 38\n                                                                                                                       // 39\nfunction isControlled(props) {                                                                                         // 40\n  var usesChecked = props.type === 'checkbox' || props.type === 'radio';                                               // 41\n  return usesChecked ? props.checked != null : props.value != null;                                                    // 42\n}                                                                                                                      // 43\n                                                                                                                       // 44\n/**                                                                                                                    // 45\n * Implements an <input> host component that allows setting these optional                                             // 46\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.                                                    // 47\n *                                                                                                                     // 48\n * If `checked` or `value` are not supplied (or null/undefined), user actions                                          // 49\n * that affect the checked state or value will trigger updates to the element.                                         // 50\n *                                                                                                                     // 51\n * If they are supplied (and not null/undefined), the rendered element will not                                        // 52\n * trigger updates to the element. Instead, the props must change in order for                                         // 53\n * the rendered element to be updated.                                                                                 // 54\n *                                                                                                                     // 55\n * The rendered element will be initialized as unchecked (or `defaultChecked`)                                         // 56\n * with an empty value (or `defaultValue`).                                                                            // 57\n *                                                                                                                     // 58\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html                                             // 59\n */                                                                                                                    // 60\nvar ReactDOMInput = {                                                                                                  // 61\n  getHostProps: function (inst, props) {                                                                               // 62\n    var value = LinkedValueUtils.getValue(props);                                                                      // 63\n    var checked = LinkedValueUtils.getChecked(props);                                                                  // 64\n                                                                                                                       // 65\n    var hostProps = _assign({                                                                                          // 66\n      // Make sure we set .type before any other properties (setting .value                                            // 67\n      // before .type means .value is lost in IE11 and below)                                                          // 68\n      type: undefined,                                                                                                 // 69\n      // Make sure we set .step before .value (setting .value before .step                                             // 70\n      // means .value is rounded on mount, based upon step precision)                                                  // 71\n      step: undefined,                                                                                                 // 72\n      // Make sure we set .min & .max before .value (to ensure proper order                                            // 73\n      // in corner cases such as min or max deriving from value, e.g. Issue #7170)                                     // 74\n      min: undefined,                                                                                                  // 75\n      max: undefined                                                                                                   // 76\n    }, DisabledInputUtils.getHostProps(inst, props), {                                                                 // 77\n      defaultChecked: undefined,                                                                                       // 78\n      defaultValue: undefined,                                                                                         // 79\n      value: value != null ? value : inst._wrapperState.initialValue,                                                  // 80\n      checked: checked != null ? checked : inst._wrapperState.initialChecked,                                          // 81\n      onChange: inst._wrapperState.onChange                                                                            // 82\n    });                                                                                                                // 83\n                                                                                                                       // 84\n    return hostProps;                                                                                                  // 85\n  },                                                                                                                   // 86\n                                                                                                                       // 87\n  mountWrapper: function (inst, props) {                                                                               // 88\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 89\n      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);                                    // 90\n                                                                                                                       // 91\n      var owner = inst._currentElement._owner;                                                                         // 92\n                                                                                                                       // 93\n      if (props.valueLink !== undefined && !didWarnValueLink) {                                                        // 94\n        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnValueLink = true;                                                                                       // 96\n      }                                                                                                                // 97\n      if (props.checkedLink !== undefined && !didWarnCheckedLink) {                                                    // 98\n        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnCheckedLink = true;                                                                                     // 100\n      }                                                                                                                // 101\n      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {        // 102\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnCheckedDefaultChecked = true;                                                                           // 104\n      }                                                                                                                // 105\n      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {                // 106\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnValueDefaultValue = true;                                                                               // 108\n      }                                                                                                                // 109\n    }                                                                                                                  // 110\n                                                                                                                       // 111\n    var defaultValue = props.defaultValue;                                                                             // 112\n    inst._wrapperState = {                                                                                             // 113\n      initialChecked: props.checked != null ? props.checked : props.defaultChecked,                                    // 114\n      initialValue: props.value != null ? props.value : defaultValue,                                                  // 115\n      listeners: null,                                                                                                 // 116\n      onChange: _handleChange.bind(inst)                                                                               // 117\n    };                                                                                                                 // 118\n                                                                                                                       // 119\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 120\n      inst._wrapperState.controlled = isControlled(props);                                                             // 121\n    }                                                                                                                  // 122\n  },                                                                                                                   // 123\n                                                                                                                       // 124\n  updateWrapper: function (inst) {                                                                                     // 125\n    var props = inst._currentElement.props;                                                                            // 126\n                                                                                                                       // 127\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 128\n      var controlled = isControlled(props);                                                                            // 129\n      var owner = inst._currentElement._owner;                                                                         // 130\n                                                                                                                       // 131\n      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {                          // 132\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnUncontrolledToControlled = true;                                                                        // 134\n      }                                                                                                                // 135\n      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {                          // 136\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnControlledToUncontrolled = true;                                                                        // 138\n      }                                                                                                                // 139\n    }                                                                                                                  // 140\n                                                                                                                       // 141\n    // TODO: Shouldn't this be getChecked(props)?                                                                      // 142\n    var checked = props.checked;                                                                                       // 143\n    if (checked != null) {                                                                                             // 144\n      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);\n    }                                                                                                                  // 146\n                                                                                                                       // 147\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                        // 148\n    var value = LinkedValueUtils.getValue(props);                                                                      // 149\n    if (value != null) {                                                                                               // 150\n                                                                                                                       // 151\n      // Cast `value` to a string to ensure the value is set correctly. While                                          // 152\n      // browsers typically do this as necessary, jsdom doesn't.                                                       // 153\n      var newValue = '' + value;                                                                                       // 154\n                                                                                                                       // 155\n      // To avoid side effects (such as losing text selection), only set value if changed                              // 156\n      if (newValue !== node.value) {                                                                                   // 157\n        node.value = newValue;                                                                                         // 158\n      }                                                                                                                // 159\n    } else {                                                                                                           // 160\n      if (props.value == null && props.defaultValue != null) {                                                         // 161\n        node.defaultValue = '' + props.defaultValue;                                                                   // 162\n      }                                                                                                                // 163\n      if (props.checked == null && props.defaultChecked != null) {                                                     // 164\n        node.defaultChecked = !!props.defaultChecked;                                                                  // 165\n      }                                                                                                                // 166\n    }                                                                                                                  // 167\n  },                                                                                                                   // 168\n                                                                                                                       // 169\n  postMountWrapper: function (inst) {                                                                                  // 170\n    var props = inst._currentElement.props;                                                                            // 171\n                                                                                                                       // 172\n    // This is in postMount because we need access to the DOM node, which is not                                       // 173\n    // available until after the component has mounted.                                                                // 174\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                        // 175\n                                                                                                                       // 176\n    // Detach value from defaultValue. We won't do anything if we're working on                                        // 177\n    // submit or reset inputs as those values & defaultValues are linked. They                                         // 178\n    // are not resetable nodes so this operation doesn't matter and actually                                           // 179\n    // removes browser-default values (eg \"Submit Query\") when no value is                                             // 180\n    // provided.                                                                                                       // 181\n                                                                                                                       // 182\n    switch (props.type) {                                                                                              // 183\n      case 'submit':                                                                                                   // 184\n      case 'reset':                                                                                                    // 185\n        break;                                                                                                         // 186\n      case 'color':                                                                                                    // 187\n      case 'date':                                                                                                     // 188\n      case 'datetime':                                                                                                 // 189\n      case 'datetime-local':                                                                                           // 190\n      case 'month':                                                                                                    // 191\n      case 'time':                                                                                                     // 192\n      case 'week':                                                                                                     // 193\n        // This fixes the no-show issue on iOS Safari and Android Chrome:                                              // 194\n        // https://github.com/facebook/react/issues/7233                                                               // 195\n        node.value = '';                                                                                               // 196\n        node.value = node.defaultValue;                                                                                // 197\n        break;                                                                                                         // 198\n      default:                                                                                                         // 199\n        node.value = node.value;                                                                                       // 200\n        break;                                                                                                         // 201\n    }                                                                                                                  // 202\n                                                                                                                       // 203\n    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug                          // 204\n    // this is needed to work around a chrome bug where setting defaultChecked                                         // 205\n    // will sometimes influence the value of checked (even after detachment).                                          // 206\n    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416                                         // 207\n    // We need to temporarily unset name to avoid disrupting radio button groups.                                      // 208\n    var name = node.name;                                                                                              // 209\n    if (name !== '') {                                                                                                 // 210\n      node.name = '';                                                                                                  // 211\n    }                                                                                                                  // 212\n    node.defaultChecked = !node.defaultChecked;                                                                        // 213\n    node.defaultChecked = !node.defaultChecked;                                                                        // 214\n    if (name !== '') {                                                                                                 // 215\n      node.name = name;                                                                                                // 216\n    }                                                                                                                  // 217\n  }                                                                                                                    // 218\n};                                                                                                                     // 219\n                                                                                                                       // 220\nfunction _handleChange(event) {                                                                                        // 221\n  var props = this._currentElement.props;                                                                              // 222\n                                                                                                                       // 223\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);                                                    // 224\n                                                                                                                       // 225\n  // Here we use asap to wait until all updates have propagated, which                                                 // 226\n  // is important when using controlled components within layers:                                                      // 227\n  // https://github.com/facebook/react/issues/1698                                                                     // 228\n  ReactUpdates.asap(forceUpdateIfMounted, this);                                                                       // 229\n                                                                                                                       // 230\n  var name = props.name;                                                                                               // 231\n  if (props.type === 'radio' && name != null) {                                                                        // 232\n    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);                                                    // 233\n    var queryRoot = rootNode;                                                                                          // 234\n                                                                                                                       // 235\n    while (queryRoot.parentNode) {                                                                                     // 236\n      queryRoot = queryRoot.parentNode;                                                                                // 237\n    }                                                                                                                  // 238\n                                                                                                                       // 239\n    // If `rootNode.form` was non-null, then we could try `form.elements`,                                             // 240\n    // but that sometimes behaves strangely in IE8. We could also try using                                            // 241\n    // `form.getElementsByName`, but that will only return direct children                                             // 242\n    // and won't include inputs that use the HTML5 `form=` attribute. Since                                            // 243\n    // the input might not even be in a form, let's just use the global                                                // 244\n    // `querySelectorAll` to ensure we don't miss anything.                                                            // 245\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');             // 246\n                                                                                                                       // 247\n    for (var i = 0; i < group.length; i++) {                                                                           // 248\n      var otherNode = group[i];                                                                                        // 249\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {                                                // 250\n        continue;                                                                                                      // 251\n      }                                                                                                                // 252\n      // This will throw if radio buttons rendered by different copies of React                                        // 253\n      // and the same name are rendered into the same form (same as #1939).                                            // 254\n      // That's probably okay; we don't support it just as we don't support                                            // 255\n      // mixing React radio buttons with non-React ones.                                                               // 256\n      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);                                        // 257\n      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;\n      // If this is a controlled radio button group, forcing the input that                                            // 259\n      // was previously checked to update will cause it to be come re-checked                                          // 260\n      // as appropriate.                                                                                               // 261\n      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);                                                          // 262\n    }                                                                                                                  // 263\n  }                                                                                                                    // 264\n                                                                                                                       // 265\n  return returnValue;                                                                                                  // 266\n}                                                                                                                      // 267\n                                                                                                                       // 268\nmodule.exports = ReactDOMInput;                                                                                        // 269\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"LinkedValueUtils.js\":[\"./reactProdInvariant\",\"./ReactPropTypes\",\"./ReactPropTypeLocations\",\"./ReactPropTypesSecret\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/LinkedValueUtils.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule LinkedValueUtils                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar ReactPropTypes = require('./ReactPropTypes');                                                                      // 16\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');                                                      // 17\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');                                                          // 18\n                                                                                                                       // 19\nvar invariant = require('fbjs/lib/invariant');                                                                         // 20\nvar warning = require('fbjs/lib/warning');                                                                             // 21\n                                                                                                                       // 22\nvar hasReadOnlyValue = {                                                                                               // 23\n  'button': true,                                                                                                      // 24\n  'checkbox': true,                                                                                                    // 25\n  'image': true,                                                                                                       // 26\n  'hidden': true,                                                                                                      // 27\n  'radio': true,                                                                                                       // 28\n  'reset': true,                                                                                                       // 29\n  'submit': true                                                                                                       // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\nfunction _assertSingleLink(inputProps) {                                                                               // 33\n  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;\n}                                                                                                                      // 35\nfunction _assertValueLink(inputProps) {                                                                                // 36\n  _assertSingleLink(inputProps);                                                                                       // 37\n  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\\'t want to use valueLink.') : _prodInvariant('88') : void 0;\n}                                                                                                                      // 39\n                                                                                                                       // 40\nfunction _assertCheckedLink(inputProps) {                                                                              // 41\n  _assertSingleLink(inputProps);                                                                                       // 42\n  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\\'t want to use checkedLink') : _prodInvariant('89') : void 0;\n}                                                                                                                      // 44\n                                                                                                                       // 45\nvar propTypes = {                                                                                                      // 46\n  value: function (props, propName, componentName) {                                                                   // 47\n    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {      // 48\n      return null;                                                                                                     // 49\n    }                                                                                                                  // 50\n    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n  },                                                                                                                   // 52\n  checked: function (props, propName, componentName) {                                                                 // 53\n    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {                                      // 54\n      return null;                                                                                                     // 55\n    }                                                                                                                  // 56\n    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n  },                                                                                                                   // 58\n  onChange: ReactPropTypes.func                                                                                        // 59\n};                                                                                                                     // 60\n                                                                                                                       // 61\nvar loggedTypeFailures = {};                                                                                           // 62\nfunction getDeclarationErrorAddendum(owner) {                                                                          // 63\n  if (owner) {                                                                                                         // 64\n    var name = owner.getName();                                                                                        // 65\n    if (name) {                                                                                                        // 66\n      return ' Check the render method of `' + name + '`.';                                                            // 67\n    }                                                                                                                  // 68\n  }                                                                                                                    // 69\n  return '';                                                                                                           // 70\n}                                                                                                                      // 71\n                                                                                                                       // 72\n/**                                                                                                                    // 73\n * Provide a linked `value` attribute for controlled forms. You should not use                                         // 74\n * this outside of the ReactDOM controlled form components.                                                            // 75\n */                                                                                                                    // 76\nvar LinkedValueUtils = {                                                                                               // 77\n  checkPropTypes: function (tagName, props, owner) {                                                                   // 78\n    for (var propName in propTypes) {                                                                                  // 79\n      if (propTypes.hasOwnProperty(propName)) {                                                                        // 80\n        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop, null, ReactPropTypesSecret);\n      }                                                                                                                // 82\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {                                          // 83\n        // Only monitor this failure once because there tends to be a lot of the                                       // 84\n        // same error.                                                                                                 // 85\n        loggedTypeFailures[error.message] = true;                                                                      // 86\n                                                                                                                       // 87\n        var addendum = getDeclarationErrorAddendum(owner);                                                             // 88\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;\n      }                                                                                                                // 90\n    }                                                                                                                  // 91\n  },                                                                                                                   // 92\n                                                                                                                       // 93\n  /**                                                                                                                  // 94\n   * @param {object} inputProps Props for form component                                                               // 95\n   * @return {*} current value of the input either from value prop or link.                                            // 96\n   */                                                                                                                  // 97\n  getValue: function (inputProps) {                                                                                    // 98\n    if (inputProps.valueLink) {                                                                                        // 99\n      _assertValueLink(inputProps);                                                                                    // 100\n      return inputProps.valueLink.value;                                                                               // 101\n    }                                                                                                                  // 102\n    return inputProps.value;                                                                                           // 103\n  },                                                                                                                   // 104\n                                                                                                                       // 105\n  /**                                                                                                                  // 106\n   * @param {object} inputProps Props for form component                                                               // 107\n   * @return {*} current checked status of the input either from checked prop                                          // 108\n   *             or link.                                                                                              // 109\n   */                                                                                                                  // 110\n  getChecked: function (inputProps) {                                                                                  // 111\n    if (inputProps.checkedLink) {                                                                                      // 112\n      _assertCheckedLink(inputProps);                                                                                  // 113\n      return inputProps.checkedLink.value;                                                                             // 114\n    }                                                                                                                  // 115\n    return inputProps.checked;                                                                                         // 116\n  },                                                                                                                   // 117\n                                                                                                                       // 118\n  /**                                                                                                                  // 119\n   * @param {object} inputProps Props for form component                                                               // 120\n   * @param {SyntheticEvent} event change event to handle                                                              // 121\n   */                                                                                                                  // 122\n  executeOnChange: function (inputProps, event) {                                                                      // 123\n    if (inputProps.valueLink) {                                                                                        // 124\n      _assertValueLink(inputProps);                                                                                    // 125\n      return inputProps.valueLink.requestChange(event.target.value);                                                   // 126\n    } else if (inputProps.checkedLink) {                                                                               // 127\n      _assertCheckedLink(inputProps);                                                                                  // 128\n      return inputProps.checkedLink.requestChange(event.target.checked);                                               // 129\n    } else if (inputProps.onChange) {                                                                                  // 130\n      return inputProps.onChange.call(undefined, event);                                                               // 131\n    }                                                                                                                  // 132\n  }                                                                                                                    // 133\n};                                                                                                                     // 134\n                                                                                                                       // 135\nmodule.exports = LinkedValueUtils;                                                                                     // 136\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMOption.js\":[\"object-assign\",\"./ReactChildren\",\"./ReactDOMComponentTree\",\"./ReactDOMSelect\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMOption.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMOption                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar ReactChildren = require('./ReactChildren');                                                                        // 16\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 17\nvar ReactDOMSelect = require('./ReactDOMSelect');                                                                      // 18\n                                                                                                                       // 19\nvar warning = require('fbjs/lib/warning');                                                                             // 20\nvar didWarnInvalidOptionChildren = false;                                                                              // 21\n                                                                                                                       // 22\nfunction flattenChildren(children) {                                                                                   // 23\n  var content = '';                                                                                                    // 24\n                                                                                                                       // 25\n  // Flatten children and warn if they aren't strings or numbers;                                                      // 26\n  // invalid types are ignored.                                                                                        // 27\n  ReactChildren.forEach(children, function (child) {                                                                   // 28\n    if (child == null) {                                                                                               // 29\n      return;                                                                                                          // 30\n    }                                                                                                                  // 31\n    if (typeof child === 'string' || typeof child === 'number') {                                                      // 32\n      content += child;                                                                                                // 33\n    } else if (!didWarnInvalidOptionChildren) {                                                                        // 34\n      didWarnInvalidOptionChildren = true;                                                                             // 35\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;\n    }                                                                                                                  // 37\n  });                                                                                                                  // 38\n                                                                                                                       // 39\n  return content;                                                                                                      // 40\n}                                                                                                                      // 41\n                                                                                                                       // 42\n/**                                                                                                                    // 43\n * Implements an <option> host component that warns when `selected` is set.                                            // 44\n */                                                                                                                    // 45\nvar ReactDOMOption = {                                                                                                 // 46\n  mountWrapper: function (inst, props, hostParent) {                                                                   // 47\n    // TODO (yungsters): Remove support for `selected` in <option>.                                                    // 48\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 49\n      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;\n    }                                                                                                                  // 51\n                                                                                                                       // 52\n    // Look up whether this option is 'selected'                                                                       // 53\n    var selectValue = null;                                                                                            // 54\n    if (hostParent != null) {                                                                                          // 55\n      var selectParent = hostParent;                                                                                   // 56\n                                                                                                                       // 57\n      if (selectParent._tag === 'optgroup') {                                                                          // 58\n        selectParent = selectParent._hostParent;                                                                       // 59\n      }                                                                                                                // 60\n                                                                                                                       // 61\n      if (selectParent != null && selectParent._tag === 'select') {                                                    // 62\n        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);                                              // 63\n      }                                                                                                                // 64\n    }                                                                                                                  // 65\n                                                                                                                       // 66\n    // If the value is null (e.g., no specified value or after initial mount)                                          // 67\n    // or missing (e.g., for <datalist>), we don't change props.selected                                               // 68\n    var selected = null;                                                                                               // 69\n    if (selectValue != null) {                                                                                         // 70\n      var value;                                                                                                       // 71\n      if (props.value != null) {                                                                                       // 72\n        value = props.value + '';                                                                                      // 73\n      } else {                                                                                                         // 74\n        value = flattenChildren(props.children);                                                                       // 75\n      }                                                                                                                // 76\n      selected = false;                                                                                                // 77\n      if (Array.isArray(selectValue)) {                                                                                // 78\n        // multiple                                                                                                    // 79\n        for (var i = 0; i < selectValue.length; i++) {                                                                 // 80\n          if ('' + selectValue[i] === value) {                                                                         // 81\n            selected = true;                                                                                           // 82\n            break;                                                                                                     // 83\n          }                                                                                                            // 84\n        }                                                                                                              // 85\n      } else {                                                                                                         // 86\n        selected = '' + selectValue === value;                                                                         // 87\n      }                                                                                                                // 88\n    }                                                                                                                  // 89\n                                                                                                                       // 90\n    inst._wrapperState = { selected: selected };                                                                       // 91\n  },                                                                                                                   // 92\n                                                                                                                       // 93\n  postMountWrapper: function (inst) {                                                                                  // 94\n    // value=\"\" should make a value attribute (#6219)                                                                  // 95\n    var props = inst._currentElement.props;                                                                            // 96\n    if (props.value != null) {                                                                                         // 97\n      var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                      // 98\n      node.setAttribute('value', props.value);                                                                         // 99\n    }                                                                                                                  // 100\n  },                                                                                                                   // 101\n                                                                                                                       // 102\n  getHostProps: function (inst, props) {                                                                               // 103\n    var hostProps = _assign({ selected: undefined, children: undefined }, props);                                      // 104\n                                                                                                                       // 105\n    // Read state only from initial mount because <select> updates value                                               // 106\n    // manually; we need the initial state only for server rendering                                                   // 107\n    if (inst._wrapperState.selected != null) {                                                                         // 108\n      hostProps.selected = inst._wrapperState.selected;                                                                // 109\n    }                                                                                                                  // 110\n                                                                                                                       // 111\n    var content = flattenChildren(props.children);                                                                     // 112\n                                                                                                                       // 113\n    if (content) {                                                                                                     // 114\n      hostProps.children = content;                                                                                    // 115\n    }                                                                                                                  // 116\n                                                                                                                       // 117\n    return hostProps;                                                                                                  // 118\n  }                                                                                                                    // 119\n                                                                                                                       // 120\n};                                                                                                                     // 121\n                                                                                                                       // 122\nmodule.exports = ReactDOMOption;                                                                                       // 123\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMSelect.js\":[\"object-assign\",\"./DisabledInputUtils\",\"./LinkedValueUtils\",\"./ReactDOMComponentTree\",\"./ReactUpdates\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMSelect.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMSelect                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar DisabledInputUtils = require('./DisabledInputUtils');                                                              // 16\nvar LinkedValueUtils = require('./LinkedValueUtils');                                                                  // 17\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 18\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 19\n                                                                                                                       // 20\nvar warning = require('fbjs/lib/warning');                                                                             // 21\n                                                                                                                       // 22\nvar didWarnValueLink = false;                                                                                          // 23\nvar didWarnValueDefaultValue = false;                                                                                  // 24\n                                                                                                                       // 25\nfunction updateOptionsIfPendingUpdateAndMounted() {                                                                    // 26\n  if (this._rootNodeID && this._wrapperState.pendingUpdate) {                                                          // 27\n    this._wrapperState.pendingUpdate = false;                                                                          // 28\n                                                                                                                       // 29\n    var props = this._currentElement.props;                                                                            // 30\n    var value = LinkedValueUtils.getValue(props);                                                                      // 31\n                                                                                                                       // 32\n    if (value != null) {                                                                                               // 33\n      updateOptions(this, Boolean(props.multiple), value);                                                             // 34\n    }                                                                                                                  // 35\n  }                                                                                                                    // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\nfunction getDeclarationErrorAddendum(owner) {                                                                          // 39\n  if (owner) {                                                                                                         // 40\n    var name = owner.getName();                                                                                        // 41\n    if (name) {                                                                                                        // 42\n      return ' Check the render method of `' + name + '`.';                                                            // 43\n    }                                                                                                                  // 44\n  }                                                                                                                    // 45\n  return '';                                                                                                           // 46\n}                                                                                                                      // 47\n                                                                                                                       // 48\nvar valuePropNames = ['value', 'defaultValue'];                                                                        // 49\n                                                                                                                       // 50\n/**                                                                                                                    // 51\n * Validation function for `value` and `defaultValue`.                                                                 // 52\n * @private                                                                                                            // 53\n */                                                                                                                    // 54\nfunction checkSelectPropTypes(inst, props) {                                                                           // 55\n  var owner = inst._currentElement._owner;                                                                             // 56\n  LinkedValueUtils.checkPropTypes('select', props, owner);                                                             // 57\n                                                                                                                       // 58\n  if (props.valueLink !== undefined && !didWarnValueLink) {                                                            // 59\n    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;\n    didWarnValueLink = true;                                                                                           // 61\n  }                                                                                                                    // 62\n                                                                                                                       // 63\n  for (var i = 0; i < valuePropNames.length; i++) {                                                                    // 64\n    var propName = valuePropNames[i];                                                                                  // 65\n    if (props[propName] == null) {                                                                                     // 66\n      continue;                                                                                                        // 67\n    }                                                                                                                  // 68\n    var isArray = Array.isArray(props[propName]);                                                                      // 69\n    if (props.multiple && !isArray) {                                                                                  // 70\n      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;\n    } else if (!props.multiple && isArray) {                                                                           // 72\n      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;\n    }                                                                                                                  // 74\n  }                                                                                                                    // 75\n}                                                                                                                      // 76\n                                                                                                                       // 77\n/**                                                                                                                    // 78\n * @param {ReactDOMComponent} inst                                                                                     // 79\n * @param {boolean} multiple                                                                                           // 80\n * @param {*} propValue A stringable (with `multiple`, a list of stringables).                                         // 81\n * @private                                                                                                            // 82\n */                                                                                                                    // 83\nfunction updateOptions(inst, multiple, propValue) {                                                                    // 84\n  var selectedValue, i;                                                                                                // 85\n  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;                                               // 86\n                                                                                                                       // 87\n  if (multiple) {                                                                                                      // 88\n    selectedValue = {};                                                                                                // 89\n    for (i = 0; i < propValue.length; i++) {                                                                           // 90\n      selectedValue['' + propValue[i]] = true;                                                                         // 91\n    }                                                                                                                  // 92\n    for (i = 0; i < options.length; i++) {                                                                             // 93\n      var selected = selectedValue.hasOwnProperty(options[i].value);                                                   // 94\n      if (options[i].selected !== selected) {                                                                          // 95\n        options[i].selected = selected;                                                                                // 96\n      }                                                                                                                // 97\n    }                                                                                                                  // 98\n  } else {                                                                                                             // 99\n    // Do not set `select.value` as exact behavior isn't consistent across all                                         // 100\n    // browsers for all cases.                                                                                         // 101\n    selectedValue = '' + propValue;                                                                                    // 102\n    for (i = 0; i < options.length; i++) {                                                                             // 103\n      if (options[i].value === selectedValue) {                                                                        // 104\n        options[i].selected = true;                                                                                    // 105\n        return;                                                                                                        // 106\n      }                                                                                                                // 107\n    }                                                                                                                  // 108\n    if (options.length) {                                                                                              // 109\n      options[0].selected = true;                                                                                      // 110\n    }                                                                                                                  // 111\n  }                                                                                                                    // 112\n}                                                                                                                      // 113\n                                                                                                                       // 114\n/**                                                                                                                    // 115\n * Implements a <select> host component that allows optionally setting the                                             // 116\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a                                        // 117\n * stringable. If `multiple` is true, the prop must be an array of stringables.                                        // 118\n *                                                                                                                     // 119\n * If `value` is not supplied (or null/undefined), user actions that change the                                        // 120\n * selected option will trigger updates to the rendered options.                                                       // 121\n *                                                                                                                     // 122\n * If it is supplied (and not null/undefined), the rendered options will not                                           // 123\n * update in response to user actions. Instead, the `value` prop must change in                                        // 124\n * order for the rendered options to update.                                                                           // 125\n *                                                                                                                     // 126\n * If `defaultValue` is provided, any options with the supplied values will be                                         // 127\n * selected.                                                                                                           // 128\n */                                                                                                                    // 129\nvar ReactDOMSelect = {                                                                                                 // 130\n  getHostProps: function (inst, props) {                                                                               // 131\n    return _assign({}, DisabledInputUtils.getHostProps(inst, props), {                                                 // 132\n      onChange: inst._wrapperState.onChange,                                                                           // 133\n      value: undefined                                                                                                 // 134\n    });                                                                                                                // 135\n  },                                                                                                                   // 136\n                                                                                                                       // 137\n  mountWrapper: function (inst, props) {                                                                               // 138\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 139\n      checkSelectPropTypes(inst, props);                                                                               // 140\n    }                                                                                                                  // 141\n                                                                                                                       // 142\n    var value = LinkedValueUtils.getValue(props);                                                                      // 143\n    inst._wrapperState = {                                                                                             // 144\n      pendingUpdate: false,                                                                                            // 145\n      initialValue: value != null ? value : props.defaultValue,                                                        // 146\n      listeners: null,                                                                                                 // 147\n      onChange: _handleChange.bind(inst),                                                                              // 148\n      wasMultiple: Boolean(props.multiple)                                                                             // 149\n    };                                                                                                                 // 150\n                                                                                                                       // 151\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {                  // 152\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;\n      didWarnValueDefaultValue = true;                                                                                 // 154\n    }                                                                                                                  // 155\n  },                                                                                                                   // 156\n                                                                                                                       // 157\n  getSelectValueContext: function (inst) {                                                                             // 158\n    // ReactDOMOption looks at this initial value so the initial generated                                             // 159\n    // markup has correct `selected` attributes                                                                        // 160\n    return inst._wrapperState.initialValue;                                                                            // 161\n  },                                                                                                                   // 162\n                                                                                                                       // 163\n  postUpdateWrapper: function (inst) {                                                                                 // 164\n    var props = inst._currentElement.props;                                                                            // 165\n                                                                                                                       // 166\n    // After the initial mount, we control selected-ness manually so don't pass                                        // 167\n    // this value down                                                                                                 // 168\n    inst._wrapperState.initialValue = undefined;                                                                       // 169\n                                                                                                                       // 170\n    var wasMultiple = inst._wrapperState.wasMultiple;                                                                  // 171\n    inst._wrapperState.wasMultiple = Boolean(props.multiple);                                                          // 172\n                                                                                                                       // 173\n    var value = LinkedValueUtils.getValue(props);                                                                      // 174\n    if (value != null) {                                                                                               // 175\n      inst._wrapperState.pendingUpdate = false;                                                                        // 176\n      updateOptions(inst, Boolean(props.multiple), value);                                                             // 177\n    } else if (wasMultiple !== Boolean(props.multiple)) {                                                              // 178\n      // For simplicity, reapply `defaultValue` if `multiple` is toggled.                                              // 179\n      if (props.defaultValue != null) {                                                                                // 180\n        updateOptions(inst, Boolean(props.multiple), props.defaultValue);                                              // 181\n      } else {                                                                                                         // 182\n        // Revert the select back to its default unselected state.                                                     // 183\n        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');                                        // 184\n      }                                                                                                                // 185\n    }                                                                                                                  // 186\n  }                                                                                                                    // 187\n};                                                                                                                     // 188\n                                                                                                                       // 189\nfunction _handleChange(event) {                                                                                        // 190\n  var props = this._currentElement.props;                                                                              // 191\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);                                                    // 192\n                                                                                                                       // 193\n  if (this._rootNodeID) {                                                                                              // 194\n    this._wrapperState.pendingUpdate = true;                                                                           // 195\n  }                                                                                                                    // 196\n  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);                                                     // 197\n  return returnValue;                                                                                                  // 198\n}                                                                                                                      // 199\n                                                                                                                       // 200\nmodule.exports = ReactDOMSelect;                                                                                       // 201\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMTextarea.js\":[\"./reactProdInvariant\",\"object-assign\",\"./DisabledInputUtils\",\"./LinkedValueUtils\",\"./ReactDOMComponentTree\",\"./ReactUpdates\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMTextarea.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMTextarea                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 14\n    _assign = require('object-assign');                                                                                // 15\n                                                                                                                       // 16\nvar DisabledInputUtils = require('./DisabledInputUtils');                                                              // 17\nvar LinkedValueUtils = require('./LinkedValueUtils');                                                                  // 18\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 19\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 20\n                                                                                                                       // 21\nvar invariant = require('fbjs/lib/invariant');                                                                         // 22\nvar warning = require('fbjs/lib/warning');                                                                             // 23\n                                                                                                                       // 24\nvar didWarnValueLink = false;                                                                                          // 25\nvar didWarnValDefaultVal = false;                                                                                      // 26\n                                                                                                                       // 27\nfunction forceUpdateIfMounted() {                                                                                      // 28\n  if (this._rootNodeID) {                                                                                              // 29\n    // DOM component is still mounted; update                                                                          // 30\n    ReactDOMTextarea.updateWrapper(this);                                                                              // 31\n  }                                                                                                                    // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\n/**                                                                                                                    // 35\n * Implements a <textarea> host component that allows setting `value`, and                                             // 36\n * `defaultValue`. This differs from the traditional DOM API because value is                                          // 37\n * usually set as PCDATA children.                                                                                     // 38\n *                                                                                                                     // 39\n * If `value` is not supplied (or null/undefined), user actions that affect the                                        // 40\n * value will trigger updates to the element.                                                                          // 41\n *                                                                                                                     // 42\n * If `value` is supplied (and not null/undefined), the rendered element will                                          // 43\n * not trigger updates to the element. Instead, the `value` prop must change in                                        // 44\n * order for the rendered element to be updated.                                                                       // 45\n *                                                                                                                     // 46\n * The rendered element will be initialized with an empty value, the prop                                              // 47\n * `defaultValue` if specified, or the children content (deprecated).                                                  // 48\n */                                                                                                                    // 49\nvar ReactDOMTextarea = {                                                                                               // 50\n  getHostProps: function (inst, props) {                                                                               // 51\n    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;\n                                                                                                                       // 53\n    // Always set children to the same thing. In IE9, the selection range will                                         // 54\n    // get reset if `textContent` is mutated.  We could add a check in setTextContent                                  // 55\n    // to only set the value if/when the value differs from the node value (which would                                // 56\n    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.                                 // 57\n    // The value can be a boolean or object so that's why it's forced to be a string.                                  // 58\n    var hostProps = _assign({}, DisabledInputUtils.getHostProps(inst, props), {                                        // 59\n      value: undefined,                                                                                                // 60\n      defaultValue: undefined,                                                                                         // 61\n      children: '' + inst._wrapperState.initialValue,                                                                  // 62\n      onChange: inst._wrapperState.onChange                                                                            // 63\n    });                                                                                                                // 64\n                                                                                                                       // 65\n    return hostProps;                                                                                                  // 66\n  },                                                                                                                   // 67\n                                                                                                                       // 68\n  mountWrapper: function (inst, props) {                                                                               // 69\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 70\n      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);                                 // 71\n      if (props.valueLink !== undefined && !didWarnValueLink) {                                                        // 72\n        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnValueLink = true;                                                                                       // 74\n      }                                                                                                                // 75\n      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {                    // 76\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;\n        didWarnValDefaultVal = true;                                                                                   // 78\n      }                                                                                                                // 79\n    }                                                                                                                  // 80\n                                                                                                                       // 81\n    var value = LinkedValueUtils.getValue(props);                                                                      // 82\n    var initialValue = value;                                                                                          // 83\n                                                                                                                       // 84\n    // Only bother fetching default value if we're going to use it                                                     // 85\n    if (value == null) {                                                                                               // 86\n      var defaultValue = props.defaultValue;                                                                           // 87\n      // TODO (yungsters): Remove support for children content in <textarea>.                                          // 88\n      var children = props.children;                                                                                   // 89\n      if (children != null) {                                                                                          // 90\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 91\n          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;\n        }                                                                                                              // 93\n        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;\n        if (Array.isArray(children)) {                                                                                 // 95\n          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;\n          children = children[0];                                                                                      // 97\n        }                                                                                                              // 98\n                                                                                                                       // 99\n        defaultValue = '' + children;                                                                                  // 100\n      }                                                                                                                // 101\n      if (defaultValue == null) {                                                                                      // 102\n        defaultValue = '';                                                                                             // 103\n      }                                                                                                                // 104\n      initialValue = defaultValue;                                                                                     // 105\n    }                                                                                                                  // 106\n                                                                                                                       // 107\n    inst._wrapperState = {                                                                                             // 108\n      initialValue: '' + initialValue,                                                                                 // 109\n      listeners: null,                                                                                                 // 110\n      onChange: _handleChange.bind(inst)                                                                               // 111\n    };                                                                                                                 // 112\n  },                                                                                                                   // 113\n                                                                                                                       // 114\n  updateWrapper: function (inst) {                                                                                     // 115\n    var props = inst._currentElement.props;                                                                            // 116\n                                                                                                                       // 117\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                        // 118\n    var value = LinkedValueUtils.getValue(props);                                                                      // 119\n    if (value != null) {                                                                                               // 120\n      // Cast `value` to a string to ensure the value is set correctly. While                                          // 121\n      // browsers typically do this as necessary, jsdom doesn't.                                                       // 122\n      var newValue = '' + value;                                                                                       // 123\n                                                                                                                       // 124\n      // To avoid side effects (such as losing text selection), only set value if changed                              // 125\n      if (newValue !== node.value) {                                                                                   // 126\n        node.value = newValue;                                                                                         // 127\n      }                                                                                                                // 128\n      if (props.defaultValue == null) {                                                                                // 129\n        node.defaultValue = newValue;                                                                                  // 130\n      }                                                                                                                // 131\n    }                                                                                                                  // 132\n    if (props.defaultValue != null) {                                                                                  // 133\n      node.defaultValue = props.defaultValue;                                                                          // 134\n    }                                                                                                                  // 135\n  },                                                                                                                   // 136\n                                                                                                                       // 137\n  postMountWrapper: function (inst) {                                                                                  // 138\n    // This is in postMount because we need access to the DOM node, which is not                                       // 139\n    // available until after the component has mounted.                                                                // 140\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                        // 141\n                                                                                                                       // 142\n    // Warning: node.value may be the empty string at this point (IE11) if placeholder is set.                         // 143\n    node.value = node.textContent; // Detach value from defaultValue                                                   // 144\n  }                                                                                                                    // 145\n};                                                                                                                     // 146\n                                                                                                                       // 147\nfunction _handleChange(event) {                                                                                        // 148\n  var props = this._currentElement.props;                                                                              // 149\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);                                                    // 150\n  ReactUpdates.asap(forceUpdateIfMounted, this);                                                                       // 151\n  return returnValue;                                                                                                  // 152\n}                                                                                                                      // 153\n                                                                                                                       // 154\nmodule.exports = ReactDOMTextarea;                                                                                     // 155\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactMultiChild.js\":[\"./reactProdInvariant\",\"./ReactComponentEnvironment\",\"./ReactInstanceMap\",\"./ReactInstrumentation\",\"./ReactMultiChildUpdateTypes\",\"./ReactCurrentOwner\",\"./ReactReconciler\",\"./ReactChildReconciler\",\"fbjs/lib/emptyFunction\",\"./flattenChildren\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactMultiChild.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactMultiChild                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');                                                // 16\nvar ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 17\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 18\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');                                              // 19\n                                                                                                                       // 20\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 21\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 22\nvar ReactChildReconciler = require('./ReactChildReconciler');                                                          // 23\n                                                                                                                       // 24\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 25\nvar flattenChildren = require('./flattenChildren');                                                                    // 26\nvar invariant = require('fbjs/lib/invariant');                                                                         // 27\n                                                                                                                       // 28\n/**                                                                                                                    // 29\n * Make an update for markup to be rendered and inserted at a supplied index.                                          // 30\n *                                                                                                                     // 31\n * @param {string} markup Markup that renders into an element.                                                         // 32\n * @param {number} toIndex Destination index.                                                                          // 33\n * @private                                                                                                            // 34\n */                                                                                                                    // 35\nfunction makeInsertMarkup(markup, afterNode, toIndex) {                                                                // 36\n  // NOTE: Null values reduce hidden classes.                                                                          // 37\n  return {                                                                                                             // 38\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,                                                                    // 39\n    content: markup,                                                                                                   // 40\n    fromIndex: null,                                                                                                   // 41\n    fromNode: null,                                                                                                    // 42\n    toIndex: toIndex,                                                                                                  // 43\n    afterNode: afterNode                                                                                               // 44\n  };                                                                                                                   // 45\n}                                                                                                                      // 46\n                                                                                                                       // 47\n/**                                                                                                                    // 48\n * Make an update for moving an existing element to another index.                                                     // 49\n *                                                                                                                     // 50\n * @param {number} fromIndex Source index of the existing element.                                                     // 51\n * @param {number} toIndex Destination index of the element.                                                           // 52\n * @private                                                                                                            // 53\n */                                                                                                                    // 54\nfunction makeMove(child, afterNode, toIndex) {                                                                         // 55\n  // NOTE: Null values reduce hidden classes.                                                                          // 56\n  return {                                                                                                             // 57\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,                                                                    // 58\n    content: null,                                                                                                     // 59\n    fromIndex: child._mountIndex,                                                                                      // 60\n    fromNode: ReactReconciler.getHostNode(child),                                                                      // 61\n    toIndex: toIndex,                                                                                                  // 62\n    afterNode: afterNode                                                                                               // 63\n  };                                                                                                                   // 64\n}                                                                                                                      // 65\n                                                                                                                       // 66\n/**                                                                                                                    // 67\n * Make an update for removing an element at an index.                                                                 // 68\n *                                                                                                                     // 69\n * @param {number} fromIndex Index of the element to remove.                                                           // 70\n * @private                                                                                                            // 71\n */                                                                                                                    // 72\nfunction makeRemove(child, node) {                                                                                     // 73\n  // NOTE: Null values reduce hidden classes.                                                                          // 74\n  return {                                                                                                             // 75\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,                                                                      // 76\n    content: null,                                                                                                     // 77\n    fromIndex: child._mountIndex,                                                                                      // 78\n    fromNode: node,                                                                                                    // 79\n    toIndex: null,                                                                                                     // 80\n    afterNode: null                                                                                                    // 81\n  };                                                                                                                   // 82\n}                                                                                                                      // 83\n                                                                                                                       // 84\n/**                                                                                                                    // 85\n * Make an update for setting the markup of a node.                                                                    // 86\n *                                                                                                                     // 87\n * @param {string} markup Markup that renders into an element.                                                         // 88\n * @private                                                                                                            // 89\n */                                                                                                                    // 90\nfunction makeSetMarkup(markup) {                                                                                       // 91\n  // NOTE: Null values reduce hidden classes.                                                                          // 92\n  return {                                                                                                             // 93\n    type: ReactMultiChildUpdateTypes.SET_MARKUP,                                                                       // 94\n    content: markup,                                                                                                   // 95\n    fromIndex: null,                                                                                                   // 96\n    fromNode: null,                                                                                                    // 97\n    toIndex: null,                                                                                                     // 98\n    afterNode: null                                                                                                    // 99\n  };                                                                                                                   // 100\n}                                                                                                                      // 101\n                                                                                                                       // 102\n/**                                                                                                                    // 103\n * Make an update for setting the text content.                                                                        // 104\n *                                                                                                                     // 105\n * @param {string} textContent Text content to set.                                                                    // 106\n * @private                                                                                                            // 107\n */                                                                                                                    // 108\nfunction makeTextContent(textContent) {                                                                                // 109\n  // NOTE: Null values reduce hidden classes.                                                                          // 110\n  return {                                                                                                             // 111\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,                                                                     // 112\n    content: textContent,                                                                                              // 113\n    fromIndex: null,                                                                                                   // 114\n    fromNode: null,                                                                                                    // 115\n    toIndex: null,                                                                                                     // 116\n    afterNode: null                                                                                                    // 117\n  };                                                                                                                   // 118\n}                                                                                                                      // 119\n                                                                                                                       // 120\n/**                                                                                                                    // 121\n * Push an update, if any, onto the queue. Creates a new queue if none is                                              // 122\n * passed and always returns the queue. Mutative.                                                                      // 123\n */                                                                                                                    // 124\nfunction enqueue(queue, update) {                                                                                      // 125\n  if (update) {                                                                                                        // 126\n    queue = queue || [];                                                                                               // 127\n    queue.push(update);                                                                                                // 128\n  }                                                                                                                    // 129\n  return queue;                                                                                                        // 130\n}                                                                                                                      // 131\n                                                                                                                       // 132\n/**                                                                                                                    // 133\n * Processes any enqueued updates.                                                                                     // 134\n *                                                                                                                     // 135\n * @private                                                                                                            // 136\n */                                                                                                                    // 137\nfunction processQueue(inst, updateQueue) {                                                                             // 138\n  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);                                                 // 139\n}                                                                                                                      // 140\n                                                                                                                       // 141\nvar setChildrenForInstrumentation = emptyFunction;                                                                     // 142\nif (process.env.NODE_ENV !== 'production') {                                                                           // 143\n  var getDebugID = function (inst) {                                                                                   // 144\n    if (!inst._debugID) {                                                                                              // 145\n      // Check for ART-like instances. TODO: This is silly/gross.                                                      // 146\n      var internal;                                                                                                    // 147\n      if (internal = ReactInstanceMap.get(inst)) {                                                                     // 148\n        inst = internal;                                                                                               // 149\n      }                                                                                                                // 150\n    }                                                                                                                  // 151\n    return inst._debugID;                                                                                              // 152\n  };                                                                                                                   // 153\n  setChildrenForInstrumentation = function (children) {                                                                // 154\n    var debugID = getDebugID(this);                                                                                    // 155\n    // TODO: React Native empty components are also multichild.                                                        // 156\n    // This means they still get into this method but don't have _debugID.                                             // 157\n    if (debugID !== 0) {                                                                                               // 158\n      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {      // 159\n        return children[key]._debugID;                                                                                 // 160\n      }) : []);                                                                                                        // 161\n    }                                                                                                                  // 162\n  };                                                                                                                   // 163\n}                                                                                                                      // 164\n                                                                                                                       // 165\n/**                                                                                                                    // 166\n * ReactMultiChild are capable of reconciling multiple children.                                                       // 167\n *                                                                                                                     // 168\n * @class ReactMultiChild                                                                                              // 169\n * @internal                                                                                                           // 170\n */                                                                                                                    // 171\nvar ReactMultiChild = {                                                                                                // 172\n                                                                                                                       // 173\n  /**                                                                                                                  // 174\n   * Provides common functionality for components that must reconcile multiple                                         // 175\n   * children. This is used by `ReactDOMComponent` to mount, update, and                                               // 176\n   * unmount child components.                                                                                         // 177\n   *                                                                                                                   // 178\n   * @lends {ReactMultiChild.prototype}                                                                                // 179\n   */                                                                                                                  // 180\n  Mixin: {                                                                                                             // 181\n                                                                                                                       // 182\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {                                  // 183\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 184\n        var selfDebugID = getDebugID(this);                                                                            // 185\n        if (this._currentElement) {                                                                                    // 186\n          try {                                                                                                        // 187\n            ReactCurrentOwner.current = this._currentElement._owner;                                                   // 188\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);        // 189\n          } finally {                                                                                                  // 190\n            ReactCurrentOwner.current = null;                                                                          // 191\n          }                                                                                                            // 192\n        }                                                                                                              // 193\n      }                                                                                                                // 194\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);                           // 195\n    },                                                                                                                 // 196\n                                                                                                                       // 197\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {\n      var nextChildren;                                                                                                // 199\n      var selfDebugID = 0;                                                                                             // 200\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 201\n        selfDebugID = getDebugID(this);                                                                                // 202\n        if (this._currentElement) {                                                                                    // 203\n          try {                                                                                                        // 204\n            ReactCurrentOwner.current = this._currentElement._owner;                                                   // 205\n            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);                                   // 206\n          } finally {                                                                                                  // 207\n            ReactCurrentOwner.current = null;                                                                          // 208\n          }                                                                                                            // 209\n          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);\n          return nextChildren;                                                                                         // 211\n        }                                                                                                              // 212\n      }                                                                                                                // 213\n      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);                                         // 214\n      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);\n      return nextChildren;                                                                                             // 216\n    },                                                                                                                 // 217\n                                                                                                                       // 218\n    /**                                                                                                                // 219\n     * Generates a \"mount image\" for each of the supplied children. In the case                                        // 220\n     * of `ReactDOMComponent`, a mount image is a string of markup.                                                    // 221\n     *                                                                                                                 // 222\n     * @param {?object} nestedChildren Nested child maps.                                                              // 223\n     * @return {array} An array of mounted representations.                                                            // 224\n     * @internal                                                                                                       // 225\n     */                                                                                                                // 226\n    mountChildren: function (nestedChildren, transaction, context) {                                                   // 227\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);                        // 228\n      this._renderedChildren = children;                                                                               // 229\n                                                                                                                       // 230\n      var mountImages = [];                                                                                            // 231\n      var index = 0;                                                                                                   // 232\n      for (var name in children) {                                                                                     // 233\n        if (children.hasOwnProperty(name)) {                                                                           // 234\n          var child = children[name];                                                                                  // 235\n          var selfDebugID = 0;                                                                                         // 236\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 237\n            selfDebugID = getDebugID(this);                                                                            // 238\n          }                                                                                                            // 239\n          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);\n          child._mountIndex = index++;                                                                                 // 241\n          mountImages.push(mountImage);                                                                                // 242\n        }                                                                                                              // 243\n      }                                                                                                                // 244\n                                                                                                                       // 245\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 246\n        setChildrenForInstrumentation.call(this, children);                                                            // 247\n      }                                                                                                                // 248\n                                                                                                                       // 249\n      return mountImages;                                                                                              // 250\n    },                                                                                                                 // 251\n                                                                                                                       // 252\n    /**                                                                                                                // 253\n     * Replaces any rendered children with a text content string.                                                      // 254\n     *                                                                                                                 // 255\n     * @param {string} nextContent String of content.                                                                  // 256\n     * @internal                                                                                                       // 257\n     */                                                                                                                // 258\n    updateTextContent: function (nextContent) {                                                                        // 259\n      var prevChildren = this._renderedChildren;                                                                       // 260\n      // Remove any rendered children.                                                                                 // 261\n      ReactChildReconciler.unmountChildren(prevChildren, false);                                                       // 262\n      for (var name in prevChildren) {                                                                                 // 263\n        if (prevChildren.hasOwnProperty(name)) {                                                                       // 264\n          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;\n        }                                                                                                              // 266\n      }                                                                                                                // 267\n      // Set new text content.                                                                                         // 268\n      var updates = [makeTextContent(nextContent)];                                                                    // 269\n      processQueue(this, updates);                                                                                     // 270\n    },                                                                                                                 // 271\n                                                                                                                       // 272\n    /**                                                                                                                // 273\n     * Replaces any rendered children with a markup string.                                                            // 274\n     *                                                                                                                 // 275\n     * @param {string} nextMarkup String of markup.                                                                    // 276\n     * @internal                                                                                                       // 277\n     */                                                                                                                // 278\n    updateMarkup: function (nextMarkup) {                                                                              // 279\n      var prevChildren = this._renderedChildren;                                                                       // 280\n      // Remove any rendered children.                                                                                 // 281\n      ReactChildReconciler.unmountChildren(prevChildren, false);                                                       // 282\n      for (var name in prevChildren) {                                                                                 // 283\n        if (prevChildren.hasOwnProperty(name)) {                                                                       // 284\n          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;\n        }                                                                                                              // 286\n      }                                                                                                                // 287\n      var updates = [makeSetMarkup(nextMarkup)];                                                                       // 288\n      processQueue(this, updates);                                                                                     // 289\n    },                                                                                                                 // 290\n                                                                                                                       // 291\n    /**                                                                                                                // 292\n     * Updates the rendered children with new children.                                                                // 293\n     *                                                                                                                 // 294\n     * @param {?object} nextNestedChildrenElements Nested child element maps.                                          // 295\n     * @param {ReactReconcileTransaction} transaction                                                                  // 296\n     * @internal                                                                                                       // 297\n     */                                                                                                                // 298\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {                                      // 299\n      // Hook used by React ART                                                                                        // 300\n      this._updateChildren(nextNestedChildrenElements, transaction, context);                                          // 301\n    },                                                                                                                 // 302\n                                                                                                                       // 303\n    /**                                                                                                                // 304\n     * @param {?object} nextNestedChildrenElements Nested child element maps.                                          // 305\n     * @param {ReactReconcileTransaction} transaction                                                                  // 306\n     * @final                                                                                                          // 307\n     * @protected                                                                                                      // 308\n     */                                                                                                                // 309\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {                                     // 310\n      var prevChildren = this._renderedChildren;                                                                       // 311\n      var removedNodes = {};                                                                                           // 312\n      var mountImages = [];                                                                                            // 313\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);\n      if (!nextChildren && !prevChildren) {                                                                            // 315\n        return;                                                                                                        // 316\n      }                                                                                                                // 317\n      var updates = null;                                                                                              // 318\n      var name;                                                                                                        // 319\n      // `nextIndex` will increment for each child in `nextChildren`, but                                              // 320\n      // `lastIndex` will be the last index visited in `prevChildren`.                                                 // 321\n      var nextIndex = 0;                                                                                               // 322\n      var lastIndex = 0;                                                                                               // 323\n      // `nextMountIndex` will increment for each newly mounted child.                                                 // 324\n      var nextMountIndex = 0;                                                                                          // 325\n      var lastPlacedNode = null;                                                                                       // 326\n      for (name in nextChildren) {                                                                                     // 327\n        if (!nextChildren.hasOwnProperty(name)) {                                                                      // 328\n          continue;                                                                                                    // 329\n        }                                                                                                              // 330\n        var prevChild = prevChildren && prevChildren[name];                                                            // 331\n        var nextChild = nextChildren[name];                                                                            // 332\n        if (prevChild === nextChild) {                                                                                 // 333\n          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));                 // 334\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);                                                      // 335\n          prevChild._mountIndex = nextIndex;                                                                           // 336\n        } else {                                                                                                       // 337\n          if (prevChild) {                                                                                             // 338\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.                                       // 339\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);                                                    // 340\n            // The `removedNodes` loop below will actually remove the child.                                           // 341\n          }                                                                                                            // 342\n          // The child must be instantiated before it's mounted.                                                       // 343\n          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));\n          nextMountIndex++;                                                                                            // 345\n        }                                                                                                              // 346\n        nextIndex++;                                                                                                   // 347\n        lastPlacedNode = ReactReconciler.getHostNode(nextChild);                                                       // 348\n      }                                                                                                                // 349\n      // Remove children that are no longer present.                                                                   // 350\n      for (name in removedNodes) {                                                                                     // 351\n        if (removedNodes.hasOwnProperty(name)) {                                                                       // 352\n          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));                      // 353\n        }                                                                                                              // 354\n      }                                                                                                                // 355\n      if (updates) {                                                                                                   // 356\n        processQueue(this, updates);                                                                                   // 357\n      }                                                                                                                // 358\n      this._renderedChildren = nextChildren;                                                                           // 359\n                                                                                                                       // 360\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 361\n        setChildrenForInstrumentation.call(this, nextChildren);                                                        // 362\n      }                                                                                                                // 363\n    },                                                                                                                 // 364\n                                                                                                                       // 365\n    /**                                                                                                                // 366\n     * Unmounts all rendered children. This should be used to clean up children                                        // 367\n     * when this component is unmounted. It does not actually perform any                                              // 368\n     * backend operations.                                                                                             // 369\n     *                                                                                                                 // 370\n     * @internal                                                                                                       // 371\n     */                                                                                                                // 372\n    unmountChildren: function (safely) {                                                                               // 373\n      var renderedChildren = this._renderedChildren;                                                                   // 374\n      ReactChildReconciler.unmountChildren(renderedChildren, safely);                                                  // 375\n      this._renderedChildren = null;                                                                                   // 376\n    },                                                                                                                 // 377\n                                                                                                                       // 378\n    /**                                                                                                                // 379\n     * Moves a child component to the supplied index.                                                                  // 380\n     *                                                                                                                 // 381\n     * @param {ReactComponent} child Component to move.                                                                // 382\n     * @param {number} toIndex Destination index of the element.                                                       // 383\n     * @param {number} lastIndex Last index visited of the siblings of `child`.                                        // 384\n     * @protected                                                                                                      // 385\n     */                                                                                                                // 386\n    moveChild: function (child, afterNode, toIndex, lastIndex) {                                                       // 387\n      // If the index of `child` is less than `lastIndex`, then it needs to                                            // 388\n      // be moved. Otherwise, we do not need to move it because a child will be                                        // 389\n      // inserted or moved before `child`.                                                                             // 390\n      if (child._mountIndex < lastIndex) {                                                                             // 391\n        return makeMove(child, afterNode, toIndex);                                                                    // 392\n      }                                                                                                                // 393\n    },                                                                                                                 // 394\n                                                                                                                       // 395\n    /**                                                                                                                // 396\n     * Creates a child component.                                                                                      // 397\n     *                                                                                                                 // 398\n     * @param {ReactComponent} child Component to create.                                                              // 399\n     * @param {string} mountImage Markup to insert.                                                                    // 400\n     * @protected                                                                                                      // 401\n     */                                                                                                                // 402\n    createChild: function (child, afterNode, mountImage) {                                                             // 403\n      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);                                               // 404\n    },                                                                                                                 // 405\n                                                                                                                       // 406\n    /**                                                                                                                // 407\n     * Removes a child component.                                                                                      // 408\n     *                                                                                                                 // 409\n     * @param {ReactComponent} child Child to remove.                                                                  // 410\n     * @protected                                                                                                      // 411\n     */                                                                                                                // 412\n    removeChild: function (child, node) {                                                                              // 413\n      return makeRemove(child, node);                                                                                  // 414\n    },                                                                                                                 // 415\n                                                                                                                       // 416\n    /**                                                                                                                // 417\n     * Mounts a child with the supplied name.                                                                          // 418\n     *                                                                                                                 // 419\n     * NOTE: This is part of `updateChildren` and is here for readability.                                             // 420\n     *                                                                                                                 // 421\n     * @param {ReactComponent} child Component to mount.                                                               // 422\n     * @param {string} name Name of the child.                                                                         // 423\n     * @param {number} index Index at which to insert the child.                                                       // 424\n     * @param {ReactReconcileTransaction} transaction                                                                  // 425\n     * @private                                                                                                        // 426\n     */                                                                                                                // 427\n    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {                         // 428\n      child._mountIndex = index;                                                                                       // 429\n      return this.createChild(child, afterNode, mountImage);                                                           // 430\n    },                                                                                                                 // 431\n                                                                                                                       // 432\n    /**                                                                                                                // 433\n     * Unmounts a rendered child.                                                                                      // 434\n     *                                                                                                                 // 435\n     * NOTE: This is part of `updateChildren` and is here for readability.                                             // 436\n     *                                                                                                                 // 437\n     * @param {ReactComponent} child Component to unmount.                                                             // 438\n     * @private                                                                                                        // 439\n     */                                                                                                                // 440\n    _unmountChild: function (child, node) {                                                                            // 441\n      var update = this.removeChild(child, node);                                                                      // 442\n      child._mountIndex = null;                                                                                        // 443\n      return update;                                                                                                   // 444\n    }                                                                                                                  // 445\n                                                                                                                       // 446\n  }                                                                                                                    // 447\n                                                                                                                       // 448\n};                                                                                                                     // 449\n                                                                                                                       // 450\nmodule.exports = ReactMultiChild;                                                                                      // 451\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactComponentEnvironment.js\":[\"./reactProdInvariant\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactComponentEnvironment.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactComponentEnvironment                                                                           // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar invariant = require('fbjs/lib/invariant');                                                                         // 16\n                                                                                                                       // 17\nvar injected = false;                                                                                                  // 18\n                                                                                                                       // 19\nvar ReactComponentEnvironment = {                                                                                      // 20\n                                                                                                                       // 21\n  /**                                                                                                                  // 22\n   * Optionally injectable hook for swapping out mount images in the middle of                                         // 23\n   * the tree.                                                                                                         // 24\n   */                                                                                                                  // 25\n  replaceNodeWithMarkup: null,                                                                                         // 26\n                                                                                                                       // 27\n  /**                                                                                                                  // 28\n   * Optionally injectable hook for processing a queue of child updates. Will                                          // 29\n   * later move into MultiChildComponents.                                                                             // 30\n   */                                                                                                                  // 31\n  processChildrenUpdates: null,                                                                                        // 32\n                                                                                                                       // 33\n  injection: {                                                                                                         // 34\n    injectEnvironment: function (environment) {                                                                        // 35\n      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;\n      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;                             // 37\n      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;                           // 38\n      injected = true;                                                                                                 // 39\n    }                                                                                                                  // 40\n  }                                                                                                                    // 41\n                                                                                                                       // 42\n};                                                                                                                     // 43\n                                                                                                                       // 44\nmodule.exports = ReactComponentEnvironment;                                                                            // 45\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactInstanceMap.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactInstanceMap.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactInstanceMap                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * `ReactInstanceMap` maintains a mapping from a public facing stateful                                                // 15\n * instance (key) and the internal representation (value). This allows public                                          // 16\n * methods to accept the user facing instance as an argument and map them back                                         // 17\n * to internal methods.                                                                                                // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\n// TODO: Replace this with ES6: var ReactInstanceMap = new Map();                                                      // 21\n                                                                                                                       // 22\nvar ReactInstanceMap = {                                                                                               // 23\n                                                                                                                       // 24\n  /**                                                                                                                  // 25\n   * This API should be called `delete` but we'd have to make sure to always                                           // 26\n   * transform these to strings for IE support. When this transform is fully                                           // 27\n   * supported we can rename it.                                                                                       // 28\n   */                                                                                                                  // 29\n  remove: function (key) {                                                                                             // 30\n    key._reactInternalInstance = undefined;                                                                            // 31\n  },                                                                                                                   // 32\n                                                                                                                       // 33\n  get: function (key) {                                                                                                // 34\n    return key._reactInternalInstance;                                                                                 // 35\n  },                                                                                                                   // 36\n                                                                                                                       // 37\n  has: function (key) {                                                                                                // 38\n    return key._reactInternalInstance !== undefined;                                                                   // 39\n  },                                                                                                                   // 40\n                                                                                                                       // 41\n  set: function (key, value) {                                                                                         // 42\n    key._reactInternalInstance = value;                                                                                // 43\n  }                                                                                                                    // 44\n                                                                                                                       // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\nmodule.exports = ReactInstanceMap;                                                                                     // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactChildReconciler.js\":[\"./ReactReconciler\",\"./instantiateReactComponent\",\"./KeyEscapeUtils\",\"./shouldUpdateReactComponent\",\"./traverseAllChildren\",\"fbjs/lib/warning\",\"./ReactComponentTreeHook\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactChildReconciler.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactChildReconciler                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 14\n                                                                                                                       // 15\nvar instantiateReactComponent = require('./instantiateReactComponent');                                                // 16\nvar KeyEscapeUtils = require('./KeyEscapeUtils');                                                                      // 17\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');                                              // 18\nvar traverseAllChildren = require('./traverseAllChildren');                                                            // 19\nvar warning = require('fbjs/lib/warning');                                                                             // 20\n                                                                                                                       // 21\nvar ReactComponentTreeHook;                                                                                            // 22\n                                                                                                                       // 23\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {                                // 24\n  // Temporary hack.                                                                                                   // 25\n  // Inline requires don't work well with Jest:                                                                        // 26\n  // https://github.com/facebook/react/issues/7240                                                                     // 27\n  // Remove the inline requires when we don't need them anymore:                                                       // 28\n  // https://github.com/facebook/react/pull/7178                                                                       // 29\n  ReactComponentTreeHook = require('./ReactComponentTreeHook');                                                        // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nfunction instantiateChild(childInstances, child, name, selfDebugID) {                                                  // 33\n  // We found a component instance.                                                                                    // 34\n  var keyUnique = childInstances[name] === undefined;                                                                  // 35\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 36\n    if (!ReactComponentTreeHook) {                                                                                     // 37\n      ReactComponentTreeHook = require('./ReactComponentTreeHook');                                                    // 38\n    }                                                                                                                  // 39\n    if (!keyUnique) {                                                                                                  // 40\n      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;\n    }                                                                                                                  // 42\n  }                                                                                                                    // 43\n  if (child != null && keyUnique) {                                                                                    // 44\n    childInstances[name] = instantiateReactComponent(child, true);                                                     // 45\n  }                                                                                                                    // 46\n}                                                                                                                      // 47\n                                                                                                                       // 48\n/**                                                                                                                    // 49\n * ReactChildReconciler provides helpers for initializing or updating a set of                                         // 50\n * children. Its output is suitable for passing it onto ReactMultiChild which                                          // 51\n * does diffed reordering and insertion.                                                                               // 52\n */                                                                                                                    // 53\nvar ReactChildReconciler = {                                                                                           // 54\n  /**                                                                                                                  // 55\n   * Generates a \"mount image\" for each of the supplied children. In the case                                          // 56\n   * of `ReactDOMComponent`, a mount image is a string of markup.                                                      // 57\n   *                                                                                                                   // 58\n   * @param {?object} nestedChildNodes Nested child maps.                                                              // 59\n   * @return {?object} A set of child instances.                                                                       // 60\n   * @internal                                                                                                         // 61\n   */                                                                                                                  // 62\n  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots  // 63\n  ) {                                                                                                                  // 64\n    if (nestedChildNodes == null) {                                                                                    // 65\n      return null;                                                                                                     // 66\n    }                                                                                                                  // 67\n    var childInstances = {};                                                                                           // 68\n                                                                                                                       // 69\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 70\n      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {                                       // 71\n        return instantiateChild(childInsts, child, name, selfDebugID);                                                 // 72\n      }, childInstances);                                                                                              // 73\n    } else {                                                                                                           // 74\n      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);                                         // 75\n    }                                                                                                                  // 76\n    return childInstances;                                                                                             // 77\n  },                                                                                                                   // 78\n                                                                                                                       // 79\n  /**                                                                                                                  // 80\n   * Updates the rendered children and returns a new set of children.                                                  // 81\n   *                                                                                                                   // 82\n   * @param {?object} prevChildren Previously initialized set of children.                                             // 83\n   * @param {?object} nextChildren Flat child element maps.                                                            // 84\n   * @param {ReactReconcileTransaction} transaction                                                                    // 85\n   * @param {object} context                                                                                           // 86\n   * @return {?object} A new set of child instances.                                                                   // 87\n   * @internal                                                                                                         // 88\n   */                                                                                                                  // 89\n  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots\n  ) {                                                                                                                  // 91\n    // We currently don't have a way to track moves here but if we use iterators                                       // 92\n    // instead of for..in we can zip the iterators and check if an item has                                            // 93\n    // moved.                                                                                                          // 94\n    // TODO: If nothing has changed, return the prevChildren object so that we                                         // 95\n    // can quickly bailout if nothing has changed.                                                                     // 96\n    if (!nextChildren && !prevChildren) {                                                                              // 97\n      return;                                                                                                          // 98\n    }                                                                                                                  // 99\n    var name;                                                                                                          // 100\n    var prevChild;                                                                                                     // 101\n    for (name in nextChildren) {                                                                                       // 102\n      if (!nextChildren.hasOwnProperty(name)) {                                                                        // 103\n        continue;                                                                                                      // 104\n      }                                                                                                                // 105\n      prevChild = prevChildren && prevChildren[name];                                                                  // 106\n      var prevElement = prevChild && prevChild._currentElement;                                                        // 107\n      var nextElement = nextChildren[name];                                                                            // 108\n      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {                                 // 109\n        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);                                // 110\n        nextChildren[name] = prevChild;                                                                                // 111\n      } else {                                                                                                         // 112\n        if (prevChild) {                                                                                               // 113\n          removedNodes[name] = ReactReconciler.getHostNode(prevChild);                                                 // 114\n          ReactReconciler.unmountComponent(prevChild, false);                                                          // 115\n        }                                                                                                              // 116\n        // The child must be instantiated before it's mounted.                                                         // 117\n        var nextChildInstance = instantiateReactComponent(nextElement, true);                                          // 118\n        nextChildren[name] = nextChildInstance;                                                                        // 119\n        // Creating mount image now ensures refs are resolved in right order                                           // 120\n        // (see https://github.com/facebook/react/pull/7101 for explanation).                                          // 121\n        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);\n        mountImages.push(nextChildMountImage);                                                                         // 123\n      }                                                                                                                // 124\n    }                                                                                                                  // 125\n    // Unmount children that are no longer present.                                                                    // 126\n    for (name in prevChildren) {                                                                                       // 127\n      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {                 // 128\n        prevChild = prevChildren[name];                                                                                // 129\n        removedNodes[name] = ReactReconciler.getHostNode(prevChild);                                                   // 130\n        ReactReconciler.unmountComponent(prevChild, false);                                                            // 131\n      }                                                                                                                // 132\n    }                                                                                                                  // 133\n  },                                                                                                                   // 134\n                                                                                                                       // 135\n  /**                                                                                                                  // 136\n   * Unmounts all rendered children. This should be used to clean up children                                          // 137\n   * when this component is unmounted.                                                                                 // 138\n   *                                                                                                                   // 139\n   * @param {?object} renderedChildren Previously initialized set of children.                                         // 140\n   * @internal                                                                                                         // 141\n   */                                                                                                                  // 142\n  unmountChildren: function (renderedChildren, safely) {                                                               // 143\n    for (var name in renderedChildren) {                                                                               // 144\n      if (renderedChildren.hasOwnProperty(name)) {                                                                     // 145\n        var renderedChild = renderedChildren[name];                                                                    // 146\n        ReactReconciler.unmountComponent(renderedChild, safely);                                                       // 147\n      }                                                                                                                // 148\n    }                                                                                                                  // 149\n  }                                                                                                                    // 150\n                                                                                                                       // 151\n};                                                                                                                     // 152\n                                                                                                                       // 153\nmodule.exports = ReactChildReconciler;                                                                                 // 154\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"instantiateReactComponent.js\":[\"./reactProdInvariant\",\"object-assign\",\"./ReactCompositeComponent\",\"./ReactEmptyComponent\",\"./ReactHostComponent\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/instantiateReactComponent.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule instantiateReactComponent                                                                           // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 14\n    _assign = require('object-assign');                                                                                // 15\n                                                                                                                       // 16\nvar ReactCompositeComponent = require('./ReactCompositeComponent');                                                    // 17\nvar ReactEmptyComponent = require('./ReactEmptyComponent');                                                            // 18\nvar ReactHostComponent = require('./ReactHostComponent');                                                              // 19\n                                                                                                                       // 20\nvar invariant = require('fbjs/lib/invariant');                                                                         // 21\nvar warning = require('fbjs/lib/warning');                                                                             // 22\n                                                                                                                       // 23\n// To avoid a cyclic dependency, we create the final class in this module                                              // 24\nvar ReactCompositeComponentWrapper = function (element) {                                                              // 25\n  this.construct(element);                                                                                             // 26\n};                                                                                                                     // 27\n_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {                                     // 28\n  _instantiateReactComponent: instantiateReactComponent                                                                // 29\n});                                                                                                                    // 30\n                                                                                                                       // 31\nfunction getDeclarationErrorAddendum(owner) {                                                                          // 32\n  if (owner) {                                                                                                         // 33\n    var name = owner.getName();                                                                                        // 34\n    if (name) {                                                                                                        // 35\n      return ' Check the render method of `' + name + '`.';                                                            // 36\n    }                                                                                                                  // 37\n  }                                                                                                                    // 38\n  return '';                                                                                                           // 39\n}                                                                                                                      // 40\n                                                                                                                       // 41\n/**                                                                                                                    // 42\n * Check if the type reference is a known internal type. I.e. not a user                                               // 43\n * provided composite type.                                                                                            // 44\n *                                                                                                                     // 45\n * @param {function} type                                                                                              // 46\n * @return {boolean} Returns true if this is a valid internal type.                                                    // 47\n */                                                                                                                    // 48\nfunction isInternalComponentType(type) {                                                                               // 49\n  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';\n}                                                                                                                      // 51\n                                                                                                                       // 52\nvar nextDebugID = 1;                                                                                                   // 53\n                                                                                                                       // 54\n/**                                                                                                                    // 55\n * Given a ReactNode, create an instance that will actually be mounted.                                                // 56\n *                                                                                                                     // 57\n * @param {ReactNode} node                                                                                             // 58\n * @param {boolean} shouldHaveDebugID                                                                                  // 59\n * @return {object} A new instance of the element's constructor.                                                       // 60\n * @protected                                                                                                          // 61\n */                                                                                                                    // 62\nfunction instantiateReactComponent(node, shouldHaveDebugID) {                                                          // 63\n  var instance;                                                                                                        // 64\n                                                                                                                       // 65\n  if (node === null || node === false) {                                                                               // 66\n    instance = ReactEmptyComponent.create(instantiateReactComponent);                                                  // 67\n  } else if (typeof node === 'object') {                                                                               // 68\n    var element = node;                                                                                                // 69\n    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : _prodInvariant('130', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : void 0;\n                                                                                                                       // 71\n    // Special case string values                                                                                      // 72\n    if (typeof element.type === 'string') {                                                                            // 73\n      instance = ReactHostComponent.createInternalComponent(element);                                                  // 74\n    } else if (isInternalComponentType(element.type)) {                                                                // 75\n      // This is temporarily available for custom components that are not string                                       // 76\n      // representations. I.e. ART. Once those are updated to use the string                                           // 77\n      // representation, we can drop this code path.                                                                   // 78\n      instance = new element.type(element);                                                                            // 79\n                                                                                                                       // 80\n      // We renamed this. Allow the old name for compat. :(                                                            // 81\n      if (!instance.getHostNode) {                                                                                     // 82\n        instance.getHostNode = instance.getNativeNode;                                                                 // 83\n      }                                                                                                                // 84\n    } else {                                                                                                           // 85\n      instance = new ReactCompositeComponentWrapper(element);                                                          // 86\n    }                                                                                                                  // 87\n  } else if (typeof node === 'string' || typeof node === 'number') {                                                   // 88\n    instance = ReactHostComponent.createInstanceForText(node);                                                         // 89\n  } else {                                                                                                             // 90\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;\n  }                                                                                                                    // 92\n                                                                                                                       // 93\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 94\n    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;\n  }                                                                                                                    // 96\n                                                                                                                       // 97\n  // These two fields are used by the DOM and ART diffing algorithms                                                   // 98\n  // respectively. Instead of using expandos on components, we should be                                               // 99\n  // storing the state needed by the diffing algorithms elsewhere.                                                     // 100\n  instance._mountIndex = 0;                                                                                            // 101\n  instance._mountImage = null;                                                                                         // 102\n                                                                                                                       // 103\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 104\n    instance._debugID = shouldHaveDebugID ? nextDebugID++ : 0;                                                         // 105\n  }                                                                                                                    // 106\n                                                                                                                       // 107\n  // Internal instances should fully constructed at this point, so they should                                         // 108\n  // not get any new fields added to them at this point.                                                               // 109\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 110\n    if (Object.preventExtensions) {                                                                                    // 111\n      Object.preventExtensions(instance);                                                                              // 112\n    }                                                                                                                  // 113\n  }                                                                                                                    // 114\n                                                                                                                       // 115\n  return instance;                                                                                                     // 116\n}                                                                                                                      // 117\n                                                                                                                       // 118\nmodule.exports = instantiateReactComponent;                                                                            // 119\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactCompositeComponent.js\":[\"./reactProdInvariant\",\"object-assign\",\"./ReactComponentEnvironment\",\"./ReactCurrentOwner\",\"./ReactElement\",\"./ReactErrorUtils\",\"./ReactInstanceMap\",\"./ReactInstrumentation\",\"./ReactNodeTypes\",\"./ReactPropTypeLocations\",\"./ReactReconciler\",\"./checkReactTypeSpec\",\"fbjs/lib/emptyObject\",\"fbjs/lib/invariant\",\"fbjs/lib/shallowEqual\",\"./shouldUpdateReactComponent\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactCompositeComponent.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactCompositeComponent                                                                             // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 14\n    _assign = require('object-assign');                                                                                // 15\n                                                                                                                       // 16\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');                                                // 17\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 18\nvar ReactElement = require('./ReactElement');                                                                          // 19\nvar ReactErrorUtils = require('./ReactErrorUtils');                                                                    // 20\nvar ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 21\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 22\nvar ReactNodeTypes = require('./ReactNodeTypes');                                                                      // 23\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');                                                      // 24\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 25\n                                                                                                                       // 26\nvar checkReactTypeSpec = require('./checkReactTypeSpec');                                                              // 27\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                     // 28\nvar invariant = require('fbjs/lib/invariant');                                                                         // 29\nvar shallowEqual = require('fbjs/lib/shallowEqual');                                                                   // 30\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');                                              // 31\nvar warning = require('fbjs/lib/warning');                                                                             // 32\n                                                                                                                       // 33\nvar CompositeTypes = {                                                                                                 // 34\n  ImpureClass: 0,                                                                                                      // 35\n  PureClass: 1,                                                                                                        // 36\n  StatelessFunctional: 2                                                                                               // 37\n};                                                                                                                     // 38\n                                                                                                                       // 39\nfunction StatelessComponent(Component) {}                                                                              // 40\nStatelessComponent.prototype.render = function () {                                                                    // 41\n  var Component = ReactInstanceMap.get(this)._currentElement.type;                                                     // 42\n  var element = Component(this.props, this.context, this.updater);                                                     // 43\n  warnIfInvalidElement(Component, element);                                                                            // 44\n  return element;                                                                                                      // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\nfunction warnIfInvalidElement(Component, element) {                                                                    // 48\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 49\n    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || ReactElement.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;\n    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;\n  }                                                                                                                    // 52\n}                                                                                                                      // 53\n                                                                                                                       // 54\nfunction shouldConstruct(Component) {                                                                                  // 55\n  return !!(Component.prototype && Component.prototype.isReactComponent);                                              // 56\n}                                                                                                                      // 57\n                                                                                                                       // 58\nfunction isPureComponent(Component) {                                                                                  // 59\n  return !!(Component.prototype && Component.prototype.isPureReactComponent);                                          // 60\n}                                                                                                                      // 61\n                                                                                                                       // 62\n// Separated into a function to contain deoptimizations caused by try/finally.                                         // 63\nfunction measureLifeCyclePerf(fn, debugID, timerType) {                                                                // 64\n  if (debugID === 0) {                                                                                                 // 65\n    // Top-level wrappers (see ReactMount) and empty components (see                                                   // 66\n    // ReactDOMEmptyComponent) are invisible to hooks and devtools.                                                    // 67\n    // Both are implementation details that should go away in the future.                                              // 68\n    return fn();                                                                                                       // 69\n  }                                                                                                                    // 70\n                                                                                                                       // 71\n  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);                                            // 72\n  try {                                                                                                                // 73\n    return fn();                                                                                                       // 74\n  } finally {                                                                                                          // 75\n    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);                                            // 76\n  }                                                                                                                    // 77\n}                                                                                                                      // 78\n                                                                                                                       // 79\n/**                                                                                                                    // 80\n * ------------------ The Life-Cycle of a Composite Component ------------------                                       // 81\n *                                                                                                                     // 82\n * - constructor: Initialization of state. The instance is now retained.                                               // 83\n *   - componentWillMount                                                                                              // 84\n *   - render                                                                                                          // 85\n *   - [children's constructors]                                                                                       // 86\n *     - [children's componentWillMount and render]                                                                    // 87\n *     - [children's componentDidMount]                                                                                // 88\n *     - componentDidMount                                                                                             // 89\n *                                                                                                                     // 90\n *       Update Phases:                                                                                                // 91\n *       - componentWillReceiveProps (only called if parent updated)                                                   // 92\n *       - shouldComponentUpdate                                                                                       // 93\n *         - componentWillUpdate                                                                                       // 94\n *           - render                                                                                                  // 95\n *           - [children's constructors or receive props phases]                                                       // 96\n *         - componentDidUpdate                                                                                        // 97\n *                                                                                                                     // 98\n *     - componentWillUnmount                                                                                          // 99\n *     - [children's componentWillUnmount]                                                                             // 100\n *   - [children destroyed]                                                                                            // 101\n * - (destroyed): The instance is now blank, released by React and ready for GC.                                       // 102\n *                                                                                                                     // 103\n * -----------------------------------------------------------------------------                                       // 104\n */                                                                                                                    // 105\n                                                                                                                       // 106\n/**                                                                                                                    // 107\n * An incrementing ID assigned to each component when it is mounted. This is                                           // 108\n * used to enforce the order in which `ReactUpdates` updates dirty components.                                         // 109\n *                                                                                                                     // 110\n * @private                                                                                                            // 111\n */                                                                                                                    // 112\nvar nextMountID = 1;                                                                                                   // 113\n                                                                                                                       // 114\n/**                                                                                                                    // 115\n * @lends {ReactCompositeComponent.prototype}                                                                          // 116\n */                                                                                                                    // 117\nvar ReactCompositeComponentMixin = {                                                                                   // 118\n                                                                                                                       // 119\n  /**                                                                                                                  // 120\n   * Base constructor for all composite component.                                                                     // 121\n   *                                                                                                                   // 122\n   * @param {ReactElement} element                                                                                     // 123\n   * @final                                                                                                            // 124\n   * @internal                                                                                                         // 125\n   */                                                                                                                  // 126\n  construct: function (element) {                                                                                      // 127\n    this._currentElement = element;                                                                                    // 128\n    this._rootNodeID = 0;                                                                                              // 129\n    this._compositeType = null;                                                                                        // 130\n    this._instance = null;                                                                                             // 131\n    this._hostParent = null;                                                                                           // 132\n    this._hostContainerInfo = null;                                                                                    // 133\n                                                                                                                       // 134\n    // See ReactUpdateQueue                                                                                            // 135\n    this._updateBatchNumber = null;                                                                                    // 136\n    this._pendingElement = null;                                                                                       // 137\n    this._pendingStateQueue = null;                                                                                    // 138\n    this._pendingReplaceState = false;                                                                                 // 139\n    this._pendingForceUpdate = false;                                                                                  // 140\n                                                                                                                       // 141\n    this._renderedNodeType = null;                                                                                     // 142\n    this._renderedComponent = null;                                                                                    // 143\n    this._context = null;                                                                                              // 144\n    this._mountOrder = 0;                                                                                              // 145\n    this._topLevelWrapper = null;                                                                                      // 146\n                                                                                                                       // 147\n    // See ReactUpdates and ReactUpdateQueue.                                                                          // 148\n    this._pendingCallbacks = null;                                                                                     // 149\n                                                                                                                       // 150\n    // ComponentWillUnmount shall only be called once                                                                  // 151\n    this._calledComponentWillUnmount = false;                                                                          // 152\n                                                                                                                       // 153\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 154\n      this._warnedAboutRefsInRender = false;                                                                           // 155\n    }                                                                                                                  // 156\n  },                                                                                                                   // 157\n                                                                                                                       // 158\n  /**                                                                                                                  // 159\n   * Initializes the component, renders markup, and registers event listeners.                                         // 160\n   *                                                                                                                   // 161\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 162\n   * @param {?object} hostParent                                                                                       // 163\n   * @param {?object} hostContainerInfo                                                                                // 164\n   * @param {?object} context                                                                                          // 165\n   * @return {?string} Rendered markup to be inserted into the DOM.                                                    // 166\n   * @final                                                                                                            // 167\n   * @internal                                                                                                         // 168\n   */                                                                                                                  // 169\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {                                     // 170\n    var _this = this;                                                                                                  // 171\n                                                                                                                       // 172\n    this._context = context;                                                                                           // 173\n    this._mountOrder = nextMountID++;                                                                                  // 174\n    this._hostParent = hostParent;                                                                                     // 175\n    this._hostContainerInfo = hostContainerInfo;                                                                       // 176\n                                                                                                                       // 177\n    var publicProps = this._currentElement.props;                                                                      // 178\n    var publicContext = this._processContext(context);                                                                 // 179\n                                                                                                                       // 180\n    var Component = this._currentElement.type;                                                                         // 181\n                                                                                                                       // 182\n    var updateQueue = transaction.getUpdateQueue();                                                                    // 183\n                                                                                                                       // 184\n    // Initialize the public class                                                                                     // 185\n    var doConstruct = shouldConstruct(Component);                                                                      // 186\n    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);                         // 187\n    var renderedElement;                                                                                               // 188\n                                                                                                                       // 189\n    // Support functional components                                                                                   // 190\n    if (!doConstruct && (inst == null || inst.render == null)) {                                                       // 191\n      renderedElement = inst;                                                                                          // 192\n      warnIfInvalidElement(Component, renderedElement);                                                                // 193\n      !(inst === null || inst === false || ReactElement.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;\n      inst = new StatelessComponent(Component);                                                                        // 195\n      this._compositeType = CompositeTypes.StatelessFunctional;                                                        // 196\n    } else {                                                                                                           // 197\n      if (isPureComponent(Component)) {                                                                                // 198\n        this._compositeType = CompositeTypes.PureClass;                                                                // 199\n      } else {                                                                                                         // 200\n        this._compositeType = CompositeTypes.ImpureClass;                                                              // 201\n      }                                                                                                                // 202\n    }                                                                                                                  // 203\n                                                                                                                       // 204\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 205\n      // This will throw later in _renderValidatedComponent, but add an early                                          // 206\n      // warning now to help debugging                                                                                 // 207\n      if (inst.render == null) {                                                                                       // 208\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;\n      }                                                                                                                // 210\n                                                                                                                       // 211\n      var propsMutated = inst.props !== publicProps;                                                                   // 212\n      var componentName = Component.displayName || Component.name || 'Component';                                      // 213\n                                                                                                                       // 214\n      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\\'s constructor was passed.', componentName, componentName) : void 0;\n    }                                                                                                                  // 216\n                                                                                                                       // 217\n    // These should be set up in the constructor, but as a convenience for                                             // 218\n    // simpler class abstractions, we set them up after the fact.                                                      // 219\n    inst.props = publicProps;                                                                                          // 220\n    inst.context = publicContext;                                                                                      // 221\n    inst.refs = emptyObject;                                                                                           // 222\n    inst.updater = updateQueue;                                                                                        // 223\n                                                                                                                       // 224\n    this._instance = inst;                                                                                             // 225\n                                                                                                                       // 226\n    // Store a reference from the instance back to the internal representation                                         // 227\n    ReactInstanceMap.set(inst, this);                                                                                  // 228\n                                                                                                                       // 229\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 230\n      // Since plain JS classes are defined without any special initialization                                         // 231\n      // logic, we can not catch common errors early. Therefore, we have to                                            // 232\n      // catch them here, at initialization time, instead.                                                             // 233\n      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;\n    }                                                                                                                  // 241\n                                                                                                                       // 242\n    var initialState = inst.state;                                                                                     // 243\n    if (initialState === undefined) {                                                                                  // 244\n      inst.state = initialState = null;                                                                                // 245\n    }                                                                                                                  // 246\n    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;\n                                                                                                                       // 248\n    this._pendingStateQueue = null;                                                                                    // 249\n    this._pendingReplaceState = false;                                                                                 // 250\n    this._pendingForceUpdate = false;                                                                                  // 251\n                                                                                                                       // 252\n    var markup;                                                                                                        // 253\n    if (inst.unstable_handleError) {                                                                                   // 254\n      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);\n    } else {                                                                                                           // 256\n      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);         // 257\n    }                                                                                                                  // 258\n                                                                                                                       // 259\n    if (inst.componentDidMount) {                                                                                      // 260\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 261\n        transaction.getReactMountReady().enqueue(function () {                                                         // 262\n          measureLifeCyclePerf(function () {                                                                           // 263\n            return inst.componentDidMount();                                                                           // 264\n          }, _this._debugID, 'componentDidMount');                                                                     // 265\n        });                                                                                                            // 266\n      } else {                                                                                                         // 267\n        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);                                        // 268\n      }                                                                                                                // 269\n    }                                                                                                                  // 270\n                                                                                                                       // 271\n    return markup;                                                                                                     // 272\n  },                                                                                                                   // 273\n                                                                                                                       // 274\n  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {                               // 275\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 276\n      ReactCurrentOwner.current = this;                                                                                // 277\n      try {                                                                                                            // 278\n        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);             // 279\n      } finally {                                                                                                      // 280\n        ReactCurrentOwner.current = null;                                                                              // 281\n      }                                                                                                                // 282\n    } else {                                                                                                           // 283\n      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);               // 284\n    }                                                                                                                  // 285\n  },                                                                                                                   // 286\n                                                                                                                       // 287\n  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {                   // 288\n    var Component = this._currentElement.type;                                                                         // 289\n                                                                                                                       // 290\n    if (doConstruct) {                                                                                                 // 291\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 292\n        return measureLifeCyclePerf(function () {                                                                      // 293\n          return new Component(publicProps, publicContext, updateQueue);                                               // 294\n        }, this._debugID, 'ctor');                                                                                     // 295\n      } else {                                                                                                         // 296\n        return new Component(publicProps, publicContext, updateQueue);                                                 // 297\n      }                                                                                                                // 298\n    }                                                                                                                  // 299\n                                                                                                                       // 300\n    // This can still be an instance in case of factory components                                                     // 301\n    // but we'll count this as time spent rendering as the more common case.                                           // 302\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 303\n      return measureLifeCyclePerf(function () {                                                                        // 304\n        return Component(publicProps, publicContext, updateQueue);                                                     // 305\n      }, this._debugID, 'render');                                                                                     // 306\n    } else {                                                                                                           // 307\n      return Component(publicProps, publicContext, updateQueue);                                                       // 308\n    }                                                                                                                  // 309\n  },                                                                                                                   // 310\n                                                                                                                       // 311\n  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {\n    var markup;                                                                                                        // 313\n    var checkpoint = transaction.checkpoint();                                                                         // 314\n    try {                                                                                                              // 315\n      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);         // 316\n    } catch (e) {                                                                                                      // 317\n      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint     // 318\n      transaction.rollback(checkpoint);                                                                                // 319\n      this._instance.unstable_handleError(e);                                                                          // 320\n      if (this._pendingStateQueue) {                                                                                   // 321\n        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);                // 322\n      }                                                                                                                // 323\n      checkpoint = transaction.checkpoint();                                                                           // 324\n                                                                                                                       // 325\n      this._renderedComponent.unmountComponent(true);                                                                  // 326\n      transaction.rollback(checkpoint);                                                                                // 327\n                                                                                                                       // 328\n      // Try again - we've informed the component about the error, so they can render an error message this time.      // 329\n      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).                // 330\n      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);         // 331\n    }                                                                                                                  // 332\n    return markup;                                                                                                     // 333\n  },                                                                                                                   // 334\n                                                                                                                       // 335\n  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {               // 336\n    var inst = this._instance;                                                                                         // 337\n                                                                                                                       // 338\n    var debugID = 0;                                                                                                   // 339\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 340\n      debugID = this._debugID;                                                                                         // 341\n    }                                                                                                                  // 342\n                                                                                                                       // 343\n    if (inst.componentWillMount) {                                                                                     // 344\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 345\n        measureLifeCyclePerf(function () {                                                                             // 346\n          return inst.componentWillMount();                                                                            // 347\n        }, debugID, 'componentWillMount');                                                                             // 348\n      } else {                                                                                                         // 349\n        inst.componentWillMount();                                                                                     // 350\n      }                                                                                                                // 351\n      // When mounting, calls to `setState` by `componentWillMount` will set                                           // 352\n      // `this._pendingStateQueue` without triggering a re-render.                                                     // 353\n      if (this._pendingStateQueue) {                                                                                   // 354\n        inst.state = this._processPendingState(inst.props, inst.context);                                              // 355\n      }                                                                                                                // 356\n    }                                                                                                                  // 357\n                                                                                                                       // 358\n    // If not a stateless component, we now render                                                                     // 359\n    if (renderedElement === undefined) {                                                                               // 360\n      renderedElement = this._renderValidatedComponent();                                                              // 361\n    }                                                                                                                  // 362\n                                                                                                                       // 363\n    var nodeType = ReactNodeTypes.getType(renderedElement);                                                            // 364\n    this._renderedNodeType = nodeType;                                                                                 // 365\n    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */\n    );                                                                                                                 // 367\n    this._renderedComponent = child;                                                                                   // 368\n                                                                                                                       // 369\n    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);\n                                                                                                                       // 371\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 372\n      if (debugID !== 0) {                                                                                             // 373\n        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];                                              // 374\n        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);                                          // 375\n      }                                                                                                                // 376\n    }                                                                                                                  // 377\n                                                                                                                       // 378\n    return markup;                                                                                                     // 379\n  },                                                                                                                   // 380\n                                                                                                                       // 381\n  getHostNode: function () {                                                                                           // 382\n    return ReactReconciler.getHostNode(this._renderedComponent);                                                       // 383\n  },                                                                                                                   // 384\n                                                                                                                       // 385\n  /**                                                                                                                  // 386\n   * Releases any resources allocated by `mountComponent`.                                                             // 387\n   *                                                                                                                   // 388\n   * @final                                                                                                            // 389\n   * @internal                                                                                                         // 390\n   */                                                                                                                  // 391\n  unmountComponent: function (safely) {                                                                                // 392\n    if (!this._renderedComponent) {                                                                                    // 393\n      return;                                                                                                          // 394\n    }                                                                                                                  // 395\n                                                                                                                       // 396\n    var inst = this._instance;                                                                                         // 397\n                                                                                                                       // 398\n    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {                                              // 399\n      inst._calledComponentWillUnmount = true;                                                                         // 400\n                                                                                                                       // 401\n      if (safely) {                                                                                                    // 402\n        var name = this.getName() + '.componentWillUnmount()';                                                         // 403\n        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));                             // 404\n      } else {                                                                                                         // 405\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 406\n          measureLifeCyclePerf(function () {                                                                           // 407\n            return inst.componentWillUnmount();                                                                        // 408\n          }, this._debugID, 'componentWillUnmount');                                                                   // 409\n        } else {                                                                                                       // 410\n          inst.componentWillUnmount();                                                                                 // 411\n        }                                                                                                              // 412\n      }                                                                                                                // 413\n    }                                                                                                                  // 414\n                                                                                                                       // 415\n    if (this._renderedComponent) {                                                                                     // 416\n      ReactReconciler.unmountComponent(this._renderedComponent, safely);                                               // 417\n      this._renderedNodeType = null;                                                                                   // 418\n      this._renderedComponent = null;                                                                                  // 419\n      this._instance = null;                                                                                           // 420\n    }                                                                                                                  // 421\n                                                                                                                       // 422\n    // Reset pending fields                                                                                            // 423\n    // Even if this component is scheduled for another update in ReactUpdates,                                         // 424\n    // it would still be ignored because these fields are reset.                                                       // 425\n    this._pendingStateQueue = null;                                                                                    // 426\n    this._pendingReplaceState = false;                                                                                 // 427\n    this._pendingForceUpdate = false;                                                                                  // 428\n    this._pendingCallbacks = null;                                                                                     // 429\n    this._pendingElement = null;                                                                                       // 430\n                                                                                                                       // 431\n    // These fields do not really need to be reset since this object is no                                             // 432\n    // longer accessible.                                                                                              // 433\n    this._context = null;                                                                                              // 434\n    this._rootNodeID = 0;                                                                                              // 435\n    this._topLevelWrapper = null;                                                                                      // 436\n                                                                                                                       // 437\n    // Delete the reference from the instance to this internal representation                                          // 438\n    // which allow the internals to be properly cleaned up even if the user                                            // 439\n    // leaks a reference to the public instance.                                                                       // 440\n    ReactInstanceMap.remove(inst);                                                                                     // 441\n                                                                                                                       // 442\n    // Some existing components rely on inst.props even after they've been                                             // 443\n    // destroyed (in event handlers).                                                                                  // 444\n    // TODO: inst.props = null;                                                                                        // 445\n    // TODO: inst.state = null;                                                                                        // 446\n    // TODO: inst.context = null;                                                                                      // 447\n  },                                                                                                                   // 448\n                                                                                                                       // 449\n  /**                                                                                                                  // 450\n   * Filters the context object to only contain keys specified in                                                      // 451\n   * `contextTypes`                                                                                                    // 452\n   *                                                                                                                   // 453\n   * @param {object} context                                                                                           // 454\n   * @return {?object}                                                                                                 // 455\n   * @private                                                                                                          // 456\n   */                                                                                                                  // 457\n  _maskContext: function (context) {                                                                                   // 458\n    var Component = this._currentElement.type;                                                                         // 459\n    var contextTypes = Component.contextTypes;                                                                         // 460\n    if (!contextTypes) {                                                                                               // 461\n      return emptyObject;                                                                                              // 462\n    }                                                                                                                  // 463\n    var maskedContext = {};                                                                                            // 464\n    for (var contextName in contextTypes) {                                                                            // 465\n      maskedContext[contextName] = context[contextName];                                                               // 466\n    }                                                                                                                  // 467\n    return maskedContext;                                                                                              // 468\n  },                                                                                                                   // 469\n                                                                                                                       // 470\n  /**                                                                                                                  // 471\n   * Filters the context object to only contain keys specified in                                                      // 472\n   * `contextTypes`, and asserts that they are valid.                                                                  // 473\n   *                                                                                                                   // 474\n   * @param {object} context                                                                                           // 475\n   * @return {?object}                                                                                                 // 476\n   * @private                                                                                                          // 477\n   */                                                                                                                  // 478\n  _processContext: function (context) {                                                                                // 479\n    var maskedContext = this._maskContext(context);                                                                    // 480\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 481\n      var Component = this._currentElement.type;                                                                       // 482\n      if (Component.contextTypes) {                                                                                    // 483\n        this._checkContextTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);                // 484\n      }                                                                                                                // 485\n    }                                                                                                                  // 486\n    return maskedContext;                                                                                              // 487\n  },                                                                                                                   // 488\n                                                                                                                       // 489\n  /**                                                                                                                  // 490\n   * @param {object} currentContext                                                                                    // 491\n   * @return {object}                                                                                                  // 492\n   * @private                                                                                                          // 493\n   */                                                                                                                  // 494\n  _processChildContext: function (currentContext) {                                                                    // 495\n    var Component = this._currentElement.type;                                                                         // 496\n    var inst = this._instance;                                                                                         // 497\n    var childContext;                                                                                                  // 498\n                                                                                                                       // 499\n    if (inst.getChildContext) {                                                                                        // 500\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 501\n        ReactInstrumentation.debugTool.onBeginProcessingChildContext();                                                // 502\n        try {                                                                                                          // 503\n          childContext = inst.getChildContext();                                                                       // 504\n        } finally {                                                                                                    // 505\n          ReactInstrumentation.debugTool.onEndProcessingChildContext();                                                // 506\n        }                                                                                                              // 507\n      } else {                                                                                                         // 508\n        childContext = inst.getChildContext();                                                                         // 509\n      }                                                                                                                // 510\n    }                                                                                                                  // 511\n                                                                                                                       // 512\n    if (childContext) {                                                                                                // 513\n      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 515\n        this._checkContextTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);       // 516\n      }                                                                                                                // 517\n      for (var name in childContext) {                                                                                 // 518\n        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;\n      }                                                                                                                // 520\n      return _assign({}, currentContext, childContext);                                                                // 521\n    }                                                                                                                  // 522\n    return currentContext;                                                                                             // 523\n  },                                                                                                                   // 524\n                                                                                                                       // 525\n  /**                                                                                                                  // 526\n   * Assert that the context types are valid                                                                           // 527\n   *                                                                                                                   // 528\n   * @param {object} typeSpecs Map of context field to a ReactPropType                                                 // 529\n   * @param {object} values Runtime values that need to be type-checked                                                // 530\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"                                                  // 531\n   * @private                                                                                                          // 532\n   */                                                                                                                  // 533\n  _checkContextTypes: function (typeSpecs, values, location) {                                                         // 534\n    checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);                              // 535\n  },                                                                                                                   // 536\n                                                                                                                       // 537\n  receiveComponent: function (nextElement, transaction, nextContext) {                                                 // 538\n    var prevElement = this._currentElement;                                                                            // 539\n    var prevContext = this._context;                                                                                   // 540\n                                                                                                                       // 541\n    this._pendingElement = null;                                                                                       // 542\n                                                                                                                       // 543\n    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);                             // 544\n  },                                                                                                                   // 545\n                                                                                                                       // 546\n  /**                                                                                                                  // 547\n   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`                                       // 548\n   * is set, update the component.                                                                                     // 549\n   *                                                                                                                   // 550\n   * @param {ReactReconcileTransaction} transaction                                                                    // 551\n   * @internal                                                                                                         // 552\n   */                                                                                                                  // 553\n  performUpdateIfNecessary: function (transaction) {                                                                   // 554\n    if (this._pendingElement != null) {                                                                                // 555\n      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);                        // 556\n    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {                                         // 557\n      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);     // 558\n    } else {                                                                                                           // 559\n      this._updateBatchNumber = null;                                                                                  // 560\n    }                                                                                                                  // 561\n  },                                                                                                                   // 562\n                                                                                                                       // 563\n  /**                                                                                                                  // 564\n   * Perform an update to a mounted component. The componentWillReceiveProps and                                       // 565\n   * shouldComponentUpdate methods are called, then (assuming the update isn't                                         // 566\n   * skipped) the remaining update lifecycle methods are called and the DOM                                            // 567\n   * representation is updated.                                                                                        // 568\n   *                                                                                                                   // 569\n   * By default, this implements React's rendering and reconciliation algorithm.                                       // 570\n   * Sophisticated clients may wish to override this.                                                                  // 571\n   *                                                                                                                   // 572\n   * @param {ReactReconcileTransaction} transaction                                                                    // 573\n   * @param {ReactElement} prevParentElement                                                                           // 574\n   * @param {ReactElement} nextParentElement                                                                           // 575\n   * @internal                                                                                                         // 576\n   * @overridable                                                                                                      // 577\n   */                                                                                                                  // 578\n  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {\n    var inst = this._instance;                                                                                         // 580\n    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;\n                                                                                                                       // 582\n    var willReceive = false;                                                                                           // 583\n    var nextContext;                                                                                                   // 584\n                                                                                                                       // 585\n    // Determine if the context has changed or not                                                                     // 586\n    if (this._context === nextUnmaskedContext) {                                                                       // 587\n      nextContext = inst.context;                                                                                      // 588\n    } else {                                                                                                           // 589\n      nextContext = this._processContext(nextUnmaskedContext);                                                         // 590\n      willReceive = true;                                                                                              // 591\n    }                                                                                                                  // 592\n                                                                                                                       // 593\n    var prevProps = prevParentElement.props;                                                                           // 594\n    var nextProps = nextParentElement.props;                                                                           // 595\n                                                                                                                       // 596\n    // Not a simple state update but a props update                                                                    // 597\n    if (prevParentElement !== nextParentElement) {                                                                     // 598\n      willReceive = true;                                                                                              // 599\n    }                                                                                                                  // 600\n                                                                                                                       // 601\n    // An update here will schedule an update but immediately set                                                      // 602\n    // _pendingStateQueue which will ensure that any state updates gets                                                // 603\n    // immediately reconciled instead of waiting for the next batch.                                                   // 604\n    if (willReceive && inst.componentWillReceiveProps) {                                                               // 605\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 606\n        measureLifeCyclePerf(function () {                                                                             // 607\n          return inst.componentWillReceiveProps(nextProps, nextContext);                                               // 608\n        }, this._debugID, 'componentWillReceiveProps');                                                                // 609\n      } else {                                                                                                         // 610\n        inst.componentWillReceiveProps(nextProps, nextContext);                                                        // 611\n      }                                                                                                                // 612\n    }                                                                                                                  // 613\n                                                                                                                       // 614\n    var nextState = this._processPendingState(nextProps, nextContext);                                                 // 615\n    var shouldUpdate = true;                                                                                           // 616\n                                                                                                                       // 617\n    if (!this._pendingForceUpdate) {                                                                                   // 618\n      if (inst.shouldComponentUpdate) {                                                                                // 619\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 620\n          shouldUpdate = measureLifeCyclePerf(function () {                                                            // 621\n            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);                                      // 622\n          }, this._debugID, 'shouldComponentUpdate');                                                                  // 623\n        } else {                                                                                                       // 624\n          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);                                // 625\n        }                                                                                                              // 626\n      } else {                                                                                                         // 627\n        if (this._compositeType === CompositeTypes.PureClass) {                                                        // 628\n          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);                  // 629\n        }                                                                                                              // 630\n      }                                                                                                                // 631\n    }                                                                                                                  // 632\n                                                                                                                       // 633\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 634\n      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;\n    }                                                                                                                  // 636\n                                                                                                                       // 637\n    this._updateBatchNumber = null;                                                                                    // 638\n    if (shouldUpdate) {                                                                                                // 639\n      this._pendingForceUpdate = false;                                                                                // 640\n      // Will set `this.props`, `this.state` and `this.context`.                                                       // 641\n      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);\n    } else {                                                                                                           // 643\n      // If it's determined that a component should not update, we still want                                          // 644\n      // to set props and state but we shortcut the rest of the update.                                                // 645\n      this._currentElement = nextParentElement;                                                                        // 646\n      this._context = nextUnmaskedContext;                                                                             // 647\n      inst.props = nextProps;                                                                                          // 648\n      inst.state = nextState;                                                                                          // 649\n      inst.context = nextContext;                                                                                      // 650\n    }                                                                                                                  // 651\n  },                                                                                                                   // 652\n                                                                                                                       // 653\n  _processPendingState: function (props, context) {                                                                    // 654\n    var inst = this._instance;                                                                                         // 655\n    var queue = this._pendingStateQueue;                                                                               // 656\n    var replace = this._pendingReplaceState;                                                                           // 657\n    this._pendingReplaceState = false;                                                                                 // 658\n    this._pendingStateQueue = null;                                                                                    // 659\n                                                                                                                       // 660\n    if (!queue) {                                                                                                      // 661\n      return inst.state;                                                                                               // 662\n    }                                                                                                                  // 663\n                                                                                                                       // 664\n    if (replace && queue.length === 1) {                                                                               // 665\n      return queue[0];                                                                                                 // 666\n    }                                                                                                                  // 667\n                                                                                                                       // 668\n    var nextState = _assign({}, replace ? queue[0] : inst.state);                                                      // 669\n    for (var i = replace ? 1 : 0; i < queue.length; i++) {                                                             // 670\n      var partial = queue[i];                                                                                          // 671\n      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);     // 672\n    }                                                                                                                  // 673\n                                                                                                                       // 674\n    return nextState;                                                                                                  // 675\n  },                                                                                                                   // 676\n                                                                                                                       // 677\n  /**                                                                                                                  // 678\n   * Merges new props and state, notifies delegate methods of update and                                               // 679\n   * performs update.                                                                                                  // 680\n   *                                                                                                                   // 681\n   * @param {ReactElement} nextElement Next element                                                                    // 682\n   * @param {object} nextProps Next public object to set as properties.                                                // 683\n   * @param {?object} nextState Next object to set as state.                                                           // 684\n   * @param {?object} nextContext Next public object to set as context.                                                // 685\n   * @param {ReactReconcileTransaction} transaction                                                                    // 686\n   * @param {?object} unmaskedContext                                                                                  // 687\n   * @private                                                                                                          // 688\n   */                                                                                                                  // 689\n  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {   // 690\n    var _this2 = this;                                                                                                 // 691\n                                                                                                                       // 692\n    var inst = this._instance;                                                                                         // 693\n                                                                                                                       // 694\n    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);                                                      // 695\n    var prevProps;                                                                                                     // 696\n    var prevState;                                                                                                     // 697\n    var prevContext;                                                                                                   // 698\n    if (hasComponentDidUpdate) {                                                                                       // 699\n      prevProps = inst.props;                                                                                          // 700\n      prevState = inst.state;                                                                                          // 701\n      prevContext = inst.context;                                                                                      // 702\n    }                                                                                                                  // 703\n                                                                                                                       // 704\n    if (inst.componentWillUpdate) {                                                                                    // 705\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 706\n        measureLifeCyclePerf(function () {                                                                             // 707\n          return inst.componentWillUpdate(nextProps, nextState, nextContext);                                          // 708\n        }, this._debugID, 'componentWillUpdate');                                                                      // 709\n      } else {                                                                                                         // 710\n        inst.componentWillUpdate(nextProps, nextState, nextContext);                                                   // 711\n      }                                                                                                                // 712\n    }                                                                                                                  // 713\n                                                                                                                       // 714\n    this._currentElement = nextElement;                                                                                // 715\n    this._context = unmaskedContext;                                                                                   // 716\n    inst.props = nextProps;                                                                                            // 717\n    inst.state = nextState;                                                                                            // 718\n    inst.context = nextContext;                                                                                        // 719\n                                                                                                                       // 720\n    this._updateRenderedComponent(transaction, unmaskedContext);                                                       // 721\n                                                                                                                       // 722\n    if (hasComponentDidUpdate) {                                                                                       // 723\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 724\n        transaction.getReactMountReady().enqueue(function () {                                                         // 725\n          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');\n        });                                                                                                            // 727\n      } else {                                                                                                         // 728\n        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);\n      }                                                                                                                // 730\n    }                                                                                                                  // 731\n  },                                                                                                                   // 732\n                                                                                                                       // 733\n  /**                                                                                                                  // 734\n   * Call the component's `render` method and update the DOM accordingly.                                              // 735\n   *                                                                                                                   // 736\n   * @param {ReactReconcileTransaction} transaction                                                                    // 737\n   * @internal                                                                                                         // 738\n   */                                                                                                                  // 739\n  _updateRenderedComponent: function (transaction, context) {                                                          // 740\n    var prevComponentInstance = this._renderedComponent;                                                               // 741\n    var prevRenderedElement = prevComponentInstance._currentElement;                                                   // 742\n    var nextRenderedElement = this._renderValidatedComponent();                                                        // 743\n                                                                                                                       // 744\n    var debugID = 0;                                                                                                   // 745\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 746\n      debugID = this._debugID;                                                                                         // 747\n    }                                                                                                                  // 748\n                                                                                                                       // 749\n    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {                                        // 750\n      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));\n    } else {                                                                                                           // 752\n      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);                                            // 753\n      ReactReconciler.unmountComponent(prevComponentInstance, false);                                                  // 754\n                                                                                                                       // 755\n      var nodeType = ReactNodeTypes.getType(nextRenderedElement);                                                      // 756\n      this._renderedNodeType = nodeType;                                                                               // 757\n      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */\n      );                                                                                                               // 759\n      this._renderedComponent = child;                                                                                 // 760\n                                                                                                                       // 761\n      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);\n                                                                                                                       // 763\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 764\n        if (debugID !== 0) {                                                                                           // 765\n          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];                                            // 766\n          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);                                        // 767\n        }                                                                                                              // 768\n      }                                                                                                                // 769\n                                                                                                                       // 770\n      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);                                     // 771\n    }                                                                                                                  // 772\n  },                                                                                                                   // 773\n                                                                                                                       // 774\n  /**                                                                                                                  // 775\n   * Overridden in shallow rendering.                                                                                  // 776\n   *                                                                                                                   // 777\n   * @protected                                                                                                        // 778\n   */                                                                                                                  // 779\n  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {                                           // 780\n    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);                            // 781\n  },                                                                                                                   // 782\n                                                                                                                       // 783\n  /**                                                                                                                  // 784\n   * @protected                                                                                                        // 785\n   */                                                                                                                  // 786\n  _renderValidatedComponentWithoutOwnerOrContext: function () {                                                        // 787\n    var inst = this._instance;                                                                                         // 788\n    var renderedComponent;                                                                                             // 789\n                                                                                                                       // 790\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 791\n      renderedComponent = measureLifeCyclePerf(function () {                                                           // 792\n        return inst.render();                                                                                          // 793\n      }, this._debugID, 'render');                                                                                     // 794\n    } else {                                                                                                           // 795\n      renderedComponent = inst.render();                                                                               // 796\n    }                                                                                                                  // 797\n                                                                                                                       // 798\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 799\n      // We allow auto-mocks to proceed as if they're returning null.                                                  // 800\n      if (renderedComponent === undefined && inst.render._isMockFunction) {                                            // 801\n        // This is probably bad practice. Consider warning here and                                                    // 802\n        // deprecating this convenience.                                                                               // 803\n        renderedComponent = null;                                                                                      // 804\n      }                                                                                                                // 805\n    }                                                                                                                  // 806\n                                                                                                                       // 807\n    return renderedComponent;                                                                                          // 808\n  },                                                                                                                   // 809\n                                                                                                                       // 810\n  /**                                                                                                                  // 811\n   * @private                                                                                                          // 812\n   */                                                                                                                  // 813\n  _renderValidatedComponent: function () {                                                                             // 814\n    var renderedComponent;                                                                                             // 815\n    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {         // 816\n      ReactCurrentOwner.current = this;                                                                                // 817\n      try {                                                                                                            // 818\n        renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();                                     // 819\n      } finally {                                                                                                      // 820\n        ReactCurrentOwner.current = null;                                                                              // 821\n      }                                                                                                                // 822\n    } else {                                                                                                           // 823\n      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();                                       // 824\n    }                                                                                                                  // 825\n    !(                                                                                                                 // 826\n    // TODO: An `isValidNode` function would probably be more appropriate                                              // 827\n    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;\n                                                                                                                       // 829\n    return renderedComponent;                                                                                          // 830\n  },                                                                                                                   // 831\n                                                                                                                       // 832\n  /**                                                                                                                  // 833\n   * Lazily allocates the refs object and stores `component` as `ref`.                                                 // 834\n   *                                                                                                                   // 835\n   * @param {string} ref Reference name.                                                                               // 836\n   * @param {component} component Component to store as `ref`.                                                         // 837\n   * @final                                                                                                            // 838\n   * @private                                                                                                          // 839\n   */                                                                                                                  // 840\n  attachRef: function (ref, component) {                                                                               // 841\n    var inst = this.getPublicInstance();                                                                               // 842\n    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;\n    var publicComponentInstance = component.getPublicInstance();                                                       // 844\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 845\n      var componentName = component && component.getName ? component.getName() : 'a component';                        // 846\n      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref \"%s\" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;\n    }                                                                                                                  // 848\n    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;                                                 // 849\n    refs[ref] = publicComponentInstance;                                                                               // 850\n  },                                                                                                                   // 851\n                                                                                                                       // 852\n  /**                                                                                                                  // 853\n   * Detaches a reference name.                                                                                        // 854\n   *                                                                                                                   // 855\n   * @param {string} ref Name to dereference.                                                                          // 856\n   * @final                                                                                                            // 857\n   * @private                                                                                                          // 858\n   */                                                                                                                  // 859\n  detachRef: function (ref) {                                                                                          // 860\n    var refs = this.getPublicInstance().refs;                                                                          // 861\n    delete refs[ref];                                                                                                  // 862\n  },                                                                                                                   // 863\n                                                                                                                       // 864\n  /**                                                                                                                  // 865\n   * Get a text description of the component that can be used to identify it                                           // 866\n   * in error messages.                                                                                                // 867\n   * @return {string} The name or null.                                                                                // 868\n   * @internal                                                                                                         // 869\n   */                                                                                                                  // 870\n  getName: function () {                                                                                               // 871\n    var type = this._currentElement.type;                                                                              // 872\n    var constructor = this._instance && this._instance.constructor;                                                    // 873\n    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;\n  },                                                                                                                   // 875\n                                                                                                                       // 876\n  /**                                                                                                                  // 877\n   * Get the publicly accessible representation of this component - i.e. what                                          // 878\n   * is exposed by refs and returned by render. Can be null for stateless                                              // 879\n   * components.                                                                                                       // 880\n   *                                                                                                                   // 881\n   * @return {ReactComponent} the public component instance.                                                           // 882\n   * @internal                                                                                                         // 883\n   */                                                                                                                  // 884\n  getPublicInstance: function () {                                                                                     // 885\n    var inst = this._instance;                                                                                         // 886\n    if (this._compositeType === CompositeTypes.StatelessFunctional) {                                                  // 887\n      return null;                                                                                                     // 888\n    }                                                                                                                  // 889\n    return inst;                                                                                                       // 890\n  },                                                                                                                   // 891\n                                                                                                                       // 892\n  // Stub                                                                                                              // 893\n  _instantiateReactComponent: null                                                                                     // 894\n                                                                                                                       // 895\n};                                                                                                                     // 896\n                                                                                                                       // 897\nvar ReactCompositeComponent = {                                                                                        // 898\n                                                                                                                       // 899\n  Mixin: ReactCompositeComponentMixin                                                                                  // 900\n                                                                                                                       // 901\n};                                                                                                                     // 902\n                                                                                                                       // 903\nmodule.exports = ReactCompositeComponent;                                                                              // 904\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactNodeTypes.js\":[\"./reactProdInvariant\",\"./ReactElement\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactNodeTypes.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactNodeTypes                                                                                      // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 15\n                                                                                                                       // 16\nvar ReactElement = require('./ReactElement');                                                                          // 17\n                                                                                                                       // 18\nvar invariant = require('fbjs/lib/invariant');                                                                         // 19\n                                                                                                                       // 20\nvar ReactNodeTypes = {                                                                                                 // 21\n  HOST: 0,                                                                                                             // 22\n  COMPOSITE: 1,                                                                                                        // 23\n  EMPTY: 2,                                                                                                            // 24\n                                                                                                                       // 25\n  getType: function (node) {                                                                                           // 26\n    if (node === null || node === false) {                                                                             // 27\n      return ReactNodeTypes.EMPTY;                                                                                     // 28\n    } else if (ReactElement.isValidElement(node)) {                                                                    // 29\n      if (typeof node.type === 'function') {                                                                           // 30\n        return ReactNodeTypes.COMPOSITE;                                                                               // 31\n      } else {                                                                                                         // 32\n        return ReactNodeTypes.HOST;                                                                                    // 33\n      }                                                                                                                // 34\n    }                                                                                                                  // 35\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;\n  }                                                                                                                    // 37\n};                                                                                                                     // 38\n                                                                                                                       // 39\nmodule.exports = ReactNodeTypes;                                                                                       // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"shouldUpdateReactComponent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/shouldUpdateReactComponent.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule shouldUpdateReactComponent                                                                          // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Given a `prevElement` and `nextElement`, determines if the existing                                                 // 15\n * instance should be updated as opposed to being destroyed or replaced by a new                                       // 16\n * instance. Both arguments are elements. This ensures that this logic can                                             // 17\n * operate on stateless trees without any backing instance.                                                            // 18\n *                                                                                                                     // 19\n * @param {?object} prevElement                                                                                        // 20\n * @param {?object} nextElement                                                                                        // 21\n * @return {boolean} True if the existing instance should be updated.                                                  // 22\n * @protected                                                                                                          // 23\n */                                                                                                                    // 24\n                                                                                                                       // 25\nfunction shouldUpdateReactComponent(prevElement, nextElement) {                                                        // 26\n  var prevEmpty = prevElement === null || prevElement === false;                                                       // 27\n  var nextEmpty = nextElement === null || nextElement === false;                                                       // 28\n  if (prevEmpty || nextEmpty) {                                                                                        // 29\n    return prevEmpty === nextEmpty;                                                                                    // 30\n  }                                                                                                                    // 31\n                                                                                                                       // 32\n  var prevType = typeof prevElement;                                                                                   // 33\n  var nextType = typeof nextElement;                                                                                   // 34\n  if (prevType === 'string' || prevType === 'number') {                                                                // 35\n    return nextType === 'string' || nextType === 'number';                                                             // 36\n  } else {                                                                                                             // 37\n    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;      // 38\n  }                                                                                                                    // 39\n}                                                                                                                      // 40\n                                                                                                                       // 41\nmodule.exports = shouldUpdateReactComponent;                                                                           // 42\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactEmptyComponent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactEmptyComponent.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactEmptyComponent                                                                                 // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar emptyComponentFactory;                                                                                             // 14\n                                                                                                                       // 15\nvar ReactEmptyComponentInjection = {                                                                                   // 16\n  injectEmptyComponentFactory: function (factory) {                                                                    // 17\n    emptyComponentFactory = factory;                                                                                   // 18\n  }                                                                                                                    // 19\n};                                                                                                                     // 20\n                                                                                                                       // 21\nvar ReactEmptyComponent = {                                                                                            // 22\n  create: function (instantiate) {                                                                                     // 23\n    return emptyComponentFactory(instantiate);                                                                         // 24\n  }                                                                                                                    // 25\n};                                                                                                                     // 26\n                                                                                                                       // 27\nReactEmptyComponent.injection = ReactEmptyComponentInjection;                                                          // 28\n                                                                                                                       // 29\nmodule.exports = ReactEmptyComponent;                                                                                  // 30\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactHostComponent.js\":[\"./reactProdInvariant\",\"object-assign\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactHostComponent.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactHostComponent                                                                                  // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 14\n    _assign = require('object-assign');                                                                                // 15\n                                                                                                                       // 16\nvar invariant = require('fbjs/lib/invariant');                                                                         // 17\n                                                                                                                       // 18\nvar genericComponentClass = null;                                                                                      // 19\n// This registry keeps track of wrapper classes around host tags.                                                      // 20\nvar tagToComponentClass = {};                                                                                          // 21\nvar textComponentClass = null;                                                                                         // 22\n                                                                                                                       // 23\nvar ReactHostComponentInjection = {                                                                                    // 24\n  // This accepts a class that receives the tag string. This is a catch all                                            // 25\n  // that can render any kind of tag.                                                                                  // 26\n  injectGenericComponentClass: function (componentClass) {                                                             // 27\n    genericComponentClass = componentClass;                                                                            // 28\n  },                                                                                                                   // 29\n  // This accepts a text component class that takes the text string to be                                              // 30\n  // rendered as props.                                                                                                // 31\n  injectTextComponentClass: function (componentClass) {                                                                // 32\n    textComponentClass = componentClass;                                                                               // 33\n  },                                                                                                                   // 34\n  // This accepts a keyed object with classes as values. Each key represents a                                         // 35\n  // tag. That particular tag will use this class instead of the generic one.                                          // 36\n  injectComponentClasses: function (componentClasses) {                                                                // 37\n    _assign(tagToComponentClass, componentClasses);                                                                    // 38\n  }                                                                                                                    // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\n/**                                                                                                                    // 42\n * Get a host internal component class for a specific tag.                                                             // 43\n *                                                                                                                     // 44\n * @param {ReactElement} element The element to create.                                                                // 45\n * @return {function} The internal class constructor function.                                                         // 46\n */                                                                                                                    // 47\nfunction createInternalComponent(element) {                                                                            // 48\n  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;\n  return new genericComponentClass(element);                                                                           // 50\n}                                                                                                                      // 51\n                                                                                                                       // 52\n/**                                                                                                                    // 53\n * @param {ReactText} text                                                                                             // 54\n * @return {ReactComponent}                                                                                            // 55\n */                                                                                                                    // 56\nfunction createInstanceForText(text) {                                                                                 // 57\n  return new textComponentClass(text);                                                                                 // 58\n}                                                                                                                      // 59\n                                                                                                                       // 60\n/**                                                                                                                    // 61\n * @param {ReactComponent} component                                                                                   // 62\n * @return {boolean}                                                                                                   // 63\n */                                                                                                                    // 64\nfunction isTextComponent(component) {                                                                                  // 65\n  return component instanceof textComponentClass;                                                                      // 66\n}                                                                                                                      // 67\n                                                                                                                       // 68\nvar ReactHostComponent = {                                                                                             // 69\n  createInternalComponent: createInternalComponent,                                                                    // 70\n  createInstanceForText: createInstanceForText,                                                                        // 71\n  isTextComponent: isTextComponent,                                                                                    // 72\n  injection: ReactHostComponentInjection                                                                               // 73\n};                                                                                                                     // 74\n                                                                                                                       // 75\nmodule.exports = ReactHostComponent;                                                                                   // 76\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"flattenChildren.js\":[\"./KeyEscapeUtils\",\"./traverseAllChildren\",\"fbjs/lib/warning\",\"./ReactComponentTreeHook\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/flattenChildren.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule flattenChildren                                                                                     // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar KeyEscapeUtils = require('./KeyEscapeUtils');                                                                      // 15\nvar traverseAllChildren = require('./traverseAllChildren');                                                            // 16\nvar warning = require('fbjs/lib/warning');                                                                             // 17\n                                                                                                                       // 18\nvar ReactComponentTreeHook;                                                                                            // 19\n                                                                                                                       // 20\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {                                // 21\n  // Temporary hack.                                                                                                   // 22\n  // Inline requires don't work well with Jest:                                                                        // 23\n  // https://github.com/facebook/react/issues/7240                                                                     // 24\n  // Remove the inline requires when we don't need them anymore:                                                       // 25\n  // https://github.com/facebook/react/pull/7178                                                                       // 26\n  ReactComponentTreeHook = require('./ReactComponentTreeHook');                                                        // 27\n}                                                                                                                      // 28\n                                                                                                                       // 29\n/**                                                                                                                    // 30\n * @param {function} traverseContext Context passed through traversal.                                                 // 31\n * @param {?ReactComponent} child React child component.                                                               // 32\n * @param {!string} name String name of key path to child.                                                             // 33\n * @param {number=} selfDebugID Optional debugID of the current internal instance.                                     // 34\n */                                                                                                                    // 35\nfunction flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {                                    // 36\n  // We found a component instance.                                                                                    // 37\n  if (traverseContext && typeof traverseContext === 'object') {                                                        // 38\n    var result = traverseContext;                                                                                      // 39\n    var keyUnique = result[name] === undefined;                                                                        // 40\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 41\n      if (!ReactComponentTreeHook) {                                                                                   // 42\n        ReactComponentTreeHook = require('./ReactComponentTreeHook');                                                  // 43\n      }                                                                                                                // 44\n      if (!keyUnique) {                                                                                                // 45\n        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;\n      }                                                                                                                // 47\n    }                                                                                                                  // 48\n    if (keyUnique && child != null) {                                                                                  // 49\n      result[name] = child;                                                                                            // 50\n    }                                                                                                                  // 51\n  }                                                                                                                    // 52\n}                                                                                                                      // 53\n                                                                                                                       // 54\n/**                                                                                                                    // 55\n * Flattens children that are typically specified as `props.children`. Any null                                        // 56\n * children will not be included in the resulting object.                                                              // 57\n * @return {!object} flattened children keyed by name.                                                                 // 58\n */                                                                                                                    // 59\nfunction flattenChildren(children, selfDebugID) {                                                                      // 60\n  if (children == null) {                                                                                              // 61\n    return children;                                                                                                   // 62\n  }                                                                                                                    // 63\n  var result = {};                                                                                                     // 64\n                                                                                                                       // 65\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 66\n    traverseAllChildren(children, function (traverseContext, child, name) {                                            // 67\n      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);                                 // 68\n    }, result);                                                                                                        // 69\n  } else {                                                                                                             // 70\n    traverseAllChildren(children, flattenSingleChildIntoContext, result);                                              // 71\n  }                                                                                                                    // 72\n  return result;                                                                                                       // 73\n}                                                                                                                      // 74\n                                                                                                                       // 75\nmodule.exports = flattenChildren;                                                                                      // 76\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactServerRenderingTransaction.js\":[\"object-assign\",\"./PooledClass\",\"./Transaction\",\"./ReactInstrumentation\",\"./ReactServerUpdateQueue\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactServerRenderingTransaction.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactServerRenderingTransaction                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar PooledClass = require('./PooledClass');                                                                            // 16\nvar Transaction = require('./Transaction');                                                                            // 17\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 18\nvar ReactServerUpdateQueue = require('./ReactServerUpdateQueue');                                                      // 19\n                                                                                                                       // 20\n/**                                                                                                                    // 21\n * Executed within the scope of the `Transaction` instance. Consider these as                                          // 22\n * being member methods, but with an implied ordering while being isolated from                                        // 23\n * each other.                                                                                                         // 24\n */                                                                                                                    // 25\nvar TRANSACTION_WRAPPERS = [];                                                                                         // 26\n                                                                                                                       // 27\nif (process.env.NODE_ENV !== 'production') {                                                                           // 28\n  TRANSACTION_WRAPPERS.push({                                                                                          // 29\n    initialize: ReactInstrumentation.debugTool.onBeginFlush,                                                           // 30\n    close: ReactInstrumentation.debugTool.onEndFlush                                                                   // 31\n  });                                                                                                                  // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\nvar noopCallbackQueue = {                                                                                              // 35\n  enqueue: function () {}                                                                                              // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\n/**                                                                                                                    // 39\n * @class ReactServerRenderingTransaction                                                                              // 40\n * @param {boolean} renderToStaticMarkup                                                                               // 41\n */                                                                                                                    // 42\nfunction ReactServerRenderingTransaction(renderToStaticMarkup) {                                                       // 43\n  this.reinitializeTransaction();                                                                                      // 44\n  this.renderToStaticMarkup = renderToStaticMarkup;                                                                    // 45\n  this.useCreateElement = false;                                                                                       // 46\n  this.updateQueue = new ReactServerUpdateQueue(this);                                                                 // 47\n}                                                                                                                      // 48\n                                                                                                                       // 49\nvar Mixin = {                                                                                                          // 50\n  /**                                                                                                                  // 51\n   * @see Transaction                                                                                                  // 52\n   * @abstract                                                                                                         // 53\n   * @final                                                                                                            // 54\n   * @return {array} Empty list of operation wrap procedures.                                                          // 55\n   */                                                                                                                  // 56\n  getTransactionWrappers: function () {                                                                                // 57\n    return TRANSACTION_WRAPPERS;                                                                                       // 58\n  },                                                                                                                   // 59\n                                                                                                                       // 60\n  /**                                                                                                                  // 61\n   * @return {object} The queue to collect `onDOMReady` callbacks with.                                                // 62\n   */                                                                                                                  // 63\n  getReactMountReady: function () {                                                                                    // 64\n    return noopCallbackQueue;                                                                                          // 65\n  },                                                                                                                   // 66\n                                                                                                                       // 67\n  /**                                                                                                                  // 68\n   * @return {object} The queue to collect React async events.                                                         // 69\n   */                                                                                                                  // 70\n  getUpdateQueue: function () {                                                                                        // 71\n    return this.updateQueue;                                                                                           // 72\n  },                                                                                                                   // 73\n                                                                                                                       // 74\n  /**                                                                                                                  // 75\n   * `PooledClass` looks for this, and will invoke this before allowing this                                           // 76\n   * instance to be reused.                                                                                            // 77\n   */                                                                                                                  // 78\n  destructor: function () {},                                                                                          // 79\n                                                                                                                       // 80\n  checkpoint: function () {},                                                                                          // 81\n                                                                                                                       // 82\n  rollback: function () {}                                                                                             // 83\n};                                                                                                                     // 84\n                                                                                                                       // 85\n_assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);                                          // 86\n                                                                                                                       // 87\nPooledClass.addPoolingTo(ReactServerRenderingTransaction);                                                             // 88\n                                                                                                                       // 89\nmodule.exports = ReactServerRenderingTransaction;                                                                      // 90\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactServerUpdateQueue.js\":[\"./ReactUpdateQueue\",\"./Transaction\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactServerUpdateQueue.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactServerUpdateQueue                                                                              // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n                                                                                                                       // 16\nvar ReactUpdateQueue = require('./ReactUpdateQueue');                                                                  // 17\nvar Transaction = require('./Transaction');                                                                            // 18\nvar warning = require('fbjs/lib/warning');                                                                             // 19\n                                                                                                                       // 20\nfunction warnNoop(publicInstance, callerName) {                                                                        // 21\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 22\n    var constructor = publicInstance.constructor;                                                                      // 23\n    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;\n  }                                                                                                                    // 25\n}                                                                                                                      // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * This is the update queue used for server rendering.                                                                 // 29\n * It delegates to ReactUpdateQueue while server rendering is in progress and                                          // 30\n * switches to ReactNoopUpdateQueue after the transaction has completed.                                               // 31\n * @class ReactServerUpdateQueue                                                                                       // 32\n * @param {Transaction} transaction                                                                                    // 33\n */                                                                                                                    // 34\n                                                                                                                       // 35\nvar ReactServerUpdateQueue = function () {                                                                             // 36\n  /* :: transaction: Transaction; */                                                                                   // 37\n                                                                                                                       // 38\n  function ReactServerUpdateQueue(transaction) {                                                                       // 39\n    _classCallCheck(this, ReactServerUpdateQueue);                                                                     // 40\n                                                                                                                       // 41\n    this.transaction = transaction;                                                                                    // 42\n  }                                                                                                                    // 43\n                                                                                                                       // 44\n  /**                                                                                                                  // 45\n   * Checks whether or not this composite component is mounted.                                                        // 46\n   * @param {ReactClass} publicInstance The instance we want to test.                                                  // 47\n   * @return {boolean} True if mounted, false otherwise.                                                               // 48\n   * @protected                                                                                                        // 49\n   * @final                                                                                                            // 50\n   */                                                                                                                  // 51\n                                                                                                                       // 52\n                                                                                                                       // 53\n  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {                                    // 54\n    return false;                                                                                                      // 55\n  };                                                                                                                   // 56\n                                                                                                                       // 57\n  /**                                                                                                                  // 58\n   * Enqueue a callback that will be executed after all the pending updates                                            // 59\n   * have processed.                                                                                                   // 60\n   *                                                                                                                   // 61\n   * @param {ReactClass} publicInstance The instance to use as `this` context.                                         // 62\n   * @param {?function} callback Called after state is updated.                                                        // 63\n   * @internal                                                                                                         // 64\n   */                                                                                                                  // 65\n                                                                                                                       // 66\n                                                                                                                       // 67\n  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {  // 68\n    if (this.transaction.isInTransaction()) {                                                                          // 69\n      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);                                          // 70\n    }                                                                                                                  // 71\n  };                                                                                                                   // 72\n                                                                                                                       // 73\n  /**                                                                                                                  // 74\n   * Forces an update. This should only be invoked when it is known with                                               // 75\n   * certainty that we are **not** in a DOM transaction.                                                               // 76\n   *                                                                                                                   // 77\n   * You may want to call this when you know that some deeper aspect of the                                            // 78\n   * component's state has changed but `setState` was not called.                                                      // 79\n   *                                                                                                                   // 80\n   * This will not invoke `shouldComponentUpdate`, but it will invoke                                                  // 81\n   * `componentWillUpdate` and `componentDidUpdate`.                                                                   // 82\n   *                                                                                                                   // 83\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 84\n   * @internal                                                                                                         // 85\n   */                                                                                                                  // 86\n                                                                                                                       // 87\n                                                                                                                       // 88\n  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {                  // 89\n    if (this.transaction.isInTransaction()) {                                                                          // 90\n      ReactUpdateQueue.enqueueForceUpdate(publicInstance);                                                             // 91\n    } else {                                                                                                           // 92\n      warnNoop(publicInstance, 'forceUpdate');                                                                         // 93\n    }                                                                                                                  // 94\n  };                                                                                                                   // 95\n                                                                                                                       // 96\n  /**                                                                                                                  // 97\n   * Replaces all of the state. Always use this or `setState` to mutate state.                                         // 98\n   * You should treat `this.state` as immutable.                                                                       // 99\n   *                                                                                                                   // 100\n   * There is no guarantee that `this.state` will be immediately updated, so                                           // 101\n   * accessing `this.state` after calling this method may return the old value.                                        // 102\n   *                                                                                                                   // 103\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 104\n   * @param {object|function} completeState Next state.                                                                // 105\n   * @internal                                                                                                         // 106\n   */                                                                                                                  // 107\n                                                                                                                       // 108\n                                                                                                                       // 109\n  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {\n    if (this.transaction.isInTransaction()) {                                                                          // 111\n      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);                                             // 112\n    } else {                                                                                                           // 113\n      warnNoop(publicInstance, 'replaceState');                                                                        // 114\n    }                                                                                                                  // 115\n  };                                                                                                                   // 116\n                                                                                                                       // 117\n  /**                                                                                                                  // 118\n   * Sets a subset of the state. This only exists because _pendingState is                                             // 119\n   * internal. This provides a merging strategy that is not available to deep                                          // 120\n   * properties which is confusing. TODO: Expose pendingState or don't use it                                          // 121\n   * during the merge.                                                                                                 // 122\n   *                                                                                                                   // 123\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 124\n   * @param {object|function} partialState Next partial state to be merged with state.                                 // 125\n   * @internal                                                                                                         // 126\n   */                                                                                                                  // 127\n                                                                                                                       // 128\n                                                                                                                       // 129\n  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {          // 130\n    if (this.transaction.isInTransaction()) {                                                                          // 131\n      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);                                                  // 132\n    } else {                                                                                                           // 133\n      warnNoop(publicInstance, 'setState');                                                                            // 134\n    }                                                                                                                  // 135\n  };                                                                                                                   // 136\n                                                                                                                       // 137\n  return ReactServerUpdateQueue;                                                                                       // 138\n}();                                                                                                                   // 139\n                                                                                                                       // 140\nmodule.exports = ReactServerUpdateQueue;                                                                               // 141\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactUpdateQueue.js\":[\"./reactProdInvariant\",\"./ReactCurrentOwner\",\"./ReactInstanceMap\",\"./ReactInstrumentation\",\"./ReactUpdates\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactUpdateQueue.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactUpdateQueue                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 16\nvar ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 17\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 18\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 19\n                                                                                                                       // 20\nvar invariant = require('fbjs/lib/invariant');                                                                         // 21\nvar warning = require('fbjs/lib/warning');                                                                             // 22\n                                                                                                                       // 23\nfunction enqueueUpdate(internalInstance) {                                                                             // 24\n  ReactUpdates.enqueueUpdate(internalInstance);                                                                        // 25\n}                                                                                                                      // 26\n                                                                                                                       // 27\nfunction formatUnexpectedArgument(arg) {                                                                               // 28\n  var type = typeof arg;                                                                                               // 29\n  if (type !== 'object') {                                                                                             // 30\n    return type;                                                                                                       // 31\n  }                                                                                                                    // 32\n  var displayName = arg.constructor && arg.constructor.name || type;                                                   // 33\n  var keys = Object.keys(arg);                                                                                         // 34\n  if (keys.length > 0 && keys.length < 20) {                                                                           // 35\n    return displayName + ' (keys: ' + keys.join(', ') + ')';                                                           // 36\n  }                                                                                                                    // 37\n  return displayName;                                                                                                  // 38\n}                                                                                                                      // 39\n                                                                                                                       // 40\nfunction getInternalInstanceReadyForUpdate(publicInstance, callerName) {                                               // 41\n  var internalInstance = ReactInstanceMap.get(publicInstance);                                                         // 42\n  if (!internalInstance) {                                                                                             // 43\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 44\n      var ctor = publicInstance.constructor;                                                                           // 45\n      // Only warn when we have a callerName. Otherwise we should be silent.                                           // 46\n      // We're probably calling from enqueueCallback. We don't want to warn                                            // 47\n      // there because we already warned for the corresponding lifecycle method.                                       // 48\n      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;\n    }                                                                                                                  // 50\n    return null;                                                                                                       // 51\n  }                                                                                                                    // 52\n                                                                                                                       // 53\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 54\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;\n  }                                                                                                                    // 56\n                                                                                                                       // 57\n  return internalInstance;                                                                                             // 58\n}                                                                                                                      // 59\n                                                                                                                       // 60\n/**                                                                                                                    // 61\n * ReactUpdateQueue allows for state updates to be scheduled into a later                                              // 62\n * reconciliation step.                                                                                                // 63\n */                                                                                                                    // 64\nvar ReactUpdateQueue = {                                                                                               // 65\n                                                                                                                       // 66\n  /**                                                                                                                  // 67\n   * Checks whether or not this composite component is mounted.                                                        // 68\n   * @param {ReactClass} publicInstance The instance we want to test.                                                  // 69\n   * @return {boolean} True if mounted, false otherwise.                                                               // 70\n   * @protected                                                                                                        // 71\n   * @final                                                                                                            // 72\n   */                                                                                                                  // 73\n  isMounted: function (publicInstance) {                                                                               // 74\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 75\n      var owner = ReactCurrentOwner.current;                                                                           // 76\n      if (owner !== null) {                                                                                            // 77\n        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;\n        owner._warnedAboutRefsInRender = true;                                                                         // 79\n      }                                                                                                                // 80\n    }                                                                                                                  // 81\n    var internalInstance = ReactInstanceMap.get(publicInstance);                                                       // 82\n    if (internalInstance) {                                                                                            // 83\n      // During componentWillMount and render this will still be null but after                                        // 84\n      // that will always render to something. At least for now. So we can use                                         // 85\n      // this hack.                                                                                                    // 86\n      return !!internalInstance._renderedComponent;                                                                    // 87\n    } else {                                                                                                           // 88\n      return false;                                                                                                    // 89\n    }                                                                                                                  // 90\n  },                                                                                                                   // 91\n                                                                                                                       // 92\n  /**                                                                                                                  // 93\n   * Enqueue a callback that will be executed after all the pending updates                                            // 94\n   * have processed.                                                                                                   // 95\n   *                                                                                                                   // 96\n   * @param {ReactClass} publicInstance The instance to use as `this` context.                                         // 97\n   * @param {?function} callback Called after state is updated.                                                        // 98\n   * @param {string} callerName Name of the calling function in the public API.                                        // 99\n   * @internal                                                                                                         // 100\n   */                                                                                                                  // 101\n  enqueueCallback: function (publicInstance, callback, callerName) {                                                   // 102\n    ReactUpdateQueue.validateCallback(callback, callerName);                                                           // 103\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);                                          // 104\n                                                                                                                       // 105\n    // Previously we would throw an error if we didn't have an internal                                                // 106\n    // instance. Since we want to make it a no-op instead, we mirror the same                                          // 107\n    // behavior we have in other enqueue* methods.                                                                     // 108\n    // We also need to ignore callbacks in componentWillMount. See                                                     // 109\n    // enqueueUpdates.                                                                                                 // 110\n    if (!internalInstance) {                                                                                           // 111\n      return null;                                                                                                     // 112\n    }                                                                                                                  // 113\n                                                                                                                       // 114\n    if (internalInstance._pendingCallbacks) {                                                                          // 115\n      internalInstance._pendingCallbacks.push(callback);                                                               // 116\n    } else {                                                                                                           // 117\n      internalInstance._pendingCallbacks = [callback];                                                                 // 118\n    }                                                                                                                  // 119\n    // TODO: The callback here is ignored when setState is called from                                                 // 120\n    // componentWillMount. Either fix it or disallow doing so completely in                                            // 121\n    // favor of getInitialState. Alternatively, we can disallow                                                        // 122\n    // componentWillMount during server-side rendering.                                                                // 123\n    enqueueUpdate(internalInstance);                                                                                   // 124\n  },                                                                                                                   // 125\n                                                                                                                       // 126\n  enqueueCallbackInternal: function (internalInstance, callback) {                                                     // 127\n    if (internalInstance._pendingCallbacks) {                                                                          // 128\n      internalInstance._pendingCallbacks.push(callback);                                                               // 129\n    } else {                                                                                                           // 130\n      internalInstance._pendingCallbacks = [callback];                                                                 // 131\n    }                                                                                                                  // 132\n    enqueueUpdate(internalInstance);                                                                                   // 133\n  },                                                                                                                   // 134\n                                                                                                                       // 135\n  /**                                                                                                                  // 136\n   * Forces an update. This should only be invoked when it is known with                                               // 137\n   * certainty that we are **not** in a DOM transaction.                                                               // 138\n   *                                                                                                                   // 139\n   * You may want to call this when you know that some deeper aspect of the                                            // 140\n   * component's state has changed but `setState` was not called.                                                      // 141\n   *                                                                                                                   // 142\n   * This will not invoke `shouldComponentUpdate`, but it will invoke                                                  // 143\n   * `componentWillUpdate` and `componentDidUpdate`.                                                                   // 144\n   *                                                                                                                   // 145\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 146\n   * @internal                                                                                                         // 147\n   */                                                                                                                  // 148\n  enqueueForceUpdate: function (publicInstance) {                                                                      // 149\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');                           // 150\n                                                                                                                       // 151\n    if (!internalInstance) {                                                                                           // 152\n      return;                                                                                                          // 153\n    }                                                                                                                  // 154\n                                                                                                                       // 155\n    internalInstance._pendingForceUpdate = true;                                                                       // 156\n                                                                                                                       // 157\n    enqueueUpdate(internalInstance);                                                                                   // 158\n  },                                                                                                                   // 159\n                                                                                                                       // 160\n  /**                                                                                                                  // 161\n   * Replaces all of the state. Always use this or `setState` to mutate state.                                         // 162\n   * You should treat `this.state` as immutable.                                                                       // 163\n   *                                                                                                                   // 164\n   * There is no guarantee that `this.state` will be immediately updated, so                                           // 165\n   * accessing `this.state` after calling this method may return the old value.                                        // 166\n   *                                                                                                                   // 167\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 168\n   * @param {object} completeState Next state.                                                                         // 169\n   * @internal                                                                                                         // 170\n   */                                                                                                                  // 171\n  enqueueReplaceState: function (publicInstance, completeState) {                                                      // 172\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');                          // 173\n                                                                                                                       // 174\n    if (!internalInstance) {                                                                                           // 175\n      return;                                                                                                          // 176\n    }                                                                                                                  // 177\n                                                                                                                       // 178\n    internalInstance._pendingStateQueue = [completeState];                                                             // 179\n    internalInstance._pendingReplaceState = true;                                                                      // 180\n                                                                                                                       // 181\n    enqueueUpdate(internalInstance);                                                                                   // 182\n  },                                                                                                                   // 183\n                                                                                                                       // 184\n  /**                                                                                                                  // 185\n   * Sets a subset of the state. This only exists because _pendingState is                                             // 186\n   * internal. This provides a merging strategy that is not available to deep                                          // 187\n   * properties which is confusing. TODO: Expose pendingState or don't use it                                          // 188\n   * during the merge.                                                                                                 // 189\n   *                                                                                                                   // 190\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 191\n   * @param {object} partialState Next partial state to be merged with state.                                          // 192\n   * @internal                                                                                                         // 193\n   */                                                                                                                  // 194\n  enqueueSetState: function (publicInstance, partialState) {                                                           // 195\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 196\n      ReactInstrumentation.debugTool.onSetState();                                                                     // 197\n      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;\n    }                                                                                                                  // 199\n                                                                                                                       // 200\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');                              // 201\n                                                                                                                       // 202\n    if (!internalInstance) {                                                                                           // 203\n      return;                                                                                                          // 204\n    }                                                                                                                  // 205\n                                                                                                                       // 206\n    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);                     // 207\n    queue.push(partialState);                                                                                          // 208\n                                                                                                                       // 209\n    enqueueUpdate(internalInstance);                                                                                   // 210\n  },                                                                                                                   // 211\n                                                                                                                       // 212\n  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {                                      // 213\n    internalInstance._pendingElement = nextElement;                                                                    // 214\n    // TODO: introduce _pendingContext instead of setting it directly.                                                 // 215\n    internalInstance._context = nextContext;                                                                           // 216\n    enqueueUpdate(internalInstance);                                                                                   // 217\n  },                                                                                                                   // 218\n                                                                                                                       // 219\n  validateCallback: function (callback, callerName) {                                                                  // 220\n    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;\n  }                                                                                                                    // 222\n                                                                                                                       // 223\n};                                                                                                                     // 224\n                                                                                                                       // 225\nmodule.exports = ReactUpdateQueue;                                                                                     // 226\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"validateDOMNesting.js\":[\"object-assign\",\"fbjs/lib/emptyFunction\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/validateDOMNesting.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule validateDOMNesting                                                                                  // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 16\nvar warning = require('fbjs/lib/warning');                                                                             // 17\n                                                                                                                       // 18\nvar validateDOMNesting = emptyFunction;                                                                                // 19\n                                                                                                                       // 20\nif (process.env.NODE_ENV !== 'production') {                                                                           // 21\n  // This validation code was written based on the HTML5 parsing spec:                                                 // 22\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope                                        // 23\n  //                                                                                                                   // 24\n  // Note: this does not catch all invalid nesting, nor does it try to (as it's                                        // 25\n  // not clear what practical benefit doing so provides); instead, we warn only                                        // 26\n  // for cases where the parser will give a parse tree differing from what React                                       // 27\n  // intended. For example, <b><div></div></b> is invalid but we don't warn                                            // 28\n  // because it still parses correctly; we do warn for other cases like nested                                         // 29\n  // <p> tags where the beginning of the second element implicitly closes the                                          // 30\n  // first, causing a confusing mess.                                                                                  // 31\n                                                                                                                       // 32\n  // https://html.spec.whatwg.org/multipage/syntax.html#special                                                        // 33\n  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];\n                                                                                                                       // 35\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope                                        // 36\n  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',                // 37\n                                                                                                                       // 38\n  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point                                         // 39\n  // TODO: Distinguish by namespace here -- for <title>, including it here                                             // 40\n  // errs on the side of fewer warnings                                                                                // 41\n  'foreignObject', 'desc', 'title'];                                                                                   // 42\n                                                                                                                       // 43\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope                                 // 44\n  var buttonScopeTags = inScopeTags.concat(['button']);                                                                // 45\n                                                                                                                       // 46\n  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags                                      // 47\n  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];                                      // 48\n                                                                                                                       // 49\n  var emptyAncestorInfo = {                                                                                            // 50\n    current: null,                                                                                                     // 51\n                                                                                                                       // 52\n    formTag: null,                                                                                                     // 53\n    aTagInScope: null,                                                                                                 // 54\n    buttonTagInScope: null,                                                                                            // 55\n    nobrTagInScope: null,                                                                                              // 56\n    pTagInButtonScope: null,                                                                                           // 57\n                                                                                                                       // 58\n    listItemTagAutoclosing: null,                                                                                      // 59\n    dlItemTagAutoclosing: null                                                                                         // 60\n  };                                                                                                                   // 61\n                                                                                                                       // 62\n  var updatedAncestorInfo = function (oldInfo, tag, instance) {                                                        // 63\n    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);                                                      // 64\n    var info = { tag: tag, instance: instance };                                                                       // 65\n                                                                                                                       // 66\n    if (inScopeTags.indexOf(tag) !== -1) {                                                                             // 67\n      ancestorInfo.aTagInScope = null;                                                                                 // 68\n      ancestorInfo.buttonTagInScope = null;                                                                            // 69\n      ancestorInfo.nobrTagInScope = null;                                                                              // 70\n    }                                                                                                                  // 71\n    if (buttonScopeTags.indexOf(tag) !== -1) {                                                                         // 72\n      ancestorInfo.pTagInButtonScope = null;                                                                           // 73\n    }                                                                                                                  // 74\n                                                                                                                       // 75\n    // See rules for 'li', 'dd', 'dt' start tags in                                                                    // 76\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody                                          // 77\n    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {                        // 78\n      ancestorInfo.listItemTagAutoclosing = null;                                                                      // 79\n      ancestorInfo.dlItemTagAutoclosing = null;                                                                        // 80\n    }                                                                                                                  // 81\n                                                                                                                       // 82\n    ancestorInfo.current = info;                                                                                       // 83\n                                                                                                                       // 84\n    if (tag === 'form') {                                                                                              // 85\n      ancestorInfo.formTag = info;                                                                                     // 86\n    }                                                                                                                  // 87\n    if (tag === 'a') {                                                                                                 // 88\n      ancestorInfo.aTagInScope = info;                                                                                 // 89\n    }                                                                                                                  // 90\n    if (tag === 'button') {                                                                                            // 91\n      ancestorInfo.buttonTagInScope = info;                                                                            // 92\n    }                                                                                                                  // 93\n    if (tag === 'nobr') {                                                                                              // 94\n      ancestorInfo.nobrTagInScope = info;                                                                              // 95\n    }                                                                                                                  // 96\n    if (tag === 'p') {                                                                                                 // 97\n      ancestorInfo.pTagInButtonScope = info;                                                                           // 98\n    }                                                                                                                  // 99\n    if (tag === 'li') {                                                                                                // 100\n      ancestorInfo.listItemTagAutoclosing = info;                                                                      // 101\n    }                                                                                                                  // 102\n    if (tag === 'dd' || tag === 'dt') {                                                                                // 103\n      ancestorInfo.dlItemTagAutoclosing = info;                                                                        // 104\n    }                                                                                                                  // 105\n                                                                                                                       // 106\n    return ancestorInfo;                                                                                               // 107\n  };                                                                                                                   // 108\n                                                                                                                       // 109\n  /**                                                                                                                  // 110\n   * Returns whether                                                                                                   // 111\n   */                                                                                                                  // 112\n  var isTagValidWithParent = function (tag, parentTag) {                                                               // 113\n    // First, let's check if we're in an unusual parsing mode...                                                       // 114\n    switch (parentTag) {                                                                                               // 115\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect                                      // 116\n      case 'select':                                                                                                   // 117\n        return tag === 'option' || tag === 'optgroup' || tag === '#text';                                              // 118\n      case 'optgroup':                                                                                                 // 119\n        return tag === 'option' || tag === '#text';                                                                    // 120\n      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>                                        // 121\n      // but                                                                                                           // 122\n      case 'option':                                                                                                   // 123\n        return tag === '#text';                                                                                        // 124\n                                                                                                                       // 125\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd                                          // 126\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption                                     // 127\n      // No special behavior since these rules fall back to \"in body\" mode for                                         // 128\n      // all except special table nodes which cause bad parsing behavior anyway.                                       // 129\n                                                                                                                       // 130\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr                                          // 131\n      case 'tr':                                                                                                       // 132\n        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';              // 133\n                                                                                                                       // 134\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody                                       // 135\n      case 'tbody':                                                                                                    // 136\n      case 'thead':                                                                                                    // 137\n      case 'tfoot':                                                                                                    // 138\n        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';                              // 139\n                                                                                                                       // 140\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup                                    // 141\n      case 'colgroup':                                                                                                 // 142\n        return tag === 'col' || tag === 'template';                                                                    // 143\n                                                                                                                       // 144\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable                                       // 145\n      case 'table':                                                                                                    // 146\n        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';\n                                                                                                                       // 148\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead                                        // 149\n      case 'head':                                                                                                     // 150\n        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';\n                                                                                                                       // 152\n      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element                                        // 153\n      case 'html':                                                                                                     // 154\n        return tag === 'head' || tag === 'body';                                                                       // 155\n      case '#document':                                                                                                // 156\n        return tag === 'html';                                                                                         // 157\n    }                                                                                                                  // 158\n                                                                                                                       // 159\n    // Probably in the \"in body\" parsing mode, so we outlaw only tag combos                                            // 160\n    // where the parsing rules cause implicit opens or closes to be added.                                             // 161\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody                                          // 162\n    switch (tag) {                                                                                                     // 163\n      case 'h1':                                                                                                       // 164\n      case 'h2':                                                                                                       // 165\n      case 'h3':                                                                                                       // 166\n      case 'h4':                                                                                                       // 167\n      case 'h5':                                                                                                       // 168\n      case 'h6':                                                                                                       // 169\n        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';\n                                                                                                                       // 171\n      case 'rp':                                                                                                       // 172\n      case 'rt':                                                                                                       // 173\n        return impliedEndTags.indexOf(parentTag) === -1;                                                               // 174\n                                                                                                                       // 175\n      case 'body':                                                                                                     // 176\n      case 'caption':                                                                                                  // 177\n      case 'col':                                                                                                      // 178\n      case 'colgroup':                                                                                                 // 179\n      case 'frame':                                                                                                    // 180\n      case 'head':                                                                                                     // 181\n      case 'html':                                                                                                     // 182\n      case 'tbody':                                                                                                    // 183\n      case 'td':                                                                                                       // 184\n      case 'tfoot':                                                                                                    // 185\n      case 'th':                                                                                                       // 186\n      case 'thead':                                                                                                    // 187\n      case 'tr':                                                                                                       // 188\n        // These tags are only valid with a few parents that have special child                                        // 189\n        // parsing rules -- if we're down here, then none of those matched and                                         // 190\n        // so we allow it only if we don't know what the parent is, as all other                                       // 191\n        // cases are invalid.                                                                                          // 192\n        return parentTag == null;                                                                                      // 193\n    }                                                                                                                  // 194\n                                                                                                                       // 195\n    return true;                                                                                                       // 196\n  };                                                                                                                   // 197\n                                                                                                                       // 198\n  /**                                                                                                                  // 199\n   * Returns whether                                                                                                   // 200\n   */                                                                                                                  // 201\n  var findInvalidAncestorForTag = function (tag, ancestorInfo) {                                                       // 202\n    switch (tag) {                                                                                                     // 203\n      case 'address':                                                                                                  // 204\n      case 'article':                                                                                                  // 205\n      case 'aside':                                                                                                    // 206\n      case 'blockquote':                                                                                               // 207\n      case 'center':                                                                                                   // 208\n      case 'details':                                                                                                  // 209\n      case 'dialog':                                                                                                   // 210\n      case 'dir':                                                                                                      // 211\n      case 'div':                                                                                                      // 212\n      case 'dl':                                                                                                       // 213\n      case 'fieldset':                                                                                                 // 214\n      case 'figcaption':                                                                                               // 215\n      case 'figure':                                                                                                   // 216\n      case 'footer':                                                                                                   // 217\n      case 'header':                                                                                                   // 218\n      case 'hgroup':                                                                                                   // 219\n      case 'main':                                                                                                     // 220\n      case 'menu':                                                                                                     // 221\n      case 'nav':                                                                                                      // 222\n      case 'ol':                                                                                                       // 223\n      case 'p':                                                                                                        // 224\n      case 'section':                                                                                                  // 225\n      case 'summary':                                                                                                  // 226\n      case 'ul':                                                                                                       // 227\n                                                                                                                       // 228\n      case 'pre':                                                                                                      // 229\n      case 'listing':                                                                                                  // 230\n                                                                                                                       // 231\n      case 'table':                                                                                                    // 232\n                                                                                                                       // 233\n      case 'hr':                                                                                                       // 234\n                                                                                                                       // 235\n      case 'xmp':                                                                                                      // 236\n                                                                                                                       // 237\n      case 'h1':                                                                                                       // 238\n      case 'h2':                                                                                                       // 239\n      case 'h3':                                                                                                       // 240\n      case 'h4':                                                                                                       // 241\n      case 'h5':                                                                                                       // 242\n      case 'h6':                                                                                                       // 243\n        return ancestorInfo.pTagInButtonScope;                                                                         // 244\n                                                                                                                       // 245\n      case 'form':                                                                                                     // 246\n        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;                                                 // 247\n                                                                                                                       // 248\n      case 'li':                                                                                                       // 249\n        return ancestorInfo.listItemTagAutoclosing;                                                                    // 250\n                                                                                                                       // 251\n      case 'dd':                                                                                                       // 252\n      case 'dt':                                                                                                       // 253\n        return ancestorInfo.dlItemTagAutoclosing;                                                                      // 254\n                                                                                                                       // 255\n      case 'button':                                                                                                   // 256\n        return ancestorInfo.buttonTagInScope;                                                                          // 257\n                                                                                                                       // 258\n      case 'a':                                                                                                        // 259\n        // Spec says something about storing a list of markers, but it sounds                                          // 260\n        // equivalent to this check.                                                                                   // 261\n        return ancestorInfo.aTagInScope;                                                                               // 262\n                                                                                                                       // 263\n      case 'nobr':                                                                                                     // 264\n        return ancestorInfo.nobrTagInScope;                                                                            // 265\n    }                                                                                                                  // 266\n                                                                                                                       // 267\n    return null;                                                                                                       // 268\n  };                                                                                                                   // 269\n                                                                                                                       // 270\n  /**                                                                                                                  // 271\n   * Given a ReactCompositeComponent instance, return a list of its recursive                                          // 272\n   * owners, starting at the root and ending with the instance itself.                                                 // 273\n   */                                                                                                                  // 274\n  var findOwnerStack = function (instance) {                                                                           // 275\n    if (!instance) {                                                                                                   // 276\n      return [];                                                                                                       // 277\n    }                                                                                                                  // 278\n                                                                                                                       // 279\n    var stack = [];                                                                                                    // 280\n    do {                                                                                                               // 281\n      stack.push(instance);                                                                                            // 282\n    } while (instance = instance._currentElement._owner);                                                              // 283\n    stack.reverse();                                                                                                   // 284\n    return stack;                                                                                                      // 285\n  };                                                                                                                   // 286\n                                                                                                                       // 287\n  var didWarn = {};                                                                                                    // 288\n                                                                                                                       // 289\n  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {                                   // 290\n    ancestorInfo = ancestorInfo || emptyAncestorInfo;                                                                  // 291\n    var parentInfo = ancestorInfo.current;                                                                             // 292\n    var parentTag = parentInfo && parentInfo.tag;                                                                      // 293\n                                                                                                                       // 294\n    if (childText != null) {                                                                                           // 295\n      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;\n      childTag = '#text';                                                                                              // 297\n    }                                                                                                                  // 298\n                                                                                                                       // 299\n    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;                                 // 300\n    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);                    // 301\n    var problematic = invalidParent || invalidAncestor;                                                                // 302\n                                                                                                                       // 303\n    if (problematic) {                                                                                                 // 304\n      var ancestorTag = problematic.tag;                                                                               // 305\n      var ancestorInstance = problematic.instance;                                                                     // 306\n                                                                                                                       // 307\n      var childOwner = childInstance && childInstance._currentElement._owner;                                          // 308\n      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;                                 // 309\n                                                                                                                       // 310\n      var childOwners = findOwnerStack(childOwner);                                                                    // 311\n      var ancestorOwners = findOwnerStack(ancestorOwner);                                                              // 312\n                                                                                                                       // 313\n      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);                                           // 314\n      var i;                                                                                                           // 315\n                                                                                                                       // 316\n      var deepestCommon = -1;                                                                                          // 317\n      for (i = 0; i < minStackLen; i++) {                                                                              // 318\n        if (childOwners[i] === ancestorOwners[i]) {                                                                    // 319\n          deepestCommon = i;                                                                                           // 320\n        } else {                                                                                                       // 321\n          break;                                                                                                       // 322\n        }                                                                                                              // 323\n      }                                                                                                                // 324\n                                                                                                                       // 325\n      var UNKNOWN = '(unknown)';                                                                                       // 326\n      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {                                 // 327\n        return inst.getName() || UNKNOWN;                                                                              // 328\n      });                                                                                                              // 329\n      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {                           // 330\n        return inst.getName() || UNKNOWN;                                                                              // 331\n      });                                                                                                              // 332\n      var ownerInfo = [].concat(                                                                                       // 333\n      // If the parent and child instances have a common owner ancestor, start                                         // 334\n      // with that -- otherwise we just start with the parent's owners.                                                // 335\n      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,    // 336\n      // If we're warning about an invalid (non-parent) ancestry, add '...'                                            // 337\n      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');                                          // 338\n                                                                                                                       // 339\n      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;                            // 340\n      if (didWarn[warnKey]) {                                                                                          // 341\n        return;                                                                                                        // 342\n      }                                                                                                                // 343\n      didWarn[warnKey] = true;                                                                                         // 344\n                                                                                                                       // 345\n      var tagDisplayName = childTag;                                                                                   // 346\n      var whitespaceInfo = '';                                                                                         // 347\n      if (childTag === '#text') {                                                                                      // 348\n        if (/\\S/.test(childText)) {                                                                                    // 349\n          tagDisplayName = 'Text nodes';                                                                               // 350\n        } else {                                                                                                       // 351\n          tagDisplayName = 'Whitespace text nodes';                                                                    // 352\n          whitespaceInfo = ' Make sure you don\\'t have any extra whitespace between tags on ' + 'each line of your source code.';\n        }                                                                                                              // 354\n      } else {                                                                                                         // 355\n        tagDisplayName = '<' + childTag + '>';                                                                         // 356\n      }                                                                                                                // 357\n                                                                                                                       // 358\n      if (invalidParent) {                                                                                             // 359\n        var info = '';                                                                                                 // 360\n        if (ancestorTag === 'table' && childTag === 'tr') {                                                            // 361\n          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';                  // 362\n        }                                                                                                              // 363\n        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;\n      } else {                                                                                                         // 365\n        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;\n      }                                                                                                                // 367\n    }                                                                                                                  // 368\n  };                                                                                                                   // 369\n                                                                                                                       // 370\n  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;                                                        // 371\n                                                                                                                       // 372\n  // For testing                                                                                                       // 373\n  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {                                              // 374\n    ancestorInfo = ancestorInfo || emptyAncestorInfo;                                                                  // 375\n    var parentInfo = ancestorInfo.current;                                                                             // 376\n    var parentTag = parentInfo && parentInfo.tag;                                                                      // 377\n    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);                      // 378\n  };                                                                                                                   // 379\n}                                                                                                                      // 380\n                                                                                                                       // 381\nmodule.exports = validateDOMNesting;                                                                                   // 382\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMEmptyComponent.js\":[\"object-assign\",\"./DOMLazyTree\",\"./ReactDOMComponentTree\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMEmptyComponent.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMEmptyComponent                                                                              // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar DOMLazyTree = require('./DOMLazyTree');                                                                            // 16\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 17\n                                                                                                                       // 18\nvar ReactDOMEmptyComponent = function (instantiate) {                                                                  // 19\n  // ReactCompositeComponent uses this:                                                                                // 20\n  this._currentElement = null;                                                                                         // 21\n  // ReactDOMComponentTree uses these:                                                                                 // 22\n  this._hostNode = null;                                                                                               // 23\n  this._hostParent = null;                                                                                             // 24\n  this._hostContainerInfo = null;                                                                                      // 25\n  this._domID = 0;                                                                                                     // 26\n};                                                                                                                     // 27\n_assign(ReactDOMEmptyComponent.prototype, {                                                                            // 28\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {                                     // 29\n    var domID = hostContainerInfo._idCounter++;                                                                        // 30\n    this._domID = domID;                                                                                               // 31\n    this._hostParent = hostParent;                                                                                     // 32\n    this._hostContainerInfo = hostContainerInfo;                                                                       // 33\n                                                                                                                       // 34\n    var nodeValue = ' react-empty: ' + this._domID + ' ';                                                              // 35\n    if (transaction.useCreateElement) {                                                                                // 36\n      var ownerDocument = hostContainerInfo._ownerDocument;                                                            // 37\n      var node = ownerDocument.createComment(nodeValue);                                                               // 38\n      ReactDOMComponentTree.precacheNode(this, node);                                                                  // 39\n      return DOMLazyTree(node);                                                                                        // 40\n    } else {                                                                                                           // 41\n      if (transaction.renderToStaticMarkup) {                                                                          // 42\n        // Normally we'd insert a comment node, but since this is a situation                                          // 43\n        // where React won't take over (static pages), we can simply return                                            // 44\n        // nothing.                                                                                                    // 45\n        return '';                                                                                                     // 46\n      }                                                                                                                // 47\n      return '<!--' + nodeValue + '-->';                                                                               // 48\n    }                                                                                                                  // 49\n  },                                                                                                                   // 50\n  receiveComponent: function () {},                                                                                    // 51\n  getHostNode: function () {                                                                                           // 52\n    return ReactDOMComponentTree.getNodeFromInstance(this);                                                            // 53\n  },                                                                                                                   // 54\n  unmountComponent: function () {                                                                                      // 55\n    ReactDOMComponentTree.uncacheNode(this);                                                                           // 56\n  }                                                                                                                    // 57\n});                                                                                                                    // 58\n                                                                                                                       // 59\nmodule.exports = ReactDOMEmptyComponent;                                                                               // 60\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMTreeTraversal.js\":[\"./reactProdInvariant\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMTreeTraversal.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMTreeTraversal                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar invariant = require('fbjs/lib/invariant');                                                                         // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Return the lowest common ancestor of A and B, or null if they are in                                                // 19\n * different trees.                                                                                                    // 20\n */                                                                                                                    // 21\nfunction getLowestCommonAncestor(instA, instB) {                                                                       // 22\n  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;\n  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;\n                                                                                                                       // 25\n  var depthA = 0;                                                                                                      // 26\n  for (var tempA = instA; tempA; tempA = tempA._hostParent) {                                                          // 27\n    depthA++;                                                                                                          // 28\n  }                                                                                                                    // 29\n  var depthB = 0;                                                                                                      // 30\n  for (var tempB = instB; tempB; tempB = tempB._hostParent) {                                                          // 31\n    depthB++;                                                                                                          // 32\n  }                                                                                                                    // 33\n                                                                                                                       // 34\n  // If A is deeper, crawl up.                                                                                         // 35\n  while (depthA - depthB > 0) {                                                                                        // 36\n    instA = instA._hostParent;                                                                                         // 37\n    depthA--;                                                                                                          // 38\n  }                                                                                                                    // 39\n                                                                                                                       // 40\n  // If B is deeper, crawl up.                                                                                         // 41\n  while (depthB - depthA > 0) {                                                                                        // 42\n    instB = instB._hostParent;                                                                                         // 43\n    depthB--;                                                                                                          // 44\n  }                                                                                                                    // 45\n                                                                                                                       // 46\n  // Walk in lockstep until we find a match.                                                                           // 47\n  var depth = depthA;                                                                                                  // 48\n  while (depth--) {                                                                                                    // 49\n    if (instA === instB) {                                                                                             // 50\n      return instA;                                                                                                    // 51\n    }                                                                                                                  // 52\n    instA = instA._hostParent;                                                                                         // 53\n    instB = instB._hostParent;                                                                                         // 54\n  }                                                                                                                    // 55\n  return null;                                                                                                         // 56\n}                                                                                                                      // 57\n                                                                                                                       // 58\n/**                                                                                                                    // 59\n * Return if A is an ancestor of B.                                                                                    // 60\n */                                                                                                                    // 61\nfunction isAncestor(instA, instB) {                                                                                    // 62\n  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;\n  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;\n                                                                                                                       // 65\n  while (instB) {                                                                                                      // 66\n    if (instB === instA) {                                                                                             // 67\n      return true;                                                                                                     // 68\n    }                                                                                                                  // 69\n    instB = instB._hostParent;                                                                                         // 70\n  }                                                                                                                    // 71\n  return false;                                                                                                        // 72\n}                                                                                                                      // 73\n                                                                                                                       // 74\n/**                                                                                                                    // 75\n * Return the parent instance of the passed-in instance.                                                               // 76\n */                                                                                                                    // 77\nfunction getParentInstance(inst) {                                                                                     // 78\n  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;\n                                                                                                                       // 80\n  return inst._hostParent;                                                                                             // 81\n}                                                                                                                      // 82\n                                                                                                                       // 83\n/**                                                                                                                    // 84\n * Simulates the traversal of a two-phase, capture/bubble event dispatch.                                              // 85\n */                                                                                                                    // 86\nfunction traverseTwoPhase(inst, fn, arg) {                                                                             // 87\n  var path = [];                                                                                                       // 88\n  while (inst) {                                                                                                       // 89\n    path.push(inst);                                                                                                   // 90\n    inst = inst._hostParent;                                                                                           // 91\n  }                                                                                                                    // 92\n  var i;                                                                                                               // 93\n  for (i = path.length; i-- > 0;) {                                                                                    // 94\n    fn(path[i], false, arg);                                                                                           // 95\n  }                                                                                                                    // 96\n  for (i = 0; i < path.length; i++) {                                                                                  // 97\n    fn(path[i], true, arg);                                                                                            // 98\n  }                                                                                                                    // 99\n}                                                                                                                      // 100\n                                                                                                                       // 101\n/**                                                                                                                    // 102\n * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that                                            // 103\n * should would receive a `mouseEnter` or `mouseLeave` event.                                                          // 104\n *                                                                                                                     // 105\n * Does not invoke the callback on the nearest common ancestor because nothing                                         // 106\n * \"entered\" or \"left\" that element.                                                                                   // 107\n */                                                                                                                    // 108\nfunction traverseEnterLeave(from, to, fn, argFrom, argTo) {                                                            // 109\n  var common = from && to ? getLowestCommonAncestor(from, to) : null;                                                  // 110\n  var pathFrom = [];                                                                                                   // 111\n  while (from && from !== common) {                                                                                    // 112\n    pathFrom.push(from);                                                                                               // 113\n    from = from._hostParent;                                                                                           // 114\n  }                                                                                                                    // 115\n  var pathTo = [];                                                                                                     // 116\n  while (to && to !== common) {                                                                                        // 117\n    pathTo.push(to);                                                                                                   // 118\n    to = to._hostParent;                                                                                               // 119\n  }                                                                                                                    // 120\n  var i;                                                                                                               // 121\n  for (i = 0; i < pathFrom.length; i++) {                                                                              // 122\n    fn(pathFrom[i], true, argFrom);                                                                                    // 123\n  }                                                                                                                    // 124\n  for (i = pathTo.length; i-- > 0;) {                                                                                  // 125\n    fn(pathTo[i], false, argTo);                                                                                       // 126\n  }                                                                                                                    // 127\n}                                                                                                                      // 128\n                                                                                                                       // 129\nmodule.exports = {                                                                                                     // 130\n  isAncestor: isAncestor,                                                                                              // 131\n  getLowestCommonAncestor: getLowestCommonAncestor,                                                                    // 132\n  getParentInstance: getParentInstance,                                                                                // 133\n  traverseTwoPhase: traverseTwoPhase,                                                                                  // 134\n  traverseEnterLeave: traverseEnterLeave                                                                               // 135\n};                                                                                                                     // 136\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMTextComponent.js\":[\"./reactProdInvariant\",\"object-assign\",\"./DOMChildrenOperations\",\"./DOMLazyTree\",\"./ReactDOMComponentTree\",\"./escapeTextContentForBrowser\",\"fbjs/lib/invariant\",\"./validateDOMNesting\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMTextComponent.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMTextComponent                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant'),                                                                  // 14\n    _assign = require('object-assign');                                                                                // 15\n                                                                                                                       // 16\nvar DOMChildrenOperations = require('./DOMChildrenOperations');                                                        // 17\nvar DOMLazyTree = require('./DOMLazyTree');                                                                            // 18\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 19\n                                                                                                                       // 20\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');                                            // 21\nvar invariant = require('fbjs/lib/invariant');                                                                         // 22\nvar validateDOMNesting = require('./validateDOMNesting');                                                              // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Text nodes violate a couple assumptions that React makes about components:                                          // 26\n *                                                                                                                     // 27\n *  - When mounting text into the DOM, adjacent text nodes are merged.                                                 // 28\n *  - Text nodes cannot be assigned a React root ID.                                                                   // 29\n *                                                                                                                     // 30\n * This component is used to wrap strings between comment nodes so that they                                           // 31\n * can undergo the same reconciliation that is applied to elements.                                                    // 32\n *                                                                                                                     // 33\n * TODO: Investigate representing React components in the DOM with text nodes.                                         // 34\n *                                                                                                                     // 35\n * @class ReactDOMTextComponent                                                                                        // 36\n * @extends ReactComponent                                                                                             // 37\n * @internal                                                                                                           // 38\n */                                                                                                                    // 39\nvar ReactDOMTextComponent = function (text) {                                                                          // 40\n  // TODO: This is really a ReactText (ReactNode), not a ReactElement                                                  // 41\n  this._currentElement = text;                                                                                         // 42\n  this._stringText = '' + text;                                                                                        // 43\n  // ReactDOMComponentTree uses these:                                                                                 // 44\n  this._hostNode = null;                                                                                               // 45\n  this._hostParent = null;                                                                                             // 46\n                                                                                                                       // 47\n  // Properties                                                                                                        // 48\n  this._domID = 0;                                                                                                     // 49\n  this._mountIndex = 0;                                                                                                // 50\n  this._closingComment = null;                                                                                         // 51\n  this._commentNodes = null;                                                                                           // 52\n};                                                                                                                     // 53\n                                                                                                                       // 54\n_assign(ReactDOMTextComponent.prototype, {                                                                             // 55\n                                                                                                                       // 56\n  /**                                                                                                                  // 57\n   * Creates the markup for this text node. This node is not intended to have                                          // 58\n   * any features besides containing text content.                                                                     // 59\n   *                                                                                                                   // 60\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 61\n   * @return {string} Markup for this text node.                                                                       // 62\n   * @internal                                                                                                         // 63\n   */                                                                                                                  // 64\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {                                     // 65\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 66\n      var parentInfo;                                                                                                  // 67\n      if (hostParent != null) {                                                                                        // 68\n        parentInfo = hostParent._ancestorInfo;                                                                         // 69\n      } else if (hostContainerInfo != null) {                                                                          // 70\n        parentInfo = hostContainerInfo._ancestorInfo;                                                                  // 71\n      }                                                                                                                // 72\n      if (parentInfo) {                                                                                                // 73\n        // parentInfo should always be present except for the top-level                                                // 74\n        // component when server rendering                                                                             // 75\n        validateDOMNesting(null, this._stringText, this, parentInfo);                                                  // 76\n      }                                                                                                                // 77\n    }                                                                                                                  // 78\n                                                                                                                       // 79\n    var domID = hostContainerInfo._idCounter++;                                                                        // 80\n    var openingValue = ' react-text: ' + domID + ' ';                                                                  // 81\n    var closingValue = ' /react-text ';                                                                                // 82\n    this._domID = domID;                                                                                               // 83\n    this._hostParent = hostParent;                                                                                     // 84\n    if (transaction.useCreateElement) {                                                                                // 85\n      var ownerDocument = hostContainerInfo._ownerDocument;                                                            // 86\n      var openingComment = ownerDocument.createComment(openingValue);                                                  // 87\n      var closingComment = ownerDocument.createComment(closingValue);                                                  // 88\n      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());                                              // 89\n      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));                                                   // 90\n      if (this._stringText) {                                                                                          // 91\n        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));                 // 92\n      }                                                                                                                // 93\n      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));                                                   // 94\n      ReactDOMComponentTree.precacheNode(this, openingComment);                                                        // 95\n      this._closingComment = closingComment;                                                                           // 96\n      return lazyTree;                                                                                                 // 97\n    } else {                                                                                                           // 98\n      var escapedText = escapeTextContentForBrowser(this._stringText);                                                 // 99\n                                                                                                                       // 100\n      if (transaction.renderToStaticMarkup) {                                                                          // 101\n        // Normally we'd wrap this between comment nodes for the reasons stated                                        // 102\n        // above, but since this is a situation where React won't take over                                            // 103\n        // (static pages), we can simply return the text as it is.                                                     // 104\n        return escapedText;                                                                                            // 105\n      }                                                                                                                // 106\n                                                                                                                       // 107\n      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';                              // 108\n    }                                                                                                                  // 109\n  },                                                                                                                   // 110\n                                                                                                                       // 111\n  /**                                                                                                                  // 112\n   * Updates this component by updating the text content.                                                              // 113\n   *                                                                                                                   // 114\n   * @param {ReactText} nextText The next text content                                                                 // 115\n   * @param {ReactReconcileTransaction} transaction                                                                    // 116\n   * @internal                                                                                                         // 117\n   */                                                                                                                  // 118\n  receiveComponent: function (nextText, transaction) {                                                                 // 119\n    if (nextText !== this._currentElement) {                                                                           // 120\n      this._currentElement = nextText;                                                                                 // 121\n      var nextStringText = '' + nextText;                                                                              // 122\n      if (nextStringText !== this._stringText) {                                                                       // 123\n        // TODO: Save this as pending props and use performUpdateIfNecessary                                           // 124\n        // and/or updateComponent to do the actual update for consistency with                                         // 125\n        // other component types?                                                                                      // 126\n        this._stringText = nextStringText;                                                                             // 127\n        var commentNodes = this.getHostNode();                                                                         // 128\n        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);                  // 129\n      }                                                                                                                // 130\n    }                                                                                                                  // 131\n  },                                                                                                                   // 132\n                                                                                                                       // 133\n  getHostNode: function () {                                                                                           // 134\n    var hostNode = this._commentNodes;                                                                                 // 135\n    if (hostNode) {                                                                                                    // 136\n      return hostNode;                                                                                                 // 137\n    }                                                                                                                  // 138\n    if (!this._closingComment) {                                                                                       // 139\n      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);                                            // 140\n      var node = openingComment.nextSibling;                                                                           // 141\n      while (true) {                                                                                                   // 142\n        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;\n        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {                                               // 144\n          this._closingComment = node;                                                                                 // 145\n          break;                                                                                                       // 146\n        }                                                                                                              // 147\n        node = node.nextSibling;                                                                                       // 148\n      }                                                                                                                // 149\n    }                                                                                                                  // 150\n    hostNode = [this._hostNode, this._closingComment];                                                                 // 151\n    this._commentNodes = hostNode;                                                                                     // 152\n    return hostNode;                                                                                                   // 153\n  },                                                                                                                   // 154\n                                                                                                                       // 155\n  unmountComponent: function () {                                                                                      // 156\n    this._closingComment = null;                                                                                       // 157\n    this._commentNodes = null;                                                                                         // 158\n    ReactDOMComponentTree.uncacheNode(this);                                                                           // 159\n  }                                                                                                                    // 160\n                                                                                                                       // 161\n});                                                                                                                    // 162\n                                                                                                                       // 163\nmodule.exports = ReactDOMTextComponent;                                                                                // 164\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDefaultBatchingStrategy.js\":[\"object-assign\",\"./ReactUpdates\",\"./Transaction\",\"fbjs/lib/emptyFunction\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDefaultBatchingStrategy.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDefaultBatchingStrategy                                                                        // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 16\nvar Transaction = require('./Transaction');                                                                            // 17\n                                                                                                                       // 18\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 19\n                                                                                                                       // 20\nvar RESET_BATCHED_UPDATES = {                                                                                          // 21\n  initialize: emptyFunction,                                                                                           // 22\n  close: function () {                                                                                                 // 23\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;                                                            // 24\n  }                                                                                                                    // 25\n};                                                                                                                     // 26\n                                                                                                                       // 27\nvar FLUSH_BATCHED_UPDATES = {                                                                                          // 28\n  initialize: emptyFunction,                                                                                           // 29\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)                                                           // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];                                             // 33\n                                                                                                                       // 34\nfunction ReactDefaultBatchingStrategyTransaction() {                                                                   // 35\n  this.reinitializeTransaction();                                                                                      // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\n_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {                                        // 39\n  getTransactionWrappers: function () {                                                                                // 40\n    return TRANSACTION_WRAPPERS;                                                                                       // 41\n  }                                                                                                                    // 42\n});                                                                                                                    // 43\n                                                                                                                       // 44\nvar transaction = new ReactDefaultBatchingStrategyTransaction();                                                       // 45\n                                                                                                                       // 46\nvar ReactDefaultBatchingStrategy = {                                                                                   // 47\n  isBatchingUpdates: false,                                                                                            // 48\n                                                                                                                       // 49\n  /**                                                                                                                  // 50\n   * Call the provided function in a context within which calls to `setState`                                          // 51\n   * and friends are batched such that components aren't updated unnecessarily.                                        // 52\n   */                                                                                                                  // 53\n  batchedUpdates: function (callback, a, b, c, d, e) {                                                                 // 54\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;                                       // 55\n                                                                                                                       // 56\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;                                                             // 57\n                                                                                                                       // 58\n    // The code is written this way to avoid extra allocations                                                         // 59\n    if (alreadyBatchingUpdates) {                                                                                      // 60\n      callback(a, b, c, d, e);                                                                                         // 61\n    } else {                                                                                                           // 62\n      transaction.perform(callback, null, a, b, c, d, e);                                                              // 63\n    }                                                                                                                  // 64\n  }                                                                                                                    // 65\n};                                                                                                                     // 66\n                                                                                                                       // 67\nmodule.exports = ReactDefaultBatchingStrategy;                                                                         // 68\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactEventListener.js\":[\"object-assign\",\"fbjs/lib/EventListener\",\"fbjs/lib/ExecutionEnvironment\",\"./PooledClass\",\"./ReactDOMComponentTree\",\"./ReactUpdates\",\"./getEventTarget\",\"fbjs/lib/getUnboundedScrollPosition\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactEventListener.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactEventListener                                                                                  // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar EventListener = require('fbjs/lib/EventListener');                                                                 // 16\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 17\nvar PooledClass = require('./PooledClass');                                                                            // 18\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 19\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 20\n                                                                                                                       // 21\nvar getEventTarget = require('./getEventTarget');                                                                      // 22\nvar getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');                                       // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Find the deepest React component completely containing the root of the                                              // 26\n * passed-in instance (for use when entire React trees are nested within each                                          // 27\n * other). If React trees are not nested, returns null.                                                                // 28\n */                                                                                                                    // 29\nfunction findParent(inst) {                                                                                            // 30\n  // TODO: It may be a good idea to cache this to prevent unnecessary DOM                                              // 31\n  // traversal, but caching is difficult to do correctly without using a                                               // 32\n  // mutation observer to listen for all DOM changes.                                                                  // 33\n  while (inst._hostParent) {                                                                                           // 34\n    inst = inst._hostParent;                                                                                           // 35\n  }                                                                                                                    // 36\n  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);                                                      // 37\n  var container = rootNode.parentNode;                                                                                 // 38\n  return ReactDOMComponentTree.getClosestInstanceFromNode(container);                                                  // 39\n}                                                                                                                      // 40\n                                                                                                                       // 41\n// Used to store ancestor hierarchy in top level callback                                                              // 42\nfunction TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {                                                      // 43\n  this.topLevelType = topLevelType;                                                                                    // 44\n  this.nativeEvent = nativeEvent;                                                                                      // 45\n  this.ancestors = [];                                                                                                 // 46\n}                                                                                                                      // 47\n_assign(TopLevelCallbackBookKeeping.prototype, {                                                                       // 48\n  destructor: function () {                                                                                            // 49\n    this.topLevelType = null;                                                                                          // 50\n    this.nativeEvent = null;                                                                                           // 51\n    this.ancestors.length = 0;                                                                                         // 52\n  }                                                                                                                    // 53\n});                                                                                                                    // 54\nPooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);                                  // 55\n                                                                                                                       // 56\nfunction handleTopLevelImpl(bookKeeping) {                                                                             // 57\n  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);                                                     // 58\n  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);                                // 59\n                                                                                                                       // 60\n  // Loop through the hierarchy, in case there's any nested components.                                                // 61\n  // It's important that we build the array of ancestors before calling any                                            // 62\n  // event handlers, because event handlers can modify the DOM, leading to                                             // 63\n  // inconsistencies with ReactMount's node cache. See #1105.                                                          // 64\n  var ancestor = targetInst;                                                                                           // 65\n  do {                                                                                                                 // 66\n    bookKeeping.ancestors.push(ancestor);                                                                              // 67\n    ancestor = ancestor && findParent(ancestor);                                                                       // 68\n  } while (ancestor);                                                                                                  // 69\n                                                                                                                       // 70\n  for (var i = 0; i < bookKeeping.ancestors.length; i++) {                                                             // 71\n    targetInst = bookKeeping.ancestors[i];                                                                             // 72\n    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));\n  }                                                                                                                    // 74\n}                                                                                                                      // 75\n                                                                                                                       // 76\nfunction scrollValueMonitor(cb) {                                                                                      // 77\n  var scrollPosition = getUnboundedScrollPosition(window);                                                             // 78\n  cb(scrollPosition);                                                                                                  // 79\n}                                                                                                                      // 80\n                                                                                                                       // 81\nvar ReactEventListener = {                                                                                             // 82\n  _enabled: true,                                                                                                      // 83\n  _handleTopLevel: null,                                                                                               // 84\n                                                                                                                       // 85\n  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,                                                       // 86\n                                                                                                                       // 87\n  setHandleTopLevel: function (handleTopLevel) {                                                                       // 88\n    ReactEventListener._handleTopLevel = handleTopLevel;                                                               // 89\n  },                                                                                                                   // 90\n                                                                                                                       // 91\n  setEnabled: function (enabled) {                                                                                     // 92\n    ReactEventListener._enabled = !!enabled;                                                                           // 93\n  },                                                                                                                   // 94\n                                                                                                                       // 95\n  isEnabled: function () {                                                                                             // 96\n    return ReactEventListener._enabled;                                                                                // 97\n  },                                                                                                                   // 98\n                                                                                                                       // 99\n  /**                                                                                                                  // 100\n   * Traps top-level events by using event bubbling.                                                                   // 101\n   *                                                                                                                   // 102\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 103\n   * @param {string} handlerBaseName Event name (e.g. \"click\").                                                        // 104\n   * @param {object} handle Element on which to attach listener.                                                       // 105\n   * @return {?object} An object with a remove function which will forcefully                                          // 106\n   *                  remove the listener.                                                                             // 107\n   * @internal                                                                                                         // 108\n   */                                                                                                                  // 109\n  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {                                                 // 110\n    var element = handle;                                                                                              // 111\n    if (!element) {                                                                                                    // 112\n      return null;                                                                                                     // 113\n    }                                                                                                                  // 114\n    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));  // 115\n  },                                                                                                                   // 116\n                                                                                                                       // 117\n  /**                                                                                                                  // 118\n   * Traps a top-level event by using event capturing.                                                                 // 119\n   *                                                                                                                   // 120\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 121\n   * @param {string} handlerBaseName Event name (e.g. \"click\").                                                        // 122\n   * @param {object} handle Element on which to attach listener.                                                       // 123\n   * @return {?object} An object with a remove function which will forcefully                                          // 124\n   *                  remove the listener.                                                                             // 125\n   * @internal                                                                                                         // 126\n   */                                                                                                                  // 127\n  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {                                                // 128\n    var element = handle;                                                                                              // 129\n    if (!element) {                                                                                                    // 130\n      return null;                                                                                                     // 131\n    }                                                                                                                  // 132\n    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));\n  },                                                                                                                   // 134\n                                                                                                                       // 135\n  monitorScrollValue: function (refresh) {                                                                             // 136\n    var callback = scrollValueMonitor.bind(null, refresh);                                                             // 137\n    EventListener.listen(window, 'scroll', callback);                                                                  // 138\n  },                                                                                                                   // 139\n                                                                                                                       // 140\n  dispatchEvent: function (topLevelType, nativeEvent) {                                                                // 141\n    if (!ReactEventListener._enabled) {                                                                                // 142\n      return;                                                                                                          // 143\n    }                                                                                                                  // 144\n                                                                                                                       // 145\n    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);                                // 146\n    try {                                                                                                              // 147\n      // Event queue being processed in the same cycle allows                                                          // 148\n      // `preventDefault`.                                                                                             // 149\n      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);                                                    // 150\n    } finally {                                                                                                        // 151\n      TopLevelCallbackBookKeeping.release(bookKeeping);                                                                // 152\n    }                                                                                                                  // 153\n  }                                                                                                                    // 154\n};                                                                                                                     // 155\n                                                                                                                       // 156\nmodule.exports = ReactEventListener;                                                                                   // 157\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactInjection.js\":[\"./DOMProperty\",\"./EventPluginHub\",\"./EventPluginUtils\",\"./ReactComponentEnvironment\",\"./ReactClass\",\"./ReactEmptyComponent\",\"./ReactBrowserEventEmitter\",\"./ReactHostComponent\",\"./ReactUpdates\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactInjection.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactInjection                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar DOMProperty = require('./DOMProperty');                                                                            // 14\nvar EventPluginHub = require('./EventPluginHub');                                                                      // 15\nvar EventPluginUtils = require('./EventPluginUtils');                                                                  // 16\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');                                                // 17\nvar ReactClass = require('./ReactClass');                                                                              // 18\nvar ReactEmptyComponent = require('./ReactEmptyComponent');                                                            // 19\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');                                                  // 20\nvar ReactHostComponent = require('./ReactHostComponent');                                                              // 21\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 22\n                                                                                                                       // 23\nvar ReactInjection = {                                                                                                 // 24\n  Component: ReactComponentEnvironment.injection,                                                                      // 25\n  Class: ReactClass.injection,                                                                                         // 26\n  DOMProperty: DOMProperty.injection,                                                                                  // 27\n  EmptyComponent: ReactEmptyComponent.injection,                                                                       // 28\n  EventPluginHub: EventPluginHub.injection,                                                                            // 29\n  EventPluginUtils: EventPluginUtils.injection,                                                                        // 30\n  EventEmitter: ReactBrowserEventEmitter.injection,                                                                    // 31\n  HostComponent: ReactHostComponent.injection,                                                                         // 32\n  Updates: ReactUpdates.injection                                                                                      // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nmodule.exports = ReactInjection;                                                                                       // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactReconcileTransaction.js\":[\"object-assign\",\"./CallbackQueue\",\"./PooledClass\",\"./ReactBrowserEventEmitter\",\"./ReactInputSelection\",\"./ReactInstrumentation\",\"./Transaction\",\"./ReactUpdateQueue\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactReconcileTransaction.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactReconcileTransaction                                                                           // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar CallbackQueue = require('./CallbackQueue');                                                                        // 16\nvar PooledClass = require('./PooledClass');                                                                            // 17\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');                                                  // 18\nvar ReactInputSelection = require('./ReactInputSelection');                                                            // 19\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 20\nvar Transaction = require('./Transaction');                                                                            // 21\nvar ReactUpdateQueue = require('./ReactUpdateQueue');                                                                  // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Ensures that, when possible, the selection range (currently selected text                                           // 25\n * input) is not disturbed by performing the transaction.                                                              // 26\n */                                                                                                                    // 27\nvar SELECTION_RESTORATION = {                                                                                          // 28\n  /**                                                                                                                  // 29\n   * @return {Selection} Selection information.                                                                        // 30\n   */                                                                                                                  // 31\n  initialize: ReactInputSelection.getSelectionInformation,                                                             // 32\n  /**                                                                                                                  // 33\n   * @param {Selection} sel Selection information returned from `initialize`.                                          // 34\n   */                                                                                                                  // 35\n  close: ReactInputSelection.restoreSelection                                                                          // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\n/**                                                                                                                    // 39\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to                                        // 40\n * high level DOM manipulations (like temporarily removing a text input from the                                       // 41\n * DOM).                                                                                                               // 42\n */                                                                                                                    // 43\nvar EVENT_SUPPRESSION = {                                                                                              // 44\n  /**                                                                                                                  // 45\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before                                         // 46\n   * the reconciliation.                                                                                               // 47\n   */                                                                                                                  // 48\n  initialize: function () {                                                                                            // 49\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();                                                       // 50\n    ReactBrowserEventEmitter.setEnabled(false);                                                                        // 51\n    return currentlyEnabled;                                                                                           // 52\n  },                                                                                                                   // 53\n                                                                                                                       // 54\n  /**                                                                                                                  // 55\n   * @param {boolean} previouslyEnabled Enabled status of                                                              // 56\n   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`                                          // 57\n   *   restores the previous value.                                                                                    // 58\n   */                                                                                                                  // 59\n  close: function (previouslyEnabled) {                                                                                // 60\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);                                                            // 61\n  }                                                                                                                    // 62\n};                                                                                                                     // 63\n                                                                                                                       // 64\n/**                                                                                                                    // 65\n * Provides a queue for collecting `componentDidMount` and                                                             // 66\n * `componentDidUpdate` callbacks during the transaction.                                                              // 67\n */                                                                                                                    // 68\nvar ON_DOM_READY_QUEUEING = {                                                                                          // 69\n  /**                                                                                                                  // 70\n   * Initializes the internal `onDOMReady` queue.                                                                      // 71\n   */                                                                                                                  // 72\n  initialize: function () {                                                                                            // 73\n    this.reactMountReady.reset();                                                                                      // 74\n  },                                                                                                                   // 75\n                                                                                                                       // 76\n  /**                                                                                                                  // 77\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.                                               // 78\n   */                                                                                                                  // 79\n  close: function () {                                                                                                 // 80\n    this.reactMountReady.notifyAll();                                                                                  // 81\n  }                                                                                                                    // 82\n};                                                                                                                     // 83\n                                                                                                                       // 84\n/**                                                                                                                    // 85\n * Executed within the scope of the `Transaction` instance. Consider these as                                          // 86\n * being member methods, but with an implied ordering while being isolated from                                        // 87\n * each other.                                                                                                         // 88\n */                                                                                                                    // 89\nvar TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];                          // 90\n                                                                                                                       // 91\nif (process.env.NODE_ENV !== 'production') {                                                                           // 92\n  TRANSACTION_WRAPPERS.push({                                                                                          // 93\n    initialize: ReactInstrumentation.debugTool.onBeginFlush,                                                           // 94\n    close: ReactInstrumentation.debugTool.onEndFlush                                                                   // 95\n  });                                                                                                                  // 96\n}                                                                                                                      // 97\n                                                                                                                       // 98\n/**                                                                                                                    // 99\n * Currently:                                                                                                          // 100\n * - The order that these are listed in the transaction is critical:                                                   // 101\n * - Suppresses events.                                                                                                // 102\n * - Restores selection range.                                                                                         // 103\n *                                                                                                                     // 104\n * Future:                                                                                                             // 105\n * - Restore document/overflow scroll positions that were unintentionally                                              // 106\n *   modified via DOM insertions above the top viewport boundary.                                                      // 107\n * - Implement/integrate with customized constraint based layout system and keep                                       // 108\n *   track of which dimensions must be remeasured.                                                                     // 109\n *                                                                                                                     // 110\n * @class ReactReconcileTransaction                                                                                    // 111\n */                                                                                                                    // 112\nfunction ReactReconcileTransaction(useCreateElement) {                                                                 // 113\n  this.reinitializeTransaction();                                                                                      // 114\n  // Only server-side rendering really needs this option (see                                                          // 115\n  // `ReactServerRendering`), but server-side uses                                                                     // 116\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's                                       // 117\n  // accessible and defaults to false when `ReactDOMComponent` and                                                     // 118\n  // `ReactDOMTextComponent` checks it in `mountComponent`.`                                                           // 119\n  this.renderToStaticMarkup = false;                                                                                   // 120\n  this.reactMountReady = CallbackQueue.getPooled(null);                                                                // 121\n  this.useCreateElement = useCreateElement;                                                                            // 122\n}                                                                                                                      // 123\n                                                                                                                       // 124\nvar Mixin = {                                                                                                          // 125\n  /**                                                                                                                  // 126\n   * @see Transaction                                                                                                  // 127\n   * @abstract                                                                                                         // 128\n   * @final                                                                                                            // 129\n   * @return {array<object>} List of operation wrap procedures.                                                        // 130\n   *   TODO: convert to array<TransactionWrapper>                                                                      // 131\n   */                                                                                                                  // 132\n  getTransactionWrappers: function () {                                                                                // 133\n    return TRANSACTION_WRAPPERS;                                                                                       // 134\n  },                                                                                                                   // 135\n                                                                                                                       // 136\n  /**                                                                                                                  // 137\n   * @return {object} The queue to collect `onDOMReady` callbacks with.                                                // 138\n   */                                                                                                                  // 139\n  getReactMountReady: function () {                                                                                    // 140\n    return this.reactMountReady;                                                                                       // 141\n  },                                                                                                                   // 142\n                                                                                                                       // 143\n  /**                                                                                                                  // 144\n   * @return {object} The queue to collect React async events.                                                         // 145\n   */                                                                                                                  // 146\n  getUpdateQueue: function () {                                                                                        // 147\n    return ReactUpdateQueue;                                                                                           // 148\n  },                                                                                                                   // 149\n                                                                                                                       // 150\n  /**                                                                                                                  // 151\n   * Save current transaction state -- if the return value from this method is                                         // 152\n   * passed to `rollback`, the transaction will be reset to that state.                                                // 153\n   */                                                                                                                  // 154\n  checkpoint: function () {                                                                                            // 155\n    // reactMountReady is the our only stateful wrapper                                                                // 156\n    return this.reactMountReady.checkpoint();                                                                          // 157\n  },                                                                                                                   // 158\n                                                                                                                       // 159\n  rollback: function (checkpoint) {                                                                                    // 160\n    this.reactMountReady.rollback(checkpoint);                                                                         // 161\n  },                                                                                                                   // 162\n                                                                                                                       // 163\n  /**                                                                                                                  // 164\n   * `PooledClass` looks for this, and will invoke this before allowing this                                           // 165\n   * instance to be reused.                                                                                            // 166\n   */                                                                                                                  // 167\n  destructor: function () {                                                                                            // 168\n    CallbackQueue.release(this.reactMountReady);                                                                       // 169\n    this.reactMountReady = null;                                                                                       // 170\n  }                                                                                                                    // 171\n};                                                                                                                     // 172\n                                                                                                                       // 173\n_assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);                                                // 174\n                                                                                                                       // 175\nPooledClass.addPoolingTo(ReactReconcileTransaction);                                                                   // 176\n                                                                                                                       // 177\nmodule.exports = ReactReconcileTransaction;                                                                            // 178\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactInputSelection.js\":[\"./ReactDOMSelection\",\"fbjs/lib/containsNode\",\"fbjs/lib/focusNode\",\"fbjs/lib/getActiveElement\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactInputSelection.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactInputSelection                                                                                 // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactDOMSelection = require('./ReactDOMSelection');                                                                // 14\n                                                                                                                       // 15\nvar containsNode = require('fbjs/lib/containsNode');                                                                   // 16\nvar focusNode = require('fbjs/lib/focusNode');                                                                         // 17\nvar getActiveElement = require('fbjs/lib/getActiveElement');                                                           // 18\n                                                                                                                       // 19\nfunction isInDocument(node) {                                                                                          // 20\n  return containsNode(document.documentElement, node);                                                                 // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * @ReactInputSelection: React input selection module. Based on Selection.js,                                          // 25\n * but modified to be suitable for react and has a couple of bug fixes (doesn't                                        // 26\n * assume buttons have range selections allowed).                                                                      // 27\n * Input selection module for React.                                                                                   // 28\n */                                                                                                                    // 29\nvar ReactInputSelection = {                                                                                            // 30\n                                                                                                                       // 31\n  hasSelectionCapabilities: function (elem) {                                                                          // 32\n    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();                                               // 33\n    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');\n  },                                                                                                                   // 35\n                                                                                                                       // 36\n  getSelectionInformation: function () {                                                                               // 37\n    var focusedElem = getActiveElement();                                                                              // 38\n    return {                                                                                                           // 39\n      focusedElem: focusedElem,                                                                                        // 40\n      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null\n    };                                                                                                                 // 42\n  },                                                                                                                   // 43\n                                                                                                                       // 44\n  /**                                                                                                                  // 45\n   * @restoreSelection: If any selection information was potentially lost,                                             // 46\n   * restore it. This is useful when performing operations that could remove dom                                       // 47\n   * nodes and place them back in, resulting in focus being lost.                                                      // 48\n   */                                                                                                                  // 49\n  restoreSelection: function (priorSelectionInformation) {                                                             // 50\n    var curFocusedElem = getActiveElement();                                                                           // 51\n    var priorFocusedElem = priorSelectionInformation.focusedElem;                                                      // 52\n    var priorSelectionRange = priorSelectionInformation.selectionRange;                                                // 53\n    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {                                       // 54\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {                                            // 55\n        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);                                       // 56\n      }                                                                                                                // 57\n      focusNode(priorFocusedElem);                                                                                     // 58\n    }                                                                                                                  // 59\n  },                                                                                                                   // 60\n                                                                                                                       // 61\n  /**                                                                                                                  // 62\n   * @getSelection: Gets the selection bounds of a focused textarea, input or                                          // 63\n   * contentEditable node.                                                                                             // 64\n   * -@input: Look up selection bounds of this input                                                                   // 65\n   * -@return {start: selectionStart, end: selectionEnd}                                                               // 66\n   */                                                                                                                  // 67\n  getSelection: function (input) {                                                                                     // 68\n    var selection;                                                                                                     // 69\n                                                                                                                       // 70\n    if ('selectionStart' in input) {                                                                                   // 71\n      // Modern browser with input or textarea.                                                                        // 72\n      selection = {                                                                                                    // 73\n        start: input.selectionStart,                                                                                   // 74\n        end: input.selectionEnd                                                                                        // 75\n      };                                                                                                               // 76\n    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {                     // 77\n      // IE8 input.                                                                                                    // 78\n      var range = document.selection.createRange();                                                                    // 79\n      // There can only be one selection per document in IE, so it must                                                // 80\n      // be in our element.                                                                                            // 81\n      if (range.parentElement() === input) {                                                                           // 82\n        selection = {                                                                                                  // 83\n          start: -range.moveStart('character', -input.value.length),                                                   // 84\n          end: -range.moveEnd('character', -input.value.length)                                                        // 85\n        };                                                                                                             // 86\n      }                                                                                                                // 87\n    } else {                                                                                                           // 88\n      // Content editable or old IE textarea.                                                                          // 89\n      selection = ReactDOMSelection.getOffsets(input);                                                                 // 90\n    }                                                                                                                  // 91\n                                                                                                                       // 92\n    return selection || { start: 0, end: 0 };                                                                          // 93\n  },                                                                                                                   // 94\n                                                                                                                       // 95\n  /**                                                                                                                  // 96\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses                                       // 97\n   * the input.                                                                                                        // 98\n   * -@input     Set selection bounds of this input or textarea                                                        // 99\n   * -@offsets   Object of same form that is returned from get*                                                        // 100\n   */                                                                                                                  // 101\n  setSelection: function (input, offsets) {                                                                            // 102\n    var start = offsets.start;                                                                                         // 103\n    var end = offsets.end;                                                                                             // 104\n    if (end === undefined) {                                                                                           // 105\n      end = start;                                                                                                     // 106\n    }                                                                                                                  // 107\n                                                                                                                       // 108\n    if ('selectionStart' in input) {                                                                                   // 109\n      input.selectionStart = start;                                                                                    // 110\n      input.selectionEnd = Math.min(end, input.value.length);                                                          // 111\n    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {                     // 112\n      var range = input.createTextRange();                                                                             // 113\n      range.collapse(true);                                                                                            // 114\n      range.moveStart('character', start);                                                                             // 115\n      range.moveEnd('character', end - start);                                                                         // 116\n      range.select();                                                                                                  // 117\n    } else {                                                                                                           // 118\n      ReactDOMSelection.setOffsets(input, offsets);                                                                    // 119\n    }                                                                                                                  // 120\n  }                                                                                                                    // 121\n};                                                                                                                     // 122\n                                                                                                                       // 123\nmodule.exports = ReactInputSelection;                                                                                  // 124\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMSelection.js\":[\"fbjs/lib/ExecutionEnvironment\",\"./getNodeForCharacterOffset\",\"./getTextContentAccessor\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMSelection.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMSelection                                                                                   // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 14\n                                                                                                                       // 15\nvar getNodeForCharacterOffset = require('./getNodeForCharacterOffset');                                                // 16\nvar getTextContentAccessor = require('./getTextContentAccessor');                                                      // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * While `isCollapsed` is available on the Selection object and `collapsed`                                            // 20\n * is available on the Range object, IE11 sometimes gets them wrong.                                                   // 21\n * If the anchor/focus nodes and offsets are the same, the range is collapsed.                                         // 22\n */                                                                                                                    // 23\nfunction isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {                                               // 24\n  return anchorNode === focusNode && anchorOffset === focusOffset;                                                     // 25\n}                                                                                                                      // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Get the appropriate anchor and focus node/offset pairs for IE.                                                      // 29\n *                                                                                                                     // 30\n * The catch here is that IE's selection API doesn't provide information                                               // 31\n * about whether the selection is forward or backward, so we have to                                                   // 32\n * behave as though it's always forward.                                                                               // 33\n *                                                                                                                     // 34\n * IE text differs from modern selection in that it behaves as though                                                  // 35\n * block elements end with a new line. This means character offsets will                                               // 36\n * differ between the two APIs.                                                                                        // 37\n *                                                                                                                     // 38\n * @param {DOMElement} node                                                                                            // 39\n * @return {object}                                                                                                    // 40\n */                                                                                                                    // 41\nfunction getIEOffsets(node) {                                                                                          // 42\n  var selection = document.selection;                                                                                  // 43\n  var selectedRange = selection.createRange();                                                                         // 44\n  var selectedLength = selectedRange.text.length;                                                                      // 45\n                                                                                                                       // 46\n  // Duplicate selection so we can move range without breaking user selection.                                         // 47\n  var fromStart = selectedRange.duplicate();                                                                           // 48\n  fromStart.moveToElementText(node);                                                                                   // 49\n  fromStart.setEndPoint('EndToStart', selectedRange);                                                                  // 50\n                                                                                                                       // 51\n  var startOffset = fromStart.text.length;                                                                             // 52\n  var endOffset = startOffset + selectedLength;                                                                        // 53\n                                                                                                                       // 54\n  return {                                                                                                             // 55\n    start: startOffset,                                                                                                // 56\n    end: endOffset                                                                                                     // 57\n  };                                                                                                                   // 58\n}                                                                                                                      // 59\n                                                                                                                       // 60\n/**                                                                                                                    // 61\n * @param {DOMElement} node                                                                                            // 62\n * @return {?object}                                                                                                   // 63\n */                                                                                                                    // 64\nfunction getModernOffsets(node) {                                                                                      // 65\n  var selection = window.getSelection && window.getSelection();                                                        // 66\n                                                                                                                       // 67\n  if (!selection || selection.rangeCount === 0) {                                                                      // 68\n    return null;                                                                                                       // 69\n  }                                                                                                                    // 70\n                                                                                                                       // 71\n  var anchorNode = selection.anchorNode;                                                                               // 72\n  var anchorOffset = selection.anchorOffset;                                                                           // 73\n  var focusNode = selection.focusNode;                                                                                 // 74\n  var focusOffset = selection.focusOffset;                                                                             // 75\n                                                                                                                       // 76\n  var currentRange = selection.getRangeAt(0);                                                                          // 77\n                                                                                                                       // 78\n  // In Firefox, range.startContainer and range.endContainer can be \"anonymous                                         // 79\n  // divs\", e.g. the up/down buttons on an <input type=\"number\">. Anonymous                                            // 80\n  // divs do not seem to expose properties, triggering a \"Permission denied                                            // 81\n  // error\" if any of its properties are accessed. The only seemingly possible                                         // 82\n  // way to avoid erroring is to access a property that typically works for                                            // 83\n  // non-anonymous divs and catch any error that may otherwise arise. See                                              // 84\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427                                                               // 85\n  try {                                                                                                                // 86\n    /* eslint-disable no-unused-expressions */                                                                         // 87\n    currentRange.startContainer.nodeType;                                                                              // 88\n    currentRange.endContainer.nodeType;                                                                                // 89\n    /* eslint-enable no-unused-expressions */                                                                          // 90\n  } catch (e) {                                                                                                        // 91\n    return null;                                                                                                       // 92\n  }                                                                                                                    // 93\n                                                                                                                       // 94\n  // If the node and offset values are the same, the selection is collapsed.                                           // 95\n  // `Selection.isCollapsed` is available natively, but IE sometimes gets                                              // 96\n  // this value wrong.                                                                                                 // 97\n  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);\n                                                                                                                       // 99\n  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;                                         // 100\n                                                                                                                       // 101\n  var tempRange = currentRange.cloneRange();                                                                           // 102\n  tempRange.selectNodeContents(node);                                                                                  // 103\n  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);                                             // 104\n                                                                                                                       // 105\n  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);\n                                                                                                                       // 107\n  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;                                                  // 108\n  var end = start + rangeLength;                                                                                       // 109\n                                                                                                                       // 110\n  // Detect whether the selection is backward.                                                                         // 111\n  var detectionRange = document.createRange();                                                                         // 112\n  detectionRange.setStart(anchorNode, anchorOffset);                                                                   // 113\n  detectionRange.setEnd(focusNode, focusOffset);                                                                       // 114\n  var isBackward = detectionRange.collapsed;                                                                           // 115\n                                                                                                                       // 116\n  return {                                                                                                             // 117\n    start: isBackward ? end : start,                                                                                   // 118\n    end: isBackward ? start : end                                                                                      // 119\n  };                                                                                                                   // 120\n}                                                                                                                      // 121\n                                                                                                                       // 122\n/**                                                                                                                    // 123\n * @param {DOMElement|DOMTextNode} node                                                                                // 124\n * @param {object} offsets                                                                                             // 125\n */                                                                                                                    // 126\nfunction setIEOffsets(node, offsets) {                                                                                 // 127\n  var range = document.selection.createRange().duplicate();                                                            // 128\n  var start, end;                                                                                                      // 129\n                                                                                                                       // 130\n  if (offsets.end === undefined) {                                                                                     // 131\n    start = offsets.start;                                                                                             // 132\n    end = start;                                                                                                       // 133\n  } else if (offsets.start > offsets.end) {                                                                            // 134\n    start = offsets.end;                                                                                               // 135\n    end = offsets.start;                                                                                               // 136\n  } else {                                                                                                             // 137\n    start = offsets.start;                                                                                             // 138\n    end = offsets.end;                                                                                                 // 139\n  }                                                                                                                    // 140\n                                                                                                                       // 141\n  range.moveToElementText(node);                                                                                       // 142\n  range.moveStart('character', start);                                                                                 // 143\n  range.setEndPoint('EndToStart', range);                                                                              // 144\n  range.moveEnd('character', end - start);                                                                             // 145\n  range.select();                                                                                                      // 146\n}                                                                                                                      // 147\n                                                                                                                       // 148\n/**                                                                                                                    // 149\n * In modern non-IE browsers, we can support both forward and backward                                                 // 150\n * selections.                                                                                                         // 151\n *                                                                                                                     // 152\n * Note: IE10+ supports the Selection object, but it does not support                                                  // 153\n * the `extend` method, which means that even in modern IE, it's not possible                                          // 154\n * to programmatically create a backward selection. Thus, for all IE                                                   // 155\n * versions, we use the old IE API to create our selections.                                                           // 156\n *                                                                                                                     // 157\n * @param {DOMElement|DOMTextNode} node                                                                                // 158\n * @param {object} offsets                                                                                             // 159\n */                                                                                                                    // 160\nfunction setModernOffsets(node, offsets) {                                                                             // 161\n  if (!window.getSelection) {                                                                                          // 162\n    return;                                                                                                            // 163\n  }                                                                                                                    // 164\n                                                                                                                       // 165\n  var selection = window.getSelection();                                                                               // 166\n  var length = node[getTextContentAccessor()].length;                                                                  // 167\n  var start = Math.min(offsets.start, length);                                                                         // 168\n  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);                                         // 169\n                                                                                                                       // 170\n  // IE 11 uses modern selection, but doesn't support the extend method.                                               // 171\n  // Flip backward selections, so we can set with a single range.                                                      // 172\n  if (!selection.extend && start > end) {                                                                              // 173\n    var temp = end;                                                                                                    // 174\n    end = start;                                                                                                       // 175\n    start = temp;                                                                                                      // 176\n  }                                                                                                                    // 177\n                                                                                                                       // 178\n  var startMarker = getNodeForCharacterOffset(node, start);                                                            // 179\n  var endMarker = getNodeForCharacterOffset(node, end);                                                                // 180\n                                                                                                                       // 181\n  if (startMarker && endMarker) {                                                                                      // 182\n    var range = document.createRange();                                                                                // 183\n    range.setStart(startMarker.node, startMarker.offset);                                                              // 184\n    selection.removeAllRanges();                                                                                       // 185\n                                                                                                                       // 186\n    if (start > end) {                                                                                                 // 187\n      selection.addRange(range);                                                                                       // 188\n      selection.extend(endMarker.node, endMarker.offset);                                                              // 189\n    } else {                                                                                                           // 190\n      range.setEnd(endMarker.node, endMarker.offset);                                                                  // 191\n      selection.addRange(range);                                                                                       // 192\n    }                                                                                                                  // 193\n  }                                                                                                                    // 194\n}                                                                                                                      // 195\n                                                                                                                       // 196\nvar useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);           // 197\n                                                                                                                       // 198\nvar ReactDOMSelection = {                                                                                              // 199\n  /**                                                                                                                  // 200\n   * @param {DOMElement} node                                                                                          // 201\n   */                                                                                                                  // 202\n  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,                                                          // 203\n                                                                                                                       // 204\n  /**                                                                                                                  // 205\n   * @param {DOMElement|DOMTextNode} node                                                                              // 206\n   * @param {object} offsets                                                                                           // 207\n   */                                                                                                                  // 208\n  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets                                                           // 209\n};                                                                                                                     // 210\n                                                                                                                       // 211\nmodule.exports = ReactDOMSelection;                                                                                    // 212\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getNodeForCharacterOffset.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getNodeForCharacterOffset.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getNodeForCharacterOffset                                                                           // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Given any node return the first leaf node without children.                                                         // 15\n *                                                                                                                     // 16\n * @param {DOMElement|DOMTextNode} node                                                                                // 17\n * @return {DOMElement|DOMTextNode}                                                                                    // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\nfunction getLeafNode(node) {                                                                                           // 21\n  while (node && node.firstChild) {                                                                                    // 22\n    node = node.firstChild;                                                                                            // 23\n  }                                                                                                                    // 24\n  return node;                                                                                                         // 25\n}                                                                                                                      // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Get the next sibling within a container. This will walk up the                                                      // 29\n * DOM if a node's siblings have been exhausted.                                                                       // 30\n *                                                                                                                     // 31\n * @param {DOMElement|DOMTextNode} node                                                                                // 32\n * @return {?DOMElement|DOMTextNode}                                                                                   // 33\n */                                                                                                                    // 34\nfunction getSiblingNode(node) {                                                                                        // 35\n  while (node) {                                                                                                       // 36\n    if (node.nextSibling) {                                                                                            // 37\n      return node.nextSibling;                                                                                         // 38\n    }                                                                                                                  // 39\n    node = node.parentNode;                                                                                            // 40\n  }                                                                                                                    // 41\n}                                                                                                                      // 42\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * Get object describing the nodes which contain characters at offset.                                                 // 45\n *                                                                                                                     // 46\n * @param {DOMElement|DOMTextNode} root                                                                                // 47\n * @param {number} offset                                                                                              // 48\n * @return {?object}                                                                                                   // 49\n */                                                                                                                    // 50\nfunction getNodeForCharacterOffset(root, offset) {                                                                     // 51\n  var node = getLeafNode(root);                                                                                        // 52\n  var nodeStart = 0;                                                                                                   // 53\n  var nodeEnd = 0;                                                                                                     // 54\n                                                                                                                       // 55\n  while (node) {                                                                                                       // 56\n    if (node.nodeType === 3) {                                                                                         // 57\n      nodeEnd = nodeStart + node.textContent.length;                                                                   // 58\n                                                                                                                       // 59\n      if (nodeStart <= offset && nodeEnd >= offset) {                                                                  // 60\n        return {                                                                                                       // 61\n          node: node,                                                                                                  // 62\n          offset: offset - nodeStart                                                                                   // 63\n        };                                                                                                             // 64\n      }                                                                                                                // 65\n                                                                                                                       // 66\n      nodeStart = nodeEnd;                                                                                             // 67\n    }                                                                                                                  // 68\n                                                                                                                       // 69\n    node = getLeafNode(getSiblingNode(node));                                                                          // 70\n  }                                                                                                                    // 71\n}                                                                                                                      // 72\n                                                                                                                       // 73\nmodule.exports = getNodeForCharacterOffset;                                                                            // 74\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SVGDOMPropertyConfig.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SVGDOMPropertyConfig.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SVGDOMPropertyConfig                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar NS = {                                                                                                             // 14\n  xlink: 'http://www.w3.org/1999/xlink',                                                                               // 15\n  xml: 'http://www.w3.org/XML/1998/namespace'                                                                          // 16\n};                                                                                                                     // 17\n                                                                                                                       // 18\n// We use attributes for everything SVG so let's avoid some duplication and run                                        // 19\n// code instead.                                                                                                       // 20\n// The following are all specified in the HTML config already so we exclude here.                                      // 21\n// - class (as className)                                                                                              // 22\n// - color                                                                                                             // 23\n// - height                                                                                                            // 24\n// - id                                                                                                                // 25\n// - lang                                                                                                              // 26\n// - max                                                                                                               // 27\n// - media                                                                                                             // 28\n// - method                                                                                                            // 29\n// - min                                                                                                               // 30\n// - name                                                                                                              // 31\n// - style                                                                                                             // 32\n// - target                                                                                                            // 33\n// - type                                                                                                              // 34\n// - width                                                                                                             // 35\nvar ATTRS = {                                                                                                          // 36\n  accentHeight: 'accent-height',                                                                                       // 37\n  accumulate: 0,                                                                                                       // 38\n  additive: 0,                                                                                                         // 39\n  alignmentBaseline: 'alignment-baseline',                                                                             // 40\n  allowReorder: 'allowReorder',                                                                                        // 41\n  alphabetic: 0,                                                                                                       // 42\n  amplitude: 0,                                                                                                        // 43\n  arabicForm: 'arabic-form',                                                                                           // 44\n  ascent: 0,                                                                                                           // 45\n  attributeName: 'attributeName',                                                                                      // 46\n  attributeType: 'attributeType',                                                                                      // 47\n  autoReverse: 'autoReverse',                                                                                          // 48\n  azimuth: 0,                                                                                                          // 49\n  baseFrequency: 'baseFrequency',                                                                                      // 50\n  baseProfile: 'baseProfile',                                                                                          // 51\n  baselineShift: 'baseline-shift',                                                                                     // 52\n  bbox: 0,                                                                                                             // 53\n  begin: 0,                                                                                                            // 54\n  bias: 0,                                                                                                             // 55\n  by: 0,                                                                                                               // 56\n  calcMode: 'calcMode',                                                                                                // 57\n  capHeight: 'cap-height',                                                                                             // 58\n  clip: 0,                                                                                                             // 59\n  clipPath: 'clip-path',                                                                                               // 60\n  clipRule: 'clip-rule',                                                                                               // 61\n  clipPathUnits: 'clipPathUnits',                                                                                      // 62\n  colorInterpolation: 'color-interpolation',                                                                           // 63\n  colorInterpolationFilters: 'color-interpolation-filters',                                                            // 64\n  colorProfile: 'color-profile',                                                                                       // 65\n  colorRendering: 'color-rendering',                                                                                   // 66\n  contentScriptType: 'contentScriptType',                                                                              // 67\n  contentStyleType: 'contentStyleType',                                                                                // 68\n  cursor: 0,                                                                                                           // 69\n  cx: 0,                                                                                                               // 70\n  cy: 0,                                                                                                               // 71\n  d: 0,                                                                                                                // 72\n  decelerate: 0,                                                                                                       // 73\n  descent: 0,                                                                                                          // 74\n  diffuseConstant: 'diffuseConstant',                                                                                  // 75\n  direction: 0,                                                                                                        // 76\n  display: 0,                                                                                                          // 77\n  divisor: 0,                                                                                                          // 78\n  dominantBaseline: 'dominant-baseline',                                                                               // 79\n  dur: 0,                                                                                                              // 80\n  dx: 0,                                                                                                               // 81\n  dy: 0,                                                                                                               // 82\n  edgeMode: 'edgeMode',                                                                                                // 83\n  elevation: 0,                                                                                                        // 84\n  enableBackground: 'enable-background',                                                                               // 85\n  end: 0,                                                                                                              // 86\n  exponent: 0,                                                                                                         // 87\n  externalResourcesRequired: 'externalResourcesRequired',                                                              // 88\n  fill: 0,                                                                                                             // 89\n  fillOpacity: 'fill-opacity',                                                                                         // 90\n  fillRule: 'fill-rule',                                                                                               // 91\n  filter: 0,                                                                                                           // 92\n  filterRes: 'filterRes',                                                                                              // 93\n  filterUnits: 'filterUnits',                                                                                          // 94\n  floodColor: 'flood-color',                                                                                           // 95\n  floodOpacity: 'flood-opacity',                                                                                       // 96\n  focusable: 0,                                                                                                        // 97\n  fontFamily: 'font-family',                                                                                           // 98\n  fontSize: 'font-size',                                                                                               // 99\n  fontSizeAdjust: 'font-size-adjust',                                                                                  // 100\n  fontStretch: 'font-stretch',                                                                                         // 101\n  fontStyle: 'font-style',                                                                                             // 102\n  fontVariant: 'font-variant',                                                                                         // 103\n  fontWeight: 'font-weight',                                                                                           // 104\n  format: 0,                                                                                                           // 105\n  from: 0,                                                                                                             // 106\n  fx: 0,                                                                                                               // 107\n  fy: 0,                                                                                                               // 108\n  g1: 0,                                                                                                               // 109\n  g2: 0,                                                                                                               // 110\n  glyphName: 'glyph-name',                                                                                             // 111\n  glyphOrientationHorizontal: 'glyph-orientation-horizontal',                                                          // 112\n  glyphOrientationVertical: 'glyph-orientation-vertical',                                                              // 113\n  glyphRef: 'glyphRef',                                                                                                // 114\n  gradientTransform: 'gradientTransform',                                                                              // 115\n  gradientUnits: 'gradientUnits',                                                                                      // 116\n  hanging: 0,                                                                                                          // 117\n  horizAdvX: 'horiz-adv-x',                                                                                            // 118\n  horizOriginX: 'horiz-origin-x',                                                                                      // 119\n  ideographic: 0,                                                                                                      // 120\n  imageRendering: 'image-rendering',                                                                                   // 121\n  'in': 0,                                                                                                             // 122\n  in2: 0,                                                                                                              // 123\n  intercept: 0,                                                                                                        // 124\n  k: 0,                                                                                                                // 125\n  k1: 0,                                                                                                               // 126\n  k2: 0,                                                                                                               // 127\n  k3: 0,                                                                                                               // 128\n  k4: 0,                                                                                                               // 129\n  kernelMatrix: 'kernelMatrix',                                                                                        // 130\n  kernelUnitLength: 'kernelUnitLength',                                                                                // 131\n  kerning: 0,                                                                                                          // 132\n  keyPoints: 'keyPoints',                                                                                              // 133\n  keySplines: 'keySplines',                                                                                            // 134\n  keyTimes: 'keyTimes',                                                                                                // 135\n  lengthAdjust: 'lengthAdjust',                                                                                        // 136\n  letterSpacing: 'letter-spacing',                                                                                     // 137\n  lightingColor: 'lighting-color',                                                                                     // 138\n  limitingConeAngle: 'limitingConeAngle',                                                                              // 139\n  local: 0,                                                                                                            // 140\n  markerEnd: 'marker-end',                                                                                             // 141\n  markerMid: 'marker-mid',                                                                                             // 142\n  markerStart: 'marker-start',                                                                                         // 143\n  markerHeight: 'markerHeight',                                                                                        // 144\n  markerUnits: 'markerUnits',                                                                                          // 145\n  markerWidth: 'markerWidth',                                                                                          // 146\n  mask: 0,                                                                                                             // 147\n  maskContentUnits: 'maskContentUnits',                                                                                // 148\n  maskUnits: 'maskUnits',                                                                                              // 149\n  mathematical: 0,                                                                                                     // 150\n  mode: 0,                                                                                                             // 151\n  numOctaves: 'numOctaves',                                                                                            // 152\n  offset: 0,                                                                                                           // 153\n  opacity: 0,                                                                                                          // 154\n  operator: 0,                                                                                                         // 155\n  order: 0,                                                                                                            // 156\n  orient: 0,                                                                                                           // 157\n  orientation: 0,                                                                                                      // 158\n  origin: 0,                                                                                                           // 159\n  overflow: 0,                                                                                                         // 160\n  overlinePosition: 'overline-position',                                                                               // 161\n  overlineThickness: 'overline-thickness',                                                                             // 162\n  paintOrder: 'paint-order',                                                                                           // 163\n  panose1: 'panose-1',                                                                                                 // 164\n  pathLength: 'pathLength',                                                                                            // 165\n  patternContentUnits: 'patternContentUnits',                                                                          // 166\n  patternTransform: 'patternTransform',                                                                                // 167\n  patternUnits: 'patternUnits',                                                                                        // 168\n  pointerEvents: 'pointer-events',                                                                                     // 169\n  points: 0,                                                                                                           // 170\n  pointsAtX: 'pointsAtX',                                                                                              // 171\n  pointsAtY: 'pointsAtY',                                                                                              // 172\n  pointsAtZ: 'pointsAtZ',                                                                                              // 173\n  preserveAlpha: 'preserveAlpha',                                                                                      // 174\n  preserveAspectRatio: 'preserveAspectRatio',                                                                          // 175\n  primitiveUnits: 'primitiveUnits',                                                                                    // 176\n  r: 0,                                                                                                                // 177\n  radius: 0,                                                                                                           // 178\n  refX: 'refX',                                                                                                        // 179\n  refY: 'refY',                                                                                                        // 180\n  renderingIntent: 'rendering-intent',                                                                                 // 181\n  repeatCount: 'repeatCount',                                                                                          // 182\n  repeatDur: 'repeatDur',                                                                                              // 183\n  requiredExtensions: 'requiredExtensions',                                                                            // 184\n  requiredFeatures: 'requiredFeatures',                                                                                // 185\n  restart: 0,                                                                                                          // 186\n  result: 0,                                                                                                           // 187\n  rotate: 0,                                                                                                           // 188\n  rx: 0,                                                                                                               // 189\n  ry: 0,                                                                                                               // 190\n  scale: 0,                                                                                                            // 191\n  seed: 0,                                                                                                             // 192\n  shapeRendering: 'shape-rendering',                                                                                   // 193\n  slope: 0,                                                                                                            // 194\n  spacing: 0,                                                                                                          // 195\n  specularConstant: 'specularConstant',                                                                                // 196\n  specularExponent: 'specularExponent',                                                                                // 197\n  speed: 0,                                                                                                            // 198\n  spreadMethod: 'spreadMethod',                                                                                        // 199\n  startOffset: 'startOffset',                                                                                          // 200\n  stdDeviation: 'stdDeviation',                                                                                        // 201\n  stemh: 0,                                                                                                            // 202\n  stemv: 0,                                                                                                            // 203\n  stitchTiles: 'stitchTiles',                                                                                          // 204\n  stopColor: 'stop-color',                                                                                             // 205\n  stopOpacity: 'stop-opacity',                                                                                         // 206\n  strikethroughPosition: 'strikethrough-position',                                                                     // 207\n  strikethroughThickness: 'strikethrough-thickness',                                                                   // 208\n  string: 0,                                                                                                           // 209\n  stroke: 0,                                                                                                           // 210\n  strokeDasharray: 'stroke-dasharray',                                                                                 // 211\n  strokeDashoffset: 'stroke-dashoffset',                                                                               // 212\n  strokeLinecap: 'stroke-linecap',                                                                                     // 213\n  strokeLinejoin: 'stroke-linejoin',                                                                                   // 214\n  strokeMiterlimit: 'stroke-miterlimit',                                                                               // 215\n  strokeOpacity: 'stroke-opacity',                                                                                     // 216\n  strokeWidth: 'stroke-width',                                                                                         // 217\n  surfaceScale: 'surfaceScale',                                                                                        // 218\n  systemLanguage: 'systemLanguage',                                                                                    // 219\n  tableValues: 'tableValues',                                                                                          // 220\n  targetX: 'targetX',                                                                                                  // 221\n  targetY: 'targetY',                                                                                                  // 222\n  textAnchor: 'text-anchor',                                                                                           // 223\n  textDecoration: 'text-decoration',                                                                                   // 224\n  textRendering: 'text-rendering',                                                                                     // 225\n  textLength: 'textLength',                                                                                            // 226\n  to: 0,                                                                                                               // 227\n  transform: 0,                                                                                                        // 228\n  u1: 0,                                                                                                               // 229\n  u2: 0,                                                                                                               // 230\n  underlinePosition: 'underline-position',                                                                             // 231\n  underlineThickness: 'underline-thickness',                                                                           // 232\n  unicode: 0,                                                                                                          // 233\n  unicodeBidi: 'unicode-bidi',                                                                                         // 234\n  unicodeRange: 'unicode-range',                                                                                       // 235\n  unitsPerEm: 'units-per-em',                                                                                          // 236\n  vAlphabetic: 'v-alphabetic',                                                                                         // 237\n  vHanging: 'v-hanging',                                                                                               // 238\n  vIdeographic: 'v-ideographic',                                                                                       // 239\n  vMathematical: 'v-mathematical',                                                                                     // 240\n  values: 0,                                                                                                           // 241\n  vectorEffect: 'vector-effect',                                                                                       // 242\n  version: 0,                                                                                                          // 243\n  vertAdvY: 'vert-adv-y',                                                                                              // 244\n  vertOriginX: 'vert-origin-x',                                                                                        // 245\n  vertOriginY: 'vert-origin-y',                                                                                        // 246\n  viewBox: 'viewBox',                                                                                                  // 247\n  viewTarget: 'viewTarget',                                                                                            // 248\n  visibility: 0,                                                                                                       // 249\n  widths: 0,                                                                                                           // 250\n  wordSpacing: 'word-spacing',                                                                                         // 251\n  writingMode: 'writing-mode',                                                                                         // 252\n  x: 0,                                                                                                                // 253\n  xHeight: 'x-height',                                                                                                 // 254\n  x1: 0,                                                                                                               // 255\n  x2: 0,                                                                                                               // 256\n  xChannelSelector: 'xChannelSelector',                                                                                // 257\n  xlinkActuate: 'xlink:actuate',                                                                                       // 258\n  xlinkArcrole: 'xlink:arcrole',                                                                                       // 259\n  xlinkHref: 'xlink:href',                                                                                             // 260\n  xlinkRole: 'xlink:role',                                                                                             // 261\n  xlinkShow: 'xlink:show',                                                                                             // 262\n  xlinkTitle: 'xlink:title',                                                                                           // 263\n  xlinkType: 'xlink:type',                                                                                             // 264\n  xmlBase: 'xml:base',                                                                                                 // 265\n  xmlns: 0,                                                                                                            // 266\n  xmlnsXlink: 'xmlns:xlink',                                                                                           // 267\n  xmlLang: 'xml:lang',                                                                                                 // 268\n  xmlSpace: 'xml:space',                                                                                               // 269\n  y: 0,                                                                                                                // 270\n  y1: 0,                                                                                                               // 271\n  y2: 0,                                                                                                               // 272\n  yChannelSelector: 'yChannelSelector',                                                                                // 273\n  z: 0,                                                                                                                // 274\n  zoomAndPan: 'zoomAndPan'                                                                                             // 275\n};                                                                                                                     // 276\n                                                                                                                       // 277\nvar SVGDOMPropertyConfig = {                                                                                           // 278\n  Properties: {},                                                                                                      // 279\n  DOMAttributeNamespaces: {                                                                                            // 280\n    xlinkActuate: NS.xlink,                                                                                            // 281\n    xlinkArcrole: NS.xlink,                                                                                            // 282\n    xlinkHref: NS.xlink,                                                                                               // 283\n    xlinkRole: NS.xlink,                                                                                               // 284\n    xlinkShow: NS.xlink,                                                                                               // 285\n    xlinkTitle: NS.xlink,                                                                                              // 286\n    xlinkType: NS.xlink,                                                                                               // 287\n    xmlBase: NS.xml,                                                                                                   // 288\n    xmlLang: NS.xml,                                                                                                   // 289\n    xmlSpace: NS.xml                                                                                                   // 290\n  },                                                                                                                   // 291\n  DOMAttributeNames: {}                                                                                                // 292\n};                                                                                                                     // 293\n                                                                                                                       // 294\nObject.keys(ATTRS).forEach(function (key) {                                                                            // 295\n  SVGDOMPropertyConfig.Properties[key] = 0;                                                                            // 296\n  if (ATTRS[key]) {                                                                                                    // 297\n    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];                                                          // 298\n  }                                                                                                                    // 299\n});                                                                                                                    // 300\n                                                                                                                       // 301\nmodule.exports = SVGDOMPropertyConfig;                                                                                 // 302\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SelectEventPlugin.js\":[\"./EventConstants\",\"./EventPropagators\",\"fbjs/lib/ExecutionEnvironment\",\"./ReactDOMComponentTree\",\"./ReactInputSelection\",\"./SyntheticEvent\",\"fbjs/lib/getActiveElement\",\"./isTextInputElement\",\"fbjs/lib/keyOf\",\"fbjs/lib/shallowEqual\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SelectEventPlugin.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SelectEventPlugin                                                                                   // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar EventConstants = require('./EventConstants');                                                                      // 14\nvar EventPropagators = require('./EventPropagators');                                                                  // 15\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 16\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 17\nvar ReactInputSelection = require('./ReactInputSelection');                                                            // 18\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 19\n                                                                                                                       // 20\nvar getActiveElement = require('fbjs/lib/getActiveElement');                                                           // 21\nvar isTextInputElement = require('./isTextInputElement');                                                              // 22\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 23\nvar shallowEqual = require('fbjs/lib/shallowEqual');                                                                   // 24\n                                                                                                                       // 25\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 26\n                                                                                                                       // 27\nvar skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\n                                                                                                                       // 29\nvar eventTypes = {                                                                                                     // 30\n  select: {                                                                                                            // 31\n    phasedRegistrationNames: {                                                                                         // 32\n      bubbled: keyOf({ onSelect: null }),                                                                              // 33\n      captured: keyOf({ onSelectCapture: null })                                                                       // 34\n    },                                                                                                                 // 35\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]\n  }                                                                                                                    // 37\n};                                                                                                                     // 38\n                                                                                                                       // 39\nvar activeElement = null;                                                                                              // 40\nvar activeElementInst = null;                                                                                          // 41\nvar lastSelection = null;                                                                                              // 42\nvar mouseDown = false;                                                                                                 // 43\n                                                                                                                       // 44\n// Track whether a listener exists for this plugin. If none exist, we do                                               // 45\n// not extract events. See #3639.                                                                                      // 46\nvar hasListener = false;                                                                                               // 47\nvar ON_SELECT_KEY = keyOf({ onSelect: null });                                                                         // 48\n                                                                                                                       // 49\n/**                                                                                                                    // 50\n * Get an object which is a unique representation of the current selection.                                            // 51\n *                                                                                                                     // 52\n * The return value will not be consistent across nodes or browsers, but                                               // 53\n * two identical selections on the same node will return identical objects.                                            // 54\n *                                                                                                                     // 55\n * @param {DOMElement} node                                                                                            // 56\n * @return {object}                                                                                                    // 57\n */                                                                                                                    // 58\nfunction getSelection(node) {                                                                                          // 59\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {                                // 60\n    return {                                                                                                           // 61\n      start: node.selectionStart,                                                                                      // 62\n      end: node.selectionEnd                                                                                           // 63\n    };                                                                                                                 // 64\n  } else if (window.getSelection) {                                                                                    // 65\n    var selection = window.getSelection();                                                                             // 66\n    return {                                                                                                           // 67\n      anchorNode: selection.anchorNode,                                                                                // 68\n      anchorOffset: selection.anchorOffset,                                                                            // 69\n      focusNode: selection.focusNode,                                                                                  // 70\n      focusOffset: selection.focusOffset                                                                               // 71\n    };                                                                                                                 // 72\n  } else if (document.selection) {                                                                                     // 73\n    var range = document.selection.createRange();                                                                      // 74\n    return {                                                                                                           // 75\n      parentElement: range.parentElement(),                                                                            // 76\n      text: range.text,                                                                                                // 77\n      top: range.boundingTop,                                                                                          // 78\n      left: range.boundingLeft                                                                                         // 79\n    };                                                                                                                 // 80\n  }                                                                                                                    // 81\n}                                                                                                                      // 82\n                                                                                                                       // 83\n/**                                                                                                                    // 84\n * Poll selection to see whether it's changed.                                                                         // 85\n *                                                                                                                     // 86\n * @param {object} nativeEvent                                                                                         // 87\n * @return {?SyntheticEvent}                                                                                           // 88\n */                                                                                                                    // 89\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {                                                        // 90\n  // Ensure we have the right element, and that the user is not dragging a                                             // 91\n  // selection (this matches native `select` event behavior). In HTML5, select                                         // 92\n  // fires only on input and textarea thus if there's no focused element we                                            // 93\n  // won't dispatch.                                                                                                   // 94\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {                                    // 95\n    return null;                                                                                                       // 96\n  }                                                                                                                    // 97\n                                                                                                                       // 98\n  // Only fire when selection has actually changed.                                                                    // 99\n  var currentSelection = getSelection(activeElement);                                                                  // 100\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {                                              // 101\n    lastSelection = currentSelection;                                                                                  // 102\n                                                                                                                       // 103\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);\n                                                                                                                       // 105\n    syntheticEvent.type = 'select';                                                                                    // 106\n    syntheticEvent.target = activeElement;                                                                             // 107\n                                                                                                                       // 108\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);                                                     // 109\n                                                                                                                       // 110\n    return syntheticEvent;                                                                                             // 111\n  }                                                                                                                    // 112\n                                                                                                                       // 113\n  return null;                                                                                                         // 114\n}                                                                                                                      // 115\n                                                                                                                       // 116\n/**                                                                                                                    // 117\n * This plugin creates an `onSelect` event that normalizes select events                                               // 118\n * across form elements.                                                                                               // 119\n *                                                                                                                     // 120\n * Supported elements are:                                                                                             // 121\n * - input (see `isTextInputElement`)                                                                                  // 122\n * - textarea                                                                                                          // 123\n * - contentEditable                                                                                                   // 124\n *                                                                                                                     // 125\n * This differs from native browser implementations in the following ways:                                             // 126\n * - Fires on contentEditable fields as well as inputs.                                                                // 127\n * - Fires for collapsed selection.                                                                                    // 128\n * - Fires after user input.                                                                                           // 129\n */                                                                                                                    // 130\nvar SelectEventPlugin = {                                                                                              // 131\n                                                                                                                       // 132\n  eventTypes: eventTypes,                                                                                              // 133\n                                                                                                                       // 134\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 135\n    if (!hasListener) {                                                                                                // 136\n      return null;                                                                                                     // 137\n    }                                                                                                                  // 138\n                                                                                                                       // 139\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;                      // 140\n                                                                                                                       // 141\n    switch (topLevelType) {                                                                                            // 142\n      // Track the input node that has focus.                                                                          // 143\n      case topLevelTypes.topFocus:                                                                                     // 144\n        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {                                 // 145\n          activeElement = targetNode;                                                                                  // 146\n          activeElementInst = targetInst;                                                                              // 147\n          lastSelection = null;                                                                                        // 148\n        }                                                                                                              // 149\n        break;                                                                                                         // 150\n      case topLevelTypes.topBlur:                                                                                      // 151\n        activeElement = null;                                                                                          // 152\n        activeElementInst = null;                                                                                      // 153\n        lastSelection = null;                                                                                          // 154\n        break;                                                                                                         // 155\n                                                                                                                       // 156\n      // Don't fire the event while the user is dragging. This matches the                                             // 157\n      // semantics of the native select event.                                                                         // 158\n      case topLevelTypes.topMouseDown:                                                                                 // 159\n        mouseDown = true;                                                                                              // 160\n        break;                                                                                                         // 161\n      case topLevelTypes.topContextMenu:                                                                               // 162\n      case topLevelTypes.topMouseUp:                                                                                   // 163\n        mouseDown = false;                                                                                             // 164\n        return constructSelectEvent(nativeEvent, nativeEventTarget);                                                   // 165\n                                                                                                                       // 166\n      // Chrome and IE fire non-standard event when selection is changed (and                                          // 167\n      // sometimes when it hasn't). IE's event fires out of order with respect                                         // 168\n      // to key and input events on deletion, so we discard it.                                                        // 169\n      //                                                                                                               // 170\n      // Firefox doesn't support selectionchange, so check selection status                                            // 171\n      // after each key entry. The selection changes after keydown and before                                          // 172\n      // keyup, but we check on keydown as well in the case of holding down a                                          // 173\n      // key, when multiple keydown events are fired but only one keyup is.                                            // 174\n      // This is also our approach for IE handling, for the reason above.                                              // 175\n      case topLevelTypes.topSelectionChange:                                                                           // 176\n        if (skipSelectionChangeEvent) {                                                                                // 177\n          break;                                                                                                       // 178\n        }                                                                                                              // 179\n      // falls through                                                                                                 // 180\n      case topLevelTypes.topKeyDown:                                                                                   // 181\n      case topLevelTypes.topKeyUp:                                                                                     // 182\n        return constructSelectEvent(nativeEvent, nativeEventTarget);                                                   // 183\n    }                                                                                                                  // 184\n                                                                                                                       // 185\n    return null;                                                                                                       // 186\n  },                                                                                                                   // 187\n                                                                                                                       // 188\n  didPutListener: function (inst, registrationName, listener) {                                                        // 189\n    if (registrationName === ON_SELECT_KEY) {                                                                          // 190\n      hasListener = true;                                                                                              // 191\n    }                                                                                                                  // 192\n  }                                                                                                                    // 193\n};                                                                                                                     // 194\n                                                                                                                       // 195\nmodule.exports = SelectEventPlugin;                                                                                    // 196\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SimpleEventPlugin.js\":[\"./reactProdInvariant\",\"./EventConstants\",\"fbjs/lib/EventListener\",\"./EventPropagators\",\"./ReactDOMComponentTree\",\"./SyntheticAnimationEvent\",\"./SyntheticClipboardEvent\",\"./SyntheticEvent\",\"./SyntheticFocusEvent\",\"./SyntheticKeyboardEvent\",\"./SyntheticMouseEvent\",\"./SyntheticDragEvent\",\"./SyntheticTouchEvent\",\"./SyntheticTransitionEvent\",\"./SyntheticUIEvent\",\"./SyntheticWheelEvent\",\"fbjs/lib/emptyFunction\",\"./getEventCharCode\",\"fbjs/lib/invariant\",\"fbjs/lib/keyOf\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SimpleEventPlugin.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SimpleEventPlugin                                                                                   // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar EventConstants = require('./EventConstants');                                                                      // 16\nvar EventListener = require('fbjs/lib/EventListener');                                                                 // 17\nvar EventPropagators = require('./EventPropagators');                                                                  // 18\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 19\nvar SyntheticAnimationEvent = require('./SyntheticAnimationEvent');                                                    // 20\nvar SyntheticClipboardEvent = require('./SyntheticClipboardEvent');                                                    // 21\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 22\nvar SyntheticFocusEvent = require('./SyntheticFocusEvent');                                                            // 23\nvar SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');                                                      // 24\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');                                                            // 25\nvar SyntheticDragEvent = require('./SyntheticDragEvent');                                                              // 26\nvar SyntheticTouchEvent = require('./SyntheticTouchEvent');                                                            // 27\nvar SyntheticTransitionEvent = require('./SyntheticTransitionEvent');                                                  // 28\nvar SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 29\nvar SyntheticWheelEvent = require('./SyntheticWheelEvent');                                                            // 30\n                                                                                                                       // 31\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 32\nvar getEventCharCode = require('./getEventCharCode');                                                                  // 33\nvar invariant = require('fbjs/lib/invariant');                                                                         // 34\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 35\n                                                                                                                       // 36\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 37\n                                                                                                                       // 38\nvar eventTypes = {                                                                                                     // 39\n  abort: {                                                                                                             // 40\n    phasedRegistrationNames: {                                                                                         // 41\n      bubbled: keyOf({ onAbort: true }),                                                                               // 42\n      captured: keyOf({ onAbortCapture: true })                                                                        // 43\n    }                                                                                                                  // 44\n  },                                                                                                                   // 45\n  animationEnd: {                                                                                                      // 46\n    phasedRegistrationNames: {                                                                                         // 47\n      bubbled: keyOf({ onAnimationEnd: true }),                                                                        // 48\n      captured: keyOf({ onAnimationEndCapture: true })                                                                 // 49\n    }                                                                                                                  // 50\n  },                                                                                                                   // 51\n  animationIteration: {                                                                                                // 52\n    phasedRegistrationNames: {                                                                                         // 53\n      bubbled: keyOf({ onAnimationIteration: true }),                                                                  // 54\n      captured: keyOf({ onAnimationIterationCapture: true })                                                           // 55\n    }                                                                                                                  // 56\n  },                                                                                                                   // 57\n  animationStart: {                                                                                                    // 58\n    phasedRegistrationNames: {                                                                                         // 59\n      bubbled: keyOf({ onAnimationStart: true }),                                                                      // 60\n      captured: keyOf({ onAnimationStartCapture: true })                                                               // 61\n    }                                                                                                                  // 62\n  },                                                                                                                   // 63\n  blur: {                                                                                                              // 64\n    phasedRegistrationNames: {                                                                                         // 65\n      bubbled: keyOf({ onBlur: true }),                                                                                // 66\n      captured: keyOf({ onBlurCapture: true })                                                                         // 67\n    }                                                                                                                  // 68\n  },                                                                                                                   // 69\n  canPlay: {                                                                                                           // 70\n    phasedRegistrationNames: {                                                                                         // 71\n      bubbled: keyOf({ onCanPlay: true }),                                                                             // 72\n      captured: keyOf({ onCanPlayCapture: true })                                                                      // 73\n    }                                                                                                                  // 74\n  },                                                                                                                   // 75\n  canPlayThrough: {                                                                                                    // 76\n    phasedRegistrationNames: {                                                                                         // 77\n      bubbled: keyOf({ onCanPlayThrough: true }),                                                                      // 78\n      captured: keyOf({ onCanPlayThroughCapture: true })                                                               // 79\n    }                                                                                                                  // 80\n  },                                                                                                                   // 81\n  click: {                                                                                                             // 82\n    phasedRegistrationNames: {                                                                                         // 83\n      bubbled: keyOf({ onClick: true }),                                                                               // 84\n      captured: keyOf({ onClickCapture: true })                                                                        // 85\n    }                                                                                                                  // 86\n  },                                                                                                                   // 87\n  contextMenu: {                                                                                                       // 88\n    phasedRegistrationNames: {                                                                                         // 89\n      bubbled: keyOf({ onContextMenu: true }),                                                                         // 90\n      captured: keyOf({ onContextMenuCapture: true })                                                                  // 91\n    }                                                                                                                  // 92\n  },                                                                                                                   // 93\n  copy: {                                                                                                              // 94\n    phasedRegistrationNames: {                                                                                         // 95\n      bubbled: keyOf({ onCopy: true }),                                                                                // 96\n      captured: keyOf({ onCopyCapture: true })                                                                         // 97\n    }                                                                                                                  // 98\n  },                                                                                                                   // 99\n  cut: {                                                                                                               // 100\n    phasedRegistrationNames: {                                                                                         // 101\n      bubbled: keyOf({ onCut: true }),                                                                                 // 102\n      captured: keyOf({ onCutCapture: true })                                                                          // 103\n    }                                                                                                                  // 104\n  },                                                                                                                   // 105\n  doubleClick: {                                                                                                       // 106\n    phasedRegistrationNames: {                                                                                         // 107\n      bubbled: keyOf({ onDoubleClick: true }),                                                                         // 108\n      captured: keyOf({ onDoubleClickCapture: true })                                                                  // 109\n    }                                                                                                                  // 110\n  },                                                                                                                   // 111\n  drag: {                                                                                                              // 112\n    phasedRegistrationNames: {                                                                                         // 113\n      bubbled: keyOf({ onDrag: true }),                                                                                // 114\n      captured: keyOf({ onDragCapture: true })                                                                         // 115\n    }                                                                                                                  // 116\n  },                                                                                                                   // 117\n  dragEnd: {                                                                                                           // 118\n    phasedRegistrationNames: {                                                                                         // 119\n      bubbled: keyOf({ onDragEnd: true }),                                                                             // 120\n      captured: keyOf({ onDragEndCapture: true })                                                                      // 121\n    }                                                                                                                  // 122\n  },                                                                                                                   // 123\n  dragEnter: {                                                                                                         // 124\n    phasedRegistrationNames: {                                                                                         // 125\n      bubbled: keyOf({ onDragEnter: true }),                                                                           // 126\n      captured: keyOf({ onDragEnterCapture: true })                                                                    // 127\n    }                                                                                                                  // 128\n  },                                                                                                                   // 129\n  dragExit: {                                                                                                          // 130\n    phasedRegistrationNames: {                                                                                         // 131\n      bubbled: keyOf({ onDragExit: true }),                                                                            // 132\n      captured: keyOf({ onDragExitCapture: true })                                                                     // 133\n    }                                                                                                                  // 134\n  },                                                                                                                   // 135\n  dragLeave: {                                                                                                         // 136\n    phasedRegistrationNames: {                                                                                         // 137\n      bubbled: keyOf({ onDragLeave: true }),                                                                           // 138\n      captured: keyOf({ onDragLeaveCapture: true })                                                                    // 139\n    }                                                                                                                  // 140\n  },                                                                                                                   // 141\n  dragOver: {                                                                                                          // 142\n    phasedRegistrationNames: {                                                                                         // 143\n      bubbled: keyOf({ onDragOver: true }),                                                                            // 144\n      captured: keyOf({ onDragOverCapture: true })                                                                     // 145\n    }                                                                                                                  // 146\n  },                                                                                                                   // 147\n  dragStart: {                                                                                                         // 148\n    phasedRegistrationNames: {                                                                                         // 149\n      bubbled: keyOf({ onDragStart: true }),                                                                           // 150\n      captured: keyOf({ onDragStartCapture: true })                                                                    // 151\n    }                                                                                                                  // 152\n  },                                                                                                                   // 153\n  drop: {                                                                                                              // 154\n    phasedRegistrationNames: {                                                                                         // 155\n      bubbled: keyOf({ onDrop: true }),                                                                                // 156\n      captured: keyOf({ onDropCapture: true })                                                                         // 157\n    }                                                                                                                  // 158\n  },                                                                                                                   // 159\n  durationChange: {                                                                                                    // 160\n    phasedRegistrationNames: {                                                                                         // 161\n      bubbled: keyOf({ onDurationChange: true }),                                                                      // 162\n      captured: keyOf({ onDurationChangeCapture: true })                                                               // 163\n    }                                                                                                                  // 164\n  },                                                                                                                   // 165\n  emptied: {                                                                                                           // 166\n    phasedRegistrationNames: {                                                                                         // 167\n      bubbled: keyOf({ onEmptied: true }),                                                                             // 168\n      captured: keyOf({ onEmptiedCapture: true })                                                                      // 169\n    }                                                                                                                  // 170\n  },                                                                                                                   // 171\n  encrypted: {                                                                                                         // 172\n    phasedRegistrationNames: {                                                                                         // 173\n      bubbled: keyOf({ onEncrypted: true }),                                                                           // 174\n      captured: keyOf({ onEncryptedCapture: true })                                                                    // 175\n    }                                                                                                                  // 176\n  },                                                                                                                   // 177\n  ended: {                                                                                                             // 178\n    phasedRegistrationNames: {                                                                                         // 179\n      bubbled: keyOf({ onEnded: true }),                                                                               // 180\n      captured: keyOf({ onEndedCapture: true })                                                                        // 181\n    }                                                                                                                  // 182\n  },                                                                                                                   // 183\n  error: {                                                                                                             // 184\n    phasedRegistrationNames: {                                                                                         // 185\n      bubbled: keyOf({ onError: true }),                                                                               // 186\n      captured: keyOf({ onErrorCapture: true })                                                                        // 187\n    }                                                                                                                  // 188\n  },                                                                                                                   // 189\n  focus: {                                                                                                             // 190\n    phasedRegistrationNames: {                                                                                         // 191\n      bubbled: keyOf({ onFocus: true }),                                                                               // 192\n      captured: keyOf({ onFocusCapture: true })                                                                        // 193\n    }                                                                                                                  // 194\n  },                                                                                                                   // 195\n  input: {                                                                                                             // 196\n    phasedRegistrationNames: {                                                                                         // 197\n      bubbled: keyOf({ onInput: true }),                                                                               // 198\n      captured: keyOf({ onInputCapture: true })                                                                        // 199\n    }                                                                                                                  // 200\n  },                                                                                                                   // 201\n  invalid: {                                                                                                           // 202\n    phasedRegistrationNames: {                                                                                         // 203\n      bubbled: keyOf({ onInvalid: true }),                                                                             // 204\n      captured: keyOf({ onInvalidCapture: true })                                                                      // 205\n    }                                                                                                                  // 206\n  },                                                                                                                   // 207\n  keyDown: {                                                                                                           // 208\n    phasedRegistrationNames: {                                                                                         // 209\n      bubbled: keyOf({ onKeyDown: true }),                                                                             // 210\n      captured: keyOf({ onKeyDownCapture: true })                                                                      // 211\n    }                                                                                                                  // 212\n  },                                                                                                                   // 213\n  keyPress: {                                                                                                          // 214\n    phasedRegistrationNames: {                                                                                         // 215\n      bubbled: keyOf({ onKeyPress: true }),                                                                            // 216\n      captured: keyOf({ onKeyPressCapture: true })                                                                     // 217\n    }                                                                                                                  // 218\n  },                                                                                                                   // 219\n  keyUp: {                                                                                                             // 220\n    phasedRegistrationNames: {                                                                                         // 221\n      bubbled: keyOf({ onKeyUp: true }),                                                                               // 222\n      captured: keyOf({ onKeyUpCapture: true })                                                                        // 223\n    }                                                                                                                  // 224\n  },                                                                                                                   // 225\n  load: {                                                                                                              // 226\n    phasedRegistrationNames: {                                                                                         // 227\n      bubbled: keyOf({ onLoad: true }),                                                                                // 228\n      captured: keyOf({ onLoadCapture: true })                                                                         // 229\n    }                                                                                                                  // 230\n  },                                                                                                                   // 231\n  loadedData: {                                                                                                        // 232\n    phasedRegistrationNames: {                                                                                         // 233\n      bubbled: keyOf({ onLoadedData: true }),                                                                          // 234\n      captured: keyOf({ onLoadedDataCapture: true })                                                                   // 235\n    }                                                                                                                  // 236\n  },                                                                                                                   // 237\n  loadedMetadata: {                                                                                                    // 238\n    phasedRegistrationNames: {                                                                                         // 239\n      bubbled: keyOf({ onLoadedMetadata: true }),                                                                      // 240\n      captured: keyOf({ onLoadedMetadataCapture: true })                                                               // 241\n    }                                                                                                                  // 242\n  },                                                                                                                   // 243\n  loadStart: {                                                                                                         // 244\n    phasedRegistrationNames: {                                                                                         // 245\n      bubbled: keyOf({ onLoadStart: true }),                                                                           // 246\n      captured: keyOf({ onLoadStartCapture: true })                                                                    // 247\n    }                                                                                                                  // 248\n  },                                                                                                                   // 249\n  // Note: We do not allow listening to mouseOver events. Instead, use the                                             // 250\n  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.                                                     // 251\n  mouseDown: {                                                                                                         // 252\n    phasedRegistrationNames: {                                                                                         // 253\n      bubbled: keyOf({ onMouseDown: true }),                                                                           // 254\n      captured: keyOf({ onMouseDownCapture: true })                                                                    // 255\n    }                                                                                                                  // 256\n  },                                                                                                                   // 257\n  mouseMove: {                                                                                                         // 258\n    phasedRegistrationNames: {                                                                                         // 259\n      bubbled: keyOf({ onMouseMove: true }),                                                                           // 260\n      captured: keyOf({ onMouseMoveCapture: true })                                                                    // 261\n    }                                                                                                                  // 262\n  },                                                                                                                   // 263\n  mouseOut: {                                                                                                          // 264\n    phasedRegistrationNames: {                                                                                         // 265\n      bubbled: keyOf({ onMouseOut: true }),                                                                            // 266\n      captured: keyOf({ onMouseOutCapture: true })                                                                     // 267\n    }                                                                                                                  // 268\n  },                                                                                                                   // 269\n  mouseOver: {                                                                                                         // 270\n    phasedRegistrationNames: {                                                                                         // 271\n      bubbled: keyOf({ onMouseOver: true }),                                                                           // 272\n      captured: keyOf({ onMouseOverCapture: true })                                                                    // 273\n    }                                                                                                                  // 274\n  },                                                                                                                   // 275\n  mouseUp: {                                                                                                           // 276\n    phasedRegistrationNames: {                                                                                         // 277\n      bubbled: keyOf({ onMouseUp: true }),                                                                             // 278\n      captured: keyOf({ onMouseUpCapture: true })                                                                      // 279\n    }                                                                                                                  // 280\n  },                                                                                                                   // 281\n  paste: {                                                                                                             // 282\n    phasedRegistrationNames: {                                                                                         // 283\n      bubbled: keyOf({ onPaste: true }),                                                                               // 284\n      captured: keyOf({ onPasteCapture: true })                                                                        // 285\n    }                                                                                                                  // 286\n  },                                                                                                                   // 287\n  pause: {                                                                                                             // 288\n    phasedRegistrationNames: {                                                                                         // 289\n      bubbled: keyOf({ onPause: true }),                                                                               // 290\n      captured: keyOf({ onPauseCapture: true })                                                                        // 291\n    }                                                                                                                  // 292\n  },                                                                                                                   // 293\n  play: {                                                                                                              // 294\n    phasedRegistrationNames: {                                                                                         // 295\n      bubbled: keyOf({ onPlay: true }),                                                                                // 296\n      captured: keyOf({ onPlayCapture: true })                                                                         // 297\n    }                                                                                                                  // 298\n  },                                                                                                                   // 299\n  playing: {                                                                                                           // 300\n    phasedRegistrationNames: {                                                                                         // 301\n      bubbled: keyOf({ onPlaying: true }),                                                                             // 302\n      captured: keyOf({ onPlayingCapture: true })                                                                      // 303\n    }                                                                                                                  // 304\n  },                                                                                                                   // 305\n  progress: {                                                                                                          // 306\n    phasedRegistrationNames: {                                                                                         // 307\n      bubbled: keyOf({ onProgress: true }),                                                                            // 308\n      captured: keyOf({ onProgressCapture: true })                                                                     // 309\n    }                                                                                                                  // 310\n  },                                                                                                                   // 311\n  rateChange: {                                                                                                        // 312\n    phasedRegistrationNames: {                                                                                         // 313\n      bubbled: keyOf({ onRateChange: true }),                                                                          // 314\n      captured: keyOf({ onRateChangeCapture: true })                                                                   // 315\n    }                                                                                                                  // 316\n  },                                                                                                                   // 317\n  reset: {                                                                                                             // 318\n    phasedRegistrationNames: {                                                                                         // 319\n      bubbled: keyOf({ onReset: true }),                                                                               // 320\n      captured: keyOf({ onResetCapture: true })                                                                        // 321\n    }                                                                                                                  // 322\n  },                                                                                                                   // 323\n  scroll: {                                                                                                            // 324\n    phasedRegistrationNames: {                                                                                         // 325\n      bubbled: keyOf({ onScroll: true }),                                                                              // 326\n      captured: keyOf({ onScrollCapture: true })                                                                       // 327\n    }                                                                                                                  // 328\n  },                                                                                                                   // 329\n  seeked: {                                                                                                            // 330\n    phasedRegistrationNames: {                                                                                         // 331\n      bubbled: keyOf({ onSeeked: true }),                                                                              // 332\n      captured: keyOf({ onSeekedCapture: true })                                                                       // 333\n    }                                                                                                                  // 334\n  },                                                                                                                   // 335\n  seeking: {                                                                                                           // 336\n    phasedRegistrationNames: {                                                                                         // 337\n      bubbled: keyOf({ onSeeking: true }),                                                                             // 338\n      captured: keyOf({ onSeekingCapture: true })                                                                      // 339\n    }                                                                                                                  // 340\n  },                                                                                                                   // 341\n  stalled: {                                                                                                           // 342\n    phasedRegistrationNames: {                                                                                         // 343\n      bubbled: keyOf({ onStalled: true }),                                                                             // 344\n      captured: keyOf({ onStalledCapture: true })                                                                      // 345\n    }                                                                                                                  // 346\n  },                                                                                                                   // 347\n  submit: {                                                                                                            // 348\n    phasedRegistrationNames: {                                                                                         // 349\n      bubbled: keyOf({ onSubmit: true }),                                                                              // 350\n      captured: keyOf({ onSubmitCapture: true })                                                                       // 351\n    }                                                                                                                  // 352\n  },                                                                                                                   // 353\n  suspend: {                                                                                                           // 354\n    phasedRegistrationNames: {                                                                                         // 355\n      bubbled: keyOf({ onSuspend: true }),                                                                             // 356\n      captured: keyOf({ onSuspendCapture: true })                                                                      // 357\n    }                                                                                                                  // 358\n  },                                                                                                                   // 359\n  timeUpdate: {                                                                                                        // 360\n    phasedRegistrationNames: {                                                                                         // 361\n      bubbled: keyOf({ onTimeUpdate: true }),                                                                          // 362\n      captured: keyOf({ onTimeUpdateCapture: true })                                                                   // 363\n    }                                                                                                                  // 364\n  },                                                                                                                   // 365\n  touchCancel: {                                                                                                       // 366\n    phasedRegistrationNames: {                                                                                         // 367\n      bubbled: keyOf({ onTouchCancel: true }),                                                                         // 368\n      captured: keyOf({ onTouchCancelCapture: true })                                                                  // 369\n    }                                                                                                                  // 370\n  },                                                                                                                   // 371\n  touchEnd: {                                                                                                          // 372\n    phasedRegistrationNames: {                                                                                         // 373\n      bubbled: keyOf({ onTouchEnd: true }),                                                                            // 374\n      captured: keyOf({ onTouchEndCapture: true })                                                                     // 375\n    }                                                                                                                  // 376\n  },                                                                                                                   // 377\n  touchMove: {                                                                                                         // 378\n    phasedRegistrationNames: {                                                                                         // 379\n      bubbled: keyOf({ onTouchMove: true }),                                                                           // 380\n      captured: keyOf({ onTouchMoveCapture: true })                                                                    // 381\n    }                                                                                                                  // 382\n  },                                                                                                                   // 383\n  touchStart: {                                                                                                        // 384\n    phasedRegistrationNames: {                                                                                         // 385\n      bubbled: keyOf({ onTouchStart: true }),                                                                          // 386\n      captured: keyOf({ onTouchStartCapture: true })                                                                   // 387\n    }                                                                                                                  // 388\n  },                                                                                                                   // 389\n  transitionEnd: {                                                                                                     // 390\n    phasedRegistrationNames: {                                                                                         // 391\n      bubbled: keyOf({ onTransitionEnd: true }),                                                                       // 392\n      captured: keyOf({ onTransitionEndCapture: true })                                                                // 393\n    }                                                                                                                  // 394\n  },                                                                                                                   // 395\n  volumeChange: {                                                                                                      // 396\n    phasedRegistrationNames: {                                                                                         // 397\n      bubbled: keyOf({ onVolumeChange: true }),                                                                        // 398\n      captured: keyOf({ onVolumeChangeCapture: true })                                                                 // 399\n    }                                                                                                                  // 400\n  },                                                                                                                   // 401\n  waiting: {                                                                                                           // 402\n    phasedRegistrationNames: {                                                                                         // 403\n      bubbled: keyOf({ onWaiting: true }),                                                                             // 404\n      captured: keyOf({ onWaitingCapture: true })                                                                      // 405\n    }                                                                                                                  // 406\n  },                                                                                                                   // 407\n  wheel: {                                                                                                             // 408\n    phasedRegistrationNames: {                                                                                         // 409\n      bubbled: keyOf({ onWheel: true }),                                                                               // 410\n      captured: keyOf({ onWheelCapture: true })                                                                        // 411\n    }                                                                                                                  // 412\n  }                                                                                                                    // 413\n};                                                                                                                     // 414\n                                                                                                                       // 415\nvar topLevelEventsToDispatchConfig = {                                                                                 // 416\n  topAbort: eventTypes.abort,                                                                                          // 417\n  topAnimationEnd: eventTypes.animationEnd,                                                                            // 418\n  topAnimationIteration: eventTypes.animationIteration,                                                                // 419\n  topAnimationStart: eventTypes.animationStart,                                                                        // 420\n  topBlur: eventTypes.blur,                                                                                            // 421\n  topCanPlay: eventTypes.canPlay,                                                                                      // 422\n  topCanPlayThrough: eventTypes.canPlayThrough,                                                                        // 423\n  topClick: eventTypes.click,                                                                                          // 424\n  topContextMenu: eventTypes.contextMenu,                                                                              // 425\n  topCopy: eventTypes.copy,                                                                                            // 426\n  topCut: eventTypes.cut,                                                                                              // 427\n  topDoubleClick: eventTypes.doubleClick,                                                                              // 428\n  topDrag: eventTypes.drag,                                                                                            // 429\n  topDragEnd: eventTypes.dragEnd,                                                                                      // 430\n  topDragEnter: eventTypes.dragEnter,                                                                                  // 431\n  topDragExit: eventTypes.dragExit,                                                                                    // 432\n  topDragLeave: eventTypes.dragLeave,                                                                                  // 433\n  topDragOver: eventTypes.dragOver,                                                                                    // 434\n  topDragStart: eventTypes.dragStart,                                                                                  // 435\n  topDrop: eventTypes.drop,                                                                                            // 436\n  topDurationChange: eventTypes.durationChange,                                                                        // 437\n  topEmptied: eventTypes.emptied,                                                                                      // 438\n  topEncrypted: eventTypes.encrypted,                                                                                  // 439\n  topEnded: eventTypes.ended,                                                                                          // 440\n  topError: eventTypes.error,                                                                                          // 441\n  topFocus: eventTypes.focus,                                                                                          // 442\n  topInput: eventTypes.input,                                                                                          // 443\n  topInvalid: eventTypes.invalid,                                                                                      // 444\n  topKeyDown: eventTypes.keyDown,                                                                                      // 445\n  topKeyPress: eventTypes.keyPress,                                                                                    // 446\n  topKeyUp: eventTypes.keyUp,                                                                                          // 447\n  topLoad: eventTypes.load,                                                                                            // 448\n  topLoadedData: eventTypes.loadedData,                                                                                // 449\n  topLoadedMetadata: eventTypes.loadedMetadata,                                                                        // 450\n  topLoadStart: eventTypes.loadStart,                                                                                  // 451\n  topMouseDown: eventTypes.mouseDown,                                                                                  // 452\n  topMouseMove: eventTypes.mouseMove,                                                                                  // 453\n  topMouseOut: eventTypes.mouseOut,                                                                                    // 454\n  topMouseOver: eventTypes.mouseOver,                                                                                  // 455\n  topMouseUp: eventTypes.mouseUp,                                                                                      // 456\n  topPaste: eventTypes.paste,                                                                                          // 457\n  topPause: eventTypes.pause,                                                                                          // 458\n  topPlay: eventTypes.play,                                                                                            // 459\n  topPlaying: eventTypes.playing,                                                                                      // 460\n  topProgress: eventTypes.progress,                                                                                    // 461\n  topRateChange: eventTypes.rateChange,                                                                                // 462\n  topReset: eventTypes.reset,                                                                                          // 463\n  topScroll: eventTypes.scroll,                                                                                        // 464\n  topSeeked: eventTypes.seeked,                                                                                        // 465\n  topSeeking: eventTypes.seeking,                                                                                      // 466\n  topStalled: eventTypes.stalled,                                                                                      // 467\n  topSubmit: eventTypes.submit,                                                                                        // 468\n  topSuspend: eventTypes.suspend,                                                                                      // 469\n  topTimeUpdate: eventTypes.timeUpdate,                                                                                // 470\n  topTouchCancel: eventTypes.touchCancel,                                                                              // 471\n  topTouchEnd: eventTypes.touchEnd,                                                                                    // 472\n  topTouchMove: eventTypes.touchMove,                                                                                  // 473\n  topTouchStart: eventTypes.touchStart,                                                                                // 474\n  topTransitionEnd: eventTypes.transitionEnd,                                                                          // 475\n  topVolumeChange: eventTypes.volumeChange,                                                                            // 476\n  topWaiting: eventTypes.waiting,                                                                                      // 477\n  topWheel: eventTypes.wheel                                                                                           // 478\n};                                                                                                                     // 479\n                                                                                                                       // 480\nfor (var type in topLevelEventsToDispatchConfig) {                                                                     // 481\n  topLevelEventsToDispatchConfig[type].dependencies = [type];                                                          // 482\n}                                                                                                                      // 483\n                                                                                                                       // 484\nvar ON_CLICK_KEY = keyOf({ onClick: null });                                                                           // 485\nvar onClickListeners = {};                                                                                             // 486\n                                                                                                                       // 487\nfunction getDictionaryKey(inst) {                                                                                      // 488\n  // Prevents V8 performance issue:                                                                                    // 489\n  // https://github.com/facebook/react/pull/7232                                                                       // 490\n  return '.' + inst._rootNodeID;                                                                                       // 491\n}                                                                                                                      // 492\n                                                                                                                       // 493\nvar SimpleEventPlugin = {                                                                                              // 494\n                                                                                                                       // 495\n  eventTypes: eventTypes,                                                                                              // 496\n                                                                                                                       // 497\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 498\n    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];                                                 // 499\n    if (!dispatchConfig) {                                                                                             // 500\n      return null;                                                                                                     // 501\n    }                                                                                                                  // 502\n    var EventConstructor;                                                                                              // 503\n    switch (topLevelType) {                                                                                            // 504\n      case topLevelTypes.topAbort:                                                                                     // 505\n      case topLevelTypes.topCanPlay:                                                                                   // 506\n      case topLevelTypes.topCanPlayThrough:                                                                            // 507\n      case topLevelTypes.topDurationChange:                                                                            // 508\n      case topLevelTypes.topEmptied:                                                                                   // 509\n      case topLevelTypes.topEncrypted:                                                                                 // 510\n      case topLevelTypes.topEnded:                                                                                     // 511\n      case topLevelTypes.topError:                                                                                     // 512\n      case topLevelTypes.topInput:                                                                                     // 513\n      case topLevelTypes.topInvalid:                                                                                   // 514\n      case topLevelTypes.topLoad:                                                                                      // 515\n      case topLevelTypes.topLoadedData:                                                                                // 516\n      case topLevelTypes.topLoadedMetadata:                                                                            // 517\n      case topLevelTypes.topLoadStart:                                                                                 // 518\n      case topLevelTypes.topPause:                                                                                     // 519\n      case topLevelTypes.topPlay:                                                                                      // 520\n      case topLevelTypes.topPlaying:                                                                                   // 521\n      case topLevelTypes.topProgress:                                                                                  // 522\n      case topLevelTypes.topRateChange:                                                                                // 523\n      case topLevelTypes.topReset:                                                                                     // 524\n      case topLevelTypes.topSeeked:                                                                                    // 525\n      case topLevelTypes.topSeeking:                                                                                   // 526\n      case topLevelTypes.topStalled:                                                                                   // 527\n      case topLevelTypes.topSubmit:                                                                                    // 528\n      case topLevelTypes.topSuspend:                                                                                   // 529\n      case topLevelTypes.topTimeUpdate:                                                                                // 530\n      case topLevelTypes.topVolumeChange:                                                                              // 531\n      case topLevelTypes.topWaiting:                                                                                   // 532\n        // HTML Events                                                                                                 // 533\n        // @see http://www.w3.org/TR/html5/index.html#events-0                                                         // 534\n        EventConstructor = SyntheticEvent;                                                                             // 535\n        break;                                                                                                         // 536\n      case topLevelTypes.topKeyPress:                                                                                  // 537\n        // Firefox creates a keypress event for function keys too. This removes                                        // 538\n        // the unwanted keypress events. Enter is however both printable and                                           // 539\n        // non-printable. One would expect Tab to be as well (but it isn't).                                           // 540\n        if (getEventCharCode(nativeEvent) === 0) {                                                                     // 541\n          return null;                                                                                                 // 542\n        }                                                                                                              // 543\n      /* falls through */                                                                                              // 544\n      case topLevelTypes.topKeyDown:                                                                                   // 545\n      case topLevelTypes.topKeyUp:                                                                                     // 546\n        EventConstructor = SyntheticKeyboardEvent;                                                                     // 547\n        break;                                                                                                         // 548\n      case topLevelTypes.topBlur:                                                                                      // 549\n      case topLevelTypes.topFocus:                                                                                     // 550\n        EventConstructor = SyntheticFocusEvent;                                                                        // 551\n        break;                                                                                                         // 552\n      case topLevelTypes.topClick:                                                                                     // 553\n        // Firefox creates a click event on right mouse clicks. This removes the                                       // 554\n        // unwanted click events.                                                                                      // 555\n        if (nativeEvent.button === 2) {                                                                                // 556\n          return null;                                                                                                 // 557\n        }                                                                                                              // 558\n      /* falls through */                                                                                              // 559\n      case topLevelTypes.topContextMenu:                                                                               // 560\n      case topLevelTypes.topDoubleClick:                                                                               // 561\n      case topLevelTypes.topMouseDown:                                                                                 // 562\n      case topLevelTypes.topMouseMove:                                                                                 // 563\n      case topLevelTypes.topMouseOut:                                                                                  // 564\n      case topLevelTypes.topMouseOver:                                                                                 // 565\n      case topLevelTypes.topMouseUp:                                                                                   // 566\n        EventConstructor = SyntheticMouseEvent;                                                                        // 567\n        break;                                                                                                         // 568\n      case topLevelTypes.topDrag:                                                                                      // 569\n      case topLevelTypes.topDragEnd:                                                                                   // 570\n      case topLevelTypes.topDragEnter:                                                                                 // 571\n      case topLevelTypes.topDragExit:                                                                                  // 572\n      case topLevelTypes.topDragLeave:                                                                                 // 573\n      case topLevelTypes.topDragOver:                                                                                  // 574\n      case topLevelTypes.topDragStart:                                                                                 // 575\n      case topLevelTypes.topDrop:                                                                                      // 576\n        EventConstructor = SyntheticDragEvent;                                                                         // 577\n        break;                                                                                                         // 578\n      case topLevelTypes.topTouchCancel:                                                                               // 579\n      case topLevelTypes.topTouchEnd:                                                                                  // 580\n      case topLevelTypes.topTouchMove:                                                                                 // 581\n      case topLevelTypes.topTouchStart:                                                                                // 582\n        EventConstructor = SyntheticTouchEvent;                                                                        // 583\n        break;                                                                                                         // 584\n      case topLevelTypes.topAnimationEnd:                                                                              // 585\n      case topLevelTypes.topAnimationIteration:                                                                        // 586\n      case topLevelTypes.topAnimationStart:                                                                            // 587\n        EventConstructor = SyntheticAnimationEvent;                                                                    // 588\n        break;                                                                                                         // 589\n      case topLevelTypes.topTransitionEnd:                                                                             // 590\n        EventConstructor = SyntheticTransitionEvent;                                                                   // 591\n        break;                                                                                                         // 592\n      case topLevelTypes.topScroll:                                                                                    // 593\n        EventConstructor = SyntheticUIEvent;                                                                           // 594\n        break;                                                                                                         // 595\n      case topLevelTypes.topWheel:                                                                                     // 596\n        EventConstructor = SyntheticWheelEvent;                                                                        // 597\n        break;                                                                                                         // 598\n      case topLevelTypes.topCopy:                                                                                      // 599\n      case topLevelTypes.topCut:                                                                                       // 600\n      case topLevelTypes.topPaste:                                                                                     // 601\n        EventConstructor = SyntheticClipboardEvent;                                                                    // 602\n        break;                                                                                                         // 603\n    }                                                                                                                  // 604\n    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;\n    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);                // 606\n    EventPropagators.accumulateTwoPhaseDispatches(event);                                                              // 607\n    return event;                                                                                                      // 608\n  },                                                                                                                   // 609\n                                                                                                                       // 610\n  didPutListener: function (inst, registrationName, listener) {                                                        // 611\n    // Mobile Safari does not fire properly bubble click events on                                                     // 612\n    // non-interactive elements, which means delegated click listeners do not                                          // 613\n    // fire. The workaround for this bug involves attaching an empty click                                             // 614\n    // listener on the target node.                                                                                    // 615\n    if (registrationName === ON_CLICK_KEY) {                                                                           // 616\n      var key = getDictionaryKey(inst);                                                                                // 617\n      var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                      // 618\n      if (!onClickListeners[key]) {                                                                                    // 619\n        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);                                    // 620\n      }                                                                                                                // 621\n    }                                                                                                                  // 622\n  },                                                                                                                   // 623\n                                                                                                                       // 624\n  willDeleteListener: function (inst, registrationName) {                                                              // 625\n    if (registrationName === ON_CLICK_KEY) {                                                                           // 626\n      var key = getDictionaryKey(inst);                                                                                // 627\n      onClickListeners[key].remove();                                                                                  // 628\n      delete onClickListeners[key];                                                                                    // 629\n    }                                                                                                                  // 630\n  }                                                                                                                    // 631\n                                                                                                                       // 632\n};                                                                                                                     // 633\n                                                                                                                       // 634\nmodule.exports = SimpleEventPlugin;                                                                                    // 635\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticAnimationEvent.js\":[\"./SyntheticEvent\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticAnimationEvent.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticAnimationEvent                                                                             // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * @interface Event                                                                                                    // 17\n * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface                                                 // 18\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent                                                // 19\n */                                                                                                                    // 20\nvar AnimationEventInterface = {                                                                                        // 21\n  animationName: null,                                                                                                 // 22\n  elapsedTime: null,                                                                                                   // 23\n  pseudoElement: null                                                                                                  // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 28\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 29\n * @param {object} nativeEvent Native browser event.                                                                   // 30\n * @extends {SyntheticEvent}                                                                                           // 31\n */                                                                                                                    // 32\nfunction SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                     // 33\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 34\n}                                                                                                                      // 35\n                                                                                                                       // 36\nSyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);                                         // 37\n                                                                                                                       // 38\nmodule.exports = SyntheticAnimationEvent;                                                                              // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticClipboardEvent.js\":[\"./SyntheticEvent\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticClipboardEvent.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticClipboardEvent                                                                             // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * @interface Event                                                                                                    // 17\n * @see http://www.w3.org/TR/clipboard-apis/                                                                           // 18\n */                                                                                                                    // 19\nvar ClipboardEventInterface = {                                                                                        // 20\n  clipboardData: function (event) {                                                                                    // 21\n    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;                                      // 22\n  }                                                                                                                    // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 27\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 28\n * @param {object} nativeEvent Native browser event.                                                                   // 29\n * @extends {SyntheticUIEvent}                                                                                         // 30\n */                                                                                                                    // 31\nfunction SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                     // 32\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 33\n}                                                                                                                      // 34\n                                                                                                                       // 35\nSyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);                                         // 36\n                                                                                                                       // 37\nmodule.exports = SyntheticClipboardEvent;                                                                              // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticFocusEvent.js\":[\"./SyntheticUIEvent\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticFocusEvent.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticFocusEvent                                                                                 // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * @interface FocusEvent                                                                                               // 17\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 18\n */                                                                                                                    // 19\nvar FocusEventInterface = {                                                                                            // 20\n  relatedTarget: null                                                                                                  // 21\n};                                                                                                                     // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 25\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 26\n * @param {object} nativeEvent Native browser event.                                                                   // 27\n * @extends {SyntheticUIEvent}                                                                                         // 28\n */                                                                                                                    // 29\nfunction SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 30\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                  // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nSyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);                                               // 34\n                                                                                                                       // 35\nmodule.exports = SyntheticFocusEvent;                                                                                  // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticKeyboardEvent.js\":[\"./SyntheticUIEvent\",\"./getEventCharCode\",\"./getEventKey\",\"./getEventModifierState\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticKeyboardEvent.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticKeyboardEvent                                                                              // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 14\n                                                                                                                       // 15\nvar getEventCharCode = require('./getEventCharCode');                                                                  // 16\nvar getEventKey = require('./getEventKey');                                                                            // 17\nvar getEventModifierState = require('./getEventModifierState');                                                        // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * @interface KeyboardEvent                                                                                            // 21\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 22\n */                                                                                                                    // 23\nvar KeyboardEventInterface = {                                                                                         // 24\n  key: getEventKey,                                                                                                    // 25\n  location: null,                                                                                                      // 26\n  ctrlKey: null,                                                                                                       // 27\n  shiftKey: null,                                                                                                      // 28\n  altKey: null,                                                                                                        // 29\n  metaKey: null,                                                                                                       // 30\n  repeat: null,                                                                                                        // 31\n  locale: null,                                                                                                        // 32\n  getModifierState: getEventModifierState,                                                                             // 33\n  // Legacy Interface                                                                                                  // 34\n  charCode: function (event) {                                                                                         // 35\n    // `charCode` is the result of a KeyPress event and represents the value of                                        // 36\n    // the actual printable character.                                                                                 // 37\n                                                                                                                       // 38\n    // KeyPress is deprecated, but its replacement is not yet final and not                                            // 39\n    // implemented in any major browser. Only KeyPress has charCode.                                                   // 40\n    if (event.type === 'keypress') {                                                                                   // 41\n      return getEventCharCode(event);                                                                                  // 42\n    }                                                                                                                  // 43\n    return 0;                                                                                                          // 44\n  },                                                                                                                   // 45\n  keyCode: function (event) {                                                                                          // 46\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of                                       // 47\n    // physical keyboard key.                                                                                          // 48\n                                                                                                                       // 49\n    // The actual meaning of the value depends on the users' keyboard layout                                           // 50\n    // which cannot be detected. Assuming that it is a US keyboard layout                                              // 51\n    // provides a surprisingly accurate mapping for US and European users.                                             // 52\n    // Due to this, it is left to the user to implement at this time.                                                  // 53\n    if (event.type === 'keydown' || event.type === 'keyup') {                                                          // 54\n      return event.keyCode;                                                                                            // 55\n    }                                                                                                                  // 56\n    return 0;                                                                                                          // 57\n  },                                                                                                                   // 58\n  which: function (event) {                                                                                            // 59\n    // `which` is an alias for either `keyCode` or `charCode` depending on the                                         // 60\n    // type of the event.                                                                                              // 61\n    if (event.type === 'keypress') {                                                                                   // 62\n      return getEventCharCode(event);                                                                                  // 63\n    }                                                                                                                  // 64\n    if (event.type === 'keydown' || event.type === 'keyup') {                                                          // 65\n      return event.keyCode;                                                                                            // 66\n    }                                                                                                                  // 67\n    return 0;                                                                                                          // 68\n  }                                                                                                                    // 69\n};                                                                                                                     // 70\n                                                                                                                       // 71\n/**                                                                                                                    // 72\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 73\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 74\n * @param {object} nativeEvent Native browser event.                                                                   // 75\n * @extends {SyntheticUIEvent}                                                                                         // 76\n */                                                                                                                    // 77\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                      // 78\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                  // 79\n}                                                                                                                      // 80\n                                                                                                                       // 81\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);                                         // 82\n                                                                                                                       // 83\nmodule.exports = SyntheticKeyboardEvent;                                                                               // 84\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getEventCharCode.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getEventCharCode.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getEventCharCode                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * `charCode` represents the actual \"character code\" and is safe to use with                                           // 15\n * `String.fromCharCode`. As such, only keys that correspond to printable                                              // 16\n * characters produce a valid `charCode`, the only exception to this is Enter.                                         // 17\n * The Tab-key is considered non-printable and does not have a `charCode`,                                             // 18\n * presumably because it does not produce a tab-character in browsers.                                                 // 19\n *                                                                                                                     // 20\n * @param {object} nativeEvent Native browser event.                                                                   // 21\n * @return {number} Normalized `charCode` property.                                                                    // 22\n */                                                                                                                    // 23\n                                                                                                                       // 24\nfunction getEventCharCode(nativeEvent) {                                                                               // 25\n  var charCode;                                                                                                        // 26\n  var keyCode = nativeEvent.keyCode;                                                                                   // 27\n                                                                                                                       // 28\n  if ('charCode' in nativeEvent) {                                                                                     // 29\n    charCode = nativeEvent.charCode;                                                                                   // 30\n                                                                                                                       // 31\n    // FF does not set `charCode` for the Enter-key, check against `keyCode`.                                          // 32\n    if (charCode === 0 && keyCode === 13) {                                                                            // 33\n      charCode = 13;                                                                                                   // 34\n    }                                                                                                                  // 35\n  } else {                                                                                                             // 36\n    // IE8 does not implement `charCode`, but `keyCode` has the correct value.                                         // 37\n    charCode = keyCode;                                                                                                // 38\n  }                                                                                                                    // 39\n                                                                                                                       // 40\n  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.                                       // 41\n  // Must not discard the (non-)printable Enter-key.                                                                   // 42\n  if (charCode >= 32 || charCode === 13) {                                                                             // 43\n    return charCode;                                                                                                   // 44\n  }                                                                                                                    // 45\n                                                                                                                       // 46\n  return 0;                                                                                                            // 47\n}                                                                                                                      // 48\n                                                                                                                       // 49\nmodule.exports = getEventCharCode;                                                                                     // 50\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getEventKey.js\":[\"./getEventCharCode\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getEventKey.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getEventKey                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar getEventCharCode = require('./getEventCharCode');                                                                  // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Normalization of deprecated HTML5 `key` values                                                                      // 17\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names                                       // 18\n */                                                                                                                    // 19\nvar normalizeKey = {                                                                                                   // 20\n  'Esc': 'Escape',                                                                                                     // 21\n  'Spacebar': ' ',                                                                                                     // 22\n  'Left': 'ArrowLeft',                                                                                                 // 23\n  'Up': 'ArrowUp',                                                                                                     // 24\n  'Right': 'ArrowRight',                                                                                               // 25\n  'Down': 'ArrowDown',                                                                                                 // 26\n  'Del': 'Delete',                                                                                                     // 27\n  'Win': 'OS',                                                                                                         // 28\n  'Menu': 'ContextMenu',                                                                                               // 29\n  'Apps': 'ContextMenu',                                                                                               // 30\n  'Scroll': 'ScrollLock',                                                                                              // 31\n  'MozPrintableKey': 'Unidentified'                                                                                    // 32\n};                                                                                                                     // 33\n                                                                                                                       // 34\n/**                                                                                                                    // 35\n * Translation from legacy `keyCode` to HTML5 `key`                                                                    // 36\n * Only special keys supported, all others depend on keyboard layout or browser                                        // 37\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names                                       // 38\n */                                                                                                                    // 39\nvar translateToKey = {                                                                                                 // 40\n  8: 'Backspace',                                                                                                      // 41\n  9: 'Tab',                                                                                                            // 42\n  12: 'Clear',                                                                                                         // 43\n  13: 'Enter',                                                                                                         // 44\n  16: 'Shift',                                                                                                         // 45\n  17: 'Control',                                                                                                       // 46\n  18: 'Alt',                                                                                                           // 47\n  19: 'Pause',                                                                                                         // 48\n  20: 'CapsLock',                                                                                                      // 49\n  27: 'Escape',                                                                                                        // 50\n  32: ' ',                                                                                                             // 51\n  33: 'PageUp',                                                                                                        // 52\n  34: 'PageDown',                                                                                                      // 53\n  35: 'End',                                                                                                           // 54\n  36: 'Home',                                                                                                          // 55\n  37: 'ArrowLeft',                                                                                                     // 56\n  38: 'ArrowUp',                                                                                                       // 57\n  39: 'ArrowRight',                                                                                                    // 58\n  40: 'ArrowDown',                                                                                                     // 59\n  45: 'Insert',                                                                                                        // 60\n  46: 'Delete',                                                                                                        // 61\n  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',                                                    // 62\n  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',                                                 // 63\n  144: 'NumLock',                                                                                                      // 64\n  145: 'ScrollLock',                                                                                                   // 65\n  224: 'Meta'                                                                                                          // 66\n};                                                                                                                     // 67\n                                                                                                                       // 68\n/**                                                                                                                    // 69\n * @param {object} nativeEvent Native browser event.                                                                   // 70\n * @return {string} Normalized `key` property.                                                                         // 71\n */                                                                                                                    // 72\nfunction getEventKey(nativeEvent) {                                                                                    // 73\n  if (nativeEvent.key) {                                                                                               // 74\n    // Normalize inconsistent values reported by browsers due to                                                       // 75\n    // implementations of a working draft specification.                                                               // 76\n                                                                                                                       // 77\n    // FireFox implements `key` but returns `MozPrintableKey` for all                                                  // 78\n    // printable characters (normalized to `Unidentified`), ignore it.                                                 // 79\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;                                                        // 80\n    if (key !== 'Unidentified') {                                                                                      // 81\n      return key;                                                                                                      // 82\n    }                                                                                                                  // 83\n  }                                                                                                                    // 84\n                                                                                                                       // 85\n  // Browser does not implement `key`, polyfill as much of it as we can.                                               // 86\n  if (nativeEvent.type === 'keypress') {                                                                               // 87\n    var charCode = getEventCharCode(nativeEvent);                                                                      // 88\n                                                                                                                       // 89\n    // The enter-key is technically both printable and non-printable and can                                           // 90\n    // thus be captured by `keypress`, no other non-printable key should.                                              // 91\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);                                                  // 92\n  }                                                                                                                    // 93\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {                                                // 94\n    // While user keyboard layout determines the actual meaning of each                                                // 95\n    // `keyCode` value, almost all function keys have a universal value.                                               // 96\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';                                                      // 97\n  }                                                                                                                    // 98\n  return '';                                                                                                           // 99\n}                                                                                                                      // 100\n                                                                                                                       // 101\nmodule.exports = getEventKey;                                                                                          // 102\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticDragEvent.js\":[\"./SyntheticMouseEvent\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticDragEvent.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticDragEvent                                                                                  // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');                                                            // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * @interface DragEvent                                                                                                // 17\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 18\n */                                                                                                                    // 19\nvar DragEventInterface = {                                                                                             // 20\n  dataTransfer: null                                                                                                   // 21\n};                                                                                                                     // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 25\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 26\n * @param {object} nativeEvent Native browser event.                                                                   // 27\n * @extends {SyntheticUIEvent}                                                                                         // 28\n */                                                                                                                    // 29\nfunction SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                          // 30\n  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);               // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nSyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);                                              // 34\n                                                                                                                       // 35\nmodule.exports = SyntheticDragEvent;                                                                                   // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticTouchEvent.js\":[\"./SyntheticUIEvent\",\"./getEventModifierState\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticTouchEvent.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticTouchEvent                                                                                 // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 14\n                                                                                                                       // 15\nvar getEventModifierState = require('./getEventModifierState');                                                        // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * @interface TouchEvent                                                                                               // 19\n * @see http://www.w3.org/TR/touch-events/                                                                             // 20\n */                                                                                                                    // 21\nvar TouchEventInterface = {                                                                                            // 22\n  touches: null,                                                                                                       // 23\n  targetTouches: null,                                                                                                 // 24\n  changedTouches: null,                                                                                                // 25\n  altKey: null,                                                                                                        // 26\n  metaKey: null,                                                                                                       // 27\n  ctrlKey: null,                                                                                                       // 28\n  shiftKey: null,                                                                                                      // 29\n  getModifierState: getEventModifierState                                                                              // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 34\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 35\n * @param {object} nativeEvent Native browser event.                                                                   // 36\n * @extends {SyntheticUIEvent}                                                                                         // 37\n */                                                                                                                    // 38\nfunction SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 39\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                  // 40\n}                                                                                                                      // 41\n                                                                                                                       // 42\nSyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);                                               // 43\n                                                                                                                       // 44\nmodule.exports = SyntheticTouchEvent;                                                                                  // 45\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticTransitionEvent.js\":[\"./SyntheticEvent\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticTransitionEvent.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticTransitionEvent                                                                            // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * @interface Event                                                                                                    // 17\n * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-                                     // 18\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent                                               // 19\n */                                                                                                                    // 20\nvar TransitionEventInterface = {                                                                                       // 21\n  propertyName: null,                                                                                                  // 22\n  elapsedTime: null,                                                                                                   // 23\n  pseudoElement: null                                                                                                  // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 28\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 29\n * @param {object} nativeEvent Native browser event.                                                                   // 30\n * @extends {SyntheticEvent}                                                                                           // 31\n */                                                                                                                    // 32\nfunction SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                    // 33\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 34\n}                                                                                                                      // 35\n                                                                                                                       // 36\nSyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);                                       // 37\n                                                                                                                       // 38\nmodule.exports = SyntheticTransitionEvent;                                                                             // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticWheelEvent.js\":[\"./SyntheticMouseEvent\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticWheelEvent.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticWheelEvent                                                                                 // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');                                                            // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * @interface WheelEvent                                                                                               // 17\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 18\n */                                                                                                                    // 19\nvar WheelEventInterface = {                                                                                            // 20\n  deltaX: function (event) {                                                                                           // 21\n    return 'deltaX' in event ? event.deltaX :                                                                          // 22\n    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).                                         // 23\n    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;                                                                   // 24\n  },                                                                                                                   // 25\n  deltaY: function (event) {                                                                                           // 26\n    return 'deltaY' in event ? event.deltaY :                                                                          // 27\n    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).                                          // 28\n    'wheelDeltaY' in event ? -event.wheelDeltaY :                                                                      // 29\n    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).                                             // 30\n    'wheelDelta' in event ? -event.wheelDelta : 0;                                                                     // 31\n  },                                                                                                                   // 32\n  deltaZ: null,                                                                                                        // 33\n                                                                                                                       // 34\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one                                            // 35\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.                                              // 36\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or                                              // 37\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.                                                // 38\n  deltaMode: null                                                                                                      // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\n/**                                                                                                                    // 42\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 43\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 44\n * @param {object} nativeEvent Native browser event.                                                                   // 45\n * @extends {SyntheticMouseEvent}                                                                                      // 46\n */                                                                                                                    // 47\nfunction SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 48\n  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);               // 49\n}                                                                                                                      // 50\n                                                                                                                       // 51\nSyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);                                            // 52\n                                                                                                                       // 53\nmodule.exports = SyntheticWheelEvent;                                                                                  // 54\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactMount.js\":[\"./reactProdInvariant\",\"./DOMLazyTree\",\"./DOMProperty\",\"./ReactBrowserEventEmitter\",\"./ReactCurrentOwner\",\"./ReactDOMComponentTree\",\"./ReactDOMContainerInfo\",\"./ReactDOMFeatureFlags\",\"./ReactElement\",\"./ReactFeatureFlags\",\"./ReactInstanceMap\",\"./ReactInstrumentation\",\"./ReactMarkupChecksum\",\"./ReactReconciler\",\"./ReactUpdateQueue\",\"./ReactUpdates\",\"fbjs/lib/emptyObject\",\"./instantiateReactComponent\",\"fbjs/lib/invariant\",\"./setInnerHTML\",\"./shouldUpdateReactComponent\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactMount.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactMount                                                                                          // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar DOMLazyTree = require('./DOMLazyTree');                                                                            // 16\nvar DOMProperty = require('./DOMProperty');                                                                            // 17\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');                                                  // 18\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 19\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 20\nvar ReactDOMContainerInfo = require('./ReactDOMContainerInfo');                                                        // 21\nvar ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');                                                          // 22\nvar ReactElement = require('./ReactElement');                                                                          // 23\nvar ReactFeatureFlags = require('./ReactFeatureFlags');                                                                // 24\nvar ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 25\nvar ReactInstrumentation = require('./ReactInstrumentation');                                                          // 26\nvar ReactMarkupChecksum = require('./ReactMarkupChecksum');                                                            // 27\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 28\nvar ReactUpdateQueue = require('./ReactUpdateQueue');                                                                  // 29\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 30\n                                                                                                                       // 31\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                     // 32\nvar instantiateReactComponent = require('./instantiateReactComponent');                                                // 33\nvar invariant = require('fbjs/lib/invariant');                                                                         // 34\nvar setInnerHTML = require('./setInnerHTML');                                                                          // 35\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');                                              // 36\nvar warning = require('fbjs/lib/warning');                                                                             // 37\n                                                                                                                       // 38\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;                                                                         // 39\nvar ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;                                                                  // 40\n                                                                                                                       // 41\nvar ELEMENT_NODE_TYPE = 1;                                                                                             // 42\nvar DOC_NODE_TYPE = 9;                                                                                                 // 43\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;                                                                                  // 44\n                                                                                                                       // 45\nvar instancesByReactRootID = {};                                                                                       // 46\n                                                                                                                       // 47\n/**                                                                                                                    // 48\n * Finds the index of the first character                                                                              // 49\n * that's not common between the two given strings.                                                                    // 50\n *                                                                                                                     // 51\n * @return {number} the index of the character where the strings diverge                                               // 52\n */                                                                                                                    // 53\nfunction firstDifferenceIndex(string1, string2) {                                                                      // 54\n  var minLen = Math.min(string1.length, string2.length);                                                               // 55\n  for (var i = 0; i < minLen; i++) {                                                                                   // 56\n    if (string1.charAt(i) !== string2.charAt(i)) {                                                                     // 57\n      return i;                                                                                                        // 58\n    }                                                                                                                  // 59\n  }                                                                                                                    // 60\n  return string1.length === string2.length ? -1 : minLen;                                                              // 61\n}                                                                                                                      // 62\n                                                                                                                       // 63\n/**                                                                                                                    // 64\n * @param {DOMElement|DOMDocument} container DOM element that may contain                                              // 65\n * a React component                                                                                                   // 66\n * @return {?*} DOM element that may have the reactRoot ID, or null.                                                   // 67\n */                                                                                                                    // 68\nfunction getReactRootElementInContainer(container) {                                                                   // 69\n  if (!container) {                                                                                                    // 70\n    return null;                                                                                                       // 71\n  }                                                                                                                    // 72\n                                                                                                                       // 73\n  if (container.nodeType === DOC_NODE_TYPE) {                                                                          // 74\n    return container.documentElement;                                                                                  // 75\n  } else {                                                                                                             // 76\n    return container.firstChild;                                                                                       // 77\n  }                                                                                                                    // 78\n}                                                                                                                      // 79\n                                                                                                                       // 80\nfunction internalGetID(node) {                                                                                         // 81\n  // If node is something like a window, document, or text node, none of                                               // 82\n  // which support attributes or a .getAttribute method, gracefully return                                             // 83\n  // the empty string, as if the attribute were missing.                                                               // 84\n  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';                                                      // 85\n}                                                                                                                      // 86\n                                                                                                                       // 87\n/**                                                                                                                    // 88\n * Mounts this component and inserts it into the DOM.                                                                  // 89\n *                                                                                                                     // 90\n * @param {ReactComponent} componentInstance The instance to mount.                                                    // 91\n * @param {DOMElement} container DOM element to mount into.                                                            // 92\n * @param {ReactReconcileTransaction} transaction                                                                      // 93\n * @param {boolean} shouldReuseMarkup If true, do not insert markup                                                    // 94\n */                                                                                                                    // 95\nfunction mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {                 // 96\n  var markerName;                                                                                                      // 97\n  if (ReactFeatureFlags.logTopLevelRenders) {                                                                          // 98\n    var wrappedElement = wrapperInstance._currentElement.props;                                                        // 99\n    var type = wrappedElement.type;                                                                                    // 100\n    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);                  // 101\n    console.time(markerName);                                                                                          // 102\n  }                                                                                                                    // 103\n                                                                                                                       // 104\n  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */\n  );                                                                                                                   // 106\n                                                                                                                       // 107\n  if (markerName) {                                                                                                    // 108\n    console.timeEnd(markerName);                                                                                       // 109\n  }                                                                                                                    // 110\n                                                                                                                       // 111\n  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;                                               // 112\n  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);                  // 113\n}                                                                                                                      // 114\n                                                                                                                       // 115\n/**                                                                                                                    // 116\n * Batched mount.                                                                                                      // 117\n *                                                                                                                     // 118\n * @param {ReactComponent} componentInstance The instance to mount.                                                    // 119\n * @param {DOMElement} container DOM element to mount into.                                                            // 120\n * @param {boolean} shouldReuseMarkup If true, do not insert markup                                                    // 121\n */                                                                                                                    // 122\nfunction batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {                     // 123\n  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(                                                  // 124\n  /* useCreateElement */                                                                                               // 125\n  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);                                                        // 126\n  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);\n  ReactUpdates.ReactReconcileTransaction.release(transaction);                                                         // 128\n}                                                                                                                      // 129\n                                                                                                                       // 130\n/**                                                                                                                    // 131\n * Unmounts a component and removes it from the DOM.                                                                   // 132\n *                                                                                                                     // 133\n * @param {ReactComponent} instance React component instance.                                                          // 134\n * @param {DOMElement} container DOM element to unmount from.                                                          // 135\n * @final                                                                                                              // 136\n * @internal                                                                                                           // 137\n * @see {ReactMount.unmountComponentAtNode}                                                                            // 138\n */                                                                                                                    // 139\nfunction unmountComponentFromNode(instance, container, safely) {                                                       // 140\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 141\n    ReactInstrumentation.debugTool.onBeginFlush();                                                                     // 142\n  }                                                                                                                    // 143\n  ReactReconciler.unmountComponent(instance, safely);                                                                  // 144\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 145\n    ReactInstrumentation.debugTool.onEndFlush();                                                                       // 146\n  }                                                                                                                    // 147\n                                                                                                                       // 148\n  if (container.nodeType === DOC_NODE_TYPE) {                                                                          // 149\n    container = container.documentElement;                                                                             // 150\n  }                                                                                                                    // 151\n                                                                                                                       // 152\n  // http://jsperf.com/emptying-a-node                                                                                 // 153\n  while (container.lastChild) {                                                                                        // 154\n    container.removeChild(container.lastChild);                                                                        // 155\n  }                                                                                                                    // 156\n}                                                                                                                      // 157\n                                                                                                                       // 158\n/**                                                                                                                    // 159\n * True if the supplied DOM node has a direct React-rendered child that is                                             // 160\n * not a React root element. Useful for warning in `render`,                                                           // 161\n * `unmountComponentAtNode`, etc.                                                                                      // 162\n *                                                                                                                     // 163\n * @param {?DOMElement} node The candidate DOM node.                                                                   // 164\n * @return {boolean} True if the DOM element contains a direct child that was                                          // 165\n * rendered by React but is not a root element.                                                                        // 166\n * @internal                                                                                                           // 167\n */                                                                                                                    // 168\nfunction hasNonRootReactChild(container) {                                                                             // 169\n  var rootEl = getReactRootElementInContainer(container);                                                              // 170\n  if (rootEl) {                                                                                                        // 171\n    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);                                                      // 172\n    return !!(inst && inst._hostParent);                                                                               // 173\n  }                                                                                                                    // 174\n}                                                                                                                      // 175\n                                                                                                                       // 176\n/**                                                                                                                    // 177\n * True if the supplied DOM node is a React DOM element and                                                            // 178\n * it has been rendered by another copy of React.                                                                      // 179\n *                                                                                                                     // 180\n * @param {?DOMElement} node The candidate DOM node.                                                                   // 181\n * @return {boolean} True if the DOM has been rendered by another copy of React                                        // 182\n * @internal                                                                                                           // 183\n */                                                                                                                    // 184\nfunction nodeIsRenderedByOtherInstance(container) {                                                                    // 185\n  var rootEl = getReactRootElementInContainer(container);                                                              // 186\n  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));                      // 187\n}                                                                                                                      // 188\n                                                                                                                       // 189\n/**                                                                                                                    // 190\n * True if the supplied DOM node is a valid node element.                                                              // 191\n *                                                                                                                     // 192\n * @param {?DOMElement} node The candidate DOM node.                                                                   // 193\n * @return {boolean} True if the DOM is a valid DOM node.                                                              // 194\n * @internal                                                                                                           // 195\n */                                                                                                                    // 196\nfunction isValidContainer(node) {                                                                                      // 197\n  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));\n}                                                                                                                      // 199\n                                                                                                                       // 200\n/**                                                                                                                    // 201\n * True if the supplied DOM node is a valid React node element.                                                        // 202\n *                                                                                                                     // 203\n * @param {?DOMElement} node The candidate DOM node.                                                                   // 204\n * @return {boolean} True if the DOM is a valid React DOM node.                                                        // 205\n * @internal                                                                                                           // 206\n */                                                                                                                    // 207\nfunction isReactNode(node) {                                                                                           // 208\n  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));                // 209\n}                                                                                                                      // 210\n                                                                                                                       // 211\nfunction getHostRootInstanceInContainer(container) {                                                                   // 212\n  var rootEl = getReactRootElementInContainer(container);                                                              // 213\n  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);                                  // 214\n  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;                                  // 215\n}                                                                                                                      // 216\n                                                                                                                       // 217\nfunction getTopLevelWrapperInContainer(container) {                                                                    // 218\n  var root = getHostRootInstanceInContainer(container);                                                                // 219\n  return root ? root._hostContainerInfo._topLevelWrapper : null;                                                       // 220\n}                                                                                                                      // 221\n                                                                                                                       // 222\n/**                                                                                                                    // 223\n * Temporary (?) hack so that we can store all top-level pending updates on                                            // 224\n * composites instead of having to worry about different types of components                                           // 225\n * here.                                                                                                               // 226\n */                                                                                                                    // 227\nvar topLevelRootCounter = 1;                                                                                           // 228\nvar TopLevelWrapper = function () {                                                                                    // 229\n  this.rootID = topLevelRootCounter++;                                                                                 // 230\n};                                                                                                                     // 231\nTopLevelWrapper.prototype.isReactComponent = {};                                                                       // 232\nif (process.env.NODE_ENV !== 'production') {                                                                           // 233\n  TopLevelWrapper.displayName = 'TopLevelWrapper';                                                                     // 234\n}                                                                                                                      // 235\nTopLevelWrapper.prototype.render = function () {                                                                       // 236\n  // this.props is actually a ReactElement                                                                             // 237\n  return this.props;                                                                                                   // 238\n};                                                                                                                     // 239\n                                                                                                                       // 240\n/**                                                                                                                    // 241\n * Mounting is the process of initializing a React component by creating its                                           // 242\n * representative DOM elements and inserting them into a supplied `container`.                                         // 243\n * Any prior content inside `container` is destroyed in the process.                                                   // 244\n *                                                                                                                     // 245\n *   ReactMount.render(                                                                                                // 246\n *     component,                                                                                                      // 247\n *     document.getElementById('container')                                                                            // 248\n *   );                                                                                                                // 249\n *                                                                                                                     // 250\n *   <div id=\"container\">                   <-- Supplied `container`.                                                  // 251\n *     <div data-reactid=\".3\">              <-- Rendered reactRoot of React                                            // 252\n *       // ...                                 component.                                                             // 253\n *     </div>                                                                                                          // 254\n *   </div>                                                                                                            // 255\n *                                                                                                                     // 256\n * Inside of `container`, the first element rendered is the \"reactRoot\".                                               // 257\n */                                                                                                                    // 258\nvar ReactMount = {                                                                                                     // 259\n                                                                                                                       // 260\n  TopLevelWrapper: TopLevelWrapper,                                                                                    // 261\n                                                                                                                       // 262\n  /**                                                                                                                  // 263\n   * Used by devtools. The keys are not important.                                                                     // 264\n   */                                                                                                                  // 265\n  _instancesByReactRootID: instancesByReactRootID,                                                                     // 266\n                                                                                                                       // 267\n  /**                                                                                                                  // 268\n   * This is a hook provided to support rendering React components while                                               // 269\n   * ensuring that the apparent scroll position of its `container` does not                                            // 270\n   * change.                                                                                                           // 271\n   *                                                                                                                   // 272\n   * @param {DOMElement} container The `container` being rendered into.                                                // 273\n   * @param {function} renderCallback This must be called once to do the render.                                       // 274\n   */                                                                                                                  // 275\n  scrollMonitor: function (container, renderCallback) {                                                                // 276\n    renderCallback();                                                                                                  // 277\n  },                                                                                                                   // 278\n                                                                                                                       // 279\n  /**                                                                                                                  // 280\n   * Take a component that's already mounted into the DOM and replace its props                                        // 281\n   * @param {ReactComponent} prevComponent component instance already in the DOM                                       // 282\n   * @param {ReactElement} nextElement component instance to render                                                    // 283\n   * @param {DOMElement} container container to render into                                                            // 284\n   * @param {?function} callback function triggered on completion                                                      // 285\n   */                                                                                                                  // 286\n  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {                      // 287\n    ReactMount.scrollMonitor(container, function () {                                                                  // 288\n      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);                                // 289\n      if (callback) {                                                                                                  // 290\n        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);                                             // 291\n      }                                                                                                                // 292\n    });                                                                                                                // 293\n                                                                                                                       // 294\n    return prevComponent;                                                                                              // 295\n  },                                                                                                                   // 296\n                                                                                                                       // 297\n  /**                                                                                                                  // 298\n   * Render a new component into the DOM. Hooked by hooks!                                                             // 299\n   *                                                                                                                   // 300\n   * @param {ReactElement} nextElement element to render                                                               // 301\n   * @param {DOMElement} container container to render into                                                            // 302\n   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion                                         // 303\n   * @return {ReactComponent} nextComponent                                                                            // 304\n   */                                                                                                                  // 305\n  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {                             // 306\n    // Various parts of our code (such as ReactCompositeComponent's                                                    // 307\n    // _renderValidatedComponent) assume that calls to render aren't nested;                                           // 308\n    // verify that that's the case.                                                                                    // 309\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;\n                                                                                                                       // 311\n    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;\n                                                                                                                       // 313\n    ReactBrowserEventEmitter.ensureScrollValueMonitoring();                                                            // 314\n    var componentInstance = instantiateReactComponent(nextElement, false);                                             // 315\n                                                                                                                       // 316\n    // The initial render is synchronous but any updates that happen during                                            // 317\n    // rendering, in componentWillMount or componentDidMount, will be batched                                          // 318\n    // according to the current batching strategy.                                                                     // 319\n                                                                                                                       // 320\n    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);\n                                                                                                                       // 322\n    var wrapperID = componentInstance._instance.rootID;                                                                // 323\n    instancesByReactRootID[wrapperID] = componentInstance;                                                             // 324\n                                                                                                                       // 325\n    return componentInstance;                                                                                          // 326\n  },                                                                                                                   // 327\n                                                                                                                       // 328\n  /**                                                                                                                  // 329\n   * Renders a React component into the DOM in the supplied `container`.                                               // 330\n   *                                                                                                                   // 331\n   * If the React component was previously rendered into `container`, this will                                        // 332\n   * perform an update on it and only mutate the DOM as necessary to reflect the                                       // 333\n   * latest React component.                                                                                           // 334\n   *                                                                                                                   // 335\n   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.                                // 336\n   * @param {ReactElement} nextElement Component element to render.                                                    // 337\n   * @param {DOMElement} container DOM element to render into.                                                         // 338\n   * @param {?function} callback function triggered on completion                                                      // 339\n   * @return {ReactComponent} Component instance rendered in `container`.                                              // 340\n   */                                                                                                                  // 341\n  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {                           // 342\n    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;\n    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);                  // 344\n  },                                                                                                                   // 345\n                                                                                                                       // 346\n  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {                          // 347\n    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');                                                    // 348\n    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \\'div\\', pass ' + 'React.createElement(\\'div\\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :\n    // Check if it quacks like an element                                                                              // 350\n    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \\'div\\', pass ' + 'React.createElement(\\'div\\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;\n                                                                                                                       // 352\n    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;\n                                                                                                                       // 354\n    var nextWrappedElement = ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);                 // 355\n                                                                                                                       // 356\n    var nextContext;                                                                                                   // 357\n    if (parentComponent) {                                                                                             // 358\n      var parentInst = ReactInstanceMap.get(parentComponent);                                                          // 359\n      nextContext = parentInst._processChildContext(parentInst._context);                                              // 360\n    } else {                                                                                                           // 361\n      nextContext = emptyObject;                                                                                       // 362\n    }                                                                                                                  // 363\n                                                                                                                       // 364\n    var prevComponent = getTopLevelWrapperInContainer(container);                                                      // 365\n                                                                                                                       // 366\n    if (prevComponent) {                                                                                               // 367\n      var prevWrappedElement = prevComponent._currentElement;                                                          // 368\n      var prevElement = prevWrappedElement.props;                                                                      // 369\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {                                                      // 370\n        var publicInst = prevComponent._renderedComponent.getPublicInstance();                                         // 371\n        var updatedCallback = callback && function () {                                                                // 372\n          callback.call(publicInst);                                                                                   // 373\n        };                                                                                                             // 374\n        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);   // 375\n        return publicInst;                                                                                             // 376\n      } else {                                                                                                         // 377\n        ReactMount.unmountComponentAtNode(container);                                                                  // 378\n      }                                                                                                                // 379\n    }                                                                                                                  // 380\n                                                                                                                       // 381\n    var reactRootElement = getReactRootElementInContainer(container);                                                  // 382\n    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);                               // 383\n    var containerHasNonRootReactChild = hasNonRootReactChild(container);                                               // 384\n                                                                                                                       // 385\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 386\n      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;\n                                                                                                                       // 388\n      if (!containerHasReactMarkup || reactRootElement.nextSibling) {                                                  // 389\n        var rootElementSibling = reactRootElement;                                                                     // 390\n        while (rootElementSibling) {                                                                                   // 391\n          if (internalGetID(rootElementSibling)) {                                                                     // 392\n            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;\n            break;                                                                                                     // 394\n          }                                                                                                            // 395\n          rootElementSibling = rootElementSibling.nextSibling;                                                         // 396\n        }                                                                                                              // 397\n      }                                                                                                                // 398\n    }                                                                                                                  // 399\n                                                                                                                       // 400\n    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;               // 401\n    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();\n    if (callback) {                                                                                                    // 403\n      callback.call(component);                                                                                        // 404\n    }                                                                                                                  // 405\n    return component;                                                                                                  // 406\n  },                                                                                                                   // 407\n                                                                                                                       // 408\n  /**                                                                                                                  // 409\n   * Renders a React component into the DOM in the supplied `container`.                                               // 410\n   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render                                      // 411\n   *                                                                                                                   // 412\n   * If the React component was previously rendered into `container`, this will                                        // 413\n   * perform an update on it and only mutate the DOM as necessary to reflect the                                       // 414\n   * latest React component.                                                                                           // 415\n   *                                                                                                                   // 416\n   * @param {ReactElement} nextElement Component element to render.                                                    // 417\n   * @param {DOMElement} container DOM element to render into.                                                         // 418\n   * @param {?function} callback function triggered on completion                                                      // 419\n   * @return {ReactComponent} Component instance rendered in `container`.                                              // 420\n   */                                                                                                                  // 421\n  render: function (nextElement, container, callback) {                                                                // 422\n    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);                             // 423\n  },                                                                                                                   // 424\n                                                                                                                       // 425\n  /**                                                                                                                  // 426\n   * Unmounts and destroys the React component rendered in the `container`.                                            // 427\n   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode                      // 428\n   *                                                                                                                   // 429\n   * @param {DOMElement} container DOM element containing a React component.                                           // 430\n   * @return {boolean} True if a component was found in and unmounted from                                             // 431\n   *                   `container`                                                                                     // 432\n   */                                                                                                                  // 433\n  unmountComponentAtNode: function (container) {                                                                       // 434\n    // Various parts of our code (such as ReactCompositeComponent's                                                    // 435\n    // _renderValidatedComponent) assume that calls to render aren't nested;                                           // 436\n    // verify that that's the case. (Strictly speaking, unmounting won't cause a                                       // 437\n    // render but we still don't expect to be in a render call here.)                                                  // 438\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;\n                                                                                                                       // 440\n    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;\n                                                                                                                       // 442\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 443\n      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;\n    }                                                                                                                  // 445\n                                                                                                                       // 446\n    var prevComponent = getTopLevelWrapperInContainer(container);                                                      // 447\n    if (!prevComponent) {                                                                                              // 448\n      // Check if the node being unmounted was rendered by React, but isn't a                                          // 449\n      // root node.                                                                                                    // 450\n      var containerHasNonRootReactChild = hasNonRootReactChild(container);                                             // 451\n                                                                                                                       // 452\n      // Check if the container itself is a React root node.                                                           // 453\n      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);                   // 454\n                                                                                                                       // 455\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 456\n        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;\n      }                                                                                                                // 458\n                                                                                                                       // 459\n      return false;                                                                                                    // 460\n    }                                                                                                                  // 461\n    delete instancesByReactRootID[prevComponent._instance.rootID];                                                     // 462\n    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);                            // 463\n    return true;                                                                                                       // 464\n  },                                                                                                                   // 465\n                                                                                                                       // 466\n  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {                        // 467\n    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;\n                                                                                                                       // 469\n    if (shouldReuseMarkup) {                                                                                           // 470\n      var rootElement = getReactRootElementInContainer(container);                                                     // 471\n      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {                                                   // 472\n        ReactDOMComponentTree.precacheNode(instance, rootElement);                                                     // 473\n        return;                                                                                                        // 474\n      } else {                                                                                                         // 475\n        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);                               // 476\n        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);                                           // 477\n                                                                                                                       // 478\n        var rootMarkup = rootElement.outerHTML;                                                                        // 479\n        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);                                    // 480\n                                                                                                                       // 481\n        var normalizedMarkup = markup;                                                                                 // 482\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 483\n          // because rootMarkup is retrieved from the DOM, various normalizations                                      // 484\n          // will have occurred which will not be present in `markup`. Here,                                           // 485\n          // insert markup into a <div> or <iframe> depending on the container                                         // 486\n          // type to perform the same normalizations before comparing.                                                 // 487\n          var normalizer;                                                                                              // 488\n          if (container.nodeType === ELEMENT_NODE_TYPE) {                                                              // 489\n            normalizer = document.createElement('div');                                                                // 490\n            normalizer.innerHTML = markup;                                                                             // 491\n            normalizedMarkup = normalizer.innerHTML;                                                                   // 492\n          } else {                                                                                                     // 493\n            normalizer = document.createElement('iframe');                                                             // 494\n            document.body.appendChild(normalizer);                                                                     // 495\n            normalizer.contentDocument.write(markup);                                                                  // 496\n            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;                                   // 497\n            document.body.removeChild(normalizer);                                                                     // 498\n          }                                                                                                            // 499\n        }                                                                                                              // 500\n                                                                                                                       // 501\n        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);                                            // 502\n        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);\n                                                                                                                       // 504\n        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\\n%s', difference) : _prodInvariant('42', difference) : void 0;\n                                                                                                                       // 506\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 507\n          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\\n%s', difference) : void 0;\n        }                                                                                                              // 509\n      }                                                                                                                // 510\n    }                                                                                                                  // 511\n                                                                                                                       // 512\n    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\\'re trying to render a component to the document but you didn\\'t use server rendering. We can\\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;\n                                                                                                                       // 514\n    if (transaction.useCreateElement) {                                                                                // 515\n      while (container.lastChild) {                                                                                    // 516\n        container.removeChild(container.lastChild);                                                                    // 517\n      }                                                                                                                // 518\n      DOMLazyTree.insertTreeBefore(container, markup, null);                                                           // 519\n    } else {                                                                                                           // 520\n      setInnerHTML(container, markup);                                                                                 // 521\n      ReactDOMComponentTree.precacheNode(instance, container.firstChild);                                              // 522\n    }                                                                                                                  // 523\n                                                                                                                       // 524\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 525\n      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);                                  // 526\n      if (hostNode._debugID !== 0) {                                                                                   // 527\n        ReactInstrumentation.debugTool.onHostOperation(hostNode._debugID, 'mount', markup.toString());                 // 528\n      }                                                                                                                // 529\n    }                                                                                                                  // 530\n  }                                                                                                                    // 531\n};                                                                                                                     // 532\n                                                                                                                       // 533\nmodule.exports = ReactMount;                                                                                           // 534\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMContainerInfo.js\":[\"./validateDOMNesting\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMContainerInfo.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMContainerInfo                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar validateDOMNesting = require('./validateDOMNesting');                                                              // 14\n                                                                                                                       // 15\nvar DOC_NODE_TYPE = 9;                                                                                                 // 16\n                                                                                                                       // 17\nfunction ReactDOMContainerInfo(topLevelWrapper, node) {                                                                // 18\n  var info = {                                                                                                         // 19\n    _topLevelWrapper: topLevelWrapper,                                                                                 // 20\n    _idCounter: 1,                                                                                                     // 21\n    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,                         // 22\n    _node: node,                                                                                                       // 23\n    _tag: node ? node.nodeName.toLowerCase() : null,                                                                   // 24\n    _namespaceURI: node ? node.namespaceURI : null                                                                     // 25\n  };                                                                                                                   // 26\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 27\n    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;                  // 28\n  }                                                                                                                    // 29\n  return info;                                                                                                         // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nmodule.exports = ReactDOMContainerInfo;                                                                                // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMFeatureFlags.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMFeatureFlags.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMFeatureFlags                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactDOMFeatureFlags = {                                                                                           // 14\n  useCreateElement: true                                                                                               // 15\n};                                                                                                                     // 16\n                                                                                                                       // 17\nmodule.exports = ReactDOMFeatureFlags;                                                                                 // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactMarkupChecksum.js\":[\"./adler32\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactMarkupChecksum.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactMarkupChecksum                                                                                 // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar adler32 = require('./adler32');                                                                                    // 14\n                                                                                                                       // 15\nvar TAG_END = /\\/?>/;                                                                                                  // 16\nvar COMMENT_START = /^<\\!\\-\\-/;                                                                                        // 17\n                                                                                                                       // 18\nvar ReactMarkupChecksum = {                                                                                            // 19\n  CHECKSUM_ATTR_NAME: 'data-react-checksum',                                                                           // 20\n                                                                                                                       // 21\n  /**                                                                                                                  // 22\n   * @param {string} markup Markup string                                                                              // 23\n   * @return {string} Markup string with checksum attribute attached                                                   // 24\n   */                                                                                                                  // 25\n  addChecksumToMarkup: function (markup) {                                                                             // 26\n    var checksum = adler32(markup);                                                                                    // 27\n                                                                                                                       // 28\n    // Add checksum (handle both parent tags, comments and self-closing tags)                                          // 29\n    if (COMMENT_START.test(markup)) {                                                                                  // 30\n      return markup;                                                                                                   // 31\n    } else {                                                                                                           // 32\n      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"' + checksum + '\"$&');          // 33\n    }                                                                                                                  // 34\n  },                                                                                                                   // 35\n                                                                                                                       // 36\n  /**                                                                                                                  // 37\n   * @param {string} markup to use                                                                                     // 38\n   * @param {DOMElement} element root React element                                                                    // 39\n   * @returns {boolean} whether or not the markup is the same                                                          // 40\n   */                                                                                                                  // 41\n  canReuseMarkup: function (markup, element) {                                                                         // 42\n    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);                               // 43\n    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);                                             // 44\n    var markupChecksum = adler32(markup);                                                                              // 45\n    return markupChecksum === existingChecksum;                                                                        // 46\n  }                                                                                                                    // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\nmodule.exports = ReactMarkupChecksum;                                                                                  // 50\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"adler32.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/adler32.js                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule adler32                                                                                             // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar MOD = 65521;                                                                                                       // 15\n                                                                                                                       // 16\n// adler32 is not cryptographically strong, and is only used to sanity check that                                      // 17\n// markup generated on the server matches the markup generated on the client.                                          // 18\n// This implementation (a modified version of the SheetJS version) has been optimized                                  // 19\n// for our use case, at the expense of conforming to the adler32 specification                                         // 20\n// for non-ascii inputs.                                                                                               // 21\nfunction adler32(data) {                                                                                               // 22\n  var a = 1;                                                                                                           // 23\n  var b = 0;                                                                                                           // 24\n  var i = 0;                                                                                                           // 25\n  var l = data.length;                                                                                                 // 26\n  var m = l & ~0x3;                                                                                                    // 27\n  while (i < m) {                                                                                                      // 28\n    var n = Math.min(i + 4096, m);                                                                                     // 29\n    for (; i < n; i += 4) {                                                                                            // 30\n      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));\n    }                                                                                                                  // 32\n    a %= MOD;                                                                                                          // 33\n    b %= MOD;                                                                                                          // 34\n  }                                                                                                                    // 35\n  for (; i < l; i++) {                                                                                                 // 36\n    b += a += data.charCodeAt(i);                                                                                      // 37\n  }                                                                                                                    // 38\n  a %= MOD;                                                                                                            // 39\n  b %= MOD;                                                                                                            // 40\n  return a | b << 16;                                                                                                  // 41\n}                                                                                                                      // 42\n                                                                                                                       // 43\nmodule.exports = adler32;                                                                                              // 44\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"findDOMNode.js\":[\"./reactProdInvariant\",\"./ReactCurrentOwner\",\"./ReactDOMComponentTree\",\"./ReactInstanceMap\",\"./getHostComponentFromComposite\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/findDOMNode.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule findDOMNode                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _prodInvariant = require('./reactProdInvariant');                                                                  // 14\n                                                                                                                       // 15\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 16\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 17\nvar ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 18\n                                                                                                                       // 19\nvar getHostComponentFromComposite = require('./getHostComponentFromComposite');                                        // 20\nvar invariant = require('fbjs/lib/invariant');                                                                         // 21\nvar warning = require('fbjs/lib/warning');                                                                             // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Returns the DOM node rendered by this element.                                                                      // 25\n *                                                                                                                     // 26\n * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode                                   // 27\n *                                                                                                                     // 28\n * @param {ReactComponent|DOMElement} componentOrElement                                                               // 29\n * @return {?DOMElement} The root node of this element.                                                                // 30\n */                                                                                                                    // 31\nfunction findDOMNode(componentOrElement) {                                                                             // 32\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 33\n    var owner = ReactCurrentOwner.current;                                                                             // 34\n    if (owner !== null) {                                                                                              // 35\n      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;\n      owner._warnedAboutRefsInRender = true;                                                                           // 37\n    }                                                                                                                  // 38\n  }                                                                                                                    // 39\n  if (componentOrElement == null) {                                                                                    // 40\n    return null;                                                                                                       // 41\n  }                                                                                                                    // 42\n  if (componentOrElement.nodeType === 1) {                                                                             // 43\n    return componentOrElement;                                                                                         // 44\n  }                                                                                                                    // 45\n                                                                                                                       // 46\n  var inst = ReactInstanceMap.get(componentOrElement);                                                                 // 47\n  if (inst) {                                                                                                          // 48\n    inst = getHostComponentFromComposite(inst);                                                                        // 49\n    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;                                              // 50\n  }                                                                                                                    // 51\n                                                                                                                       // 52\n  if (typeof componentOrElement.render === 'function') {                                                               // 53\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;\n  } else {                                                                                                             // 55\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;\n  }                                                                                                                    // 57\n}                                                                                                                      // 58\n                                                                                                                       // 59\nmodule.exports = findDOMNode;                                                                                          // 60\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getHostComponentFromComposite.js\":[\"./ReactNodeTypes\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getHostComponentFromComposite.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getHostComponentFromComposite                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactNodeTypes = require('./ReactNodeTypes');                                                                      // 14\n                                                                                                                       // 15\nfunction getHostComponentFromComposite(inst) {                                                                         // 16\n  var type;                                                                                                            // 17\n                                                                                                                       // 18\n  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {                                               // 19\n    inst = inst._renderedComponent;                                                                                    // 20\n  }                                                                                                                    // 21\n                                                                                                                       // 22\n  if (type === ReactNodeTypes.HOST) {                                                                                  // 23\n    return inst._renderedComponent;                                                                                    // 24\n  } else if (type === ReactNodeTypes.EMPTY) {                                                                          // 25\n    return null;                                                                                                       // 26\n  }                                                                                                                    // 27\n}                                                                                                                      // 28\n                                                                                                                       // 29\nmodule.exports = getHostComponentFromComposite;                                                                        // 30\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"renderSubtreeIntoContainer.js\":[\"./ReactMount\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/renderSubtreeIntoContainer.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n* @providesModule renderSubtreeIntoContainer                                                                           // 9\n*/                                                                                                                     // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactMount = require('./ReactMount');                                                                              // 14\n                                                                                                                       // 15\nmodule.exports = ReactMount.renderSubtreeIntoContainer;                                                                // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMUnknownPropertyHook.js\":[\"./DOMProperty\",\"./EventPluginRegistry\",\"./ReactComponentTreeHook\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMUnknownPropertyHook.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMUnknownPropertyHook                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar DOMProperty = require('./DOMProperty');                                                                            // 14\nvar EventPluginRegistry = require('./EventPluginRegistry');                                                            // 15\nvar ReactComponentTreeHook = require('./ReactComponentTreeHook');                                                      // 16\n                                                                                                                       // 17\nvar warning = require('fbjs/lib/warning');                                                                             // 18\n                                                                                                                       // 19\nif (process.env.NODE_ENV !== 'production') {                                                                           // 20\n  var reactProps = {                                                                                                   // 21\n    children: true,                                                                                                    // 22\n    dangerouslySetInnerHTML: true,                                                                                     // 23\n    key: true,                                                                                                         // 24\n    ref: true,                                                                                                         // 25\n                                                                                                                       // 26\n    autoFocus: true,                                                                                                   // 27\n    defaultValue: true,                                                                                                // 28\n    valueLink: true,                                                                                                   // 29\n    defaultChecked: true,                                                                                              // 30\n    checkedLink: true,                                                                                                 // 31\n    innerHTML: true,                                                                                                   // 32\n    suppressContentEditableWarning: true,                                                                              // 33\n    onFocusIn: true,                                                                                                   // 34\n    onFocusOut: true                                                                                                   // 35\n  };                                                                                                                   // 36\n  var warnedProperties = {};                                                                                           // 37\n                                                                                                                       // 38\n  var validateProperty = function (tagName, name, debugID) {                                                           // 39\n    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {                          // 40\n      return true;                                                                                                     // 41\n    }                                                                                                                  // 42\n    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {\n      return true;                                                                                                     // 44\n    }                                                                                                                  // 45\n    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {                                            // 46\n      return true;                                                                                                     // 47\n    }                                                                                                                  // 48\n    warnedProperties[name] = true;                                                                                     // 49\n    var lowerCasedName = name.toLowerCase();                                                                           // 50\n                                                                                                                       // 51\n    // data-* attributes should be lowercase; suggest the lowercase version                                            // 52\n    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;\n                                                                                                                       // 54\n    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;\n                                                                                                                       // 56\n    if (standardName != null) {                                                                                        // 57\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n      return true;                                                                                                     // 59\n    } else if (registrationName != null) {                                                                             // 60\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n      return true;                                                                                                     // 62\n    } else {                                                                                                           // 63\n      // We were unable to guess which prop the user intended.                                                         // 64\n      // It is likely that the user was just blindly spreading/forwarding props                                        // 65\n      // Components should be careful to only render valid props/attributes.                                           // 66\n      // Warning will be invoked in warnUnknownProperties to allow grouping.                                           // 67\n      return false;                                                                                                    // 68\n    }                                                                                                                  // 69\n  };                                                                                                                   // 70\n}                                                                                                                      // 71\n                                                                                                                       // 72\nvar warnUnknownProperties = function (debugID, element) {                                                              // 73\n  var unknownProps = [];                                                                                               // 74\n  for (var key in element.props) {                                                                                     // 75\n    var isValid = validateProperty(element.type, key, debugID);                                                        // 76\n    if (!isValid) {                                                                                                    // 77\n      unknownProps.push(key);                                                                                          // 78\n    }                                                                                                                  // 79\n  }                                                                                                                    // 80\n                                                                                                                       // 81\n  var unknownPropString = unknownProps.map(function (prop) {                                                           // 82\n    return '`' + prop + '`';                                                                                           // 83\n  }).join(', ');                                                                                                       // 84\n                                                                                                                       // 85\n  if (unknownProps.length === 1) {                                                                                     // 86\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n  } else if (unknownProps.length > 1) {                                                                                // 88\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n  }                                                                                                                    // 90\n};                                                                                                                     // 91\n                                                                                                                       // 92\nfunction handleElement(debugID, element) {                                                                             // 93\n  if (element == null || typeof element.type !== 'string') {                                                           // 94\n    return;                                                                                                            // 95\n  }                                                                                                                    // 96\n  if (element.type.indexOf('-') >= 0 || element.props.is) {                                                            // 97\n    return;                                                                                                            // 98\n  }                                                                                                                    // 99\n  warnUnknownProperties(debugID, element);                                                                             // 100\n}                                                                                                                      // 101\n                                                                                                                       // 102\nvar ReactDOMUnknownPropertyHook = {                                                                                    // 103\n  onBeforeMountComponent: function (debugID, element) {                                                                // 104\n    handleElement(debugID, element);                                                                                   // 105\n  },                                                                                                                   // 106\n  onBeforeUpdateComponent: function (debugID, element) {                                                               // 107\n    handleElement(debugID, element);                                                                                   // 108\n  }                                                                                                                    // 109\n};                                                                                                                     // 110\n                                                                                                                       // 111\nmodule.exports = ReactDOMUnknownPropertyHook;                                                                          // 112\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMNullInputValuePropHook.js\":[\"./ReactComponentTreeHook\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMNullInputValuePropHook.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMNullInputValuePropHook                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactComponentTreeHook = require('./ReactComponentTreeHook');                                                      // 14\n                                                                                                                       // 15\nvar warning = require('fbjs/lib/warning');                                                                             // 16\n                                                                                                                       // 17\nvar didWarnValueNull = false;                                                                                          // 18\n                                                                                                                       // 19\nfunction handleElement(debugID, element) {                                                                             // 20\n  if (element == null) {                                                                                               // 21\n    return;                                                                                                            // 22\n  }                                                                                                                    // 23\n  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {                          // 24\n    return;                                                                                                            // 25\n  }                                                                                                                    // 26\n  if (element.props != null && element.props.value === null && !didWarnValueNull) {                                    // 27\n    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n                                                                                                                       // 29\n    didWarnValueNull = true;                                                                                           // 30\n  }                                                                                                                    // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nvar ReactDOMNullInputValuePropHook = {                                                                                 // 34\n  onBeforeMountComponent: function (debugID, element) {                                                                // 35\n    handleElement(debugID, element);                                                                                   // 36\n  },                                                                                                                   // 37\n  onBeforeUpdateComponent: function (debugID, element) {                                                               // 38\n    handleElement(debugID, element);                                                                                   // 39\n  }                                                                                                                    // 40\n};                                                                                                                     // 41\n                                                                                                                       // 42\nmodule.exports = ReactDOMNullInputValuePropHook;                                                                       // 43\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactComponentWithPureRenderMixin.js\":[\"./shallowCompare\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactComponentWithPureRenderMixin.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactComponentWithPureRenderMixin                                                                   // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar shallowCompare = require('./shallowCompare');                                                                      // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * If your React component's render function is \"pure\", e.g. it will render the                                        // 17\n * same result given the same props and state, provide this mixin for a                                                // 18\n * considerable performance boost.                                                                                     // 19\n *                                                                                                                     // 20\n * Most React components have pure render functions.                                                                   // 21\n *                                                                                                                     // 22\n * Example:                                                                                                            // 23\n *                                                                                                                     // 24\n *   var ReactComponentWithPureRenderMixin =                                                                           // 25\n *     require('ReactComponentWithPureRenderMixin');                                                                   // 26\n *   React.createClass({                                                                                               // 27\n *     mixins: [ReactComponentWithPureRenderMixin],                                                                    // 28\n *                                                                                                                     // 29\n *     render: function() {                                                                                            // 30\n *       return <div className={this.props.className}>foo</div>;                                                       // 31\n *     }                                                                                                               // 32\n *   });                                                                                                               // 33\n *                                                                                                                     // 34\n * Note: This only checks shallow equality for props and state. If these contain                                       // 35\n * complex data structures this mixin may have false-negatives for deeper                                              // 36\n * differences. Only mixin to components which have simple props and state, or                                         // 37\n * use `forceUpdate()` when you know deep data structures have changed.                                                // 38\n *                                                                                                                     // 39\n * See https://facebook.github.io/react/docs/pure-render-mixin.html                                                    // 40\n */                                                                                                                    // 41\nvar ReactComponentWithPureRenderMixin = {                                                                              // 42\n  shouldComponentUpdate: function (nextProps, nextState) {                                                             // 43\n    return shallowCompare(this, nextProps, nextState);                                                                 // 44\n  }                                                                                                                    // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\nmodule.exports = ReactComponentWithPureRenderMixin;                                                                    // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"shallowCompare.js\":[\"fbjs/lib/shallowEqual\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/shallowCompare.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n* @providesModule shallowCompare                                                                                       // 9\n*/                                                                                                                     // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar shallowEqual = require('fbjs/lib/shallowEqual');                                                                   // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Does a shallow comparison for props and state.                                                                      // 17\n * See ReactComponentWithPureRenderMixin                                                                               // 18\n * See also https://facebook.github.io/react/docs/shallow-compare.html                                                 // 19\n */                                                                                                                    // 20\nfunction shallowCompare(instance, nextProps, nextState) {                                                              // 21\n  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);                         // 22\n}                                                                                                                      // 23\n                                                                                                                       // 24\nmodule.exports = shallowCompare;                                                                                       // 25\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"object-assign\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/object-assign/package.json                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"object-assign\";                                                                                        // 1\nexports.version = \"4.1.0\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/object-assign/index.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n/* eslint-disable no-unused-vars */                                                                                    // 2\nvar hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 3\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;                                                          // 4\n                                                                                                                       // 5\nfunction toObject(val) {                                                                                               // 6\n\tif (val === null || val === undefined) {                                                                              // 7\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');                                        // 8\n\t}                                                                                                                     // 9\n                                                                                                                       // 10\n\treturn Object(val);                                                                                                   // 11\n}                                                                                                                      // 12\n                                                                                                                       // 13\nfunction shouldUseNative() {                                                                                           // 14\n\ttry {                                                                                                                 // 15\n\t\tif (!Object.assign) {                                                                                                // 16\n\t\t\treturn false;                                                                                                       // 17\n\t\t}                                                                                                                    // 18\n                                                                                                                       // 19\n\t\t// Detect buggy property enumeration order in older V8 versions.                                                     // 20\n                                                                                                                       // 21\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118                                                              // 22\n\t\tvar test1 = new String('abc');  // eslint-disable-line                                                               // 23\n\t\ttest1[5] = 'de';                                                                                                     // 24\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {                                                                  // 25\n\t\t\treturn false;                                                                                                       // 26\n\t\t}                                                                                                                    // 27\n                                                                                                                       // 28\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056                                                              // 29\n\t\tvar test2 = {};                                                                                                      // 30\n\t\tfor (var i = 0; i < 10; i++) {                                                                                       // 31\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;                                                                            // 32\n\t\t}                                                                                                                    // 33\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {                                                    // 34\n\t\t\treturn test2[n];                                                                                                    // 35\n\t\t});                                                                                                                  // 36\n\t\tif (order2.join('') !== '0123456789') {                                                                              // 37\n\t\t\treturn false;                                                                                                       // 38\n\t\t}                                                                                                                    // 39\n                                                                                                                       // 40\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056                                                              // 41\n\t\tvar test3 = {};                                                                                                      // 42\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {                                                         // 43\n\t\t\ttest3[letter] = letter;                                                                                             // 44\n\t\t});                                                                                                                  // 45\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==                                                               // 46\n\t\t\t\t'abcdefghijklmnopqrst') {                                                                                          // 47\n\t\t\treturn false;                                                                                                       // 48\n\t\t}                                                                                                                    // 49\n                                                                                                                       // 50\n\t\treturn true;                                                                                                         // 51\n\t} catch (e) {                                                                                                         // 52\n\t\t// We don't expect any of the above to throw, but better to be safe.                                                 // 53\n\t\treturn false;                                                                                                        // 54\n\t}                                                                                                                     // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {                                       // 58\n\tvar from;                                                                                                             // 59\n\tvar to = toObject(target);                                                                                            // 60\n\tvar symbols;                                                                                                          // 61\n                                                                                                                       // 62\n\tfor (var s = 1; s < arguments.length; s++) {                                                                          // 63\n\t\tfrom = Object(arguments[s]);                                                                                         // 64\n                                                                                                                       // 65\n\t\tfor (var key in from) {                                                                                              // 66\n\t\t\tif (hasOwnProperty.call(from, key)) {                                                                               // 67\n\t\t\t\tto[key] = from[key];                                                                                               // 68\n\t\t\t}                                                                                                                   // 69\n\t\t}                                                                                                                    // 70\n                                                                                                                       // 71\n\t\tif (Object.getOwnPropertySymbols) {                                                                                  // 72\n\t\t\tsymbols = Object.getOwnPropertySymbols(from);                                                                       // 73\n\t\t\tfor (var i = 0; i < symbols.length; i++) {                                                                          // 74\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {                                                                     // 75\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];                                                                                // 76\n\t\t\t\t}                                                                                                                  // 77\n\t\t\t}                                                                                                                   // 78\n\t\t}                                                                                                                    // 79\n\t}                                                                                                                     // 80\n                                                                                                                       // 81\n\treturn to;                                                                                                            // 82\n};                                                                                                                     // 83\n                                                                                                                       // 84\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"fbjs\":{\"lib\":{\"invariant.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/invariant.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Use invariant() to assert state which your program assumes to be true.                                              // 14\n *                                                                                                                     // 15\n * Provide sprintf-style format (only %s is supported) and arguments                                                   // 16\n * to provide information about what broke and what you were                                                           // 17\n * expecting.                                                                                                          // 18\n *                                                                                                                     // 19\n * The invariant message will be stripped in production, but the invariant                                             // 20\n * will remain to ensure logic does not differ in production.                                                          // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\nfunction invariant(condition, format, a, b, c, d, e, f) {                                                              // 24\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 25\n    if (format === undefined) {                                                                                        // 26\n      throw new Error('invariant requires an error message argument');                                                 // 27\n    }                                                                                                                  // 28\n  }                                                                                                                    // 29\n                                                                                                                       // 30\n  if (!condition) {                                                                                                    // 31\n    var error;                                                                                                         // 32\n    if (format === undefined) {                                                                                        // 33\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {                                                                                                           // 35\n      var args = [a, b, c, d, e, f];                                                                                   // 36\n      var argIndex = 0;                                                                                                // 37\n      error = new Error(format.replace(/%s/g, function () {                                                            // 38\n        return args[argIndex++];                                                                                       // 39\n      }));                                                                                                             // 40\n      error.name = 'Invariant Violation';                                                                              // 41\n    }                                                                                                                  // 42\n                                                                                                                       // 43\n    error.framesToPop = 1; // we don't care about invariant's own frame                                                // 44\n    throw error;                                                                                                       // 45\n  }                                                                                                                    // 46\n}                                                                                                                      // 47\n                                                                                                                       // 48\nmodule.exports = invariant;                                                                                            // 49\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"warning.js\":[\"./emptyFunction\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/warning.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar emptyFunction = require('./emptyFunction');                                                                        // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Similar to invariant but only logs a warning if the condition is not met.                                           // 16\n * This can be used to log issues in development environments in critical                                              // 17\n * paths. Removing the logging code for production environments will keep the                                          // 18\n * same logic and follow the same code paths.                                                                          // 19\n */                                                                                                                    // 20\n                                                                                                                       // 21\nvar warning = emptyFunction;                                                                                           // 22\n                                                                                                                       // 23\nif (process.env.NODE_ENV !== 'production') {                                                                           // 24\n  (function () {                                                                                                       // 25\n    var printWarning = function printWarning(format) {                                                                 // 26\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {        // 27\n        args[_key - 1] = arguments[_key];                                                                              // 28\n      }                                                                                                                // 29\n                                                                                                                       // 30\n      var argIndex = 0;                                                                                                // 31\n      var message = 'Warning: ' + format.replace(/%s/g, function () {                                                  // 32\n        return args[argIndex++];                                                                                       // 33\n      });                                                                                                              // 34\n      if (typeof console !== 'undefined') {                                                                            // 35\n        console.error(message);                                                                                        // 36\n      }                                                                                                                // 37\n      try {                                                                                                            // 38\n        // --- Welcome to debugging React ---                                                                          // 39\n        // This error was thrown as a convenience so that you can use this stack                                       // 40\n        // to find the callsite that caused this warning to fire.                                                      // 41\n        throw new Error(message);                                                                                      // 42\n      } catch (x) {}                                                                                                   // 43\n    };                                                                                                                 // 44\n                                                                                                                       // 45\n    warning = function warning(condition, format) {                                                                    // 46\n      if (format === undefined) {                                                                                      // 47\n        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');             // 48\n      }                                                                                                                // 49\n                                                                                                                       // 50\n      if (format.indexOf('Failed Composite propType: ') === 0) {                                                       // 51\n        return; // Ignore CompositeComponent proptype check.                                                           // 52\n      }                                                                                                                // 53\n                                                                                                                       // 54\n      if (!condition) {                                                                                                // 55\n        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n          args[_key2 - 2] = arguments[_key2];                                                                          // 57\n        }                                                                                                              // 58\n                                                                                                                       // 59\n        printWarning.apply(undefined, [format].concat(args));                                                          // 60\n      }                                                                                                                // 61\n    };                                                                                                                 // 62\n  })();                                                                                                                // 63\n}                                                                                                                      // 64\n                                                                                                                       // 65\nmodule.exports = warning;                                                                                              // 66\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"emptyFunction.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/emptyFunction.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n *                                                                                                                     // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nfunction makeEmptyFunction(arg) {                                                                                      // 14\n  return function () {                                                                                                 // 15\n    return arg;                                                                                                        // 16\n  };                                                                                                                   // 17\n}                                                                                                                      // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * This function accepts and discards inputs; it has no side effects. This is                                          // 21\n * primarily useful idiomatically for overridable function endpoints which                                             // 22\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.                                             // 23\n */                                                                                                                    // 24\nvar emptyFunction = function emptyFunction() {};                                                                       // 25\n                                                                                                                       // 26\nemptyFunction.thatReturns = makeEmptyFunction;                                                                         // 27\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);                                                             // 28\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);                                                               // 29\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);                                                               // 30\nemptyFunction.thatReturnsThis = function () {                                                                          // 31\n  return this;                                                                                                         // 32\n};                                                                                                                     // 33\nemptyFunction.thatReturnsArgument = function (arg) {                                                                   // 34\n  return arg;                                                                                                          // 35\n};                                                                                                                     // 36\n                                                                                                                       // 37\nmodule.exports = emptyFunction;                                                                                        // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"emptyObject.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/emptyObject.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar emptyObject = {};                                                                                                  // 13\n                                                                                                                       // 14\nif (process.env.NODE_ENV !== 'production') {                                                                           // 15\n  Object.freeze(emptyObject);                                                                                          // 16\n}                                                                                                                      // 17\n                                                                                                                       // 18\nmodule.exports = emptyObject;                                                                                          // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"keyMirror.js\":[\"./invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/keyMirror.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @typechecks static-only                                                                                             // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar invariant = require('./invariant');                                                                                // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Constructs an enumeration with keys equal to their value.                                                           // 17\n *                                                                                                                     // 18\n * For example:                                                                                                        // 19\n *                                                                                                                     // 20\n *   var COLORS = keyMirror({blue: null, red: null});                                                                  // 21\n *   var myColor = COLORS.blue;                                                                                        // 22\n *   var isColorValid = !!COLORS[myColor];                                                                             // 23\n *                                                                                                                     // 24\n * The last line could not be performed if the values of the generated enum were                                       // 25\n * not equal to their keys.                                                                                            // 26\n *                                                                                                                     // 27\n *   Input:  {key1: val1, key2: val2}                                                                                  // 28\n *   Output: {key1: key1, key2: key2}                                                                                  // 29\n *                                                                                                                     // 30\n * @param {object} obj                                                                                                 // 31\n * @return {object}                                                                                                    // 32\n */                                                                                                                    // 33\nvar keyMirror = function keyMirror(obj) {                                                                              // 34\n  var ret = {};                                                                                                        // 35\n  var key;                                                                                                             // 36\n  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;\n  for (key in obj) {                                                                                                   // 38\n    if (!obj.hasOwnProperty(key)) {                                                                                    // 39\n      continue;                                                                                                        // 40\n    }                                                                                                                  // 41\n    ret[key] = key;                                                                                                    // 42\n  }                                                                                                                    // 43\n  return ret;                                                                                                          // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\nmodule.exports = keyMirror;                                                                                            // 47\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"keyOf.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/keyOf.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Allows extraction of a minified key. Let's the build system minify keys                                             // 14\n * without losing the ability to dynamically use key strings as values                                                 // 15\n * themselves. Pass in an object with a single key/val pair and it will return                                         // 16\n * you the string key of that single record. Suppose you want to grab the                                              // 17\n * value for a key 'className' inside of an object. Key/val minification may                                           // 18\n * have aliased that key to be 'xa12'. keyOf({className: null}) will return                                            // 19\n * 'xa12' in that case. Resolve keys you want to use once at startup time, then                                        // 20\n * reuse those resolutions.                                                                                            // 21\n */                                                                                                                    // 22\nvar keyOf = function keyOf(oneKeyObj) {                                                                                // 23\n  var key;                                                                                                             // 24\n  for (key in oneKeyObj) {                                                                                             // 25\n    if (!oneKeyObj.hasOwnProperty(key)) {                                                                              // 26\n      continue;                                                                                                        // 27\n    }                                                                                                                  // 28\n    return key;                                                                                                        // 29\n  }                                                                                                                    // 30\n  return null;                                                                                                         // 31\n};                                                                                                                     // 32\n                                                                                                                       // 33\nmodule.exports = keyOf;                                                                                                // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ExecutionEnvironment.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/ExecutionEnvironment.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);                 // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Simple, lightweight module assisting with the detection and context of                                              // 16\n * Worker. Helps avoid circular dependencies and allows code to reason about                                           // 17\n * whether or not they are in a Worker, even if they never include the main                                            // 18\n * `ReactWorker` dependency.                                                                                           // 19\n */                                                                                                                    // 20\nvar ExecutionEnvironment = {                                                                                           // 21\n                                                                                                                       // 22\n  canUseDOM: canUseDOM,                                                                                                // 23\n                                                                                                                       // 24\n  canUseWorkers: typeof Worker !== 'undefined',                                                                        // 25\n                                                                                                                       // 26\n  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),                                // 27\n                                                                                                                       // 28\n  canUseViewport: canUseDOM && !!window.screen,                                                                        // 29\n                                                                                                                       // 30\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.                                        // 31\n                                                                                                                       // 32\n};                                                                                                                     // 33\n                                                                                                                       // 34\nmodule.exports = ExecutionEnvironment;                                                                                 // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"performanceNow.js\":[\"./performance\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/performanceNow.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nvar performance = require('./performance');                                                                            // 14\n                                                                                                                       // 15\nvar performanceNow;                                                                                                    // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Detect if we can use `window.performance.now()` and gracefully fallback to                                          // 19\n * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now                                           // 20\n * because of Facebook's testing infrastructure.                                                                       // 21\n */                                                                                                                    // 22\nif (performance.now) {                                                                                                 // 23\n  performanceNow = function performanceNow() {                                                                         // 24\n    return performance.now();                                                                                          // 25\n  };                                                                                                                   // 26\n} else {                                                                                                               // 27\n  performanceNow = function performanceNow() {                                                                         // 28\n    return Date.now();                                                                                                 // 29\n  };                                                                                                                   // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nmodule.exports = performanceNow;                                                                                       // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"performance.js\":[\"./ExecutionEnvironment\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/performance.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @typechecks                                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ExecutionEnvironment = require('./ExecutionEnvironment');                                                          // 14\n                                                                                                                       // 15\nvar performance;                                                                                                       // 16\n                                                                                                                       // 17\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 18\n  performance = window.performance || window.msPerformance || window.webkitPerformance;                                // 19\n}                                                                                                                      // 20\n                                                                                                                       // 21\nmodule.exports = performance || {};                                                                                    // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"createNodesFromMarkup.js\":[\"./ExecutionEnvironment\",\"./createArrayFromMixed\",\"./getMarkupWrap\",\"./invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/createNodesFromMarkup.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\n/*eslint-disable fb-www/unsafe-html*/                                                                                  // 14\n                                                                                                                       // 15\nvar ExecutionEnvironment = require('./ExecutionEnvironment');                                                          // 16\n                                                                                                                       // 17\nvar createArrayFromMixed = require('./createArrayFromMixed');                                                          // 18\nvar getMarkupWrap = require('./getMarkupWrap');                                                                        // 19\nvar invariant = require('./invariant');                                                                                // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Dummy container used to render all markup.                                                                          // 23\n */                                                                                                                    // 24\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;                                 // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * Pattern used by `getNodeName`.                                                                                      // 28\n */                                                                                                                    // 29\nvar nodeNamePattern = /^\\s*<(\\w+)/;                                                                                    // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Extracts the `nodeName` of the first element in a string of markup.                                                 // 33\n *                                                                                                                     // 34\n * @param {string} markup String of markup.                                                                            // 35\n * @return {?string} Node name of the supplied markup.                                                                 // 36\n */                                                                                                                    // 37\nfunction getNodeName(markup) {                                                                                         // 38\n  var nodeNameMatch = markup.match(nodeNamePattern);                                                                   // 39\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();                                                              // 40\n}                                                                                                                      // 41\n                                                                                                                       // 42\n/**                                                                                                                    // 43\n * Creates an array containing the nodes rendered from the supplied markup. The                                        // 44\n * optionally supplied `handleScript` function will be invoked once for each                                           // 45\n * <script> element that is rendered. If no `handleScript` function is supplied,                                       // 46\n * an exception is thrown if any <script> elements are rendered.                                                       // 47\n *                                                                                                                     // 48\n * @param {string} markup A string of valid HTML markup.                                                               // 49\n * @param {?function} handleScript Invoked once for each rendered <script>.                                            // 50\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.                                                 // 51\n */                                                                                                                    // 52\nfunction createNodesFromMarkup(markup, handleScript) {                                                                 // 53\n  var node = dummyNode;                                                                                                // 54\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;\n  var nodeName = getNodeName(markup);                                                                                  // 56\n                                                                                                                       // 57\n  var wrap = nodeName && getMarkupWrap(nodeName);                                                                      // 58\n  if (wrap) {                                                                                                          // 59\n    node.innerHTML = wrap[1] + markup + wrap[2];                                                                       // 60\n                                                                                                                       // 61\n    var wrapDepth = wrap[0];                                                                                           // 62\n    while (wrapDepth--) {                                                                                              // 63\n      node = node.lastChild;                                                                                           // 64\n    }                                                                                                                  // 65\n  } else {                                                                                                             // 66\n    node.innerHTML = markup;                                                                                           // 67\n  }                                                                                                                    // 68\n                                                                                                                       // 69\n  var scripts = node.getElementsByTagName('script');                                                                   // 70\n  if (scripts.length) {                                                                                                // 71\n    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;\n    createArrayFromMixed(scripts).forEach(handleScript);                                                               // 73\n  }                                                                                                                    // 74\n                                                                                                                       // 75\n  var nodes = Array.from(node.childNodes);                                                                             // 76\n  while (node.lastChild) {                                                                                             // 77\n    node.removeChild(node.lastChild);                                                                                  // 78\n  }                                                                                                                    // 79\n  return nodes;                                                                                                        // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\nmodule.exports = createNodesFromMarkup;                                                                                // 83\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"createArrayFromMixed.js\":[\"./invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/createArrayFromMixed.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nvar invariant = require('./invariant');                                                                                // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Convert array-like objects to arrays.                                                                               // 17\n *                                                                                                                     // 18\n * This API assumes the caller knows the contents of the data type. For less                                           // 19\n * well defined inputs use createArrayFromMixed.                                                                       // 20\n *                                                                                                                     // 21\n * @param {object|function|filelist} obj                                                                               // 22\n * @return {array}                                                                                                     // 23\n */                                                                                                                    // 24\nfunction toArray(obj) {                                                                                                // 25\n  var length = obj.length;                                                                                             // 26\n                                                                                                                       // 27\n  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList                                         // 28\n  // in old versions of Safari).                                                                                       // 29\n  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;\n                                                                                                                       // 31\n  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;\n                                                                                                                       // 33\n  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;\n                                                                                                                       // 35\n  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;\n                                                                                                                       // 37\n  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs                                           // 38\n  // without method will throw during the slice call and skip straight to the                                          // 39\n  // fallback.                                                                                                         // 40\n  if (obj.hasOwnProperty) {                                                                                            // 41\n    try {                                                                                                              // 42\n      return Array.prototype.slice.call(obj);                                                                          // 43\n    } catch (e) {                                                                                                      // 44\n      // IE < 9 does not support Array#slice on collections objects                                                    // 45\n    }                                                                                                                  // 46\n  }                                                                                                                    // 47\n                                                                                                                       // 48\n  // Fall back to copying key by key. This assumes all keys have a value,                                              // 49\n  // so will not preserve sparsely populated inputs.                                                                   // 50\n  var ret = Array(length);                                                                                             // 51\n  for (var ii = 0; ii < length; ii++) {                                                                                // 52\n    ret[ii] = obj[ii];                                                                                                 // 53\n  }                                                                                                                    // 54\n  return ret;                                                                                                          // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\n/**                                                                                                                    // 58\n * Perform a heuristic test to determine if an object is \"array-like\".                                                 // 59\n *                                                                                                                     // 60\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"                                                      // 61\n *   Joshu replied: \"Mu.\"                                                                                              // 62\n *                                                                                                                     // 63\n * This function determines if its argument has \"array nature\": it returns                                             // 64\n * true if the argument is an actual array, an `arguments' object, or an                                               // 65\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).                                               // 66\n *                                                                                                                     // 67\n * It will return false for other array-like objects like Filelist.                                                    // 68\n *                                                                                                                     // 69\n * @param {*} obj                                                                                                      // 70\n * @return {boolean}                                                                                                   // 71\n */                                                                                                                    // 72\nfunction hasArrayNature(obj) {                                                                                         // 73\n  return (                                                                                                             // 74\n    // not null/false                                                                                                  // 75\n    !!obj && (                                                                                                         // 76\n    // arrays are objects, NodeLists are functions in Safari                                                           // 77\n    typeof obj == 'object' || typeof obj == 'function') &&                                                             // 78\n    // quacks like an array                                                                                            // 79\n    'length' in obj &&                                                                                                 // 80\n    // not window                                                                                                      // 81\n    !('setInterval' in obj) &&                                                                                         // 82\n    // no DOM node should be considered an array-like                                                                  // 83\n    // a 'select' element has 'length' and 'item' properties on IE8                                                    // 84\n    typeof obj.nodeType != 'number' && (                                                                               // 85\n    // a real array                                                                                                    // 86\n    Array.isArray(obj) ||                                                                                              // 87\n    // arguments                                                                                                       // 88\n    'callee' in obj ||                                                                                                 // 89\n    // HTMLCollection/NodeList                                                                                         // 90\n    'item' in obj)                                                                                                     // 91\n  );                                                                                                                   // 92\n}                                                                                                                      // 93\n                                                                                                                       // 94\n/**                                                                                                                    // 95\n * Ensure that the argument is an array by wrapping it in an array if it is not.                                       // 96\n * Creates a copy of the argument if it is already an array.                                                           // 97\n *                                                                                                                     // 98\n * This is mostly useful idiomatically:                                                                                // 99\n *                                                                                                                     // 100\n *   var createArrayFromMixed = require('createArrayFromMixed');                                                       // 101\n *                                                                                                                     // 102\n *   function takesOneOrMoreThings(things) {                                                                           // 103\n *     things = createArrayFromMixed(things);                                                                          // 104\n *     ...                                                                                                             // 105\n *   }                                                                                                                 // 106\n *                                                                                                                     // 107\n * This allows you to treat `things' as an array, but accept scalars in the API.                                       // 108\n *                                                                                                                     // 109\n * If you need to convert an array-like object, like `arguments`, into an array                                        // 110\n * use toArray instead.                                                                                                // 111\n *                                                                                                                     // 112\n * @param {*} obj                                                                                                      // 113\n * @return {array}                                                                                                     // 114\n */                                                                                                                    // 115\nfunction createArrayFromMixed(obj) {                                                                                   // 116\n  if (!hasArrayNature(obj)) {                                                                                          // 117\n    return [obj];                                                                                                      // 118\n  } else if (Array.isArray(obj)) {                                                                                     // 119\n    return obj.slice();                                                                                                // 120\n  } else {                                                                                                             // 121\n    return toArray(obj);                                                                                               // 122\n  }                                                                                                                    // 123\n}                                                                                                                      // 124\n                                                                                                                       // 125\nmodule.exports = createArrayFromMixed;                                                                                 // 126\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getMarkupWrap.js\":[\"./ExecutionEnvironment\",\"./invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/getMarkupWrap.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n/*eslint-disable fb-www/unsafe-html */                                                                                 // 13\n                                                                                                                       // 14\nvar ExecutionEnvironment = require('./ExecutionEnvironment');                                                          // 15\n                                                                                                                       // 16\nvar invariant = require('./invariant');                                                                                // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Dummy container used to detect which wraps are necessary.                                                           // 20\n */                                                                                                                    // 21\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;                                 // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Some browsers cannot use `innerHTML` to render certain elements standalone,                                         // 25\n * so we wrap them, render the wrapped nodes, then extract the desired node.                                           // 26\n *                                                                                                                     // 27\n * In IE8, certain elements cannot render alone, so wrap all elements ('*').                                           // 28\n */                                                                                                                    // 29\n                                                                                                                       // 30\nvar shouldWrap = {};                                                                                                   // 31\n                                                                                                                       // 32\nvar selectWrap = [1, '<select multiple=\"true\">', '</select>'];                                                         // 33\nvar tableWrap = [1, '<table>', '</table>'];                                                                            // 34\nvar trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];                                                       // 35\n                                                                                                                       // 36\nvar svgWrap = [1, '<svg xmlns=\"http://www.w3.org/2000/svg\">', '</svg>'];                                               // 37\n                                                                                                                       // 38\nvar markupWrap = {                                                                                                     // 39\n  '*': [1, '?<div>', '</div>'],                                                                                        // 40\n                                                                                                                       // 41\n  'area': [1, '<map>', '</map>'],                                                                                      // 42\n  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],                                               // 43\n  'legend': [1, '<fieldset>', '</fieldset>'],                                                                          // 44\n  'param': [1, '<object>', '</object>'],                                                                               // 45\n  'tr': [2, '<table><tbody>', '</tbody></table>'],                                                                     // 46\n                                                                                                                       // 47\n  'optgroup': selectWrap,                                                                                              // 48\n  'option': selectWrap,                                                                                                // 49\n                                                                                                                       // 50\n  'caption': tableWrap,                                                                                                // 51\n  'colgroup': tableWrap,                                                                                               // 52\n  'tbody': tableWrap,                                                                                                  // 53\n  'tfoot': tableWrap,                                                                                                  // 54\n  'thead': tableWrap,                                                                                                  // 55\n                                                                                                                       // 56\n  'td': trWrap,                                                                                                        // 57\n  'th': trWrap                                                                                                         // 58\n};                                                                                                                     // 59\n                                                                                                                       // 60\n// Initialize the SVG elements since we know they'll always need to be wrapped                                         // 61\n// consistently. If they are created inside a <div> they will be initialized in                                        // 62\n// the wrong namespace (and will not display).                                                                         // 63\nvar svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];\nsvgElements.forEach(function (nodeName) {                                                                              // 65\n  markupWrap[nodeName] = svgWrap;                                                                                      // 66\n  shouldWrap[nodeName] = true;                                                                                         // 67\n});                                                                                                                    // 68\n                                                                                                                       // 69\n/**                                                                                                                    // 70\n * Gets the markup wrap configuration for the supplied `nodeName`.                                                     // 71\n *                                                                                                                     // 72\n * NOTE: This lazily detects which wraps are necessary for the current browser.                                        // 73\n *                                                                                                                     // 74\n * @param {string} nodeName Lowercase `nodeName`.                                                                      // 75\n * @return {?array} Markup wrap configuration, if applicable.                                                          // 76\n */                                                                                                                    // 77\nfunction getMarkupWrap(nodeName) {                                                                                     // 78\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;\n  if (!markupWrap.hasOwnProperty(nodeName)) {                                                                          // 80\n    nodeName = '*';                                                                                                    // 81\n  }                                                                                                                    // 82\n  if (!shouldWrap.hasOwnProperty(nodeName)) {                                                                          // 83\n    if (nodeName === '*') {                                                                                            // 84\n      dummyNode.innerHTML = '<link />';                                                                                // 85\n    } else {                                                                                                           // 86\n      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';                                                   // 87\n    }                                                                                                                  // 88\n    shouldWrap[nodeName] = !dummyNode.firstChild;                                                                      // 89\n  }                                                                                                                    // 90\n  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;                                                           // 91\n}                                                                                                                      // 92\n                                                                                                                       // 93\nmodule.exports = getMarkupWrap;                                                                                        // 94\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"focusNode.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/focusNode.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * @param {DOMElement} node input/textarea to focus                                                                    // 14\n */                                                                                                                    // 15\n                                                                                                                       // 16\nfunction focusNode(node) {                                                                                             // 17\n  // IE8 can throw \"Can't move focus to the control because it is invisible,                                           // 18\n  // not enabled, or of a type that does not accept the focus.\" for all kinds of                                       // 19\n  // reasons that are too expensive and fragile to test.                                                               // 20\n  try {                                                                                                                // 21\n    node.focus();                                                                                                      // 22\n  } catch (e) {}                                                                                                       // 23\n}                                                                                                                      // 24\n                                                                                                                       // 25\nmodule.exports = focusNode;                                                                                            // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"camelizeStyleName.js\":[\"./camelize\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/camelizeStyleName.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @typechecks                                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar camelize = require('./camelize');                                                                                  // 14\n                                                                                                                       // 15\nvar msPattern = /^-ms-/;                                                                                               // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Camelcases a hyphenated CSS property name, for example:                                                             // 19\n *                                                                                                                     // 20\n *   > camelizeStyleName('background-color')                                                                           // 21\n *   < \"backgroundColor\"                                                                                               // 22\n *   > camelizeStyleName('-moz-transition')                                                                            // 23\n *   < \"MozTransition\"                                                                                                 // 24\n *   > camelizeStyleName('-ms-transition')                                                                             // 25\n *   < \"msTransition\"                                                                                                  // 26\n *                                                                                                                     // 27\n * As Andi Smith suggests                                                                                              // 28\n * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix                                        // 29\n * is converted to lowercase `ms`.                                                                                     // 30\n *                                                                                                                     // 31\n * @param {string} string                                                                                              // 32\n * @return {string}                                                                                                    // 33\n */                                                                                                                    // 34\nfunction camelizeStyleName(string) {                                                                                   // 35\n  return camelize(string.replace(msPattern, 'ms-'));                                                                   // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\nmodule.exports = camelizeStyleName;                                                                                    // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"camelize.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/camelize.js                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nvar _hyphenPattern = /-(.)/g;                                                                                          // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Camelcases a hyphenated string, for example:                                                                        // 17\n *                                                                                                                     // 18\n *   > camelize('background-color')                                                                                    // 19\n *   < \"backgroundColor\"                                                                                               // 20\n *                                                                                                                     // 21\n * @param {string} string                                                                                              // 22\n * @return {string}                                                                                                    // 23\n */                                                                                                                    // 24\nfunction camelize(string) {                                                                                            // 25\n  return string.replace(_hyphenPattern, function (_, character) {                                                      // 26\n    return character.toUpperCase();                                                                                    // 27\n  });                                                                                                                  // 28\n}                                                                                                                      // 29\n                                                                                                                       // 30\nmodule.exports = camelize;                                                                                             // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hyphenateStyleName.js\":[\"./hyphenate\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/hyphenateStyleName.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @typechecks                                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar hyphenate = require('./hyphenate');                                                                                // 14\n                                                                                                                       // 15\nvar msPattern = /^ms-/;                                                                                                // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Hyphenates a camelcased CSS property name, for example:                                                             // 19\n *                                                                                                                     // 20\n *   > hyphenateStyleName('backgroundColor')                                                                           // 21\n *   < \"background-color\"                                                                                              // 22\n *   > hyphenateStyleName('MozTransition')                                                                             // 23\n *   < \"-moz-transition\"                                                                                               // 24\n *   > hyphenateStyleName('msTransition')                                                                              // 25\n *   < \"-ms-transition\"                                                                                                // 26\n *                                                                                                                     // 27\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix                                         // 28\n * is converted to `-ms-`.                                                                                             // 29\n *                                                                                                                     // 30\n * @param {string} string                                                                                              // 31\n * @return {string}                                                                                                    // 32\n */                                                                                                                    // 33\nfunction hyphenateStyleName(string) {                                                                                  // 34\n  return hyphenate(string).replace(msPattern, '-ms-');                                                                 // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\nmodule.exports = hyphenateStyleName;                                                                                   // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"hyphenate.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/hyphenate.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nvar _uppercasePattern = /([A-Z])/g;                                                                                    // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Hyphenates a camelcased string, for example:                                                                        // 17\n *                                                                                                                     // 18\n *   > hyphenate('backgroundColor')                                                                                    // 19\n *   < \"background-color\"                                                                                              // 20\n *                                                                                                                     // 21\n * For CSS style names, use `hyphenateStyleName` instead which works properly                                          // 22\n * with all vendor prefixes, including `ms`.                                                                           // 23\n *                                                                                                                     // 24\n * @param {string} string                                                                                              // 25\n * @return {string}                                                                                                    // 26\n */                                                                                                                    // 27\nfunction hyphenate(string) {                                                                                           // 28\n  return string.replace(_uppercasePattern, '-$1').toLowerCase();                                                       // 29\n}                                                                                                                      // 30\n                                                                                                                       // 31\nmodule.exports = hyphenate;                                                                                            // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"memoizeStringOnly.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/memoizeStringOnly.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n *                                                                                                                     // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Memoizes the return value of a function that accepts one string argument.                                           // 16\n */                                                                                                                    // 17\n                                                                                                                       // 18\nfunction memoizeStringOnly(callback) {                                                                                 // 19\n  var cache = {};                                                                                                      // 20\n  return function (string) {                                                                                           // 21\n    if (!cache.hasOwnProperty(string)) {                                                                               // 22\n      cache[string] = callback.call(this, string);                                                                     // 23\n    }                                                                                                                  // 24\n    return cache[string];                                                                                              // 25\n  };                                                                                                                   // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\nmodule.exports = memoizeStringOnly;                                                                                    // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"shallowEqual.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/shallowEqual.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @typechecks                                                                                                         // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n/*eslint-disable no-self-compare */                                                                                    // 13\n                                                                                                                       // 14\n'use strict';                                                                                                          // 15\n                                                                                                                       // 16\nvar hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * inlined Object.is polyfill to avoid requiring consumers ship their own                                              // 20\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is                          // 21\n */                                                                                                                    // 22\nfunction is(x, y) {                                                                                                    // 23\n  // SameValue algorithm                                                                                               // 24\n  if (x === y) {                                                                                                       // 25\n    // Steps 1-5, 7-10                                                                                                 // 26\n    // Steps 6.b-6.e: +0 != -0                                                                                         // 27\n    // Added the nonzero y check to make Flow happy, but it is redundant                                               // 28\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;                                                                      // 29\n  } else {                                                                                                             // 30\n    // Step 6.a: NaN == NaN                                                                                            // 31\n    return x !== x && y !== y;                                                                                         // 32\n  }                                                                                                                    // 33\n}                                                                                                                      // 34\n                                                                                                                       // 35\n/**                                                                                                                    // 36\n * Performs equality by iterating through keys on an object and returning false                                        // 37\n * when any key has values which are not strictly equal between the arguments.                                         // 38\n * Returns true when the values of all keys are strictly equal.                                                        // 39\n */                                                                                                                    // 40\nfunction shallowEqual(objA, objB) {                                                                                    // 41\n  if (is(objA, objB)) {                                                                                                // 42\n    return true;                                                                                                       // 43\n  }                                                                                                                    // 44\n                                                                                                                       // 45\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {                        // 46\n    return false;                                                                                                      // 47\n  }                                                                                                                    // 48\n                                                                                                                       // 49\n  var keysA = Object.keys(objA);                                                                                       // 50\n  var keysB = Object.keys(objB);                                                                                       // 51\n                                                                                                                       // 52\n  if (keysA.length !== keysB.length) {                                                                                 // 53\n    return false;                                                                                                      // 54\n  }                                                                                                                    // 55\n                                                                                                                       // 56\n  // Test for A's keys different from B.                                                                               // 57\n  for (var i = 0; i < keysA.length; i++) {                                                                             // 58\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {                                 // 59\n      return false;                                                                                                    // 60\n    }                                                                                                                  // 61\n  }                                                                                                                    // 62\n                                                                                                                       // 63\n  return true;                                                                                                         // 64\n}                                                                                                                      // 65\n                                                                                                                       // 66\nmodule.exports = shallowEqual;                                                                                         // 67\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"EventListener.js\":[\"./emptyFunction\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/EventListener.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n *                                                                                                                     // 5\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 6\n * you may not use this file except in compliance with the License.                                                    // 7\n * You may obtain a copy of the License at                                                                             // 8\n *                                                                                                                     // 9\n * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 10\n *                                                                                                                     // 11\n * Unless required by applicable law or agreed to in writing, software                                                 // 12\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 13\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14\n * See the License for the specific language governing permissions and                                                 // 15\n * limitations under the License.                                                                                      // 16\n *                                                                                                                     // 17\n * @typechecks                                                                                                         // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\nvar emptyFunction = require('./emptyFunction');                                                                        // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Upstream version of event listener. Does not take into account specific                                             // 24\n * nature of platform.                                                                                                 // 25\n */                                                                                                                    // 26\nvar EventListener = {                                                                                                  // 27\n  /**                                                                                                                  // 28\n   * Listen to DOM events during the bubble phase.                                                                     // 29\n   *                                                                                                                   // 30\n   * @param {DOMEventTarget} target DOM element to register listener on.                                               // 31\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.                                                // 32\n   * @param {function} callback Callback function.                                                                     // 33\n   * @return {object} Object with a `remove` method.                                                                   // 34\n   */                                                                                                                  // 35\n  listen: function listen(target, eventType, callback) {                                                               // 36\n    if (target.addEventListener) {                                                                                     // 37\n      target.addEventListener(eventType, callback, false);                                                             // 38\n      return {                                                                                                         // 39\n        remove: function remove() {                                                                                    // 40\n          target.removeEventListener(eventType, callback, false);                                                      // 41\n        }                                                                                                              // 42\n      };                                                                                                               // 43\n    } else if (target.attachEvent) {                                                                                   // 44\n      target.attachEvent('on' + eventType, callback);                                                                  // 45\n      return {                                                                                                         // 46\n        remove: function remove() {                                                                                    // 47\n          target.detachEvent('on' + eventType, callback);                                                              // 48\n        }                                                                                                              // 49\n      };                                                                                                               // 50\n    }                                                                                                                  // 51\n  },                                                                                                                   // 52\n                                                                                                                       // 53\n  /**                                                                                                                  // 54\n   * Listen to DOM events during the capture phase.                                                                    // 55\n   *                                                                                                                   // 56\n   * @param {DOMEventTarget} target DOM element to register listener on.                                               // 57\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.                                                // 58\n   * @param {function} callback Callback function.                                                                     // 59\n   * @return {object} Object with a `remove` method.                                                                   // 60\n   */                                                                                                                  // 61\n  capture: function capture(target, eventType, callback) {                                                             // 62\n    if (target.addEventListener) {                                                                                     // 63\n      target.addEventListener(eventType, callback, true);                                                              // 64\n      return {                                                                                                         // 65\n        remove: function remove() {                                                                                    // 66\n          target.removeEventListener(eventType, callback, true);                                                       // 67\n        }                                                                                                              // 68\n      };                                                                                                               // 69\n    } else {                                                                                                           // 70\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 71\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\n      }                                                                                                                // 73\n      return {                                                                                                         // 74\n        remove: emptyFunction                                                                                          // 75\n      };                                                                                                               // 76\n    }                                                                                                                  // 77\n  },                                                                                                                   // 78\n                                                                                                                       // 79\n  registerDefault: function registerDefault() {}                                                                       // 80\n};                                                                                                                     // 81\n                                                                                                                       // 82\nmodule.exports = EventListener;                                                                                        // 83\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getUnboundedScrollPosition.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/getUnboundedScrollPosition.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @typechecks                                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Gets the scroll position of the supplied element or window.                                                         // 15\n *                                                                                                                     // 16\n * The return values are unbounded, unlike `getScrollPosition`. This means they                                        // 17\n * may be negative or exceed the element boundaries (which is possible using                                           // 18\n * inertial scrolling).                                                                                                // 19\n *                                                                                                                     // 20\n * @param {DOMWindow|DOMElement} scrollable                                                                            // 21\n * @return {object} Map with `x` and `y` keys.                                                                         // 22\n */                                                                                                                    // 23\n                                                                                                                       // 24\nfunction getUnboundedScrollPosition(scrollable) {                                                                      // 25\n  if (scrollable === window) {                                                                                         // 26\n    return {                                                                                                           // 27\n      x: window.pageXOffset || document.documentElement.scrollLeft,                                                    // 28\n      y: window.pageYOffset || document.documentElement.scrollTop                                                      // 29\n    };                                                                                                                 // 30\n  }                                                                                                                    // 31\n  return {                                                                                                             // 32\n    x: scrollable.scrollLeft,                                                                                          // 33\n    y: scrollable.scrollTop                                                                                            // 34\n  };                                                                                                                   // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\nmodule.exports = getUnboundedScrollPosition;                                                                           // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"containsNode.js\":[\"./isTextNode\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/containsNode.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n *                                                                                                                     // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nvar isTextNode = require('./isTextNode');                                                                              // 14\n                                                                                                                       // 15\n/*eslint-disable no-bitwise */                                                                                         // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Checks if a given DOM node contains or is another DOM node.                                                         // 19\n */                                                                                                                    // 20\nfunction containsNode(outerNode, innerNode) {                                                                          // 21\n  if (!outerNode || !innerNode) {                                                                                      // 22\n    return false;                                                                                                      // 23\n  } else if (outerNode === innerNode) {                                                                                // 24\n    return true;                                                                                                       // 25\n  } else if (isTextNode(outerNode)) {                                                                                  // 26\n    return false;                                                                                                      // 27\n  } else if (isTextNode(innerNode)) {                                                                                  // 28\n    return containsNode(outerNode, innerNode.parentNode);                                                              // 29\n  } else if ('contains' in outerNode) {                                                                                // 30\n    return outerNode.contains(innerNode);                                                                              // 31\n  } else if (outerNode.compareDocumentPosition) {                                                                      // 32\n    return !!(outerNode.compareDocumentPosition(innerNode) & 16);                                                      // 33\n  } else {                                                                                                             // 34\n    return false;                                                                                                      // 35\n  }                                                                                                                    // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\nmodule.exports = containsNode;                                                                                         // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"isTextNode.js\":[\"./isNode\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/isTextNode.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nvar isNode = require('./isNode');                                                                                      // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * @param {*} object The object to check.                                                                              // 17\n * @return {boolean} Whether or not the object is a DOM text node.                                                     // 18\n */                                                                                                                    // 19\nfunction isTextNode(object) {                                                                                          // 20\n  return isNode(object) && object.nodeType == 3;                                                                       // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\nmodule.exports = isTextNode;                                                                                           // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"isNode.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/isNode.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * @param {*} object The object to check.                                                                              // 15\n * @return {boolean} Whether or not the object is a DOM node.                                                          // 16\n */                                                                                                                    // 17\nfunction isNode(object) {                                                                                              // 18\n  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));\n}                                                                                                                      // 20\n                                                                                                                       // 21\nmodule.exports = isNode;                                                                                               // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getActiveElement.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/getActiveElement.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n * @typechecks                                                                                                         // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\n/* eslint-disable fb-www/typeof-undefined */                                                                           // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Same as document.activeElement but wraps in a try-catch block. In IE it is                                          // 17\n * not safe to call document.activeElement if there is nothing focused.                                                // 18\n *                                                                                                                     // 19\n * The activeElement will be null only if the document or document body is not                                         // 20\n * yet defined.                                                                                                        // 21\n */                                                                                                                    // 22\nfunction getActiveElement() /*?DOMElement*/{                                                                           // 23\n  if (typeof document === 'undefined') {                                                                               // 24\n    return null;                                                                                                       // 25\n  }                                                                                                                    // 26\n  try {                                                                                                                // 27\n    return document.activeElement || document.body;                                                                    // 28\n  } catch (e) {                                                                                                        // 29\n    return document.body;                                                                                              // 30\n  }                                                                                                                    // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nmodule.exports = getActiveElement;                                                                                     // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"react-dom\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/package.json                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"react-dom\";                                                                                            // 1\nexports.version = \"15.3.2\";                                                                                            // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"react/lib/ReactDOM\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/index.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nmodule.exports = require('react/lib/ReactDOM');                                                                        // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"react-addons-pure-render-mixin\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-addons-pure-render-mixin/package.json                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"react-addons-pure-render-mixin\";                                                                       // 1\nexports.version = \"15.3.2\";                                                                                            // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"react/lib/ReactComponentWithPureRenderMixin\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-addons-pure-render-mixin/index.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require('react/lib/ReactComponentWithPureRenderMixin');                                               // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/modules/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.modules = exports, {\n  meteorInstall: meteorInstall,\n  Buffer: Buffer,\n  process: process\n});\n\n})();\n","servePath":"/packages/modules.js","sourceMap":{"version":3,"sources":["/packages/modules/client.js","/packages/modules/buffer.js","/packages/modules/css.js","/packages/modules/install-packages.js","/packages/modules/process.js","/packages/modules/stubs.js","node_modules/meteor/modules/node_modules/reify/lib/runtime.js","node_modules/meteor/modules/node_modules/reify/lib/entry.js","node_modules/meteor/modules/node_modules/reify/lib/utils.js","node_modules/react/package.json","node_modules/react/react.js","node_modules/react/lib/React.js","node_modules/react/lib/ReactChildren.js","node_modules/react/lib/PooledClass.js","node_modules/react/lib/reactProdInvariant.js","node_modules/react/lib/ReactElement.js","node_modules/react/lib/ReactCurrentOwner.js","node_modules/react/lib/canDefineProperty.js","node_modules/react/lib/traverseAllChildren.js","node_modules/react/lib/getIteratorFn.js","node_modules/react/lib/KeyEscapeUtils.js","node_modules/react/lib/ReactComponent.js","node_modules/react/lib/ReactNoopUpdateQueue.js","node_modules/react/lib/ReactPureComponent.js","node_modules/react/lib/ReactClass.js","node_modules/react/lib/ReactPropTypeLocations.js","node_modules/react/lib/ReactPropTypeLocationNames.js","node_modules/react/lib/ReactDOMFactories.js","node_modules/react/lib/ReactElementValidator.js","node_modules/react/lib/ReactComponentTreeHook.js","node_modules/react/lib/checkReactTypeSpec.js","node_modules/react/lib/ReactPropTypesSecret.js","node_modules/react/lib/ReactPropTypes.js","node_modules/react/lib/ReactVersion.js","node_modules/react/lib/onlyChild.js","node_modules/react/lib/ReactDOM.js","node_modules/react/lib/ReactDOMComponentTree.js","node_modules/react/lib/DOMProperty.js","node_modules/react/lib/ReactDOMComponentFlags.js","node_modules/react/lib/ReactDefaultInjection.js","node_modules/react/lib/BeforeInputEventPlugin.js","node_modules/react/lib/EventConstants.js","node_modules/react/lib/EventPropagators.js","node_modules/react/lib/EventPluginHub.js","node_modules/react/lib/EventPluginRegistry.js","node_modules/react/lib/EventPluginUtils.js","node_modules/react/lib/ReactErrorUtils.js","node_modules/react/lib/accumulateInto.js","node_modules/react/lib/forEachAccumulated.js","node_modules/react/lib/FallbackCompositionState.js","node_modules/react/lib/getTextContentAccessor.js","node_modules/react/lib/SyntheticCompositionEvent.js","node_modules/react/lib/SyntheticEvent.js","node_modules/react/lib/SyntheticInputEvent.js","node_modules/react/lib/ChangeEventPlugin.js","node_modules/react/lib/ReactUpdates.js","node_modules/react/lib/CallbackQueue.js","node_modules/react/lib/ReactFeatureFlags.js","node_modules/react/lib/ReactReconciler.js","node_modules/react/lib/ReactRef.js","node_modules/react/lib/ReactOwner.js","node_modules/react/lib/ReactInstrumentation.js","node_modules/react/lib/ReactDebugTool.js","node_modules/react/lib/ReactInvalidSetStateWarningHook.js","node_modules/react/lib/ReactHostOperationHistoryHook.js","node_modules/react/lib/ReactChildrenMutationWarningHook.js","node_modules/react/lib/Transaction.js","node_modules/react/lib/getEventTarget.js","node_modules/react/lib/isEventSupported.js","node_modules/react/lib/isTextInputElement.js","node_modules/react/lib/DefaultEventPluginOrder.js","node_modules/react/lib/EnterLeaveEventPlugin.js","node_modules/react/lib/SyntheticMouseEvent.js","node_modules/react/lib/SyntheticUIEvent.js","node_modules/react/lib/ViewportMetrics.js","node_modules/react/lib/getEventModifierState.js","node_modules/react/lib/HTMLDOMPropertyConfig.js","node_modules/react/lib/ReactComponentBrowserEnvironment.js","node_modules/react/lib/DOMChildrenOperations.js","node_modules/react/lib/DOMLazyTree.js","node_modules/react/lib/DOMNamespaces.js","node_modules/react/lib/setInnerHTML.js","node_modules/react/lib/createMicrosoftUnsafeLocalFunction.js","node_modules/react/lib/setTextContent.js","node_modules/react/lib/escapeTextContentForBrowser.js","node_modules/react/lib/Danger.js","node_modules/react/lib/ReactMultiChildUpdateTypes.js","node_modules/react/lib/ReactDOMIDOperations.js","node_modules/react/lib/ReactDOMComponent.js","node_modules/react/lib/AutoFocusUtils.js","node_modules/react/lib/CSSPropertyOperations.js","node_modules/react/lib/CSSProperty.js","node_modules/react/lib/dangerousStyleValue.js","node_modules/react/lib/DOMPropertyOperations.js","node_modules/react/lib/quoteAttributeValueForBrowser.js","node_modules/react/lib/ReactBrowserEventEmitter.js","node_modules/react/lib/ReactEventEmitterMixin.js","node_modules/react/lib/getVendorPrefixedEventName.js","node_modules/react/lib/ReactDOMButton.js","node_modules/react/lib/DisabledInputUtils.js","node_modules/react/lib/ReactDOMInput.js","node_modules/react/lib/LinkedValueUtils.js","node_modules/react/lib/ReactDOMOption.js","node_modules/react/lib/ReactDOMSelect.js","node_modules/react/lib/ReactDOMTextarea.js","node_modules/react/lib/ReactMultiChild.js","node_modules/react/lib/ReactComponentEnvironment.js","node_modules/react/lib/ReactInstanceMap.js","node_modules/react/lib/ReactChildReconciler.js","node_modules/react/lib/instantiateReactComponent.js","node_modules/react/lib/ReactCompositeComponent.js","node_modules/react/lib/ReactNodeTypes.js","node_modules/react/lib/shouldUpdateReactComponent.js","node_modules/react/lib/ReactEmptyComponent.js","node_modules/react/lib/ReactHostComponent.js","node_modules/react/lib/flattenChildren.js","node_modules/react/lib/ReactServerRenderingTransaction.js","node_modules/react/lib/ReactServerUpdateQueue.js","node_modules/react/lib/ReactUpdateQueue.js","node_modules/react/lib/validateDOMNesting.js","node_modules/react/lib/ReactDOMEmptyComponent.js","node_modules/react/lib/ReactDOMTreeTraversal.js","node_modules/react/lib/ReactDOMTextComponent.js","node_modules/react/lib/ReactDefaultBatchingStrategy.js","node_modules/react/lib/ReactEventListener.js","node_modules/react/lib/ReactInjection.js","node_modules/react/lib/ReactReconcileTransaction.js","node_modules/react/lib/ReactInputSelection.js","node_modules/react/lib/ReactDOMSelection.js","node_modules/react/lib/getNodeForCharacterOffset.js","node_modules/react/lib/SVGDOMPropertyConfig.js","node_modules/react/lib/SelectEventPlugin.js","node_modules/react/lib/SimpleEventPlugin.js","node_modules/react/lib/SyntheticAnimationEvent.js","node_modules/react/lib/SyntheticClipboardEvent.js","node_modules/react/lib/SyntheticFocusEvent.js","node_modules/react/lib/SyntheticKeyboardEvent.js","node_modules/react/lib/getEventCharCode.js","node_modules/react/lib/getEventKey.js","node_modules/react/lib/SyntheticDragEvent.js","node_modules/react/lib/SyntheticTouchEvent.js","node_modules/react/lib/SyntheticTransitionEvent.js","node_modules/react/lib/SyntheticWheelEvent.js","node_modules/react/lib/ReactMount.js","node_modules/react/lib/ReactDOMContainerInfo.js","node_modules/react/lib/ReactDOMFeatureFlags.js","node_modules/react/lib/ReactMarkupChecksum.js","node_modules/react/lib/adler32.js","node_modules/react/lib/findDOMNode.js","node_modules/react/lib/getHostComponentFromComposite.js","node_modules/react/lib/renderSubtreeIntoContainer.js","node_modules/react/lib/ReactDOMUnknownPropertyHook.js","node_modules/react/lib/ReactDOMNullInputValuePropHook.js","node_modules/react/lib/ReactComponentWithPureRenderMixin.js","node_modules/react/lib/shallowCompare.js","node_modules/object-assign/package.json","node_modules/object-assign/index.js","node_modules/fbjs/lib/invariant.js","node_modules/fbjs/lib/warning.js","node_modules/fbjs/lib/emptyFunction.js","node_modules/fbjs/lib/emptyObject.js","node_modules/fbjs/lib/keyMirror.js","node_modules/fbjs/lib/keyOf.js","node_modules/fbjs/lib/ExecutionEnvironment.js","node_modules/fbjs/lib/performanceNow.js","node_modules/fbjs/lib/performance.js","node_modules/fbjs/lib/createNodesFromMarkup.js","node_modules/fbjs/lib/createArrayFromMixed.js","node_modules/fbjs/lib/getMarkupWrap.js","node_modules/fbjs/lib/focusNode.js","node_modules/fbjs/lib/camelizeStyleName.js","node_modules/fbjs/lib/camelize.js","node_modules/fbjs/lib/hyphenateStyleName.js","node_modules/fbjs/lib/hyphenate.js","node_modules/fbjs/lib/memoizeStringOnly.js","node_modules/fbjs/lib/shallowEqual.js","node_modules/fbjs/lib/EventListener.js","node_modules/fbjs/lib/getUnboundedScrollPosition.js","node_modules/fbjs/lib/containsNode.js","node_modules/fbjs/lib/isTextNode.js","node_modules/fbjs/lib/isNode.js","node_modules/fbjs/lib/getActiveElement.js","node_modules/react-dom/package.json","node_modules/react-dom/index.js","node_modules/react-addons-pure-render-mixin/package.json","node_modules/react-addons-pure-render-mixin/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;ACPA;AACA;AACA;AACA,2H;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AC/HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AC5NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC9CA;AACA;AACA;AACA,2H;;;;;;;;;;;ACHA;AACA;AACA;AACA,2H;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACxxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtvtKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACztBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACvznrVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACfaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnrYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AChxtpOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACpzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrvKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACpnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrxOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACnNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACjrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AC1HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8H;;;;;;;;;;;AC7+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACvnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AC5NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACzzUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AChpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AC1HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACxlcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACztv4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AC5IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACjvnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnnjnNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACznnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrrhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACfxBA;AACA;AACA,2H;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AClzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjCA;AACA;AACA;AACA,2H;;;;;;;;;;;ACHA;AACA;AACA;AACA,2H;;;;;;;;;;;ACHA;AACA;AACA;AACA,2H;;;;;;;;;;;ACHA,2H","file":"/packages/modules.js","sourcesContent":["require(\"./install-packages.js\");\nrequire(\"./stubs.js\");\nrequire(\"./buffer.js\");\nrequire(\"./process.js\");\nrequire(\"reify/lib/runtime\").enable(module.constructor);\n\nexports.addStyles = require(\"./css\").addStyles;\n","try {\n  Buffer = global.Buffer || require(\"buffer\").Buffer;\n} catch (noBuffer) {}\n","var doc = document;\nvar head = doc.getElementsByTagName(\"head\").item(0);\n\nexports.addStyles = function (css) {\n  var style = doc.createElement(\"style\");\n\n  style.setAttribute(\"type\", \"text/css\");\n\n  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx\n  var internetExplorerSheetObject =\n    style.sheet || // Edge/IE11.\n    style.styleSheet; // Older IEs.\n\n  if (internetExplorerSheetObject) {\n    internetExplorerSheetObject.cssText = css;\n  } else {\n    style.appendChild(doc.createTextNode(css));\n  }\n\n  return head.appendChild(style);\n};\n","function install(name, mainModule) {\n  var meteorDir = {};\n\n  // Given a package name <name>, install a stub module in the\n  // /node_modules/meteor directory called <name>.js, so that\n  // require.resolve(\"meteor/<name>\") will always return\n  // /node_modules/meteor/<name>.js instead of something like\n  // /node_modules/meteor/<name>/index.js, in the rare but possible event\n  // that the package contains a file called index.js (#6590).\n\n  if (mainModule) {\n    meteorDir[name + \".js\"] = [mainModule, function (require, e, module) {\n      module.exports = require(mainModule);\n    }];\n  } else {\n    // back compat with old Meteor packages\n    meteorDir[name + \".js\"] = function (r, e, module) {\n      module.exports = Package[name];\n    };\n  }\n\n  meteorInstall({\n    node_modules: {\n      meteor: meteorDir\n    }\n  });\n}\n\n// This file will be modified during computeJsOutputFilesMap to include\n// install(<name>) calls for every Meteor package.\n\ninstall(\"underscore\");\ninstall(\"meteor\");\ninstall(\"meteor-base\");\ninstall(\"mobile-experience\");\ninstall(\"modules-runtime\");\ninstall(\"modules\", \"meteor/modules/client.js\");\ninstall(\"es5-shim\", \"meteor/es5-shim/client.js\");\ninstall(\"promise\", \"meteor/promise/client.js\");\ninstall(\"ecmascript-runtime\", \"meteor/ecmascript-runtime/runtime.js\");\ninstall(\"babel-compiler\");\ninstall(\"ecmascript\");\ninstall(\"base64\");\ninstall(\"ejson\");\ninstall(\"id-map\");\ninstall(\"ordered-dict\");\ninstall(\"tracker\");\ninstall(\"babel-runtime\");\ninstall(\"random\");\ninstall(\"mongo-id\");\ninstall(\"diff-sequence\");\ninstall(\"geojson-utils\", \"meteor/geojson-utils/main.js\");\ninstall(\"minimongo\");\ninstall(\"check\", \"meteor/check/match.js\");\ninstall(\"retry\");\ninstall(\"ddp-common\");\ninstall(\"reload\");\ninstall(\"ddp-client\");\ninstall(\"ddp\");\ninstall(\"ddp-server\");\ninstall(\"allow-deny\");\ninstall(\"insecure\");\ninstall(\"mongo\");\ninstall(\"blaze-html-templates\");\ninstall(\"reactive-var\");\ninstall(\"jquery\", \"meteor/jquery/main.js\");\ninstall(\"standard-minifier-css\");\ninstall(\"standard-minifier-js\");\ninstall(\"shell-server\");\ninstall(\"autopublish\");\ninstall(\"ddp-rate-limiter\");\ninstall(\"localstorage\");\ninstall(\"callback-hook\");\ninstall(\"deps\");\ninstall(\"htmljs\");\ninstall(\"observe-sequence\");\ninstall(\"blaze\");\ninstall(\"accounts-base\", \"meteor/accounts-base/client_main.js\");\ninstall(\"service-configuration\");\ninstall(\"spacebars\");\ninstall(\"templating\");\ninstall(\"reactive-dict\");\ninstall(\"session\");\ninstall(\"sha\");\ninstall(\"srp\");\ninstall(\"accounts-password\");\ninstall(\"less\");\ninstall(\"accounts-ui-unstyled\");\ninstall(\"accounts-ui\");\ninstall(\"tmeasday:check-npm-versions\", \"meteor/tmeasday:check-npm-versions/check-npm-versions.js\");\ninstall(\"react-meteor-data\", \"meteor/react-meteor-data/react-meteor-data.jsx\");\ninstall(\"momentjs:moment\");\ninstall(\"glasser:reactive-fromnow\");\ninstall(\"webapp\");\ninstall(\"livedata\");\ninstall(\"hot-code-push\");\ninstall(\"launch-screen\");\ninstall(\"ui\");\ninstall(\"autoupdate\");\n","try {\n  // The application can run `npm install process` to provide its own\n  // process stub; otherwise this module will provide a partial stub.\n  process = global.process || require(\"process\");\n} catch (noProcess) {\n  process = {};\n}\n\nif (Meteor.isServer) {\n  // Make require(\"process\") work on the server in all versions of Node.\n  meteorInstall({\n    node_modules: {\n      \"process.js\": function (r, e, module) {\n        module.exports = process;\n      }\n    }\n  });\n} else {\n  process.platform = \"browser\";\n  process.nextTick = process.nextTick || Meteor._setImmediate;\n}\n\nif (typeof process.env !== \"object\") {\n  process.env = {};\n}\n\n_.extend(process.env, meteorEnv);\n","try {\n  // When meteor-node-stubs is installed in the application's root\n  // node_modules directory, requiring it here installs aliases for stubs\n  // for all Node built-in modules, such as fs, util, and http.\n  require(\"meteor-node-stubs\");\n} catch (noStubs) {}\n","var Entry = require(\"./entry.js\").Entry;\nvar utils = require(\"./utils.js\");\n\nexports.enable = function (Module) {\n  var Mp = Module.prototype;\n\n  if (typeof Mp.import === \"function\" &&\n      typeof Mp.export === \"function\") {\n    // If the Mp.{import,export} methods have already been\n    // defined, abandon reification immediately.\n    return Module;\n  }\n\n  // Platform-specific code should implement this method however\n  // appropriate. Module.prototype.resolve(id) should return an absolute\n  // version of the given module identifier, like require.resolve.\n  Mp.resolve = Mp.resolve || function resolve(id) {\n    throw new Error(\"Module.prototype.resolve not implemented\");\n  };\n\n  // Platform-specific code should find a way to call this method whenever\n  // the module system is about to return module.exports from require. This\n  // might happen more than once per module, in case of dependency cycles,\n  // so we want Module.prototype.runModuleSetters to run each time.\n  Mp.runModuleSetters = function runModuleSetters(valueToPassThrough) {\n    var entry = Entry.get(this.id);\n    if (entry) {\n      entry.runModuleSetters(this);\n    }\n\n    // Assignments to exported local variables get wrapped with calls to\n    // module.runModuleSetters, so module.runModuleSetters returns the\n    // valueToPassThrough parameter to allow the value of the original\n    // expression to pass through. For example,\n    //\n    //   export var a = 1;\n    //   console.log(a += 3);\n    //\n    // becomes\n    //\n    //   module.export(\"a\", () => a);\n    //   var a = 1;\n    //   console.log(module.runModuleSetters(a += 3));\n    //\n    // This ensures module.runModuleSetters runs immediately after the\n    // assignment, and does not interfere with the larger computation.\n    return valueToPassThrough;\n  };\n\n  function setESModule(module) {\n    var exports = module.exports;\n    if (exports && typeof exports === \"object\") {\n      exports.__esModule = true;\n    }\n  }\n\n  Mp.import = function (id, setters) {\n    var module = this;\n    setESModule(module);\n\n    var absoluteId = module.resolve(id);\n\n    if (setters && typeof setters === \"object\") {\n      var entry = Entry.getOrCreate(absoluteId);\n      entry.addSetters(module, setters);\n    }\n\n    var countBefore = entry && entry.runCount;\n    var exports = typeof module.require === \"function\"\n      ? module.require(absoluteId)\n      : require(absoluteId);\n\n    if (entry && entry.runCount === countBefore) {\n      // If require(absoluteId) didn't run any setters for this entry,\n      // perhaps because it's not the first time this module has been\n      // required, run the setters now using an object that passes as the\n      // real module object.\n      entry.runModuleSetters({\n        id: absoluteId,\n        exports: exports,\n        getExportByName: Mp.getExportByName\n      });\n    }\n  };\n\n  // Register getter functions for local variables in the scope of an\n  // export statement. The keys of the getters object are exported names,\n  // and the values are functions that return local values.\n  Mp.export = function (getters) {\n    var module = this;\n    setESModule(module);\n\n    if (utils.isPlainObject(getters)) {\n      Entry.getOrCreate(module.id).addGetters(getters);\n    }\n\n    if (module.loaded) {\n      // If the module has already been evaluated, then we need to trigger\n      // another round of entry.runModuleSetters calls, which begins by\n      // calling entry.runModuleGetters(module).\n      module.runModuleSetters();\n    }\n  };\n\n  // This method can be overridden by client code to implement custom export\n  // naming logic. The current implementation works well with Babel's\n  // __esModule convention.\n  Mp.getExportByName = function (name) {\n    var exports = this.exports;\n\n    if (name === \"*\") {\n      return exports;\n    }\n\n    if (name === \"default\" &&\n        ! (exports &&\n           typeof exports === \"object\" &&\n           exports.__esModule &&\n           \"default\" in exports)) {\n      return exports;\n    }\n\n    return exports && exports[name];\n  };\n\n  return Module;\n};\n","var hasOwn = Object.prototype.hasOwnProperty;\nvar entryMap = Object.create(null);\nvar utils = require(\"./utils.js\");\n\nfunction Entry(id) {\n  // Same as module.id for this module.\n  this.id = id;\n  // The number of times this.runModuleSetters has been called.\n  this.runCount = 0;\n  // Setters for assigning to local variables in parent modules.\n  this.setters = Object.create(null);\n  // Getters for local variables exported from this module.\n  this.getters = Object.create(null);\n}\n\nvar Ep = Entry.prototype;\n\nEntry.get = function (id) {\n  return entryMap[id] || null;\n};\n\nEntry.getOrCreate = function (id) {\n  return entryMap[id] = entryMap[id] || new Entry(id);\n};\n\nEp.addSetters = function (parent, setters) {\n  var entry = this;\n\n  Object.keys(setters).forEach(function (name) {\n    var setter = setters[name];\n    if (typeof setter === \"function\" &&\n        // Ignore any requests for the exports.__esModule property.\"\n        name !== \"__esModule\") {\n      setter.parent = parent;\n      (entry.setters[name] =\n       entry.setters[name] || []\n      ).push(setter);\n    }\n  });\n};\n\nEp.addGetters = function (getters) {\n  var entry = this;\n  Object.keys(getters).forEach(function (name) {\n    var getter = getters[name];\n    if (typeof getter === \"function\" &&\n        // Ignore any requests for the exports.__esModule property.\"\n        name !== \"__esModule\") {\n      // Should this throw if hasOwn.call(this.getters, name)?\n      entry.getters[name] = getter;\n    }\n  });\n};\n\nfunction runModuleSetters(module) {\n  var entry = entryMap[module.id];\n  if (entry) {\n    entry.runModuleSetters(module);\n  }\n}\n\nfunction runModuleGetters(module) {\n  var entry = entryMap[module.id];\n  return entry ? entry.runModuleGetters(module) : 0;\n}\n\nEp.runModuleGetters = function (module) {\n  var entry = this;\n  var changeCount = 0;\n\n  Object.keys(entry.getters).forEach(function (name) {\n    if (entry.runGetter(module, name)) {\n      ++changeCount;\n    }\n  });\n\n  return changeCount;\n};\n\n// Returns true iff the getter updated module.exports with a new value.\nEp.runGetter = function (module, name) {\n  if (! hasOwn.call(this.getters, name)) {\n    return false;\n  }\n\n  var getter = this.getters[name];\n  try {\n    var value = getter.call(module);\n  } catch (e) {}\n  var exports = module.exports;\n\n  if (! hasOwn.call(exports, name) ||\n      exports[name] !== value) {\n    // We update module.exports[name] with the current value so that\n    // CommonJS require calls remain consistent with module.import.\n    exports[name] = value;\n    return true;\n  }\n\n  return false;\n};\n\n// Called whenever module.exports might have changed, to trigger any\n// setters associated with the newly exported values.\nEp.runModuleSetters = function (module) {\n  var entry = this;\n  var names = Object.keys(entry.setters);\n\n  // Make sure module.exports is up to date before we call\n  // module.getExportByName(name).\n  entry.runModuleGetters(module);\n\n  // Invoke the given callback once for every (setter, value, name) triple\n  // that needs to be called. Note that forEachSetter does not call any\n  // setters itself, only the given callback.\n  function forEachSetter(callback, context) {\n    names.forEach(function (name) {\n      entry.setters[name].forEach(function (setter) {\n        var value = module.getExportByName(name);\n        if (name === \"*\") {\n          Object.keys(value).forEach(function (name) {\n            call(setter, value[name], name);\n          });\n        } else {\n          call(setter, value, name);\n        }\n      });\n    });\n\n    function call(setter, value, name) {\n      if (name === \"__esModule\") {\n        // Ignore setters asking for module.exports.__esModule.\n        return;\n      }\n\n      setter.last = setter.last || Object.create(null);\n\n      if (! hasOwn.call(setter.last, name) ||\n          setter.last[name] !== value) {\n        // Only invoke the callback if we have not called this setter\n        // (with a value of this name) before, or the current value is\n        // different from the last value we passed to this setter.\n        return callback.apply(context, arguments);\n      }\n    }\n  }\n\n  // Every three elements of this list form a (setter, value, name) triple\n  // that needs to be invoked.\n  var settersToCall = [];\n\n  // Lazily-initialized objects mapping parent module identifiers to\n  // relevant parent module objects and snapshots of their exports.\n  var relevantParents;\n  var parentSnapshots;\n\n  // Take snapshots of setter.parent.exports for any setters that we are\n  // planning to call, so that we can later determine if calling the\n  // setters modified any of those exports objects.\n  forEachSetter(function (setter, value, name) {\n    var parent = setter.parent;\n    parentSnapshots = parentSnapshots || Object.create(null);\n    if (! hasOwn.call(parentSnapshots, parent.id)) {\n      relevantParents = relevantParents || Object.create(null);\n      relevantParents[parent.id] = parent;\n      if (utils.isPlainObject(parent.exports)) {\n        // If parent.exports is an object, make a shallow clone of it so\n        // that we can see if it changes as a result of calling setters.\n        parentSnapshots[parent.id] = utils.assign({}, parent.exports);\n      } else {\n        // If parent.exports is not an object, the \"snapshot\" is just the\n        // value of parent.exports.\n        parentSnapshots[parent.id] = parent.exports;\n      }\n    }\n\n    // Push three elements at a time to avoid creating wrapper arrays for\n    // each (setter, value, name) triple. Note the i += 3 below.\n    settersToCall.push(setter, value, name);\n  });\n\n  // Now call all the setters that we decided we need to call.\n  for (var i = 0; i < settersToCall.length; i += 3) {\n    var setter = settersToCall[i];\n    var value = settersToCall[i + 1];\n    var name = settersToCall[i + 2];\n    setter.call(module, setter.last[name] = value, name);\n  }\n\n  ++entry.runCount;\n\n  if (! relevantParents) {\n    // If we never called takeSnapshot, then we can avoid checking\n    // relevantParents and parentSnapshots below.\n    return;\n  }\n\n  // If any of the setters updated the module.exports of a parent module,\n  // or updated local variables that are exported by that parent module,\n  // then we must re-run any setters registered by that parent module.\n  Object.keys(relevantParents).forEach(function (id) {\n    var parent = relevantParents[id];\n\n    if (runModuleGetters(parent) > 0) {\n      return runModuleSetters(parent);\n    }\n\n    var exports = parent.exports;\n    var snapshot = parentSnapshots[parent.id];\n    if (utils.shallowObjEqual(exports, snapshot)) {\n      // If parent.exports have not changed since we took the snapshot,\n      // then we do not need to run the parent's setters.\n      return;\n    }\n\n    runModuleSetters(parent);\n  });\n};\n\nexports.Entry = Entry;\n","var hasOwn = Object.prototype.hasOwnProperty;\nvar objToStr = Object.prototype.toString;\nvar objStr = objToStr.call({});\n\nfunction isPlainObject(value) {\n  return objToStr.call(value) === objStr;\n}\nexports.isPlainObject = isPlainObject;\n\nexports.assign = Object.assign || function (obj) {\n  var argc = arguments.length;\n  for (var i = 1; i < argc; ++i) {\n    var arg = arguments[i];\n    if (arg && typeof arg === \"object\") {\n      var keys = Object.keys(arg);\n      for (var k = 0; k < keys.length; ++k) {\n        var key = keys[k];\n        obj[key] = arg[key];\n      }\n    }\n  }\n  return obj;\n};\n\nexports.shallowObjEqual = function(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (! isPlainObject(a) ||\n      ! isPlainObject(b)) {\n    return false;\n  }\n\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b);\n\n  if (aKeys.length !== bKeys.length) {\n    return false;\n  }\n\n  return aKeys.every(function (key) {\n    return hasOwn.call(b, key) &&\n      a[key] === b[key];\n  });\n};\n","exports.name = \"react\";\nexports.version = \"15.3.2\";\nexports.main = \"react.js\";\n","'use strict';\n\nmodule.exports = require('./lib/React');\n","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule React\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar ReactChildren = require('./ReactChildren');\nvar ReactComponent = require('./ReactComponent');\nvar ReactPureComponent = require('./ReactPureComponent');\nvar ReactClass = require('./ReactClass');\nvar ReactDOMFactories = require('./ReactDOMFactories');\nvar ReactElement = require('./ReactElement');\nvar ReactPropTypes = require('./ReactPropTypes');\nvar ReactVersion = require('./ReactVersion');\n\nvar onlyChild = require('./onlyChild');\nvar warning = require('fbjs/lib/warning');\n\nvar createElement = ReactElement.createElement;\nvar createFactory = ReactElement.createFactory;\nvar cloneElement = ReactElement.cloneElement;\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactElementValidator = require('./ReactElementValidator');\n  createElement = ReactElementValidator.createElement;\n  createFactory = ReactElementValidator.createFactory;\n  cloneElement = ReactElementValidator.cloneElement;\n}\n\nvar __spread = _assign;\n\nif (process.env.NODE_ENV !== 'production') {\n  var warned = false;\n  __spread = function () {\n    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;\n    warned = true;\n    return _assign.apply(null, arguments);\n  };\n}\n\nvar React = {\n\n  // Modern\n\n  Children: {\n    map: ReactChildren.map,\n    forEach: ReactChildren.forEach,\n    count: ReactChildren.count,\n    toArray: ReactChildren.toArray,\n    only: onlyChild\n  },\n\n  Component: ReactComponent,\n  PureComponent: ReactPureComponent,\n\n  createElement: createElement,\n  cloneElement: cloneElement,\n  isValidElement: ReactElement.isValidElement,\n\n  // Classic\n\n  PropTypes: ReactPropTypes,\n  createClass: ReactClass.createClass,\n  createFactory: createFactory,\n  createMixin: function (mixin) {\n    // Currently a noop. Will be used to validate and trace mixins.\n    return mixin;\n  },\n\n  // This looks DOM specific but these are actually isomorphic helpers\n  // since they are just generating DOM strings.\n  DOM: ReactDOMFactories,\n\n  version: ReactVersion,\n\n  // Deprecated hook for JSX spread, don't use this for anything.\n  __spread: __spread\n};\n\nmodule.exports = React;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactChildren\n */\n\n'use strict';\n\nvar PooledClass = require('./PooledClass');\nvar ReactElement = require('./ReactElement');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar traverseAllChildren = require('./traverseAllChildren');\n\nvar twoArgumentPooler = PooledClass.twoArgumentPooler;\nvar fourArgumentPooler = PooledClass.fourArgumentPooler;\n\nvar userProvidedKeyEscapeRegex = /\\/+/g;\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n}\n\n/**\n * PooledClass representing the bookkeeping associated with performing a child\n * traversal. Allows avoiding binding callbacks.\n *\n * @constructor ForEachBookKeeping\n * @param {!function} forEachFunction Function to perform traversal with.\n * @param {?*} forEachContext Context to perform context with.\n */\nfunction ForEachBookKeeping(forEachFunction, forEachContext) {\n  this.func = forEachFunction;\n  this.context = forEachContext;\n  this.count = 0;\n}\nForEachBookKeeping.prototype.destructor = function () {\n  this.func = null;\n  this.context = null;\n  this.count = 0;\n};\nPooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);\n\nfunction forEachSingleChild(bookKeeping, child, name) {\n  var func = bookKeeping.func;\n  var context = bookKeeping.context;\n\n  func.call(context, child, bookKeeping.count++);\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  if (children == null) {\n    return children;\n  }\n  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);\n  traverseAllChildren(children, forEachSingleChild, traverseContext);\n  ForEachBookKeeping.release(traverseContext);\n}\n\n/**\n * PooledClass representing the bookkeeping associated with performing a child\n * mapping. Allows avoiding binding callbacks.\n *\n * @constructor MapBookKeeping\n * @param {!*} mapResult Object containing the ordered map of results.\n * @param {!function} mapFunction Function to perform mapping with.\n * @param {?*} mapContext Context to perform mapping with.\n */\nfunction MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {\n  this.result = mapResult;\n  this.keyPrefix = keyPrefix;\n  this.func = mapFunction;\n  this.context = mapContext;\n  this.count = 0;\n}\nMapBookKeeping.prototype.destructor = function () {\n  this.result = null;\n  this.keyPrefix = null;\n  this.func = null;\n  this.context = null;\n  this.count = 0;\n};\nPooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);\n\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {\n  var result = bookKeeping.result;\n  var keyPrefix = bookKeeping.keyPrefix;\n  var func = bookKeeping.func;\n  var context = bookKeeping.context;\n\n\n  var mappedChild = func.call(context, child, bookKeeping.count++);\n  if (Array.isArray(mappedChild)) {\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);\n  } else if (mappedChild != null) {\n    if (ReactElement.isValidElement(mappedChild)) {\n      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,\n      // Keep both the (mapped) and old keys if they differ, just as\n      // traverseAllChildren used to do for objects as children\n      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n    }\n    result.push(mappedChild);\n  }\n}\n\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n  var escapedPrefix = '';\n  if (prefix != null) {\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n  }\n  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n  MapBookKeeping.release(traverseContext);\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map\n *\n * The provided mapFunction(child, key, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n  return result;\n}\n\nfunction forEachSingleChildDummy(traverseContext, child, name) {\n  return null;\n}\n\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\nfunction countChildren(children, context) {\n  return traverseAllChildren(children, forEachSingleChildDummy, null);\n}\n\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray\n */\nfunction toArray(children) {\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);\n  return result;\n}\n\nvar ReactChildren = {\n  forEach: forEachChildren,\n  map: mapChildren,\n  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,\n  count: countChildren,\n  toArray: toArray\n};\n\nmodule.exports = ReactChildren;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PooledClass\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Static poolers. Several custom versions for each potential number of\n * arguments. A completely generic pooler is easy to implement, but would\n * require accessing the `arguments` object. In each of these, `this` refers to\n * the Class itself, not an instance. If any others are needed, simply add them\n * here, or in their own files.\n */\nvar oneArgumentPooler = function (copyFieldsFrom) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, copyFieldsFrom);\n    return instance;\n  } else {\n    return new Klass(copyFieldsFrom);\n  }\n};\n\nvar twoArgumentPooler = function (a1, a2) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\n\nvar threeArgumentPooler = function (a1, a2, a3) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3);\n  }\n};\n\nvar fourArgumentPooler = function (a1, a2, a3, a4) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4);\n  }\n};\n\nvar fiveArgumentPooler = function (a1, a2, a3, a4, a5) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4, a5);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4, a5);\n  }\n};\n\nvar standardReleaser = function (instance) {\n  var Klass = this;\n  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;\n  instance.destructor();\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\n\nvar DEFAULT_POOL_SIZE = 10;\nvar DEFAULT_POOLER = oneArgumentPooler;\n\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances.\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\nvar addPoolingTo = function (CopyConstructor, pooler) {\n  var NewKlass = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\n\nvar PooledClass = {\n  addPoolingTo: addPoolingTo,\n  oneArgumentPooler: oneArgumentPooler,\n  twoArgumentPooler: twoArgumentPooler,\n  threeArgumentPooler: threeArgumentPooler,\n  fourArgumentPooler: fourArgumentPooler,\n  fiveArgumentPooler: fiveArgumentPooler\n};\n\nmodule.exports = PooledClass;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule reactProdInvariant\n * \n */\n'use strict';\n\n/**\n * WARNING: DO NOT manually require this module.\n * This is a replacement for `invariant(...)` used by the error code system\n * and will _only_ be required by the corresponding babel pass.\n * It always throws.\n */\n\nfunction reactProdInvariant(code) {\n  var argCount = arguments.length - 1;\n\n  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;\n\n  for (var argIdx = 0; argIdx < argCount; argIdx++) {\n    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);\n  }\n\n  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';\n\n  var error = new Error(message);\n  error.name = 'Invariant Violation';\n  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame\n\n  throw error;\n}\n\nmodule.exports = reactProdInvariant;","/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElement\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\n\nvar warning = require('fbjs/lib/warning');\nvar canDefineProperty = require('./canDefineProperty');\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n// The Symbol used to tag the ReactElement type. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;\n\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\n\nvar specialPropKeyWarningShown, specialPropRefWarningShown;\n\nfunction hasValidRef(config) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey = function () {\n    if (!specialPropKeyWarningShown) {\n      specialPropKeyWarningShown = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;\n    }\n  };\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef = function () {\n    if (!specialPropRefWarningShown) {\n      specialPropRefWarningShown = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;\n    }\n  };\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, no instanceof check\n * will work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} key\n * @param {string|object} ref\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @param {*} owner\n * @param {*} props\n * @internal\n */\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allow us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {};\n    var shadowChildren = Array.isArray(props.children) ? props.children.slice(0) : props.children;\n\n    // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n    if (canDefineProperty) {\n      Object.defineProperty(element._store, 'validated', {\n        configurable: false,\n        enumerable: false,\n        writable: true,\n        value: false\n      });\n      // self and source are DEV only properties.\n      Object.defineProperty(element, '_self', {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: self\n      });\n      Object.defineProperty(element, '_shadowChildren', {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: shadowChildren\n      });\n      // Two elements created in two different places should be considered\n      // equal for testing purposes and therefore we hide it from enumeration.\n      Object.defineProperty(element, '_source', {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: source\n      });\n    } else {\n      element._store.validated = false;\n      element._self = self;\n      element._shadowChildren = shadowChildren;\n      element._source = source;\n    }\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n\n/**\n * Create and return a new ReactElement of the given type.\n * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement\n */\nReactElement.createElement = function (type, config, children) {\n  var propName;\n\n  // Reserved names are extracted\n  var props = {};\n\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n    }\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source;\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    if (key || ref) {\n      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {\n        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n        if (key) {\n          defineKeyPropWarningGetter(props, displayName);\n        }\n        if (ref) {\n          defineRefPropWarningGetter(props, displayName);\n        }\n      }\n    }\n  }\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n};\n\n/**\n * Return a function that produces ReactElements of a given type.\n * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory\n */\nReactElement.createFactory = function (type) {\n  var factory = ReactElement.createElement.bind(null, type);\n  // Expose the type on the factory and the prototype so that it can be\n  // easily accessed on elements. E.g. `<Foo />.type === Foo`.\n  // This should not be named `constructor` since this may not be the function\n  // that created the element, and it may not even be a constructor.\n  // Legacy hook TODO: Warn if this is accessed\n  factory.type = type;\n  return factory;\n};\n\nReactElement.cloneAndReplaceKey = function (oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n\n  return newElement;\n};\n\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement\n */\nReactElement.cloneElement = function (element, config, children) {\n  var propName;\n\n  // Original props are copied\n  var props = _assign({}, element.props);\n\n  // Reserved names are extracted\n  var key = element.key;\n  var ref = element.ref;\n  // Self is preserved since the owner is preserved.\n  var self = element._self;\n  // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n  var source = element._source;\n\n  // Owner will be preserved, unless ref is overridden\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    // Remaining properties override existing props\n    var defaultProps;\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n};\n\n/**\n * Verifies the object is a ReactElement.\n * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a valid component.\n * @final\n */\nReactElement.isValidElement = function (object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n};\n\nReactElement.REACT_ELEMENT_TYPE = REACT_ELEMENT_TYPE;\n\nmodule.exports = ReactElement;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCurrentOwner\n */\n\n'use strict';\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\n\nvar ReactCurrentOwner = {\n\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n\n};\n\nmodule.exports = ReactCurrentOwner;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule canDefineProperty\n */\n\n'use strict';\n\nvar canDefineProperty = false;\nif (process.env.NODE_ENV !== 'production') {\n  try {\n    Object.defineProperty({}, 'x', { get: function () {} });\n    canDefineProperty = true;\n  } catch (x) {\n    // IE will fail on defineProperty\n  }\n}\n\nmodule.exports = canDefineProperty;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule traverseAllChildren\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactElement = require('./ReactElement');\n\nvar getIteratorFn = require('./getIteratorFn');\nvar invariant = require('fbjs/lib/invariant');\nvar KeyEscapeUtils = require('./KeyEscapeUtils');\nvar warning = require('fbjs/lib/warning');\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\nvar didWarnAboutMaps = false;\n\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\nfunction getComponentKey(component, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (component && typeof component === 'object' && component.key != null) {\n    // Explicit key\n    return KeyEscapeUtils.escape(component.key);\n  }\n  // Implicit key determined by the index in the set\n  return index.toString(36);\n}\n\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {\n    callback(traverseContext, children,\n    // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows.\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getComponentKey(child, i);\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n    if (iteratorFn) {\n      var iterator = iteratorFn.call(children);\n      var step;\n      if (iteratorFn !== children.entries) {\n        var ii = 0;\n        while (!(step = iterator.next()).done) {\n          child = step.value;\n          nextName = nextNamePrefix + getComponentKey(child, ii++);\n          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n        }\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          var mapsAsChildrenAddendum = '';\n          if (ReactCurrentOwner.current) {\n            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();\n            if (mapsAsChildrenOwnerName) {\n              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';\n            }\n          }\n          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;\n          didWarnAboutMaps = true;\n        }\n        // Iterator will provide entry [k,v] tuples rather than values.\n        while (!(step = iterator.next()).done) {\n          var entry = step.value;\n          if (entry) {\n            child = entry[1];\n            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);\n            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n          }\n        }\n      }\n    } else if (type === 'object') {\n      var addendum = '';\n      if (process.env.NODE_ENV !== 'production') {\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';\n        if (children._isReactElement) {\n          addendum = ' It looks like you\\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';\n        }\n        if (ReactCurrentOwner.current) {\n          var name = ReactCurrentOwner.current.getName();\n          if (name) {\n            addendum += ' Check the render method of `' + name + '`.';\n          }\n        }\n      }\n      var childrenString = String(children);\n      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n\nmodule.exports = traverseAllChildren;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getIteratorFn\n * \n */\n\n'use strict';\n\n/* global Symbol */\n\nvar ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n/**\n * Returns the iterator method function contained on the iterable object.\n *\n * Be sure to invoke the function with the iterable as context:\n *\n *     var iteratorFn = getIteratorFn(myIterable);\n *     if (iteratorFn) {\n *       var iterator = iteratorFn.call(myIterable);\n *       ...\n *     }\n *\n * @param {?object} maybeIterable\n * @return {?function}\n */\nfunction getIteratorFn(maybeIterable) {\n  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n  if (typeof iteratorFn === 'function') {\n    return iteratorFn;\n  }\n}\n\nmodule.exports = getIteratorFn;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule KeyEscapeUtils\n * \n */\n\n'use strict';\n\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\n\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = ('' + key).replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n\n  return '$' + escapedString;\n}\n\n/**\n * Unescape and unwrap key for human-readable display\n *\n * @param {string} key to unescape.\n * @return {string} the unescaped key.\n */\nfunction unescape(key) {\n  var unescapeRegex = /(=0|=2)/g;\n  var unescaperLookup = {\n    '=0': '=',\n    '=2': ':'\n  };\n  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);\n\n  return ('' + keySubstring).replace(unescapeRegex, function (match) {\n    return unescaperLookup[match];\n  });\n}\n\nvar KeyEscapeUtils = {\n  escape: escape,\n  unescape: unescape\n};\n\nmodule.exports = KeyEscapeUtils;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponent\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\n\nvar canDefineProperty = require('./canDefineProperty');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction ReactComponent(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nReactComponent.prototype.isReactComponent = {};\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nReactComponent.prototype.setState = function (partialState, callback) {\n  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;\n  this.updater.enqueueSetState(this, partialState);\n  if (callback) {\n    this.updater.enqueueCallback(this, callback, 'setState');\n  }\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nReactComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this);\n  if (callback) {\n    this.updater.enqueueCallback(this, callback, 'forceUpdate');\n  }\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\nif (process.env.NODE_ENV !== 'production') {\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n  var defineDeprecationWarning = function (methodName, info) {\n    if (canDefineProperty) {\n      Object.defineProperty(ReactComponent.prototype, methodName, {\n        get: function () {\n          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;\n          return undefined;\n        }\n      });\n    }\n  };\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nmodule.exports = ReactComponent;","/**\n * Copyright 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNoopUpdateQueue\n */\n\n'use strict';\n\nvar warning = require('fbjs/lib/warning');\n\nfunction warnNoop(publicInstance, callerName) {\n  if (process.env.NODE_ENV !== 'production') {\n    var constructor = publicInstance.constructor;\n    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;\n  }\n}\n\n/**\n * This is the abstract API for an update queue.\n */\nvar ReactNoopUpdateQueue = {\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Enqueue a callback that will be executed after all the pending updates\n   * have processed.\n   *\n   * @param {ReactClass} publicInstance The instance to use as `this` context.\n   * @param {?function} callback Called after state is updated.\n   * @internal\n   */\n  enqueueCallback: function (publicInstance, callback) {},\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nmodule.exports = ReactNoopUpdateQueue;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPureComponent\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar ReactComponent = require('./ReactComponent');\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction ReactPureComponent(props, context, updater) {\n  // Duplicated from ReactComponent.\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nfunction ComponentDummy() {}\nComponentDummy.prototype = ReactComponent.prototype;\nReactPureComponent.prototype = new ComponentDummy();\nReactPureComponent.prototype.constructor = ReactPureComponent;\n// Avoid an extra prototype jump for these methods.\n_assign(ReactPureComponent.prototype, ReactComponent.prototype);\nReactPureComponent.prototype.isPureReactComponent = true;\n\nmodule.exports = ReactPureComponent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactClass\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar ReactComponent = require('./ReactComponent');\nvar ReactElement = require('./ReactElement');\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar invariant = require('fbjs/lib/invariant');\nvar keyMirror = require('fbjs/lib/keyMirror');\nvar keyOf = require('fbjs/lib/keyOf');\nvar warning = require('fbjs/lib/warning');\n\nvar MIXINS_KEY = keyOf({ mixins: null });\n\n/**\n * Policies that describe methods in `ReactClassInterface`.\n */\nvar SpecPolicy = keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n  /**\n   * These methods are overriding the base class.\n   */\n  OVERRIDE_BASE: null,\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\n\nvar injectedMixins = [];\n\n/**\n * Composite components are higher-level components that compose other composite\n * or host components.\n *\n * To create a new type of `ReactClass`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return <div>Hello World</div>;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactClassInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will be available on the prototype.\n *\n * @interface ReactClassInterface\n * @internal\n */\nvar ReactClassInterface = {\n\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * An object containing properties and methods that should be defined on\n   * the component's constructor instead of its prototype (static methods).\n   *\n   * @type {object}\n   * @optional\n   */\n  statics: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  contextTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types this component sets for its children.\n   *\n   * @type {object}\n   * @optional\n   */\n  childContextTypes: SpecPolicy.DEFINE_MANY,\n\n  // ==== Definition methods ====\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * @return {object}\n   * @optional\n   */\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name = this.props.name;\n   *     return <div>Hello, {name}!</div>;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n\n  // ==== Delegate methods ====\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props, state and/or context.\n   *\n   * Use this as an opportunity to `return false` when you're certain that the\n   * transition to the new props/state/context will not require a component\n   * update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n   *     return !equal(nextProps, this.props) ||\n   *       !equal(nextState, this.state) ||\n   *       !equal(nextContext, this.context);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n   * and `nextContext`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component's DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n\n  // ==== Advanced methods ====\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n\n};\n\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared like instance properties in the specification\n * when defining classes using `React.createClass`, they are actually static\n * and are accessible on the constructor instead of the prototype. Despite\n * being static, they must be defined outside of the \"statics\" key under\n * which all other static methods are defined.\n */\nvar RESERVED_SPEC_KEYS = {\n  displayName: function (Constructor, displayName) {\n    Constructor.displayName = displayName;\n  },\n  mixins: function (Constructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(Constructor, mixins[i]);\n      }\n    }\n  },\n  childContextTypes: function (Constructor, childContextTypes) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);\n    }\n    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);\n  },\n  contextTypes: function (Constructor, contextTypes) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);\n    }\n    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);\n  },\n  /**\n   * Special case getDefaultProps which should move into statics but requires\n   * automatic merging.\n   */\n  getDefaultProps: function (Constructor, getDefaultProps) {\n    if (Constructor.getDefaultProps) {\n      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);\n    } else {\n      Constructor.getDefaultProps = getDefaultProps;\n    }\n  },\n  propTypes: function (Constructor, propTypes) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);\n    }\n    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n  },\n  statics: function (Constructor, statics) {\n    mixStaticSpecIntoComponent(Constructor, statics);\n  },\n  autobind: function () {} };\n\n// noop\nfunction validateTypeDef(Constructor, typeDef, location) {\n  for (var propName in typeDef) {\n    if (typeDef.hasOwnProperty(propName)) {\n      // use a warning instead of an invariant so components\n      // don't show up in prod but only in __DEV__\n      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;\n    }\n  }\n}\n\nfunction validateMethodOverride(isAlreadyDefined, name) {\n  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;\n\n  // Disallow overriding of base class methods unless explicitly allowed.\n  if (ReactClassMixin.hasOwnProperty(name)) {\n    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;\n  }\n\n  // Disallow defining methods more than once unless explicitly allowed.\n  if (isAlreadyDefined) {\n    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;\n  }\n}\n\n/**\n * Mixin helper which handles policy validation and reserved\n * specification keys when building React classes.\n */\nfunction mixSpecIntoComponent(Constructor, spec) {\n  if (!spec) {\n    if (process.env.NODE_ENV !== 'production') {\n      var typeofSpec = typeof spec;\n      var isMixinValid = typeofSpec === 'object' && spec !== null;\n\n      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;\n    }\n\n    return;\n  }\n\n  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;\n  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;\n\n  var proto = Constructor.prototype;\n  var autoBindPairs = proto.__reactAutoBindPairs;\n\n  // By handling mixins before any other properties, we ensure the same\n  // chaining order is applied to methods with DEFINE_MANY policy, whether\n  // mixins are listed before or after these methods in the spec.\n  if (spec.hasOwnProperty(MIXINS_KEY)) {\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n  }\n\n  for (var name in spec) {\n    if (!spec.hasOwnProperty(name)) {\n      continue;\n    }\n\n    if (name === MIXINS_KEY) {\n      // We have already handled mixins in a special case above.\n      continue;\n    }\n\n    var property = spec[name];\n    var isAlreadyDefined = proto.hasOwnProperty(name);\n    validateMethodOverride(isAlreadyDefined, name);\n\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](Constructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactClass methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;\n\n      if (shouldAutoBind) {\n        autoBindPairs.push(name, property);\n        proto[name] = property;\n      } else {\n        if (isAlreadyDefined) {\n          var specPolicy = ReactClassInterface[name];\n\n          // These cases should already be caught by validateMethodOverride.\n          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;\n\n          // For methods which are defined more than once, call the existing\n          // methods before calling the new property, merging if appropriate.\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n          if (process.env.NODE_ENV !== 'production') {\n            // Add verbose displayName to the function, which helps when looking\n            // at profiling tools.\n            if (typeof property === 'function' && spec.displayName) {\n              proto[name].displayName = spec.displayName + '_' + name;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction mixStaticSpecIntoComponent(Constructor, statics) {\n  if (!statics) {\n    return;\n  }\n  for (var name in statics) {\n    var property = statics[name];\n    if (!statics.hasOwnProperty(name)) {\n      continue;\n    }\n\n    var isReserved = name in RESERVED_SPEC_KEYS;\n    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;\n\n    var isInherited = name in Constructor;\n    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;\n    Constructor[name] = property;\n  }\n}\n\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\nfunction mergeIntoWithNoDuplicateKeys(one, two) {\n  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;\n\n  for (var key in two) {\n    if (two.hasOwnProperty(key)) {\n      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;\n      one[key] = two[key];\n    }\n  }\n  return one;\n}\n\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    var a = one.apply(this, arguments);\n    var b = two.apply(this, arguments);\n    if (a == null) {\n      return b;\n    } else if (b == null) {\n      return a;\n    }\n    var c = {};\n    mergeIntoWithNoDuplicateKeys(c, a);\n    mergeIntoWithNoDuplicateKeys(c, b);\n    return c;\n  };\n}\n\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n\n/**\n * Binds a method to the component.\n *\n * @param {object} component Component whose method is going to be bound.\n * @param {function} method Method to be bound.\n * @return {function} The bound method.\n */\nfunction bindAutoBindMethod(component, method) {\n  var boundMethod = method.bind(component);\n  if (process.env.NODE_ENV !== 'production') {\n    boundMethod.__reactBoundContext = component;\n    boundMethod.__reactBoundMethod = method;\n    boundMethod.__reactBoundArguments = null;\n    var componentName = component.constructor.displayName;\n    var _bind = boundMethod.bind;\n    boundMethod.bind = function (newThis) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      // User is trying to bind() an autobound method; we effectively will\n      // ignore the value of \"this\" that the user is trying to use, so\n      // let's warn.\n      if (newThis !== component && newThis !== null) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;\n      } else if (!args.length) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;\n        return boundMethod;\n      }\n      var reboundMethod = _bind.apply(boundMethod, arguments);\n      reboundMethod.__reactBoundContext = component;\n      reboundMethod.__reactBoundMethod = method;\n      reboundMethod.__reactBoundArguments = args;\n      return reboundMethod;\n    };\n  }\n  return boundMethod;\n}\n\n/**\n * Binds all auto-bound methods in a component.\n *\n * @param {object} component Component whose method is going to be bound.\n */\nfunction bindAutoBindMethods(component) {\n  var pairs = component.__reactAutoBindPairs;\n  for (var i = 0; i < pairs.length; i += 2) {\n    var autoBindKey = pairs[i];\n    var method = pairs[i + 1];\n    component[autoBindKey] = bindAutoBindMethod(component, method);\n  }\n}\n\n/**\n * Add more to the ReactClass base class. These are all legacy features and\n * therefore not already part of the modern ReactComponent.\n */\nvar ReactClassMixin = {\n\n  /**\n   * TODO: This will be deprecated because state should always keep a consistent\n   * type signature and the only use case for this, is to avoid that.\n   */\n  replaceState: function (newState, callback) {\n    this.updater.enqueueReplaceState(this, newState);\n    if (callback) {\n      this.updater.enqueueCallback(this, callback, 'replaceState');\n    }\n  },\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function () {\n    return this.updater.isMounted(this);\n  }\n};\n\nvar ReactClassComponent = function () {};\n_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\n\n/**\n * Module for creating composite components.\n *\n * @class ReactClass\n */\nvar ReactClass = {\n\n  /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function (spec) {\n    var Constructor = function (props, context, updater) {\n      // This constructor gets overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindPairs.length) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (initialState === undefined && this.getInitialState._isMockFunction) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;\n\n      this.state = initialState;\n    };\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    Constructor.prototype.__reactAutoBindPairs = [];\n\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n\n    mixSpecIntoComponent(Constructor, spec);\n\n    // Initialize the defaultProps property after all mixins have been merged.\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  },\n\n  injection: {\n    injectMixin: function (mixin) {\n      injectedMixins.push(mixin);\n    }\n  }\n\n};\n\nmodule.exports = ReactClass;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypeLocations\n */\n\n'use strict';\n\nvar keyMirror = require('fbjs/lib/keyMirror');\n\nvar ReactPropTypeLocations = keyMirror({\n  prop: null,\n  context: null,\n  childContext: null\n});\n\nmodule.exports = ReactPropTypeLocations;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypeLocationNames\n */\n\n'use strict';\n\nvar ReactPropTypeLocationNames = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n}\n\nmodule.exports = ReactPropTypeLocationNames;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMFactories\n */\n\n'use strict';\n\nvar ReactElement = require('./ReactElement');\n\n/**\n * Create a factory that creates HTML tag elements.\n *\n * @private\n */\nvar createDOMFactory = ReactElement.createFactory;\nif (process.env.NODE_ENV !== 'production') {\n  var ReactElementValidator = require('./ReactElementValidator');\n  createDOMFactory = ReactElementValidator.createFactory;\n}\n\n/**\n * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.\n * This is also accessible via `React.DOM`.\n *\n * @public\n */\nvar ReactDOMFactories = {\n  a: createDOMFactory('a'),\n  abbr: createDOMFactory('abbr'),\n  address: createDOMFactory('address'),\n  area: createDOMFactory('area'),\n  article: createDOMFactory('article'),\n  aside: createDOMFactory('aside'),\n  audio: createDOMFactory('audio'),\n  b: createDOMFactory('b'),\n  base: createDOMFactory('base'),\n  bdi: createDOMFactory('bdi'),\n  bdo: createDOMFactory('bdo'),\n  big: createDOMFactory('big'),\n  blockquote: createDOMFactory('blockquote'),\n  body: createDOMFactory('body'),\n  br: createDOMFactory('br'),\n  button: createDOMFactory('button'),\n  canvas: createDOMFactory('canvas'),\n  caption: createDOMFactory('caption'),\n  cite: createDOMFactory('cite'),\n  code: createDOMFactory('code'),\n  col: createDOMFactory('col'),\n  colgroup: createDOMFactory('colgroup'),\n  data: createDOMFactory('data'),\n  datalist: createDOMFactory('datalist'),\n  dd: createDOMFactory('dd'),\n  del: createDOMFactory('del'),\n  details: createDOMFactory('details'),\n  dfn: createDOMFactory('dfn'),\n  dialog: createDOMFactory('dialog'),\n  div: createDOMFactory('div'),\n  dl: createDOMFactory('dl'),\n  dt: createDOMFactory('dt'),\n  em: createDOMFactory('em'),\n  embed: createDOMFactory('embed'),\n  fieldset: createDOMFactory('fieldset'),\n  figcaption: createDOMFactory('figcaption'),\n  figure: createDOMFactory('figure'),\n  footer: createDOMFactory('footer'),\n  form: createDOMFactory('form'),\n  h1: createDOMFactory('h1'),\n  h2: createDOMFactory('h2'),\n  h3: createDOMFactory('h3'),\n  h4: createDOMFactory('h4'),\n  h5: createDOMFactory('h5'),\n  h6: createDOMFactory('h6'),\n  head: createDOMFactory('head'),\n  header: createDOMFactory('header'),\n  hgroup: createDOMFactory('hgroup'),\n  hr: createDOMFactory('hr'),\n  html: createDOMFactory('html'),\n  i: createDOMFactory('i'),\n  iframe: createDOMFactory('iframe'),\n  img: createDOMFactory('img'),\n  input: createDOMFactory('input'),\n  ins: createDOMFactory('ins'),\n  kbd: createDOMFactory('kbd'),\n  keygen: createDOMFactory('keygen'),\n  label: createDOMFactory('label'),\n  legend: createDOMFactory('legend'),\n  li: createDOMFactory('li'),\n  link: createDOMFactory('link'),\n  main: createDOMFactory('main'),\n  map: createDOMFactory('map'),\n  mark: createDOMFactory('mark'),\n  menu: createDOMFactory('menu'),\n  menuitem: createDOMFactory('menuitem'),\n  meta: createDOMFactory('meta'),\n  meter: createDOMFactory('meter'),\n  nav: createDOMFactory('nav'),\n  noscript: createDOMFactory('noscript'),\n  object: createDOMFactory('object'),\n  ol: createDOMFactory('ol'),\n  optgroup: createDOMFactory('optgroup'),\n  option: createDOMFactory('option'),\n  output: createDOMFactory('output'),\n  p: createDOMFactory('p'),\n  param: createDOMFactory('param'),\n  picture: createDOMFactory('picture'),\n  pre: createDOMFactory('pre'),\n  progress: createDOMFactory('progress'),\n  q: createDOMFactory('q'),\n  rp: createDOMFactory('rp'),\n  rt: createDOMFactory('rt'),\n  ruby: createDOMFactory('ruby'),\n  s: createDOMFactory('s'),\n  samp: createDOMFactory('samp'),\n  script: createDOMFactory('script'),\n  section: createDOMFactory('section'),\n  select: createDOMFactory('select'),\n  small: createDOMFactory('small'),\n  source: createDOMFactory('source'),\n  span: createDOMFactory('span'),\n  strong: createDOMFactory('strong'),\n  style: createDOMFactory('style'),\n  sub: createDOMFactory('sub'),\n  summary: createDOMFactory('summary'),\n  sup: createDOMFactory('sup'),\n  table: createDOMFactory('table'),\n  tbody: createDOMFactory('tbody'),\n  td: createDOMFactory('td'),\n  textarea: createDOMFactory('textarea'),\n  tfoot: createDOMFactory('tfoot'),\n  th: createDOMFactory('th'),\n  thead: createDOMFactory('thead'),\n  time: createDOMFactory('time'),\n  title: createDOMFactory('title'),\n  tr: createDOMFactory('tr'),\n  track: createDOMFactory('track'),\n  u: createDOMFactory('u'),\n  ul: createDOMFactory('ul'),\n  'var': createDOMFactory('var'),\n  video: createDOMFactory('video'),\n  wbr: createDOMFactory('wbr'),\n\n  // SVG\n  circle: createDOMFactory('circle'),\n  clipPath: createDOMFactory('clipPath'),\n  defs: createDOMFactory('defs'),\n  ellipse: createDOMFactory('ellipse'),\n  g: createDOMFactory('g'),\n  image: createDOMFactory('image'),\n  line: createDOMFactory('line'),\n  linearGradient: createDOMFactory('linearGradient'),\n  mask: createDOMFactory('mask'),\n  path: createDOMFactory('path'),\n  pattern: createDOMFactory('pattern'),\n  polygon: createDOMFactory('polygon'),\n  polyline: createDOMFactory('polyline'),\n  radialGradient: createDOMFactory('radialGradient'),\n  rect: createDOMFactory('rect'),\n  stop: createDOMFactory('stop'),\n  svg: createDOMFactory('svg'),\n  text: createDOMFactory('text'),\n  tspan: createDOMFactory('tspan')\n};\n\nmodule.exports = ReactDOMFactories;","/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElementValidator\n */\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\n\n'use strict';\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactComponentTreeHook = require('./ReactComponentTreeHook');\nvar ReactElement = require('./ReactElement');\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\n\nvar checkReactTypeSpec = require('./checkReactTypeSpec');\n\nvar canDefineProperty = require('./canDefineProperty');\nvar getIteratorFn = require('./getIteratorFn');\nvar warning = require('fbjs/lib/warning');\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = ReactCurrentOwner.current.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n    if (parentName) {\n      info = ' Check the top-level render call using <' + parentName + '>.';\n    }\n  }\n  return info;\n}\n\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n  element._store.validated = true;\n\n  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});\n\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n  if (memoizer[currentComponentErrorInfo]) {\n    return;\n  }\n  memoizer[currentComponentErrorInfo] = true;\n\n  // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n  var childOwner = '';\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';\n  }\n\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;\n}\n\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n      if (ReactElement.isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (ReactElement.isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n    // Entry iterators provide implicit keys.\n    if (iteratorFn) {\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (ReactElement.isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\nfunction validatePropTypes(element) {\n  var componentClass = element.type;\n  if (typeof componentClass !== 'function') {\n    return;\n  }\n  var name = componentClass.displayName || componentClass.name;\n  if (componentClass.propTypes) {\n    checkReactTypeSpec(componentClass.propTypes, element.props, ReactPropTypeLocations.prop, name, element, null);\n  }\n  if (typeof componentClass.getDefaultProps === 'function') {\n    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;\n  }\n}\n\nvar ReactElementValidator = {\n\n  createElement: function (type, props, children) {\n    var validType = typeof type === 'string' || typeof type === 'function';\n    // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n    if (!validType) {\n      process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;\n    }\n\n    var element = ReactElement.createElement.apply(this, arguments);\n\n    // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n    if (element == null) {\n      return element;\n    }\n\n    // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n    if (validType) {\n      for (var i = 2; i < arguments.length; i++) {\n        validateChildKeys(arguments[i], type);\n      }\n    }\n\n    validatePropTypes(element);\n\n    return element;\n  },\n\n  createFactory: function (type) {\n    var validatedFactory = ReactElementValidator.createElement.bind(null, type);\n    // Legacy hook TODO: Warn if this is accessed\n    validatedFactory.type = type;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (canDefineProperty) {\n        Object.defineProperty(validatedFactory, 'type', {\n          enumerable: false,\n          get: function () {\n            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;\n            Object.defineProperty(this, 'type', {\n              value: type\n            });\n            return type;\n          }\n        });\n      }\n    }\n\n    return validatedFactory;\n  },\n\n  cloneElement: function (element, props, children) {\n    var newElement = ReactElement.cloneElement.apply(this, arguments);\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], newElement.type);\n    }\n    validatePropTypes(newElement);\n    return newElement;\n  }\n\n};\n\nmodule.exports = ReactElementValidator;","/**\n * Copyright 2016-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentTreeHook\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nfunction isNative(fn) {\n  // Based on isNative() from Lodash\n  var funcToString = Function.prototype.toString;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  var reIsNative = RegExp('^' + funcToString\n  // Take an example native function source for comparison\n  .call(hasOwnProperty)\n  // Strip regex characters so we can use it for regex\n  .replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n  // Remove hasOwnProperty from the template to make it generic\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');\n  try {\n    var source = funcToString.call(fn);\n    return reIsNative.test(source);\n  } catch (err) {\n    return false;\n  }\n}\n\nvar canUseCollections =\n// Array.from\ntypeof Array.from === 'function' &&\n// Map\ntypeof Map === 'function' && isNative(Map) &&\n// Map.prototype.keys\nMap.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&\n// Set\ntypeof Set === 'function' && isNative(Set) &&\n// Set.prototype.keys\nSet.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);\n\nvar itemMap;\nvar rootIDSet;\n\nvar itemByKey;\nvar rootByKey;\n\nif (canUseCollections) {\n  itemMap = new Map();\n  rootIDSet = new Set();\n} else {\n  itemByKey = {};\n  rootByKey = {};\n}\n\nvar unmountedIDs = [];\n\n// Use non-numeric keys to prevent V8 performance issues:\n// https://github.com/facebook/react/pull/7232\nfunction getKeyFromID(id) {\n  return '.' + id;\n}\nfunction getIDFromKey(key) {\n  return parseInt(key.substr(1), 10);\n}\n\nfunction get(id) {\n  if (canUseCollections) {\n    return itemMap.get(id);\n  } else {\n    var key = getKeyFromID(id);\n    return itemByKey[key];\n  }\n}\n\nfunction remove(id) {\n  if (canUseCollections) {\n    itemMap['delete'](id);\n  } else {\n    var key = getKeyFromID(id);\n    delete itemByKey[key];\n  }\n}\n\nfunction create(id, element, parentID) {\n  var item = {\n    element: element,\n    parentID: parentID,\n    text: null,\n    childIDs: [],\n    isMounted: false,\n    updateCount: 0\n  };\n\n  if (canUseCollections) {\n    itemMap.set(id, item);\n  } else {\n    var key = getKeyFromID(id);\n    itemByKey[key] = item;\n  }\n}\n\nfunction addRoot(id) {\n  if (canUseCollections) {\n    rootIDSet.add(id);\n  } else {\n    var key = getKeyFromID(id);\n    rootByKey[key] = true;\n  }\n}\n\nfunction removeRoot(id) {\n  if (canUseCollections) {\n    rootIDSet['delete'](id);\n  } else {\n    var key = getKeyFromID(id);\n    delete rootByKey[key];\n  }\n}\n\nfunction getRegisteredIDs() {\n  if (canUseCollections) {\n    return Array.from(itemMap.keys());\n  } else {\n    return Object.keys(itemByKey).map(getIDFromKey);\n  }\n}\n\nfunction getRootIDs() {\n  if (canUseCollections) {\n    return Array.from(rootIDSet.keys());\n  } else {\n    return Object.keys(rootByKey).map(getIDFromKey);\n  }\n}\n\nfunction purgeDeep(id) {\n  var item = get(id);\n  if (item) {\n    var childIDs = item.childIDs;\n\n    remove(id);\n    childIDs.forEach(purgeDeep);\n  }\n}\n\nfunction describeComponentFrame(name, source, ownerName) {\n  return '\\n    in ' + name + (source ? ' (at ' + source.fileName.replace(/^.*[\\\\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');\n}\n\nfunction getDisplayName(element) {\n  if (element == null) {\n    return '#empty';\n  } else if (typeof element === 'string' || typeof element === 'number') {\n    return '#text';\n  } else if (typeof element.type === 'string') {\n    return element.type;\n  } else {\n    return element.type.displayName || element.type.name || 'Unknown';\n  }\n}\n\nfunction describeID(id) {\n  var name = ReactComponentTreeHook.getDisplayName(id);\n  var element = ReactComponentTreeHook.getElement(id);\n  var ownerID = ReactComponentTreeHook.getOwnerID(id);\n  var ownerName;\n  if (ownerID) {\n    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);\n  }\n  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;\n  return describeComponentFrame(name, element && element._source, ownerName);\n}\n\nvar ReactComponentTreeHook = {\n  onSetChildren: function (id, nextChildIDs) {\n    var item = get(id);\n    item.childIDs = nextChildIDs;\n\n    for (var i = 0; i < nextChildIDs.length; i++) {\n      var nextChildID = nextChildIDs[i];\n      var nextChild = get(nextChildID);\n      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;\n      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;\n      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;\n      if (nextChild.parentID == null) {\n        nextChild.parentID = id;\n        // TODO: This shouldn't be necessary but mounting a new root during in\n        // componentWillMount currently causes not-yet-mounted components to\n        // be purged from our tree data so their parent ID is missing.\n      }\n      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;\n    }\n  },\n  onBeforeMountComponent: function (id, element, parentID) {\n    create(id, element, parentID);\n  },\n  onBeforeUpdateComponent: function (id, element) {\n    var item = get(id);\n    if (!item || !item.isMounted) {\n      // We may end up here as a result of setState() in componentWillUnmount().\n      // In this case, ignore the element.\n      return;\n    }\n    item.element = element;\n  },\n  onMountComponent: function (id) {\n    var item = get(id);\n    item.isMounted = true;\n    var isRoot = item.parentID === 0;\n    if (isRoot) {\n      addRoot(id);\n    }\n  },\n  onUpdateComponent: function (id) {\n    var item = get(id);\n    if (!item || !item.isMounted) {\n      // We may end up here as a result of setState() in componentWillUnmount().\n      // In this case, ignore the element.\n      return;\n    }\n    item.updateCount++;\n  },\n  onUnmountComponent: function (id) {\n    var item = get(id);\n    if (item) {\n      // We need to check if it exists.\n      // `item` might not exist if it is inside an error boundary, and a sibling\n      // error boundary child threw while mounting. Then this instance never\n      // got a chance to mount, but it still gets an unmounting event during\n      // the error boundary cleanup.\n      item.isMounted = false;\n      var isRoot = item.parentID === 0;\n      if (isRoot) {\n        removeRoot(id);\n      }\n    }\n    unmountedIDs.push(id);\n  },\n  purgeUnmountedComponents: function () {\n    if (ReactComponentTreeHook._preventPurging) {\n      // Should only be used for testing.\n      return;\n    }\n\n    for (var i = 0; i < unmountedIDs.length; i++) {\n      var id = unmountedIDs[i];\n      purgeDeep(id);\n    }\n    unmountedIDs.length = 0;\n  },\n  isMounted: function (id) {\n    var item = get(id);\n    return item ? item.isMounted : false;\n  },\n  getCurrentStackAddendum: function (topElement) {\n    var info = '';\n    if (topElement) {\n      var type = topElement.type;\n      var name = typeof type === 'function' ? type.displayName || type.name : type;\n      var owner = topElement._owner;\n      info += describeComponentFrame(name || 'Unknown', topElement._source, owner && owner.getName());\n    }\n\n    var currentOwner = ReactCurrentOwner.current;\n    var id = currentOwner && currentOwner._debugID;\n\n    info += ReactComponentTreeHook.getStackAddendumByID(id);\n    return info;\n  },\n  getStackAddendumByID: function (id) {\n    var info = '';\n    while (id) {\n      info += describeID(id);\n      id = ReactComponentTreeHook.getParentID(id);\n    }\n    return info;\n  },\n  getChildIDs: function (id) {\n    var item = get(id);\n    return item ? item.childIDs : [];\n  },\n  getDisplayName: function (id) {\n    var element = ReactComponentTreeHook.getElement(id);\n    if (!element) {\n      return null;\n    }\n    return getDisplayName(element);\n  },\n  getElement: function (id) {\n    var item = get(id);\n    return item ? item.element : null;\n  },\n  getOwnerID: function (id) {\n    var element = ReactComponentTreeHook.getElement(id);\n    if (!element || !element._owner) {\n      return null;\n    }\n    return element._owner._debugID;\n  },\n  getParentID: function (id) {\n    var item = get(id);\n    return item ? item.parentID : null;\n  },\n  getSource: function (id) {\n    var item = get(id);\n    var element = item ? item.element : null;\n    var source = element != null ? element._source : null;\n    return source;\n  },\n  getText: function (id) {\n    var element = ReactComponentTreeHook.getElement(id);\n    if (typeof element === 'string') {\n      return element;\n    } else if (typeof element === 'number') {\n      return '' + element;\n    } else {\n      return null;\n    }\n  },\n  getUpdateCount: function (id) {\n    var item = get(id);\n    return item ? item.updateCount : 0;\n  },\n\n\n  getRegisteredIDs: getRegisteredIDs,\n\n  getRootIDs: getRootIDs\n};\n\nmodule.exports = ReactComponentTreeHook;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule checkReactTypeSpec\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar ReactComponentTreeHook;\n\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {\n  // Temporary hack.\n  // Inline requires don't work well with Jest:\n  // https://github.com/facebook/react/issues/7240\n  // Remove the inline requires when we don't need them anymore:\n  // https://github.com/facebook/react/pull/7178\n  ReactComponentTreeHook = require('./ReactComponentTreeHook');\n}\n\nvar loggedTypeFailures = {};\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?object} element The React element that is being type-checked\n * @param {?number} debugID The React component instance that is being type-checked\n * @private\n */\nfunction checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {\n  for (var typeSpecName in typeSpecs) {\n    if (typeSpecs.hasOwnProperty(typeSpecName)) {\n      var error;\n      // Prop type validation may throw. In case they do, we don't want to\n      // fail the render phase where it didn't fail before. So we log it.\n      // After these have been cleaned up, we'll let them throw.\n      try {\n        // This is intentionally an invariant that gets caught. It's the same\n        // behavior as without this statement except with a better message.\n        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;\n        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n      } catch (ex) {\n        error = ex;\n      }\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n\n        var componentStackInfo = '';\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!ReactComponentTreeHook) {\n            ReactComponentTreeHook = require('./ReactComponentTreeHook');\n          }\n          if (debugID !== null) {\n            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);\n          } else if (element !== null) {\n            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);\n          }\n        }\n\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;\n      }\n    }\n  }\n}\n\nmodule.exports = checkReactTypeSpec;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypesSecret\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypes\n */\n\n'use strict';\n\nvar ReactElement = require('./ReactElement');\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar getIteratorFn = require('./getIteratorFn');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Collection of methods that allow declaration and validation of props that are\n * supplied to React components. Example usage:\n *\n *   var Props = require('ReactPropTypes');\n *   var MyArticle = React.createClass({\n *     propTypes: {\n *       // An optional string prop named \"description\".\n *       description: Props.string,\n *\n *       // A required enum prop named \"category\".\n *       category: Props.oneOf(['News','Photos']).isRequired,\n *\n *       // A prop named \"dialog\" that requires an instance of Dialog.\n *       dialog: Props.instanceOf(Dialog).isRequired\n *     },\n *     render: function() { ... }\n *   });\n *\n * A more formal specification of how these methods are used:\n *\n *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n *   decl := ReactPropTypes.{type}(.isRequired)?\n *\n * Each and every declaration produces a function with the same signature. This\n * allows the creation of custom validation functions. For example:\n *\n *  var MyLink = React.createClass({\n *    propTypes: {\n *      // An optional string or URI prop named \"href\".\n *      href: function(props, propName, componentName) {\n *        var propValue = props[propName];\n *        if (propValue != null && typeof propValue !== 'string' &&\n *            !(propValue instanceof URI)) {\n *          return new Error(\n *            'Expected a string or an URI for ' + propName + ' in ' +\n *            componentName\n *          );\n *        }\n *      }\n *    },\n *    render: function() {...}\n *  });\n *\n * @internal\n */\n\nvar ANONYMOUS = '<<anonymous>>';\n\nvar ReactPropTypes = {\n  array: createPrimitiveTypeChecker('array'),\n  bool: createPrimitiveTypeChecker('boolean'),\n  func: createPrimitiveTypeChecker('function'),\n  number: createPrimitiveTypeChecker('number'),\n  object: createPrimitiveTypeChecker('object'),\n  string: createPrimitiveTypeChecker('string'),\n  symbol: createPrimitiveTypeChecker('symbol'),\n\n  any: createAnyTypeChecker(),\n  arrayOf: createArrayOfTypeChecker,\n  element: createElementTypeChecker(),\n  instanceOf: createInstanceTypeChecker,\n  node: createNodeChecker(),\n  objectOf: createObjectOfTypeChecker,\n  oneOf: createEnumTypeChecker,\n  oneOfType: createUnionTypeChecker,\n  shape: createShapeTypeChecker\n};\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\n/*eslint-disable no-self-compare*/\nfunction is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n  }\n}\n/*eslint-enable no-self-compare*/\n\n/**\n * We use an Error-like object for backward compatibility as people may call\n * PropTypes directly and inspect their output. However we don't use real\n * Errors anymore. We don't inspect their stack anyway, and creating them\n * is prohibitively expensive if they are created too often, such as what\n * happens in oneOfType() for any type before the one that matched.\n */\nfunction PropTypeError(message) {\n  this.message = message;\n  this.stack = '';\n}\n// Make `instanceof Error` still work for returned errors.\nPropTypeError.prototype = Error.prototype;\n\nfunction createChainableTypeChecker(validate) {\n  if (process.env.NODE_ENV !== 'production') {\n    var manualPropTypeCallCache = {};\n  }\n  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n    componentName = componentName || ANONYMOUS;\n    propFullName = propFullName || propName;\n    if (process.env.NODE_ENV !== 'production') {\n      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {\n        var cacheKey = componentName + ':' + propName;\n        if (!manualPropTypeCallCache[cacheKey]) {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in the next major version. You may be ' + 'seeing this warning due to a third-party PropTypes library. ' + 'See https://fb.me/react-warning-dont-call-proptypes for details.', propFullName, componentName) : void 0;\n          manualPropTypeCallCache[cacheKey] = true;\n        }\n      }\n    }\n    if (props[propName] == null) {\n      var locationName = ReactPropTypeLocationNames[location];\n      if (isRequired) {\n        return new PropTypeError('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));\n      }\n      return null;\n    } else {\n      return validate(props, propName, componentName, location, propFullName);\n    }\n  }\n\n  var chainedCheckType = checkType.bind(null, false);\n  chainedCheckType.isRequired = checkType.bind(null, true);\n\n  return chainedCheckType;\n}\n\nfunction createPrimitiveTypeChecker(expectedType) {\n  function validate(props, propName, componentName, location, propFullName, secret) {\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== expectedType) {\n      var locationName = ReactPropTypeLocationNames[location];\n      // `propValue` being instance of, say, date/regexp, pass the 'object'\n      // check, but we can offer a more precise error message here rather than\n      // 'of type `object`'.\n      var preciseType = getPreciseType(propValue);\n\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createAnyTypeChecker() {\n  return createChainableTypeChecker(emptyFunction.thatReturns(null));\n}\n\nfunction createArrayOfTypeChecker(typeChecker) {\n  function validate(props, propName, componentName, location, propFullName) {\n    if (typeof typeChecker !== 'function') {\n      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n    }\n    var propValue = props[propName];\n    if (!Array.isArray(propValue)) {\n      var locationName = ReactPropTypeLocationNames[location];\n      var propType = getPropType(propValue);\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n    }\n    for (var i = 0; i < propValue.length; i++) {\n      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n      if (error instanceof Error) {\n        return error;\n      }\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createElementTypeChecker() {\n  function validate(props, propName, componentName, location, propFullName) {\n    var propValue = props[propName];\n    if (!ReactElement.isValidElement(propValue)) {\n      var locationName = ReactPropTypeLocationNames[location];\n      var propType = getPropType(propValue);\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createInstanceTypeChecker(expectedClass) {\n  function validate(props, propName, componentName, location, propFullName) {\n    if (!(props[propName] instanceof expectedClass)) {\n      var locationName = ReactPropTypeLocationNames[location];\n      var expectedClassName = expectedClass.name || ANONYMOUS;\n      var actualClassName = getClassName(props[propName]);\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createEnumTypeChecker(expectedValues) {\n  if (!Array.isArray(expectedValues)) {\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n    return emptyFunction.thatReturnsNull;\n  }\n\n  function validate(props, propName, componentName, location, propFullName) {\n    var propValue = props[propName];\n    for (var i = 0; i < expectedValues.length; i++) {\n      if (is(propValue, expectedValues[i])) {\n        return null;\n      }\n    }\n\n    var locationName = ReactPropTypeLocationNames[location];\n    var valuesString = JSON.stringify(expectedValues);\n    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createObjectOfTypeChecker(typeChecker) {\n  function validate(props, propName, componentName, location, propFullName) {\n    if (typeof typeChecker !== 'function') {\n      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n    }\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== 'object') {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n    }\n    for (var key in propValue) {\n      if (propValue.hasOwnProperty(key)) {\n        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createUnionTypeChecker(arrayOfTypeCheckers) {\n  if (!Array.isArray(arrayOfTypeCheckers)) {\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n    return emptyFunction.thatReturnsNull;\n  }\n\n  function validate(props, propName, componentName, location, propFullName) {\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n        return null;\n      }\n    }\n\n    var locationName = ReactPropTypeLocationNames[location];\n    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createNodeChecker() {\n  function validate(props, propName, componentName, location, propFullName) {\n    if (!isNode(props[propName])) {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createShapeTypeChecker(shapeTypes) {\n  function validate(props, propName, componentName, location, propFullName) {\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== 'object') {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n    }\n    for (var key in shapeTypes) {\n      var checker = shapeTypes[key];\n      if (!checker) {\n        continue;\n      }\n      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n      if (error) {\n        return error;\n      }\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction isNode(propValue) {\n  switch (typeof propValue) {\n    case 'number':\n    case 'string':\n    case 'undefined':\n      return true;\n    case 'boolean':\n      return !propValue;\n    case 'object':\n      if (Array.isArray(propValue)) {\n        return propValue.every(isNode);\n      }\n      if (propValue === null || ReactElement.isValidElement(propValue)) {\n        return true;\n      }\n\n      var iteratorFn = getIteratorFn(propValue);\n      if (iteratorFn) {\n        var iterator = iteratorFn.call(propValue);\n        var step;\n        if (iteratorFn !== propValue.entries) {\n          while (!(step = iterator.next()).done) {\n            if (!isNode(step.value)) {\n              return false;\n            }\n          }\n        } else {\n          // Iterator will provide entry [k,v] tuples rather than values.\n          while (!(step = iterator.next()).done) {\n            var entry = step.value;\n            if (entry) {\n              if (!isNode(entry[1])) {\n                return false;\n              }\n            }\n          }\n        }\n      } else {\n        return false;\n      }\n\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction isSymbol(propType, propValue) {\n  // Native Symbol.\n  if (propType === 'symbol') {\n    return true;\n  }\n\n  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n  if (propValue['@@toStringTag'] === 'Symbol') {\n    return true;\n  }\n\n  // Fallback for non-spec compliant Symbols which are polyfilled.\n  if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n    return true;\n  }\n\n  return false;\n}\n\n// Equivalent of `typeof` but with special handling for array and regexp.\nfunction getPropType(propValue) {\n  var propType = typeof propValue;\n  if (Array.isArray(propValue)) {\n    return 'array';\n  }\n  if (propValue instanceof RegExp) {\n    // Old webkits (at least until Android 4.0) return 'function' rather than\n    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n    // passes PropTypes.object.\n    return 'object';\n  }\n  if (isSymbol(propType, propValue)) {\n    return 'symbol';\n  }\n  return propType;\n}\n\n// This handles more types than `getPropType`. Only used for error messages.\n// See `createPrimitiveTypeChecker`.\nfunction getPreciseType(propValue) {\n  var propType = getPropType(propValue);\n  if (propType === 'object') {\n    if (propValue instanceof Date) {\n      return 'date';\n    } else if (propValue instanceof RegExp) {\n      return 'regexp';\n    }\n  }\n  return propType;\n}\n\n// Returns class name of the object, if any.\nfunction getClassName(propValue) {\n  if (!propValue.constructor || !propValue.constructor.name) {\n    return ANONYMOUS;\n  }\n  return propValue.constructor.name;\n}\n\nmodule.exports = ReactPropTypes;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactVersion\n */\n\n'use strict';\n\nmodule.exports = '15.3.2';","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule onlyChild\n */\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactElement = require('./ReactElement');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\nfunction onlyChild(children) {\n  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;\n  return children;\n}\n\nmodule.exports = onlyChild;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOM\n */\n\n/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/\n\n'use strict';\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactDefaultInjection = require('./ReactDefaultInjection');\nvar ReactMount = require('./ReactMount');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactUpdates = require('./ReactUpdates');\nvar ReactVersion = require('./ReactVersion');\n\nvar findDOMNode = require('./findDOMNode');\nvar getHostComponentFromComposite = require('./getHostComponentFromComposite');\nvar renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');\nvar warning = require('fbjs/lib/warning');\n\nReactDefaultInjection.inject();\n\nvar ReactDOM = {\n  findDOMNode: findDOMNode,\n  render: ReactMount.render,\n  unmountComponentAtNode: ReactMount.unmountComponentAtNode,\n  version: ReactVersion,\n\n  /* eslint-disable camelcase */\n  unstable_batchedUpdates: ReactUpdates.batchedUpdates,\n  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer\n};\n\n// Inject the runtime into a devtools global hook regardless of browser.\n// Allows for debugging when the hook is injected on the page.\n/* eslint-enable camelcase */\nif (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({\n    ComponentTree: {\n      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,\n      getNodeFromInstance: function (inst) {\n        // inst is an internal instance (but could be a composite)\n        if (inst._renderedComponent) {\n          inst = getHostComponentFromComposite(inst);\n        }\n        if (inst) {\n          return ReactDOMComponentTree.getNodeFromInstance(inst);\n        } else {\n          return null;\n        }\n      }\n    },\n    Mount: ReactMount,\n    Reconciler: ReactReconciler\n  });\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {\n\n    // First check if devtools is not installed\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n      // If we're in Chrome or Firefox, provide a download link if not installed.\n      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {\n        // Firefox does not have the issue with devtools loaded over file://\n        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;\n        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');\n      }\n    }\n\n    var testFunc = function testFn() {};\n    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;\n\n    // If we're in IE8, check to see if we are in compatibility mode and provide\n    // information on preventing compatibility mode\n    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;\n\n    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />') : void 0;\n\n    var expectedFeatures = [\n    // shims\n    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim];\n\n    for (var i = 0; i < expectedFeatures.length; i++) {\n      if (!expectedFeatures[i]) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;\n        break;\n      }\n    }\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactInstrumentation = require('./ReactInstrumentation');\n  var ReactDOMUnknownPropertyHook = require('./ReactDOMUnknownPropertyHook');\n  var ReactDOMNullInputValuePropHook = require('./ReactDOMNullInputValuePropHook');\n\n  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);\n  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);\n}\n\nmodule.exports = ReactDOM;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMComponentTree\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar DOMProperty = require('./DOMProperty');\nvar ReactDOMComponentFlags = require('./ReactDOMComponentFlags');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\nvar Flags = ReactDOMComponentFlags;\n\nvar internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);\n\n/**\n * Drill down (through composites and empty components) until we get a host or\n * host text component.\n *\n * This is pretty polymorphic but unavoidable with the current structure we have\n * for `_renderedChildren`.\n */\nfunction getRenderedHostOrTextFromComponent(component) {\n  var rendered;\n  while (rendered = component._renderedComponent) {\n    component = rendered;\n  }\n  return component;\n}\n\n/**\n * Populate `_hostNode` on the rendered host/text component with the given\n * DOM node. The passed `inst` can be a composite.\n */\nfunction precacheNode(inst, node) {\n  var hostInst = getRenderedHostOrTextFromComponent(inst);\n  hostInst._hostNode = node;\n  node[internalInstanceKey] = hostInst;\n}\n\nfunction uncacheNode(inst) {\n  var node = inst._hostNode;\n  if (node) {\n    delete node[internalInstanceKey];\n    inst._hostNode = null;\n  }\n}\n\n/**\n * Populate `_hostNode` on each child of `inst`, assuming that the children\n * match up with the DOM (element) children of `node`.\n *\n * We cache entire levels at once to avoid an n^2 problem where we access the\n * children of a node sequentially and have to walk from the start to our target\n * node every time.\n *\n * Since we update `_renderedChildren` and the actual DOM at (slightly)\n * different times, we could race here and see a newer `_renderedChildren` than\n * the DOM nodes we see. To avoid this, ReactMultiChild calls\n * `prepareToManageChildren` before we change `_renderedChildren`, at which\n * time the container's child nodes are always cached (until it unmounts).\n */\nfunction precacheChildNodes(inst, node) {\n  if (inst._flags & Flags.hasCachedChildNodes) {\n    return;\n  }\n  var children = inst._renderedChildren;\n  var childNode = node.firstChild;\n  outer: for (var name in children) {\n    if (!children.hasOwnProperty(name)) {\n      continue;\n    }\n    var childInst = children[name];\n    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;\n    if (childID === 0) {\n      // We're currently unmounting this child in ReactMultiChild; skip it.\n      continue;\n    }\n    // We assume the child nodes are in the same order as the child instances.\n    for (; childNode !== null; childNode = childNode.nextSibling) {\n      if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {\n        precacheNode(childInst, childNode);\n        continue outer;\n      }\n    }\n    // We reached the end of the DOM children without finding an ID match.\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;\n  }\n  inst._flags |= Flags.hasCachedChildNodes;\n}\n\n/**\n * Given a DOM node, return the closest ReactDOMComponent or\n * ReactDOMTextComponent instance ancestor.\n */\nfunction getClosestInstanceFromNode(node) {\n  if (node[internalInstanceKey]) {\n    return node[internalInstanceKey];\n  }\n\n  // Walk up the tree until we find an ancestor whose instance we have cached.\n  var parents = [];\n  while (!node[internalInstanceKey]) {\n    parents.push(node);\n    if (node.parentNode) {\n      node = node.parentNode;\n    } else {\n      // Top of the tree. This node must not be part of a React tree (or is\n      // unmounted, potentially).\n      return null;\n    }\n  }\n\n  var closest;\n  var inst;\n  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {\n    closest = inst;\n    if (parents.length) {\n      precacheChildNodes(inst, node);\n    }\n  }\n\n  return closest;\n}\n\n/**\n * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent\n * instance, or null if the node was not rendered by this React.\n */\nfunction getInstanceFromNode(node) {\n  var inst = getClosestInstanceFromNode(node);\n  if (inst != null && inst._hostNode === node) {\n    return inst;\n  } else {\n    return null;\n  }\n}\n\n/**\n * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding\n * DOM node.\n */\nfunction getNodeFromInstance(inst) {\n  // Without this first invariant, passing a non-DOM-component triggers the next\n  // invariant for a missing parent, which is super confusing.\n  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;\n\n  if (inst._hostNode) {\n    return inst._hostNode;\n  }\n\n  // Walk up the tree until we find an ancestor whose DOM node we have cached.\n  var parents = [];\n  while (!inst._hostNode) {\n    parents.push(inst);\n    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;\n    inst = inst._hostParent;\n  }\n\n  // Now parents contains each ancestor that does *not* have a cached native\n  // node, and `inst` is the deepest ancestor that does.\n  for (; parents.length; inst = parents.pop()) {\n    precacheChildNodes(inst, inst._hostNode);\n  }\n\n  return inst._hostNode;\n}\n\nvar ReactDOMComponentTree = {\n  getClosestInstanceFromNode: getClosestInstanceFromNode,\n  getInstanceFromNode: getInstanceFromNode,\n  getNodeFromInstance: getNodeFromInstance,\n  precacheChildNodes: precacheChildNodes,\n  precacheNode: precacheNode,\n  uncacheNode: uncacheNode\n};\n\nmodule.exports = ReactDOMComponentTree;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMProperty\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_PROPERTY: 0x1,\n  HAS_BOOLEAN_VALUE: 0x4,\n  HAS_NUMERIC_VALUE: 0x8,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it's impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMAttributeNamespaces: object mapping React attribute name to the DOM\n   * attribute namespace URL. (Attribute names not specified use no namespace.)\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function (domPropertyConfig) {\n    var Injection = DOMPropertyInjection;\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);\n    }\n\n    for (var propName in Properties) {\n      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property \\'%s\\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;\n\n      var lowerCased = propName.toLowerCase();\n      var propConfig = Properties[propName];\n\n      var propertyInfo = {\n        attributeName: lowerCased,\n        attributeNamespace: null,\n        propertyName: propName,\n        mutationMethod: null,\n\n        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),\n        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),\n        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),\n        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),\n        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)\n      };\n      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;\n\n      if (process.env.NODE_ENV !== 'production') {\n        DOMProperty.getPossibleStandardName[lowerCased] = propName;\n      }\n\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\n        var attributeName = DOMAttributeNames[propName];\n        propertyInfo.attributeName = attributeName;\n        if (process.env.NODE_ENV !== 'production') {\n          DOMProperty.getPossibleStandardName[attributeName] = propName;\n        }\n      }\n\n      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {\n        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];\n      }\n\n      if (DOMPropertyNames.hasOwnProperty(propName)) {\n        propertyInfo.propertyName = DOMPropertyNames[propName];\n      }\n\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\n        propertyInfo.mutationMethod = DOMMutationMethods[propName];\n      }\n\n      DOMProperty.properties[propName] = propertyInfo;\n    }\n  }\n};\n\n/* eslint-disable max-len */\nvar ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\n/* eslint-enable max-len */\n\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   > DOMProperty.isValid['id']\n *   true\n *   > DOMProperty.isValid['foobar']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\nvar DOMProperty = {\n\n  ID_ATTRIBUTE_NAME: 'data-reactid',\n  ROOT_ATTRIBUTE_NAME: 'data-reactroot',\n\n  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,\n  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040',\n\n  /**\n   * Map from property \"standard name\" to an object with info about how to set\n   * the property in the DOM. Each object contains:\n   *\n   * attributeName:\n   *   Used when rendering markup or with `*Attribute()`.\n   * attributeNamespace\n   * propertyName:\n   *   Used on DOM node instances. (This includes properties that mutate due to\n   *   external factors.)\n   * mutationMethod:\n   *   If non-null, used instead of the property or `setAttribute()` after\n   *   initial render.\n   * mustUseProperty:\n   *   Whether the property must be accessed and mutated as an object property.\n   * hasBooleanValue:\n   *   Whether the property should be removed when set to a falsey value.\n   * hasNumericValue:\n   *   Whether the property must be numeric or parse as a numeric and should be\n   *   removed when set to a falsey value.\n   * hasPositiveNumericValue:\n   *   Whether the property must be positive numeric or parse as a positive\n   *   numeric and should be removed when set to a falsey value.\n   * hasOverloadedBooleanValue:\n   *   Whether the property can be used as a flag as well as with a value.\n   *   Removed when strictly equal to false; present without a value when\n   *   strictly equal to true; present with a value otherwise.\n   */\n  properties: {},\n\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties. Available only in __DEV__.\n   * @type {Object}\n   */\n  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,\n\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function (attributeName) {\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];\n      if (isCustomAttributeFn(attributeName)) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  injection: DOMPropertyInjection\n};\n\nmodule.exports = DOMProperty;","/**\n * Copyright 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMComponentFlags\n */\n\n'use strict';\n\nvar ReactDOMComponentFlags = {\n  hasCachedChildNodes: 1 << 0\n};\n\nmodule.exports = ReactDOMComponentFlags;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultInjection\n */\n\n'use strict';\n\nvar BeforeInputEventPlugin = require('./BeforeInputEventPlugin');\nvar ChangeEventPlugin = require('./ChangeEventPlugin');\nvar DefaultEventPluginOrder = require('./DefaultEventPluginOrder');\nvar EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');\nvar HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');\nvar ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');\nvar ReactDOMComponent = require('./ReactDOMComponent');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactDOMEmptyComponent = require('./ReactDOMEmptyComponent');\nvar ReactDOMTreeTraversal = require('./ReactDOMTreeTraversal');\nvar ReactDOMTextComponent = require('./ReactDOMTextComponent');\nvar ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');\nvar ReactEventListener = require('./ReactEventListener');\nvar ReactInjection = require('./ReactInjection');\nvar ReactReconcileTransaction = require('./ReactReconcileTransaction');\nvar SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');\nvar SelectEventPlugin = require('./SelectEventPlugin');\nvar SimpleEventPlugin = require('./SimpleEventPlugin');\n\nvar alreadyInjected = false;\n\nfunction inject() {\n  if (alreadyInjected) {\n    // TODO: This is currently true because these injections are shared between\n    // the client and the server package. They should be built independently\n    // and not share any injection state. Then this problem will be solved.\n    return;\n  }\n  alreadyInjected = true;\n\n  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);\n\n  /**\n   * Inject modules for resolving DOM hierarchy and plugin ordering.\n   */\n  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);\n  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);\n  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);\n\n  /**\n   * Some important event plugins included by default (without having to require\n   * them).\n   */\n  ReactInjection.EventPluginHub.injectEventPluginsByName({\n    SimpleEventPlugin: SimpleEventPlugin,\n    EnterLeaveEventPlugin: EnterLeaveEventPlugin,\n    ChangeEventPlugin: ChangeEventPlugin,\n    SelectEventPlugin: SelectEventPlugin,\n    BeforeInputEventPlugin: BeforeInputEventPlugin\n  });\n\n  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);\n\n  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);\n\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);\n\n  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {\n    return new ReactDOMEmptyComponent(instantiate);\n  });\n\n  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);\n  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);\n\n  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);\n}\n\nmodule.exports = {\n  inject: inject\n};","/**\n * Copyright 2013-present Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BeforeInputEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar FallbackCompositionState = require('./FallbackCompositionState');\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\nvar SyntheticInputEvent = require('./SyntheticInputEvent');\n\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n\nvar documentMode = null;\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\n}\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onBeforeInput: null }),\n      captured: keyOf({ onBeforeInputCapture: null })\n    },\n    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionEnd: null }),\n      captured: keyOf({ onCompositionEndCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionStart: null }),\n      captured: keyOf({ onCompositionStartCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionUpdate: null }),\n      captured: keyOf({ onCompositionUpdateCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  }\n};\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n// Track the current IME composition fallback object, if any.\nvar currentComposition = null;\n\n/**\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n  var eventType;\n  var fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!currentComposition) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\n      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (currentComposition) {\n        fallbackData = currentComposition.getData();\n      }\n    }\n  }\n\n  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);\n\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionEnd:\n      return getDataFromCustomEvent(nativeEvent);\n    case topLevelTypes.topKeyPress:\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case topLevelTypes.topTextInput:\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  // If composition event is available, we extract a string only at\n  // compositionevent, otherwise extract it at fallback events.\n  if (currentComposition) {\n    if (topLevelType === topLevelTypes.topCompositionEnd || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = currentComposition.getData();\n      FallbackCompositionState.release(currentComposition);\n      currentComposition = null;\n      return chars;\n    }\n    return null;\n  }\n\n  switch (topLevelType) {\n    case topLevelTypes.topPaste:\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case topLevelTypes.topKeyPress:\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n        return String.fromCharCode(nativeEvent.which);\n      }\n      return null;\n    case topLevelTypes.topCompositionEnd:\n      return useFallbackCompositionData ? null : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n  var chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);\n\n  event.data = chars;\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nvar BeforeInputEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];\n  }\n};\n\nmodule.exports = BeforeInputEventPlugin;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventConstants\n */\n\n'use strict';\n\nvar keyMirror = require('fbjs/lib/keyMirror');\n\nvar PropagationPhases = keyMirror({ bubbled: null, captured: null });\n\n/**\n * Types of raw signals from the browser caught at the top level.\n */\nvar topLevelTypes = keyMirror({\n  topAbort: null,\n  topAnimationEnd: null,\n  topAnimationIteration: null,\n  topAnimationStart: null,\n  topBlur: null,\n  topCanPlay: null,\n  topCanPlayThrough: null,\n  topChange: null,\n  topClick: null,\n  topCompositionEnd: null,\n  topCompositionStart: null,\n  topCompositionUpdate: null,\n  topContextMenu: null,\n  topCopy: null,\n  topCut: null,\n  topDoubleClick: null,\n  topDrag: null,\n  topDragEnd: null,\n  topDragEnter: null,\n  topDragExit: null,\n  topDragLeave: null,\n  topDragOver: null,\n  topDragStart: null,\n  topDrop: null,\n  topDurationChange: null,\n  topEmptied: null,\n  topEncrypted: null,\n  topEnded: null,\n  topError: null,\n  topFocus: null,\n  topInput: null,\n  topInvalid: null,\n  topKeyDown: null,\n  topKeyPress: null,\n  topKeyUp: null,\n  topLoad: null,\n  topLoadedData: null,\n  topLoadedMetadata: null,\n  topLoadStart: null,\n  topMouseDown: null,\n  topMouseMove: null,\n  topMouseOut: null,\n  topMouseOver: null,\n  topMouseUp: null,\n  topPaste: null,\n  topPause: null,\n  topPlay: null,\n  topPlaying: null,\n  topProgress: null,\n  topRateChange: null,\n  topReset: null,\n  topScroll: null,\n  topSeeked: null,\n  topSeeking: null,\n  topSelectionChange: null,\n  topStalled: null,\n  topSubmit: null,\n  topSuspend: null,\n  topTextInput: null,\n  topTimeUpdate: null,\n  topTouchCancel: null,\n  topTouchEnd: null,\n  topTouchMove: null,\n  topTouchStart: null,\n  topTransitionEnd: null,\n  topVolumeChange: null,\n  topWaiting: null,\n  topWheel: null\n});\n\nvar EventConstants = {\n  topLevelTypes: topLevelTypes,\n  PropagationPhases: PropagationPhases\n};\n\nmodule.exports = EventConstants;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPropagators\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPluginHub = require('./EventPluginHub');\nvar EventPluginUtils = require('./EventPluginUtils');\n\nvar accumulateInto = require('./accumulateInto');\nvar forEachAccumulated = require('./forEachAccumulated');\nvar warning = require('fbjs/lib/warning');\n\nvar PropagationPhases = EventConstants.PropagationPhases;\nvar getListener = EventPluginHub.getListener;\n\n/**\n * Some event types have a notion of different registration names for different\n * \"phases\" of propagation. This finds listeners by a given phase.\n */\nfunction listenerAtPhase(inst, event, propagationPhase) {\n  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return getListener(inst, registrationName);\n}\n\n/**\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function\n * here, allows us to not have to bind or create functions for each event.\n * Mutating the event's members allows us to not have to create a wrapping\n * \"dispatch\" object that pairs the event with the listener.\n */\nfunction accumulateDirectionalDispatches(inst, upwards, event) {\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;\n  }\n  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;\n  var listener = listenerAtPhase(inst, event, phase);\n  if (listener) {\n    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n  }\n}\n\n/**\n * Collect dispatches (must be entirely collected before dispatching - see unit\n * tests). Lazily allocate the array to conserve memory.  We must loop through\n * each event and perform the traversal for each one. We cannot perform a\n * single traversal for the entire collection of events because each event may\n * have a different target.\n */\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);\n  }\n}\n\n/**\n * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.\n */\nfunction accumulateTwoPhaseDispatchesSingleSkipTarget(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    var targetInst = event._targetInst;\n    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;\n    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);\n  }\n}\n\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\nfunction accumulateDispatches(inst, ignoredDirection, event) {\n  if (event && event.dispatchConfig.registrationName) {\n    var registrationName = event.dispatchConfig.registrationName;\n    var listener = getListener(inst, registrationName);\n    if (listener) {\n      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n    }\n  }\n}\n\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\nfunction accumulateDirectDispatchesSingle(event) {\n  if (event && event.dispatchConfig.registrationName) {\n    accumulateDispatches(event._targetInst, null, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatches(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n}\n\nfunction accumulateTwoPhaseDispatchesSkipTarget(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);\n}\n\nfunction accumulateEnterLeaveDispatches(leave, enter, from, to) {\n  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);\n}\n\nfunction accumulateDirectDispatches(events) {\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);\n}\n\n/**\n * A small set of propagation patterns, each of which will accept a small amount\n * of information, and generate a set of \"dispatch ready event objects\" - which\n * are sets of events that have already been annotated with a set of dispatched\n * listener functions/ids. The API is designed this way to discourage these\n * propagation strategies from actually executing the dispatches, since we\n * always want to collect the entire set of dispatches before executing event a\n * single one.\n *\n * @constructor EventPropagators\n */\nvar EventPropagators = {\n  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,\n  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,\n  accumulateDirectDispatches: accumulateDirectDispatches,\n  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches\n};\n\nmodule.exports = EventPropagators;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginHub\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar EventPluginRegistry = require('./EventPluginRegistry');\nvar EventPluginUtils = require('./EventPluginUtils');\nvar ReactErrorUtils = require('./ReactErrorUtils');\n\nvar accumulateInto = require('./accumulateInto');\nvar forEachAccumulated = require('./forEachAccumulated');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank = {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @private\n */\nvar executeDispatchesAndRelease = function (event, simulated) {\n  if (event) {\n    EventPluginUtils.executeDispatchesInOrder(event, simulated);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\nvar executeDispatchesAndReleaseSimulated = function (e) {\n  return executeDispatchesAndRelease(e, true);\n};\nvar executeDispatchesAndReleaseTopLevel = function (e) {\n  return executeDispatchesAndRelease(e, false);\n};\n\nvar getDictionaryKey = function (inst) {\n  // Prevents V8 performance issue:\n  // https://github.com/facebook/react/pull/7232\n  return '.' + inst._rootNodeID;\n};\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub = {\n\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n\n  },\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.\n   *\n   * @param {object} inst The instance, which is the source of events.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {function} listener The callback to store.\n   */\n  putListener: function (inst, registrationName, listener) {\n    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;\n\n    var key = getDictionaryKey(inst);\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[key] = listener;\n\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.didPutListener) {\n      PluginModule.didPutListener(inst, registrationName, listener);\n    }\n  },\n\n  /**\n   * @param {object} inst The instance, which is the source of events.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function (inst, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    var key = getDictionaryKey(inst);\n    return bankForRegistrationName && bankForRegistrationName[key];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {object} inst The instance, which is the source of events.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function (inst, registrationName) {\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.willDeleteListener) {\n      PluginModule.willDeleteListener(inst, registrationName);\n    }\n\n    var bankForRegistrationName = listenerBank[registrationName];\n    // TODO: This should never be null -- when is it?\n    if (bankForRegistrationName) {\n      var key = getDictionaryKey(inst);\n      delete bankForRegistrationName[key];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {object} inst The instance, which is the source of events.\n   */\n  deleteAllListeners: function (inst) {\n    var key = getDictionaryKey(inst);\n    for (var registrationName in listenerBank) {\n      if (!listenerBank.hasOwnProperty(registrationName)) {\n        continue;\n      }\n\n      if (!listenerBank[registrationName][key]) {\n        continue;\n      }\n\n      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n      if (PluginModule && PluginModule.willDeleteListener) {\n        PluginModule.willDeleteListener(inst, registrationName);\n      }\n\n      delete listenerBank[registrationName][key];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n    for (var i = 0; i < plugins.length; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function (events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function (simulated) {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    if (simulated) {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);\n    } else {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n    }\n    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;\n    // This would be a good time to rethrow if any of the event handlers threw.\n    ReactErrorUtils.rethrowCaughtError();\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function () {\n    listenerBank = {};\n  },\n\n  __getListenerBank: function () {\n    return listenerBank;\n  }\n\n};\n\nmodule.exports = EventPluginHub;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginRegistry\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Injectable ordering of event plugins.\n */\nvar EventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!EventPluginOrder) {\n    // Wait until an `EventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var PluginModule = namesToPlugins[pluginName];\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);\n    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;\n    var publishedEvents = PluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {\n  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {\n  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;\n\n  if (process.env.NODE_ENV !== 'production') {\n    var lowerCasedName = registrationName.toLowerCase();\n    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;\n\n    if (registrationName === 'onDoubleClick') {\n      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;\n    }\n  }\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry = {\n\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Mapping from lowercase registration names to the properly cased version,\n   * used to warn in the case of missing event handlers. Available\n   * only in __DEV__.\n   * @type {Object}\n   */\n  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function (InjectedEventPluginOrder) {\n    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;\n    // Clone the ordering so it cannot be dynamically mutated.\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function (injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var PluginModule = injectedNamesToPlugins[pluginName];\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {\n        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;\n        namesToPlugins[pluginName] = PluginModule;\n        isOrderingDirty = true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function (event) {\n    var dispatchConfig = event.dispatchConfig;\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;\n    }\n    for (var phase in dispatchConfig.phasedRegistrationNames) {\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {\n        continue;\n      }\n      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];\n      if (PluginModule) {\n        return PluginModule;\n      }\n    }\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function () {\n    EventPluginOrder = null;\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n    EventPluginRegistry.plugins.length = 0;\n\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;\n      for (var lowerCasedName in possibleRegistrationNames) {\n        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {\n          delete possibleRegistrationNames[lowerCasedName];\n        }\n      }\n    }\n  }\n\n};\n\nmodule.exports = EventPluginRegistry;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginUtils\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar EventConstants = require('./EventConstants');\nvar ReactErrorUtils = require('./ReactErrorUtils');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Injected dependencies:\n */\n\n/**\n * - `ComponentTree`: [required] Module that can convert between React instances\n *   and actual node references.\n */\nvar ComponentTree;\nvar TreeTraversal;\nvar injection = {\n  injectComponentTree: function (Injected) {\n    ComponentTree = Injected;\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;\n    }\n  },\n  injectTreeTraversal: function (Injected) {\n    TreeTraversal = Injected;\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;\n    }\n  }\n};\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nfunction isEndish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;\n}\n\nfunction isMoveish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;\n}\nfunction isStartish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;\n}\n\nvar validateEventDispatches;\nif (process.env.NODE_ENV !== 'production') {\n  validateEventDispatches = function (event) {\n    var dispatchListeners = event._dispatchListeners;\n    var dispatchInstances = event._dispatchInstances;\n\n    var listenersIsArr = Array.isArray(dispatchListeners);\n    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;\n\n    var instancesIsArr = Array.isArray(dispatchInstances);\n    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;\n\n    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;\n  };\n}\n\n/**\n * Dispatch the event to the listener.\n * @param {SyntheticEvent} event SyntheticEvent to handle\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @param {function} listener Application-level callback\n * @param {*} inst Internal component instance\n */\nfunction executeDispatch(event, simulated, listener, inst) {\n  var type = event.type || 'unknown-event';\n  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);\n  if (simulated) {\n    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);\n  } else {\n    ReactErrorUtils.invokeGuardedCallback(type, listener, event);\n  }\n  event.currentTarget = null;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches.\n */\nfunction executeDispatchesInOrder(event, simulated) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchInstances = event._dispatchInstances;\n  if (process.env.NODE_ENV !== 'production') {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and Instances are two parallel arrays that are always in sync.\n      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);\n    }\n  } else if (dispatchListeners) {\n    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);\n  }\n  event._dispatchListeners = null;\n  event._dispatchInstances = null;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches, but stops\n * at the first dispatch execution returning true, and returns that id.\n *\n * @return {?string} id of the first dispatch execution who's listener returns\n * true, or null if no listener returned true.\n */\nfunction executeDispatchesInOrderStopAtTrueImpl(event) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchInstances = event._dispatchInstances;\n  if (process.env.NODE_ENV !== 'production') {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and Instances are two parallel arrays that are always in sync.\n      if (dispatchListeners[i](event, dispatchInstances[i])) {\n        return dispatchInstances[i];\n      }\n    }\n  } else if (dispatchListeners) {\n    if (dispatchListeners(event, dispatchInstances)) {\n      return dispatchInstances;\n    }\n  }\n  return null;\n}\n\n/**\n * @see executeDispatchesInOrderStopAtTrueImpl\n */\nfunction executeDispatchesInOrderStopAtTrue(event) {\n  var ret = executeDispatchesInOrderStopAtTrueImpl(event);\n  event._dispatchInstances = null;\n  event._dispatchListeners = null;\n  return ret;\n}\n\n/**\n * Execution of a \"direct\" dispatch - there must be at most one dispatch\n * accumulated on the event or it is considered an error. It doesn't really make\n * sense for an event with multiple dispatches (bubbled) to keep track of the\n * return values at each dispatch execution, but it does tend to make sense when\n * dealing with \"direct\" dispatches.\n *\n * @return {*} The return value of executing the single dispatch.\n */\nfunction executeDirectDispatch(event) {\n  if (process.env.NODE_ENV !== 'production') {\n    validateEventDispatches(event);\n  }\n  var dispatchListener = event._dispatchListeners;\n  var dispatchInstance = event._dispatchInstances;\n  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;\n  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;\n  var res = dispatchListener ? dispatchListener(event) : null;\n  event.currentTarget = null;\n  event._dispatchListeners = null;\n  event._dispatchInstances = null;\n  return res;\n}\n\n/**\n * @param {SyntheticEvent} event\n * @return {boolean} True iff number of dispatches accumulated is greater than 0.\n */\nfunction hasDispatches(event) {\n  return !!event._dispatchListeners;\n}\n\n/**\n * General utilities that are useful in creating custom Event Plugins.\n */\nvar EventPluginUtils = {\n  isEndish: isEndish,\n  isMoveish: isMoveish,\n  isStartish: isStartish,\n\n  executeDirectDispatch: executeDirectDispatch,\n  executeDispatchesInOrder: executeDispatchesInOrder,\n  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,\n  hasDispatches: hasDispatches,\n\n  getInstanceFromNode: function (node) {\n    return ComponentTree.getInstanceFromNode(node);\n  },\n  getNodeFromInstance: function (node) {\n    return ComponentTree.getNodeFromInstance(node);\n  },\n  isAncestor: function (a, b) {\n    return TreeTraversal.isAncestor(a, b);\n  },\n  getLowestCommonAncestor: function (a, b) {\n    return TreeTraversal.getLowestCommonAncestor(a, b);\n  },\n  getParentInstance: function (inst) {\n    return TreeTraversal.getParentInstance(inst);\n  },\n  traverseTwoPhase: function (target, fn, arg) {\n    return TreeTraversal.traverseTwoPhase(target, fn, arg);\n  },\n  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {\n    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);\n  },\n\n  injection: injection\n};\n\nmodule.exports = EventPluginUtils;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactErrorUtils\n */\n\n'use strict';\n\nvar caughtError = null;\n\n/**\n * Call a function while guarding against errors that happens within it.\n *\n * @param {?String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} a First argument\n * @param {*} b Second argument\n */\nfunction invokeGuardedCallback(name, func, a, b) {\n  try {\n    return func(a, b);\n  } catch (x) {\n    if (caughtError === null) {\n      caughtError = x;\n    }\n    return undefined;\n  }\n}\n\nvar ReactErrorUtils = {\n  invokeGuardedCallback: invokeGuardedCallback,\n\n  /**\n   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event\n   * handler are sure to be rethrown by rethrowCaughtError.\n   */\n  invokeGuardedCallbackWithCatch: invokeGuardedCallback,\n\n  /**\n   * During execution of guarded functions we will capture the first error which\n   * we will rethrow to be handled by the top level error handler.\n   */\n  rethrowCaughtError: function () {\n    if (caughtError) {\n      var error = caughtError;\n      caughtError = null;\n      throw error;\n    }\n  }\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  /**\n   * To help development we can get better devtools integration by simulating a\n   * real browser event.\n   */\n  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n    var fakeNode = document.createElement('react');\n    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {\n      var boundFunc = func.bind(null, a, b);\n      var evtType = 'react-' + name;\n      fakeNode.addEventListener(evtType, boundFunc, false);\n      var evt = document.createEvent('Event');\n      evt.initEvent(evtType, false, false);\n      fakeNode.dispatchEvent(evt);\n      fakeNode.removeEventListener(evtType, boundFunc, false);\n    };\n  }\n}\n\nmodule.exports = ReactErrorUtils;","/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule accumulateInto\n * \n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto(current, next) {\n  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;\n\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  if (Array.isArray(current)) {\n    if (Array.isArray(next)) {\n      current.push.apply(current, next);\n      return current;\n    }\n    current.push(next);\n    return current;\n  }\n\n  if (Array.isArray(next)) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nmodule.exports = accumulateInto;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule forEachAccumulated\n * \n */\n\n'use strict';\n\n/**\n * @param {array} arr an \"accumulation\" of items which is either an Array or\n * a single item. Useful when paired with the `accumulate` module. This is a\n * simple utility that allows us to reason about a collection of items, but\n * handling the case when there is exactly one item (and we do not need to\n * allocate an array).\n */\n\nfunction forEachAccumulated(arr, cb, scope) {\n  if (Array.isArray(arr)) {\n    arr.forEach(cb, scope);\n  } else if (arr) {\n    cb.call(scope, arr);\n  }\n}\n\nmodule.exports = forEachAccumulated;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FallbackCompositionState\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar PooledClass = require('./PooledClass');\n\nvar getTextContentAccessor = require('./getTextContentAccessor');\n\n/**\n * This helper class stores information about text content of a target node,\n * allowing comparison of content before and after a given event.\n *\n * Identify the node where selection currently begins, then observe\n * both its text content and its current position in the DOM. Since the\n * browser may natively replace the target node during composition, we can\n * use its position to find its replacement.\n *\n * @param {DOMEventTarget} root\n */\nfunction FallbackCompositionState(root) {\n  this._root = root;\n  this._startText = this.getText();\n  this._fallbackText = null;\n}\n\n_assign(FallbackCompositionState.prototype, {\n  destructor: function () {\n    this._root = null;\n    this._startText = null;\n    this._fallbackText = null;\n  },\n\n  /**\n   * Get current text of input.\n   *\n   * @return {string}\n   */\n  getText: function () {\n    if ('value' in this._root) {\n      return this._root.value;\n    }\n    return this._root[getTextContentAccessor()];\n  },\n\n  /**\n   * Determine the differing substring between the initially stored\n   * text content and the current content.\n   *\n   * @return {string}\n   */\n  getData: function () {\n    if (this._fallbackText) {\n      return this._fallbackText;\n    }\n\n    var start;\n    var startValue = this._startText;\n    var startLength = startValue.length;\n    var end;\n    var endValue = this.getText();\n    var endLength = endValue.length;\n\n    for (start = 0; start < startLength; start++) {\n      if (startValue[start] !== endValue[start]) {\n        break;\n      }\n    }\n\n    var minEnd = startLength - start;\n    for (end = 1; end <= minEnd; end++) {\n      if (startValue[startLength - end] !== endValue[endLength - end]) {\n        break;\n      }\n    }\n\n    var sliceTail = end > 1 ? 1 - end : undefined;\n    this._fallbackText = endValue.slice(start, sliceTail);\n    return this._fallbackText;\n  }\n});\n\nPooledClass.addPoolingTo(FallbackCompositionState);\n\nmodule.exports = FallbackCompositionState;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getTextContentAccessor\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar contentKey = null;\n\n/**\n * Gets the key used to access text content on a DOM node.\n *\n * @return {?string} Key used to access text content.\n * @internal\n */\nfunction getTextContentAccessor() {\n  if (!contentKey && ExecutionEnvironment.canUseDOM) {\n    // Prefer textContent to innerText because many browsers support both but\n    // SVG <text> elements don't support innerText even when <div> does.\n    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';\n  }\n  return contentKey;\n}\n\nmodule.exports = getTextContentAccessor;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticCompositionEvent\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents\n */\nvar CompositionEventInterface = {\n  data: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);\n\nmodule.exports = SyntheticCompositionEvent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticEvent\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar PooledClass = require('./PooledClass');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar warning = require('fbjs/lib/warning');\n\nvar didWarnForAddedNewProperty = false;\nvar isProxySupported = typeof Proxy === 'function';\n\nvar shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar EventInterface = {\n  type: null,\n  target: null,\n  // currentTarget is set when dispatching; no use in copying it here\n  currentTarget: emptyFunction.thatReturnsNull,\n  eventPhase: null,\n  bubbles: null,\n  cancelable: null,\n  timeStamp: function (event) {\n    return event.timeStamp || Date.now();\n  },\n  defaultPrevented: null,\n  isTrusted: null\n};\n\n/**\n * Synthetic events are dispatched by event plugins, typically in response to a\n * top-level event delegation handler.\n *\n * These systems should generally use pooling to reduce the frequency of garbage\n * collection. The system should check `isPersistent` to determine whether the\n * event should be released into the pool after being dispatched. Users that\n * need a persisted event should invoke `persist`.\n *\n * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n * normalizing browser quirks. Subclasses do not necessarily have to implement a\n * DOM interface; custom application-specific events can also subclass this.\n *\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {*} targetInst Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @param {DOMEventTarget} nativeEventTarget Target node.\n */\nfunction SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {\n  if (process.env.NODE_ENV !== 'production') {\n    // these have a getter/setter for warnings\n    delete this.nativeEvent;\n    delete this.preventDefault;\n    delete this.stopPropagation;\n  }\n\n  this.dispatchConfig = dispatchConfig;\n  this._targetInst = targetInst;\n  this.nativeEvent = nativeEvent;\n\n  var Interface = this.constructor.Interface;\n  for (var propName in Interface) {\n    if (!Interface.hasOwnProperty(propName)) {\n      continue;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      delete this[propName]; // this has a getter/setter for warnings\n    }\n    var normalize = Interface[propName];\n    if (normalize) {\n      this[propName] = normalize(nativeEvent);\n    } else {\n      if (propName === 'target') {\n        this.target = nativeEventTarget;\n      } else {\n        this[propName] = nativeEvent[propName];\n      }\n    }\n  }\n\n  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;\n  if (defaultPrevented) {\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;\n  } else {\n    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;\n  }\n  this.isPropagationStopped = emptyFunction.thatReturnsFalse;\n  return this;\n}\n\n_assign(SyntheticEvent.prototype, {\n\n  preventDefault: function () {\n    this.defaultPrevented = true;\n    var event = this.nativeEvent;\n    if (!event) {\n      return;\n    }\n\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else if (typeof event.returnValue !== 'unknown') {\n      // eslint-disable-line valid-typeof\n      event.returnValue = false;\n    }\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;\n  },\n\n  stopPropagation: function () {\n    var event = this.nativeEvent;\n    if (!event) {\n      return;\n    }\n\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    } else if (typeof event.cancelBubble !== 'unknown') {\n      // eslint-disable-line valid-typeof\n      // The ChangeEventPlugin registers a \"propertychange\" event for\n      // IE. This event does not support bubbling or cancelling, and\n      // any references to cancelBubble throw \"Member not found\".  A\n      // typeof check of \"unknown\" circumvents this issue (and is also\n      // IE specific).\n      event.cancelBubble = true;\n    }\n\n    this.isPropagationStopped = emptyFunction.thatReturnsTrue;\n  },\n\n  /**\n   * We release all dispatched `SyntheticEvent`s after each event loop, adding\n   * them back into the pool. This allows a way to hold onto a reference that\n   * won't be added back into the pool.\n   */\n  persist: function () {\n    this.isPersistent = emptyFunction.thatReturnsTrue;\n  },\n\n  /**\n   * Checks if this event should be released back into the pool.\n   *\n   * @return {boolean} True if this should not be released, false otherwise.\n   */\n  isPersistent: emptyFunction.thatReturnsFalse,\n\n  /**\n   * `PooledClass` looks for `destructor` on each instance it releases.\n   */\n  destructor: function () {\n    var Interface = this.constructor.Interface;\n    for (var propName in Interface) {\n      if (process.env.NODE_ENV !== 'production') {\n        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));\n      } else {\n        this[propName] = null;\n      }\n    }\n    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {\n      this[shouldBeReleasedProperties[i]] = null;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));\n      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));\n      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));\n    }\n  }\n\n});\n\nSyntheticEvent.Interface = EventInterface;\n\nif (process.env.NODE_ENV !== 'production') {\n  if (isProxySupported) {\n    /*eslint-disable no-func-assign */\n    SyntheticEvent = new Proxy(SyntheticEvent, {\n      construct: function (target, args) {\n        return this.apply(target, Object.create(target.prototype), args);\n      },\n      apply: function (constructor, that, args) {\n        return new Proxy(constructor.apply(that, args), {\n          set: function (target, prop, value) {\n            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {\n              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\\'re ' + 'seeing this, you\\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;\n              didWarnForAddedNewProperty = true;\n            }\n            target[prop] = value;\n            return true;\n          }\n        });\n      }\n    });\n    /*eslint-enable no-func-assign */\n  }\n}\n/**\n * Helper to reduce boilerplate when creating subclasses.\n *\n * @param {function} Class\n * @param {?object} Interface\n */\nSyntheticEvent.augmentClass = function (Class, Interface) {\n  var Super = this;\n\n  var E = function () {};\n  E.prototype = Super.prototype;\n  var prototype = new E();\n\n  _assign(prototype, Class.prototype);\n  Class.prototype = prototype;\n  Class.prototype.constructor = Class;\n\n  Class.Interface = _assign({}, Super.Interface, Interface);\n  Class.augmentClass = Super.augmentClass;\n\n  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);\n};\n\nPooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);\n\nmodule.exports = SyntheticEvent;\n\n/**\n  * Helper to nullify syntheticEvent instance properties when destructing\n  *\n  * @param {object} SyntheticEvent\n  * @param {String} propName\n  * @return {object} defineProperty object\n  */\nfunction getPooledWarningPropertyDefinition(propName, getVal) {\n  var isFunction = typeof getVal === 'function';\n  return {\n    configurable: true,\n    set: set,\n    get: get\n  };\n\n  function set(val) {\n    var action = isFunction ? 'setting the method' : 'setting the property';\n    warn(action, 'This is effectively a no-op');\n    return val;\n  }\n\n  function get() {\n    var action = isFunction ? 'accessing the method' : 'accessing the property';\n    var result = isFunction ? 'This is a no-op function' : 'This is set to null';\n    warn(action, result);\n    return getVal;\n  }\n\n  function warn(action, result) {\n    var warningCondition = false;\n    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\\'re seeing this, ' + 'you\\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;\n  }\n}","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticInputEvent\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105\n *      /#events-inputevents\n */\nvar InputEventInterface = {\n  data: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);\n\nmodule.exports = SyntheticInputEvent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ChangeEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPluginHub = require('./EventPluginHub');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactUpdates = require('./ReactUpdates');\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getEventTarget = require('./getEventTarget');\nvar isEventSupported = require('./isEventSupported');\nvar isTextInputElement = require('./isTextInputElement');\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onChange: null }),\n      captured: keyOf({ onChangeCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]\n  }\n};\n\n/**\n * For IE shims\n */\nvar activeElement = null;\nvar activeElementInst = null;\nvar activeElementValue = null;\nvar activeElementValueProp = null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem) {\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}\n\nvar doesChangeEventBubble = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n\n  // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\n}\n\nfunction runEventInBatch(event) {\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue(false);\n}\n\nfunction startWatchingForChangeEventIE8(target, targetInst) {\n  activeElement = target;\n  activeElementInst = targetInst;\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\n}\n\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\n  activeElement = null;\n  activeElementInst = null;\n}\n\nfunction getTargetInstForChangeEvent(topLevelType, targetInst) {\n  if (topLevelType === topLevelTypes.topChange) {\n    return targetInst;\n  }\n}\nfunction handleEventsForChangeEventIE8(topLevelType, target, targetInst) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(target, targetInst);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForChangeEventIE8();\n  }\n}\n\n/**\n * SECTION: handle `input` event\n */\nvar isInputEventSupported = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events.\n  // IE10+ fire input events to often, such when a placeholder\n  // changes or when an input with a placeholder is focused.\n  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);\n}\n\n/**\n * (For IE <=11) Replacement getter/setter for the `value` property that gets\n * set on the active element.\n */\nvar newValueProp = {\n  get: function () {\n    return activeElementValueProp.get.call(this);\n  },\n  set: function (val) {\n    // Cast to a string so we can do equality checks.\n    activeElementValue = '' + val;\n    activeElementValueProp.set.call(this, val);\n  }\n};\n\n/**\n * (For IE <=11) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(target, targetInst) {\n  activeElement = target;\n  activeElementInst = targetInst;\n  activeElementValue = target.value;\n  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');\n\n  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only\n  // on DOM elements\n  Object.defineProperty(activeElement, 'value', newValueProp);\n  if (activeElement.attachEvent) {\n    activeElement.attachEvent('onpropertychange', handlePropertyChange);\n  } else {\n    activeElement.addEventListener('propertychange', handlePropertyChange, false);\n  }\n}\n\n/**\n * (For IE <=11) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n\n  // delete restores the original property definition\n  delete activeElement.value;\n\n  if (activeElement.detachEvent) {\n    activeElement.detachEvent('onpropertychange', handlePropertyChange);\n  } else {\n    activeElement.removeEventListener('propertychange', handlePropertyChange, false);\n  }\n\n  activeElement = null;\n  activeElementInst = null;\n  activeElementValue = null;\n  activeElementValueProp = null;\n}\n\n/**\n * (For IE <=11) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n  var value = nativeEvent.srcElement.value;\n  if (value === activeElementValue) {\n    return;\n  }\n  activeElementValue = value;\n\n  manualDispatchChangeEvent(nativeEvent);\n}\n\n/**\n * If a `change` event should be fired, returns the target's ID.\n */\nfunction getTargetInstForInputEvent(topLevelType, targetInst) {\n  if (topLevelType === topLevelTypes.topInput) {\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\n    // what we want so fall through here and trigger an abstract event\n    return targetInst;\n  }\n}\n\nfunction handleEventsForInputEventIE(topLevelType, target, targetInst) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to 'value'\n    // In IE9-11, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(target, targetInst);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetInstForInputEventIE(topLevelType, targetInst) {\n  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    if (activeElement && activeElement.value !== activeElementValue) {\n      activeElementValue = activeElement.value;\n      return activeElementInst;\n    }\n  }\n}\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\n}\n\nfunction getTargetInstForClickEvent(topLevelType, targetInst) {\n  if (topLevelType === topLevelTypes.topClick) {\n    return targetInst;\n  }\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nvar ChangeEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;\n\n    var getTargetInstFunc, handleEventFunc;\n    if (shouldUseChangeEvent(targetNode)) {\n      if (doesChangeEventBubble) {\n        getTargetInstFunc = getTargetInstForChangeEvent;\n      } else {\n        handleEventFunc = handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(targetNode)) {\n      if (isInputEventSupported) {\n        getTargetInstFunc = getTargetInstForInputEvent;\n      } else {\n        getTargetInstFunc = getTargetInstForInputEventIE;\n        handleEventFunc = handleEventsForInputEventIE;\n      }\n    } else if (shouldUseClickEvent(targetNode)) {\n      getTargetInstFunc = getTargetInstForClickEvent;\n    }\n\n    if (getTargetInstFunc) {\n      var inst = getTargetInstFunc(topLevelType, targetInst);\n      if (inst) {\n        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);\n        event.type = 'change';\n        EventPropagators.accumulateTwoPhaseDispatches(event);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(topLevelType, targetNode, targetInst);\n    }\n  }\n\n};\n\nmodule.exports = ChangeEventPlugin;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactUpdates\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar CallbackQueue = require('./CallbackQueue');\nvar PooledClass = require('./PooledClass');\nvar ReactFeatureFlags = require('./ReactFeatureFlags');\nvar ReactReconciler = require('./ReactReconciler');\nvar Transaction = require('./Transaction');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar dirtyComponents = [];\nvar updateBatchNumber = 0;\nvar asapCallbackQueue = CallbackQueue.getPooled();\nvar asapEnqueued = false;\n\nvar batchingStrategy = null;\n\nfunction ensureInjected() {\n  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;\n}\n\nvar NESTED_UPDATES = {\n  initialize: function () {\n    this.dirtyComponentsLength = dirtyComponents.length;\n  },\n  close: function () {\n    if (this.dirtyComponentsLength !== dirtyComponents.length) {\n      // Additional updates were enqueued by componentDidUpdate handlers or\n      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run\n      // these new updates so that if A's componentDidUpdate calls setState on\n      // B, B will update before the callback A's updater provided when calling\n      // setState.\n      dirtyComponents.splice(0, this.dirtyComponentsLength);\n      flushBatchedUpdates();\n    } else {\n      dirtyComponents.length = 0;\n    }\n  }\n};\n\nvar UPDATE_QUEUEING = {\n  initialize: function () {\n    this.callbackQueue.reset();\n  },\n  close: function () {\n    this.callbackQueue.notifyAll();\n  }\n};\n\nvar TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];\n\nfunction ReactUpdatesFlushTransaction() {\n  this.reinitializeTransaction();\n  this.dirtyComponentsLength = null;\n  this.callbackQueue = CallbackQueue.getPooled();\n  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(\n  /* useCreateElement */true);\n}\n\n_assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  destructor: function () {\n    this.dirtyComponentsLength = null;\n    CallbackQueue.release(this.callbackQueue);\n    this.callbackQueue = null;\n    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);\n    this.reconcileTransaction = null;\n  },\n\n  perform: function (method, scope, a) {\n    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`\n    // with this transaction's wrappers around it.\n    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);\n  }\n});\n\nPooledClass.addPoolingTo(ReactUpdatesFlushTransaction);\n\nfunction batchedUpdates(callback, a, b, c, d, e) {\n  ensureInjected();\n  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);\n}\n\n/**\n * Array comparator for ReactComponents by mount ordering.\n *\n * @param {ReactComponent} c1 first component you're comparing\n * @param {ReactComponent} c2 second component you're comparing\n * @return {number} Return value usable by Array.prototype.sort().\n */\nfunction mountOrderComparator(c1, c2) {\n  return c1._mountOrder - c2._mountOrder;\n}\n\nfunction runBatchedUpdates(transaction) {\n  var len = transaction.dirtyComponentsLength;\n  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;\n\n  // Since reconciling a component higher in the owner hierarchy usually (not\n  // always -- see shouldComponentUpdate()) will reconcile children, reconcile\n  // them before their children by sorting the array.\n  dirtyComponents.sort(mountOrderComparator);\n\n  // Any updates enqueued while reconciling must be performed after this entire\n  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and\n  // C, B could update twice in a single batch if C's render enqueues an update\n  // to B (since B would have already updated, we should skip it, and the only\n  // way we can know to do so is by checking the batch counter).\n  updateBatchNumber++;\n\n  for (var i = 0; i < len; i++) {\n    // If a component is unmounted before pending changes apply, it will still\n    // be here, but we assume that it has cleared its _pendingCallbacks and\n    // that performUpdateIfNecessary is a noop.\n    var component = dirtyComponents[i];\n\n    // If performUpdateIfNecessary happens to enqueue any new updates, we\n    // shouldn't execute the callbacks until the next render happens, so\n    // stash the callbacks first\n    var callbacks = component._pendingCallbacks;\n    component._pendingCallbacks = null;\n\n    var markerName;\n    if (ReactFeatureFlags.logTopLevelRenders) {\n      var namedComponent = component;\n      // Duck type TopLevelWrapper. This is probably always true.\n      if (component._currentElement.props === component._renderedComponent._currentElement) {\n        namedComponent = component._renderedComponent;\n      }\n      markerName = 'React update: ' + namedComponent.getName();\n      console.time(markerName);\n    }\n\n    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);\n\n    if (markerName) {\n      console.timeEnd(markerName);\n    }\n\n    if (callbacks) {\n      for (var j = 0; j < callbacks.length; j++) {\n        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());\n      }\n    }\n  }\n}\n\nvar flushBatchedUpdates = function () {\n  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents\n  // array and perform any updates enqueued by mount-ready handlers (i.e.,\n  // componentDidUpdate) but we need to check here too in order to catch\n  // updates enqueued by setState callbacks and asap calls.\n  while (dirtyComponents.length || asapEnqueued) {\n    if (dirtyComponents.length) {\n      var transaction = ReactUpdatesFlushTransaction.getPooled();\n      transaction.perform(runBatchedUpdates, null, transaction);\n      ReactUpdatesFlushTransaction.release(transaction);\n    }\n\n    if (asapEnqueued) {\n      asapEnqueued = false;\n      var queue = asapCallbackQueue;\n      asapCallbackQueue = CallbackQueue.getPooled();\n      queue.notifyAll();\n      CallbackQueue.release(queue);\n    }\n  }\n};\n\n/**\n * Mark a component as needing a rerender, adding an optional callback to a\n * list of functions which will be executed once the rerender occurs.\n */\nfunction enqueueUpdate(component) {\n  ensureInjected();\n\n  // Various parts of our code (such as ReactCompositeComponent's\n  // _renderValidatedComponent) assume that calls to render aren't nested;\n  // verify that that's the case. (This is called by each top-level update\n  // function, like setState, forceUpdate, etc.; creation and\n  // destruction of top-level components is guarded in ReactMount.)\n\n  if (!batchingStrategy.isBatchingUpdates) {\n    batchingStrategy.batchedUpdates(enqueueUpdate, component);\n    return;\n  }\n\n  dirtyComponents.push(component);\n  if (component._updateBatchNumber == null) {\n    component._updateBatchNumber = updateBatchNumber + 1;\n  }\n}\n\n/**\n * Enqueue a callback to be run at the end of the current batching cycle. Throws\n * if no updates are currently being performed.\n */\nfunction asap(callback, context) {\n  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;\n  asapCallbackQueue.enqueue(callback, context);\n  asapEnqueued = true;\n}\n\nvar ReactUpdatesInjection = {\n  injectReconcileTransaction: function (ReconcileTransaction) {\n    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;\n    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;\n  },\n\n  injectBatchingStrategy: function (_batchingStrategy) {\n    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;\n    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;\n    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;\n    batchingStrategy = _batchingStrategy;\n  }\n};\n\nvar ReactUpdates = {\n  /**\n   * React references `ReactReconcileTransaction` using this property in order\n   * to allow dependency injection.\n   *\n   * @internal\n   */\n  ReactReconcileTransaction: null,\n\n  batchedUpdates: batchedUpdates,\n  enqueueUpdate: enqueueUpdate,\n  flushBatchedUpdates: flushBatchedUpdates,\n  injection: ReactUpdatesInjection,\n  asap: asap\n};\n\nmodule.exports = ReactUpdates;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CallbackQueue\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar PooledClass = require('./PooledClass');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * A specialized pseudo-event module to help keep track of components waiting to\n * be notified when their DOM representations are available for use.\n *\n * This implements `PooledClass`, so you should never need to instantiate this.\n * Instead, use `CallbackQueue.getPooled()`.\n *\n * @class ReactMountReady\n * @implements PooledClass\n * @internal\n */\nfunction CallbackQueue() {\n  this._callbacks = null;\n  this._contexts = null;\n}\n\n_assign(CallbackQueue.prototype, {\n\n  /**\n   * Enqueues a callback to be invoked when `notifyAll` is invoked.\n   *\n   * @param {function} callback Invoked when `notifyAll` is invoked.\n   * @param {?object} context Context to call `callback` with.\n   * @internal\n   */\n  enqueue: function (callback, context) {\n    this._callbacks = this._callbacks || [];\n    this._contexts = this._contexts || [];\n    this._callbacks.push(callback);\n    this._contexts.push(context);\n  },\n\n  /**\n   * Invokes all enqueued callbacks and clears the queue. This is invoked after\n   * the DOM representation of a component has been created or updated.\n   *\n   * @internal\n   */\n  notifyAll: function () {\n    var callbacks = this._callbacks;\n    var contexts = this._contexts;\n    if (callbacks) {\n      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;\n      this._callbacks = null;\n      this._contexts = null;\n      for (var i = 0; i < callbacks.length; i++) {\n        callbacks[i].call(contexts[i]);\n      }\n      callbacks.length = 0;\n      contexts.length = 0;\n    }\n  },\n\n  checkpoint: function () {\n    return this._callbacks ? this._callbacks.length : 0;\n  },\n\n  rollback: function (len) {\n    if (this._callbacks) {\n      this._callbacks.length = len;\n      this._contexts.length = len;\n    }\n  },\n\n  /**\n   * Resets the internal queue.\n   *\n   * @internal\n   */\n  reset: function () {\n    this._callbacks = null;\n    this._contexts = null;\n  },\n\n  /**\n   * `PooledClass` looks for this.\n   */\n  destructor: function () {\n    this.reset();\n  }\n\n});\n\nPooledClass.addPoolingTo(CallbackQueue);\n\nmodule.exports = CallbackQueue;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactFeatureFlags\n * \n */\n\n'use strict';\n\nvar ReactFeatureFlags = {\n  // When true, call console.time() before and .timeEnd() after each top-level\n  // render (both initial renders and updates). Useful when looking at prod-mode\n  // timeline profiles in Chrome, for example.\n  logTopLevelRenders: false\n};\n\nmodule.exports = ReactFeatureFlags;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconciler\n */\n\n'use strict';\n\nvar ReactRef = require('./ReactRef');\nvar ReactInstrumentation = require('./ReactInstrumentation');\n\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Helper to call ReactRef.attachRefs with this composite component, split out\n * to avoid allocations in the transaction mount-ready queue.\n */\nfunction attachRefs() {\n  ReactRef.attachRefs(this, this._currentElement);\n}\n\nvar ReactReconciler = {\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {?object} the containing host component instance\n   * @param {?object} info about the host container\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots\n  ) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);\n      }\n    }\n    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);\n    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);\n      }\n    }\n    return markup;\n  },\n\n  /**\n   * Returns a value that can be passed to\n   * ReactComponentEnvironment.replaceNodeWithMarkup.\n   */\n  getHostNode: function (internalInstance) {\n    return internalInstance.getHostNode();\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function (internalInstance, safely) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);\n      }\n    }\n    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);\n    internalInstance.unmountComponent(safely);\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);\n      }\n    }\n  },\n\n  /**\n   * Update a component using a new element.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactElement} nextElement\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @internal\n   */\n  receiveComponent: function (internalInstance, nextElement, transaction, context) {\n    var prevElement = internalInstance._currentElement;\n\n    if (nextElement === prevElement && context === internalInstance._context) {\n      // Since elements are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It's possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the element. We explicitly check for the existence of an owner since\n      // it's possible for an element created outside a composite to be\n      // deeply mutated and reused.\n\n      // TODO: Bailing out early is just a perf optimization right?\n      // TODO: Removing the return statement should affect correctness?\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);\n      }\n    }\n\n    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);\n\n    if (refsChanged) {\n      ReactRef.detachRefs(internalInstance, prevElement);\n    }\n\n    internalInstance.receiveComponent(nextElement, transaction, context);\n\n    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);\n      }\n    }\n  },\n\n  /**\n   * Flush any dirty changes in a component.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {\n    if (internalInstance._updateBatchNumber !== updateBatchNumber) {\n      // The component's enqueued batch number should always be the current\n      // batch or the following one.\n      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;\n      return;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);\n      }\n    }\n    internalInstance.performUpdateIfNecessary(transaction);\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);\n      }\n    }\n  }\n\n};\n\nmodule.exports = ReactReconciler;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactRef\n */\n\n'use strict';\n\nvar ReactOwner = require('./ReactOwner');\n\nvar ReactRef = {};\n\nfunction attachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(component.getPublicInstance());\n  } else {\n    // Legacy ref\n    ReactOwner.addComponentAsRefTo(component, ref, owner);\n  }\n}\n\nfunction detachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(null);\n  } else {\n    // Legacy ref\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);\n  }\n}\n\nReactRef.attachRefs = function (instance, element) {\n  if (element === null || element === false) {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    attachRef(ref, instance, element._owner);\n  }\n};\n\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {\n  // If either the owner or a `ref` has changed, make sure the newest owner\n  // has stored a reference to `this`, and the previous owner (if different)\n  // has forgotten the reference to `this`. We use the element instead\n  // of the public this.props because the post processing cannot determine\n  // a ref. The ref conceptually lives on the element.\n\n  // TODO: Should this even be possible? The owner cannot change because\n  // it's forbidden by shouldUpdateReactComponent. The ref can change\n  // if you swap the keys of but not the refs. Reconsider where this check\n  // is made. It probably belongs where the key checking and\n  // instantiateReactComponent is done.\n\n  var prevEmpty = prevElement === null || prevElement === false;\n  var nextEmpty = nextElement === null || nextElement === false;\n\n  return (\n    // This has a few false positives w/r/t empty components.\n    prevEmpty || nextEmpty || nextElement.ref !== prevElement.ref ||\n    // If owner changes but we have an unchanged function ref, don't update refs\n    typeof nextElement.ref === 'string' && nextElement._owner !== prevElement._owner\n  );\n};\n\nReactRef.detachRefs = function (instance, element) {\n  if (element === null || element === false) {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    detachRef(ref, instance, element._owner);\n  }\n};\n\nmodule.exports = ReactRef;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactOwner\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * ReactOwners are capable of storing references to owned components.\n *\n * All components are capable of //being// referenced by owner components, but\n * only ReactOwner components are capable of //referencing// owned components.\n * The named reference is known as a \"ref\".\n *\n * Refs are available when mounted and updated during reconciliation.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return (\n *         <div onClick={this.handleClick}>\n *           <CustomComponent ref=\"custom\" />\n *         </div>\n *       );\n *     },\n *     handleClick: function() {\n *       this.refs.custom.handleClick();\n *     },\n *     componentDidMount: function() {\n *       this.refs.custom.initialize();\n *     }\n *   });\n *\n * Refs should rarely be used. When refs are used, they should only be done to\n * control data that is not handled by React's data flow.\n *\n * @class ReactOwner\n */\nvar ReactOwner = {\n\n  /**\n   * @param {?object} object\n   * @return {boolean} True if `object` is a valid owner.\n   * @final\n   */\n  isValidOwner: function (object) {\n    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');\n  },\n\n  /**\n   * Adds a component by ref to an owner component.\n   *\n   * @param {ReactComponent} component Component to reference.\n   * @param {string} ref Name by which to refer to the component.\n   * @param {ReactOwner} owner Component on which to record the ref.\n   * @final\n   * @internal\n   */\n  addComponentAsRefTo: function (component, ref, owner) {\n    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;\n    owner.attachRef(ref, component);\n  },\n\n  /**\n   * Removes a component by ref from an owner component.\n   *\n   * @param {ReactComponent} component Component to dereference.\n   * @param {string} ref Name of the ref to remove.\n   * @param {ReactOwner} owner Component on which the ref is recorded.\n   * @final\n   * @internal\n   */\n  removeComponentAsRefFrom: function (component, ref, owner) {\n    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;\n    var ownerPublicInstance = owner.getPublicInstance();\n    // Check that `component`'s owner is still alive and that `component` is still the current ref\n    // because we do not want to detach the ref if another component stole it.\n    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {\n      owner.detachRef(ref);\n    }\n  }\n\n};\n\nmodule.exports = ReactOwner;","/**\n * Copyright 2016-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInstrumentation\n */\n\n'use strict';\n\nvar debugTool = null;\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactDebugTool = require('./ReactDebugTool');\n  debugTool = ReactDebugTool;\n}\n\nmodule.exports = { debugTool: debugTool };","/**\n * Copyright 2016-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDebugTool\n */\n\n'use strict';\n\nvar ReactInvalidSetStateWarningHook = require('./ReactInvalidSetStateWarningHook');\nvar ReactHostOperationHistoryHook = require('./ReactHostOperationHistoryHook');\nvar ReactComponentTreeHook = require('./ReactComponentTreeHook');\nvar ReactChildrenMutationWarningHook = require('./ReactChildrenMutationWarningHook');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar performanceNow = require('fbjs/lib/performanceNow');\nvar warning = require('fbjs/lib/warning');\n\nvar hooks = [];\nvar didHookThrowForEvent = {};\n\nfunction callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {\n  try {\n    fn.call(context, arg1, arg2, arg3, arg4, arg5);\n  } catch (e) {\n    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\\n' + e.stack) : void 0;\n    didHookThrowForEvent[event] = true;\n  }\n}\n\nfunction emitEvent(event, arg1, arg2, arg3, arg4, arg5) {\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    var fn = hook[event];\n    if (fn) {\n      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);\n    }\n  }\n}\n\nvar isProfiling = false;\nvar flushHistory = [];\nvar lifeCycleTimerStack = [];\nvar currentFlushNesting = 0;\nvar currentFlushMeasurements = null;\nvar currentFlushStartTime = null;\nvar currentTimerDebugID = null;\nvar currentTimerStartTime = null;\nvar currentTimerNestedFlushDuration = null;\nvar currentTimerType = null;\n\nvar lifeCycleTimerHasWarned = false;\n\nfunction clearHistory() {\n  ReactComponentTreeHook.purgeUnmountedComponents();\n  ReactHostOperationHistoryHook.clearHistory();\n}\n\nfunction getTreeSnapshot(registeredIDs) {\n  return registeredIDs.reduce(function (tree, id) {\n    var ownerID = ReactComponentTreeHook.getOwnerID(id);\n    var parentID = ReactComponentTreeHook.getParentID(id);\n    tree[id] = {\n      displayName: ReactComponentTreeHook.getDisplayName(id),\n      text: ReactComponentTreeHook.getText(id),\n      updateCount: ReactComponentTreeHook.getUpdateCount(id),\n      childIDs: ReactComponentTreeHook.getChildIDs(id),\n      // Text nodes don't have owners but this is close enough.\n      ownerID: ownerID || ReactComponentTreeHook.getOwnerID(parentID),\n      parentID: parentID\n    };\n    return tree;\n  }, {});\n}\n\nfunction resetMeasurements() {\n  var previousStartTime = currentFlushStartTime;\n  var previousMeasurements = currentFlushMeasurements || [];\n  var previousOperations = ReactHostOperationHistoryHook.getHistory();\n\n  if (currentFlushNesting === 0) {\n    currentFlushStartTime = null;\n    currentFlushMeasurements = null;\n    clearHistory();\n    return;\n  }\n\n  if (previousMeasurements.length || previousOperations.length) {\n    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();\n    flushHistory.push({\n      duration: performanceNow() - previousStartTime,\n      measurements: previousMeasurements || [],\n      operations: previousOperations || [],\n      treeSnapshot: getTreeSnapshot(registeredIDs)\n    });\n  }\n\n  clearHistory();\n  currentFlushStartTime = performanceNow();\n  currentFlushMeasurements = [];\n}\n\nfunction checkDebugID(debugID) {\n  var allowRoot = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n  if (allowRoot && debugID === 0) {\n    return;\n  }\n  if (!debugID) {\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;\n  }\n}\n\nfunction beginLifeCycleTimer(debugID, timerType) {\n  if (currentFlushNesting === 0) {\n    return;\n  }\n  if (currentTimerType && !lifeCycleTimerHasWarned) {\n    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;\n    lifeCycleTimerHasWarned = true;\n  }\n  currentTimerStartTime = performanceNow();\n  currentTimerNestedFlushDuration = 0;\n  currentTimerDebugID = debugID;\n  currentTimerType = timerType;\n}\n\nfunction endLifeCycleTimer(debugID, timerType) {\n  if (currentFlushNesting === 0) {\n    return;\n  }\n  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {\n    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;\n    lifeCycleTimerHasWarned = true;\n  }\n  if (isProfiling) {\n    currentFlushMeasurements.push({\n      timerType: timerType,\n      instanceID: debugID,\n      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration\n    });\n  }\n  currentTimerStartTime = null;\n  currentTimerNestedFlushDuration = null;\n  currentTimerDebugID = null;\n  currentTimerType = null;\n}\n\nfunction pauseCurrentLifeCycleTimer() {\n  var currentTimer = {\n    startTime: currentTimerStartTime,\n    nestedFlushStartTime: performanceNow(),\n    debugID: currentTimerDebugID,\n    timerType: currentTimerType\n  };\n  lifeCycleTimerStack.push(currentTimer);\n  currentTimerStartTime = null;\n  currentTimerNestedFlushDuration = null;\n  currentTimerDebugID = null;\n  currentTimerType = null;\n}\n\nfunction resumeCurrentLifeCycleTimer() {\n  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop();\n\n  var startTime = _lifeCycleTimerStack$.startTime;\n  var nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime;\n  var debugID = _lifeCycleTimerStack$.debugID;\n  var timerType = _lifeCycleTimerStack$.timerType;\n\n  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;\n  currentTimerStartTime = startTime;\n  currentTimerNestedFlushDuration += nestedFlushDuration;\n  currentTimerDebugID = debugID;\n  currentTimerType = timerType;\n}\n\nvar ReactDebugTool = {\n  addHook: function (hook) {\n    hooks.push(hook);\n  },\n  removeHook: function (hook) {\n    for (var i = 0; i < hooks.length; i++) {\n      if (hooks[i] === hook) {\n        hooks.splice(i, 1);\n        i--;\n      }\n    }\n  },\n  isProfiling: function () {\n    return isProfiling;\n  },\n  beginProfiling: function () {\n    if (isProfiling) {\n      return;\n    }\n\n    isProfiling = true;\n    flushHistory.length = 0;\n    resetMeasurements();\n    ReactDebugTool.addHook(ReactHostOperationHistoryHook);\n  },\n  endProfiling: function () {\n    if (!isProfiling) {\n      return;\n    }\n\n    isProfiling = false;\n    resetMeasurements();\n    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);\n  },\n  getFlushHistory: function () {\n    return flushHistory;\n  },\n  onBeginFlush: function () {\n    currentFlushNesting++;\n    resetMeasurements();\n    pauseCurrentLifeCycleTimer();\n    emitEvent('onBeginFlush');\n  },\n  onEndFlush: function () {\n    resetMeasurements();\n    currentFlushNesting--;\n    resumeCurrentLifeCycleTimer();\n    emitEvent('onEndFlush');\n  },\n  onBeginLifeCycleTimer: function (debugID, timerType) {\n    checkDebugID(debugID);\n    emitEvent('onBeginLifeCycleTimer', debugID, timerType);\n    beginLifeCycleTimer(debugID, timerType);\n  },\n  onEndLifeCycleTimer: function (debugID, timerType) {\n    checkDebugID(debugID);\n    endLifeCycleTimer(debugID, timerType);\n    emitEvent('onEndLifeCycleTimer', debugID, timerType);\n  },\n  onBeginProcessingChildContext: function () {\n    emitEvent('onBeginProcessingChildContext');\n  },\n  onEndProcessingChildContext: function () {\n    emitEvent('onEndProcessingChildContext');\n  },\n  onHostOperation: function (debugID, type, payload) {\n    checkDebugID(debugID);\n    emitEvent('onHostOperation', debugID, type, payload);\n  },\n  onSetState: function () {\n    emitEvent('onSetState');\n  },\n  onSetChildren: function (debugID, childDebugIDs) {\n    checkDebugID(debugID);\n    childDebugIDs.forEach(checkDebugID);\n    emitEvent('onSetChildren', debugID, childDebugIDs);\n  },\n  onBeforeMountComponent: function (debugID, element, parentDebugID) {\n    checkDebugID(debugID);\n    checkDebugID(parentDebugID, true);\n    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);\n  },\n  onMountComponent: function (debugID) {\n    checkDebugID(debugID);\n    emitEvent('onMountComponent', debugID);\n  },\n  onBeforeUpdateComponent: function (debugID, element) {\n    checkDebugID(debugID);\n    emitEvent('onBeforeUpdateComponent', debugID, element);\n  },\n  onUpdateComponent: function (debugID) {\n    checkDebugID(debugID);\n    emitEvent('onUpdateComponent', debugID);\n  },\n  onBeforeUnmountComponent: function (debugID) {\n    checkDebugID(debugID);\n    emitEvent('onBeforeUnmountComponent', debugID);\n  },\n  onUnmountComponent: function (debugID) {\n    checkDebugID(debugID);\n    emitEvent('onUnmountComponent', debugID);\n  },\n  onTestEvent: function () {\n    emitEvent('onTestEvent');\n  }\n};\n\n// TODO remove these when RN/www gets updated\nReactDebugTool.addDevtool = ReactDebugTool.addHook;\nReactDebugTool.removeDevtool = ReactDebugTool.removeHook;\n\nReactDebugTool.addHook(ReactInvalidSetStateWarningHook);\nReactDebugTool.addHook(ReactComponentTreeHook);\nReactDebugTool.addHook(ReactChildrenMutationWarningHook);\nvar url = ExecutionEnvironment.canUseDOM && window.location.href || '';\nif (/[?&]react_perf\\b/.test(url)) {\n  ReactDebugTool.beginProfiling();\n}\n\nmodule.exports = ReactDebugTool;","/**\n * Copyright 2016-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInvalidSetStateWarningHook\n */\n\n'use strict';\n\nvar warning = require('fbjs/lib/warning');\n\nif (process.env.NODE_ENV !== 'production') {\n  var processingChildContext = false;\n\n  var warnInvalidSetState = function () {\n    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;\n  };\n}\n\nvar ReactInvalidSetStateWarningHook = {\n  onBeginProcessingChildContext: function () {\n    processingChildContext = true;\n  },\n  onEndProcessingChildContext: function () {\n    processingChildContext = false;\n  },\n  onSetState: function () {\n    warnInvalidSetState();\n  }\n};\n\nmodule.exports = ReactInvalidSetStateWarningHook;","/**\n * Copyright 2016-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactHostOperationHistoryHook\n */\n\n'use strict';\n\nvar history = [];\n\nvar ReactHostOperationHistoryHook = {\n  onHostOperation: function (debugID, type, payload) {\n    history.push({\n      instanceID: debugID,\n      type: type,\n      payload: payload\n    });\n  },\n  clearHistory: function () {\n    if (ReactHostOperationHistoryHook._preventClearing) {\n      // Should only be used for tests.\n      return;\n    }\n\n    history = [];\n  },\n  getHistory: function () {\n    return history;\n  }\n};\n\nmodule.exports = ReactHostOperationHistoryHook;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactChildrenMutationWarningHook\n */\n\n'use strict';\n\nvar ReactComponentTreeHook = require('./ReactComponentTreeHook');\n\nvar warning = require('fbjs/lib/warning');\n\nfunction handleElement(debugID, element) {\n  if (element == null) {\n    return;\n  }\n  if (element._shadowChildren === undefined) {\n    return;\n  }\n  if (element._shadowChildren === element.props.children) {\n    return;\n  }\n  var isMutated = false;\n  if (Array.isArray(element._shadowChildren)) {\n    if (element._shadowChildren.length === element.props.children.length) {\n      for (var i = 0; i < element._shadowChildren.length; i++) {\n        if (element._shadowChildren[i] !== element.props.children[i]) {\n          isMutated = true;\n        }\n      }\n    } else {\n      isMutated = true;\n    }\n  }\n  if (!Array.isArray(element._shadowChildren) || isMutated) {\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Component\\'s children should not be mutated.%s', ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n  }\n}\n\nvar ReactChildrenMutationWarningHook = {\n  onMountComponent: function (debugID) {\n    handleElement(debugID, ReactComponentTreeHook.getElement(debugID));\n  },\n  onUpdateComponent: function (debugID) {\n    handleElement(debugID, ReactComponentTreeHook.getElement(debugID));\n  }\n};\n\nmodule.exports = ReactChildrenMutationWarningHook;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Transaction\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * `Transaction` creates a black box that is able to wrap any method such that\n * certain invariants are maintained before and after the method is invoked\n * (Even if an exception is thrown while invoking the wrapped method). Whoever\n * instantiates a transaction can provide enforcers of the invariants at\n * creation time. The `Transaction` class itself will supply one additional\n * automatic invariant for you - the invariant that any transaction instance\n * should not be run while it is already being run. You would typically create a\n * single instance of a `Transaction` for reuse multiple times, that potentially\n * is used to wrap several different methods. Wrappers are extremely simple -\n * they only require implementing two methods.\n *\n * <pre>\n *                       wrappers (injected at creation time)\n *                                      +        +\n *                                      |        |\n *                    +-----------------|--------|--------------+\n *                    |                 v        |              |\n *                    |      +---------------+   |              |\n *                    |   +--|    wrapper1   |---|----+         |\n *                    |   |  +---------------+   v    |         |\n *                    |   |          +-------------+  |         |\n *                    |   |     +----|   wrapper2  |--------+   |\n *                    |   |     |    +-------------+  |     |   |\n *                    |   |     |                     |     |   |\n *                    |   v     v                     v     v   | wrapper\n *                    | +---+ +---+   +---------+   +---+ +---+ | invariants\n * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained\n * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | +---+ +---+   +---------+   +---+ +---+ |\n *                    |  initialize                    close    |\n *                    +-----------------------------------------+\n * </pre>\n *\n * Use cases:\n * - Preserving the input selection ranges before/after reconciliation.\n *   Restoring selection even in the event of an unexpected error.\n * - Deactivating events while rearranging the DOM, preventing blurs/focuses,\n *   while guaranteeing that afterwards, the event system is reactivated.\n * - Flushing a queue of collected DOM mutations to the main UI thread after a\n *   reconciliation takes place in a worker thread.\n * - Invoking any collected `componentDidUpdate` callbacks after rendering new\n *   content.\n * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue\n *   to preserve the `scrollTop` (an automatic scroll aware DOM).\n * - (Future use case): Layout calculations before and after DOM updates.\n *\n * Transactional plugin API:\n * - A module that has an `initialize` method that returns any precomputation.\n * - and a `close` method that accepts the precomputation. `close` is invoked\n *   when the wrapped process is completed, or has failed.\n *\n * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules\n * that implement `initialize` and `close`.\n * @return {Transaction} Single transaction for reuse in thread.\n *\n * @class Transaction\n */\nvar Mixin = {\n  /**\n   * Sets up this instance so that it is prepared for collecting metrics. Does\n   * so such that this setup method may be used on an instance that is already\n   * initialized, in a way that does not consume additional memory upon reuse.\n   * That can be useful if you decide to make your subclass of this mixin a\n   * \"PooledClass\".\n   */\n  reinitializeTransaction: function () {\n    this.transactionWrappers = this.getTransactionWrappers();\n    if (this.wrapperInitData) {\n      this.wrapperInitData.length = 0;\n    } else {\n      this.wrapperInitData = [];\n    }\n    this._isInTransaction = false;\n  },\n\n  _isInTransaction: false,\n\n  /**\n   * @abstract\n   * @return {Array<TransactionWrapper>} Array of transaction wrappers.\n   */\n  getTransactionWrappers: null,\n\n  isInTransaction: function () {\n    return !!this._isInTransaction;\n  },\n\n  /**\n   * Executes the function within a safety window. Use this for the top level\n   * methods that result in large amounts of computation/mutations that would\n   * need to be safety checked. The optional arguments helps prevent the need\n   * to bind in many cases.\n   *\n   * @param {function} method Member of scope to call.\n   * @param {Object} scope Scope to invoke from.\n   * @param {Object?=} a Argument to pass to the method.\n   * @param {Object?=} b Argument to pass to the method.\n   * @param {Object?=} c Argument to pass to the method.\n   * @param {Object?=} d Argument to pass to the method.\n   * @param {Object?=} e Argument to pass to the method.\n   * @param {Object?=} f Argument to pass to the method.\n   *\n   * @return {*} Return value from `method`.\n   */\n  perform: function (method, scope, a, b, c, d, e, f) {\n    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;\n    var errorThrown;\n    var ret;\n    try {\n      this._isInTransaction = true;\n      // Catching errors makes debugging more difficult, so we start with\n      // errorThrown set to true before setting it to false after calling\n      // close -- if it's still set to true in the finally block, it means\n      // one of these calls threw.\n      errorThrown = true;\n      this.initializeAll(0);\n      ret = method.call(scope, a, b, c, d, e, f);\n      errorThrown = false;\n    } finally {\n      try {\n        if (errorThrown) {\n          // If `method` throws, prefer to show that stack trace over any thrown\n          // by invoking `closeAll`.\n          try {\n            this.closeAll(0);\n          } catch (err) {}\n        } else {\n          // Since `method` didn't throw, we don't want to silence the exception\n          // here.\n          this.closeAll(0);\n        }\n      } finally {\n        this._isInTransaction = false;\n      }\n    }\n    return ret;\n  },\n\n  initializeAll: function (startIndex) {\n    var transactionWrappers = this.transactionWrappers;\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\n      var wrapper = transactionWrappers[i];\n      try {\n        // Catching errors makes debugging more difficult, so we start with the\n        // OBSERVED_ERROR state before overwriting it with the real return value\n        // of initialize -- if it's still set to OBSERVED_ERROR in the finally\n        // block, it means wrapper.initialize threw.\n        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;\n        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;\n      } finally {\n        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {\n          // The initializer for wrapper i threw an error; initialize the\n          // remaining wrappers but silence any exceptions from them to ensure\n          // that the first error is the one to bubble up.\n          try {\n            this.initializeAll(i + 1);\n          } catch (err) {}\n        }\n      }\n    }\n  },\n\n  /**\n   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into\n   * them the respective return values of `this.transactionWrappers.init[i]`\n   * (`close`rs that correspond to initializers that failed will not be\n   * invoked).\n   */\n  closeAll: function (startIndex) {\n    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;\n    var transactionWrappers = this.transactionWrappers;\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\n      var wrapper = transactionWrappers[i];\n      var initData = this.wrapperInitData[i];\n      var errorThrown;\n      try {\n        // Catching errors makes debugging more difficult, so we start with\n        // errorThrown set to true before setting it to false after calling\n        // close -- if it's still set to true in the finally block, it means\n        // wrapper.close threw.\n        errorThrown = true;\n        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {\n          wrapper.close.call(this, initData);\n        }\n        errorThrown = false;\n      } finally {\n        if (errorThrown) {\n          // The closer for wrapper i threw an error; close the remaining\n          // wrappers but silence any exceptions from them to ensure that the\n          // first error is the one to bubble up.\n          try {\n            this.closeAll(i + 1);\n          } catch (e) {}\n        }\n      }\n    }\n    this.wrapperInitData.length = 0;\n  }\n};\n\nvar Transaction = {\n\n  Mixin: Mixin,\n\n  /**\n   * Token to look for to determine if an error occurred.\n   */\n  OBSERVED_ERROR: {}\n\n};\n\nmodule.exports = Transaction;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventTarget\n */\n\n'use strict';\n\n/**\n * Gets the target node from a native browser event by accounting for\n * inconsistencies in browser DOM APIs.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {DOMEventTarget} Target node.\n */\n\nfunction getEventTarget(nativeEvent) {\n  var target = nativeEvent.target || nativeEvent.srcElement || window;\n\n  // Normalize SVG <use> element events #4963\n  if (target.correspondingUseElement) {\n    target = target.correspondingUseElement;\n  }\n\n  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).\n  // @see http://www.quirksmode.org/js/events_properties.html\n  return target.nodeType === 3 ? target.parentNode : target;\n}\n\nmodule.exports = getEventTarget;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isEventSupported\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar useHasFeature;\nif (ExecutionEnvironment.canUseDOM) {\n  useHasFeature = document.implementation && document.implementation.hasFeature &&\n  // always returns true in newer browsers as per the standard.\n  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature\n  document.implementation.hasFeature('', '') !== true;\n}\n\n/**\n * Checks if an event is supported in the current execution environment.\n *\n * NOTE: This will not work correctly for non-generic events such as `change`,\n * `reset`, `load`, `error`, and `select`.\n *\n * Borrows from Modernizr.\n *\n * @param {string} eventNameSuffix Event name, e.g. \"click\".\n * @param {?boolean} capture Check if the capture phase is supported.\n * @return {boolean} True if the event is supported.\n * @internal\n * @license Modernizr 3.0.0pre (Custom Build) | MIT\n */\nfunction isEventSupported(eventNameSuffix, capture) {\n  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {\n    return false;\n  }\n\n  var eventName = 'on' + eventNameSuffix;\n  var isSupported = eventName in document;\n\n  if (!isSupported) {\n    var element = document.createElement('div');\n    element.setAttribute(eventName, 'return;');\n    isSupported = typeof element[eventName] === 'function';\n  }\n\n  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {\n    // This is the only way to test support for the `wheel` event in IE9+.\n    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');\n  }\n\n  return isSupported;\n}\n\nmodule.exports = isEventSupported;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isTextInputElement\n * \n */\n\n'use strict';\n\n/**\n * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n */\n\nvar supportedInputTypes = {\n  'color': true,\n  'date': true,\n  'datetime': true,\n  'datetime-local': true,\n  'email': true,\n  'month': true,\n  'number': true,\n  'password': true,\n  'range': true,\n  'search': true,\n  'tel': true,\n  'text': true,\n  'time': true,\n  'url': true,\n  'week': true\n};\n\nfunction isTextInputElement(elem) {\n  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n\n  if (nodeName === 'input') {\n    return !!supportedInputTypes[elem.type];\n  }\n\n  if (nodeName === 'textarea') {\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports = isTextInputElement;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DefaultEventPluginOrder\n */\n\n'use strict';\n\nvar keyOf = require('fbjs/lib/keyOf');\n\n/**\n * Module that is injectable into `EventPluginHub`, that specifies a\n * deterministic ordering of `EventPlugin`s. A convenient way to reason about\n * plugins, without having to package every one of them. This is better than\n * having plugins be ordered in the same order that they are injected because\n * that ordering would be influenced by the packaging order.\n * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that\n * preventing default on events is convenient in `SimpleEventPlugin` handlers.\n */\nvar DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];\n\nmodule.exports = DefaultEventPluginOrder;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EnterLeaveEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  mouseEnter: {\n    registrationName: keyOf({ onMouseEnter: null }),\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]\n  },\n  mouseLeave: {\n    registrationName: keyOf({ onMouseLeave: null }),\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]\n  }\n};\n\nvar EnterLeaveEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * For almost every interaction we care about, there will be both a top-level\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n   * we do not extract duplicate events. However, moving the mouse into the\n   * browser from outside will not fire a `mouseout` event. In this case, we use\n   * the `mouseover` top-level event.\n   */\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\n      return null;\n    }\n    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {\n      // Must not be a mouse in or mouse out - ignoring.\n      return null;\n    }\n\n    var win;\n    if (nativeEventTarget.window === nativeEventTarget) {\n      // `nativeEventTarget` is probably a window object.\n      win = nativeEventTarget;\n    } else {\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n      var doc = nativeEventTarget.ownerDocument;\n      if (doc) {\n        win = doc.defaultView || doc.parentWindow;\n      } else {\n        win = window;\n      }\n    }\n\n    var from;\n    var to;\n    if (topLevelType === topLevelTypes.topMouseOut) {\n      from = targetInst;\n      var related = nativeEvent.relatedTarget || nativeEvent.toElement;\n      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;\n    } else {\n      // Moving to a node from outside the window.\n      from = null;\n      to = targetInst;\n    }\n\n    if (from === to) {\n      // Nothing pertains to our managed components.\n      return null;\n    }\n\n    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);\n    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);\n\n    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);\n    leave.type = 'mouseleave';\n    leave.target = fromNode;\n    leave.relatedTarget = toNode;\n\n    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);\n    enter.type = 'mouseenter';\n    enter.target = toNode;\n    enter.relatedTarget = fromNode;\n\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);\n\n    return [leave, enter];\n  }\n\n};\n\nmodule.exports = EnterLeaveEventPlugin;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticMouseEvent\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\nvar ViewportMetrics = require('./ViewportMetrics');\n\nvar getEventModifierState = require('./getEventModifierState');\n\n/**\n * @interface MouseEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar MouseEventInterface = {\n  screenX: null,\n  screenY: null,\n  clientX: null,\n  clientY: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  getModifierState: getEventModifierState,\n  button: function (event) {\n    // Webkit, Firefox, IE9+\n    // which:  1 2 3\n    // button: 0 1 2 (standard)\n    var button = event.button;\n    if ('which' in event) {\n      return button;\n    }\n    // IE<9\n    // which:  undefined\n    // button: 0 0 0\n    // button: 1 4 2 (onmouseup)\n    return button === 2 ? 2 : button === 4 ? 1 : 0;\n  },\n  buttons: null,\n  relatedTarget: function (event) {\n    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);\n  },\n  // \"Proprietary\" Interface.\n  pageX: function (event) {\n    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;\n  },\n  pageY: function (event) {\n    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);\n\nmodule.exports = SyntheticMouseEvent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticUIEvent\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getEventTarget = require('./getEventTarget');\n\n/**\n * @interface UIEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar UIEventInterface = {\n  view: function (event) {\n    if (event.view) {\n      return event.view;\n    }\n\n    var target = getEventTarget(event);\n    if (target.window === target) {\n      // target is a window object\n      return target;\n    }\n\n    var doc = target.ownerDocument;\n    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n    if (doc) {\n      return doc.defaultView || doc.parentWindow;\n    } else {\n      return window;\n    }\n  },\n  detail: function (event) {\n    return event.detail || 0;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticEvent}\n */\nfunction SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);\n\nmodule.exports = SyntheticUIEvent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ViewportMetrics\n */\n\n'use strict';\n\nvar ViewportMetrics = {\n\n  currentScrollLeft: 0,\n\n  currentScrollTop: 0,\n\n  refreshScrollValues: function (scrollPosition) {\n    ViewportMetrics.currentScrollLeft = scrollPosition.x;\n    ViewportMetrics.currentScrollTop = scrollPosition.y;\n  }\n\n};\n\nmodule.exports = ViewportMetrics;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventModifierState\n */\n\n'use strict';\n\n/**\n * Translation from modifier key to the associated property in the event.\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers\n */\n\nvar modifierKeyToProp = {\n  'Alt': 'altKey',\n  'Control': 'ctrlKey',\n  'Meta': 'metaKey',\n  'Shift': 'shiftKey'\n};\n\n// IE8 does not implement getModifierState so we simply map it to the only\n// modifier keys exposed by the event itself, does not support Lock-keys.\n// Currently, all major browsers except Chrome seems to support Lock-keys.\nfunction modifierStateGetter(keyArg) {\n  var syntheticEvent = this;\n  var nativeEvent = syntheticEvent.nativeEvent;\n  if (nativeEvent.getModifierState) {\n    return nativeEvent.getModifierState(keyArg);\n  }\n  var keyProp = modifierKeyToProp[keyArg];\n  return keyProp ? !!nativeEvent[keyProp] : false;\n}\n\nfunction getEventModifierState(nativeEvent) {\n  return modifierStateGetter;\n}\n\nmodule.exports = getEventModifierState;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule HTMLDOMPropertyConfig\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\n\nvar MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;\nvar HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;\nvar HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;\nvar HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;\nvar HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;\n\nvar HTMLDOMPropertyConfig = {\n  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),\n  Properties: {\n    /**\n     * Standard Properties\n     */\n    accept: 0,\n    acceptCharset: 0,\n    accessKey: 0,\n    action: 0,\n    allowFullScreen: HAS_BOOLEAN_VALUE,\n    allowTransparency: 0,\n    alt: 0,\n    // specifies target context for links with `preload` type\n    as: 0,\n    async: HAS_BOOLEAN_VALUE,\n    autoComplete: 0,\n    // autoFocus is polyfilled/normalized by AutoFocusUtils\n    // autoFocus: HAS_BOOLEAN_VALUE,\n    autoPlay: HAS_BOOLEAN_VALUE,\n    capture: HAS_BOOLEAN_VALUE,\n    cellPadding: 0,\n    cellSpacing: 0,\n    charSet: 0,\n    challenge: 0,\n    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    cite: 0,\n    classID: 0,\n    className: 0,\n    cols: HAS_POSITIVE_NUMERIC_VALUE,\n    colSpan: 0,\n    content: 0,\n    contentEditable: 0,\n    contextMenu: 0,\n    controls: HAS_BOOLEAN_VALUE,\n    coords: 0,\n    crossOrigin: 0,\n    data: 0, // For `<object />` acts as `src`.\n    dateTime: 0,\n    'default': HAS_BOOLEAN_VALUE,\n    defer: HAS_BOOLEAN_VALUE,\n    dir: 0,\n    disabled: HAS_BOOLEAN_VALUE,\n    download: HAS_OVERLOADED_BOOLEAN_VALUE,\n    draggable: 0,\n    encType: 0,\n    form: 0,\n    formAction: 0,\n    formEncType: 0,\n    formMethod: 0,\n    formNoValidate: HAS_BOOLEAN_VALUE,\n    formTarget: 0,\n    frameBorder: 0,\n    headers: 0,\n    height: 0,\n    hidden: HAS_BOOLEAN_VALUE,\n    high: 0,\n    href: 0,\n    hrefLang: 0,\n    htmlFor: 0,\n    httpEquiv: 0,\n    icon: 0,\n    id: 0,\n    inputMode: 0,\n    integrity: 0,\n    is: 0,\n    keyParams: 0,\n    keyType: 0,\n    kind: 0,\n    label: 0,\n    lang: 0,\n    list: 0,\n    loop: HAS_BOOLEAN_VALUE,\n    low: 0,\n    manifest: 0,\n    marginHeight: 0,\n    marginWidth: 0,\n    max: 0,\n    maxLength: 0,\n    media: 0,\n    mediaGroup: 0,\n    method: 0,\n    min: 0,\n    minLength: 0,\n    // Caution; `option.selected` is not updated if `select.multiple` is\n    // disabled with `removeAttribute`.\n    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    name: 0,\n    nonce: 0,\n    noValidate: HAS_BOOLEAN_VALUE,\n    open: HAS_BOOLEAN_VALUE,\n    optimum: 0,\n    pattern: 0,\n    placeholder: 0,\n    playsInline: HAS_BOOLEAN_VALUE,\n    poster: 0,\n    preload: 0,\n    profile: 0,\n    radioGroup: 0,\n    readOnly: HAS_BOOLEAN_VALUE,\n    referrerPolicy: 0,\n    rel: 0,\n    required: HAS_BOOLEAN_VALUE,\n    reversed: HAS_BOOLEAN_VALUE,\n    role: 0,\n    rows: HAS_POSITIVE_NUMERIC_VALUE,\n    rowSpan: HAS_NUMERIC_VALUE,\n    sandbox: 0,\n    scope: 0,\n    scoped: HAS_BOOLEAN_VALUE,\n    scrolling: 0,\n    seamless: HAS_BOOLEAN_VALUE,\n    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    shape: 0,\n    size: HAS_POSITIVE_NUMERIC_VALUE,\n    sizes: 0,\n    span: HAS_POSITIVE_NUMERIC_VALUE,\n    spellCheck: 0,\n    src: 0,\n    srcDoc: 0,\n    srcLang: 0,\n    srcSet: 0,\n    start: HAS_NUMERIC_VALUE,\n    step: 0,\n    style: 0,\n    summary: 0,\n    tabIndex: 0,\n    target: 0,\n    title: 0,\n    // Setting .type throws on non-<input> tags\n    type: 0,\n    useMap: 0,\n    value: 0,\n    width: 0,\n    wmode: 0,\n    wrap: 0,\n\n    /**\n     * RDFa Properties\n     */\n    about: 0,\n    datatype: 0,\n    inlist: 0,\n    prefix: 0,\n    // property is also supported for OpenGraph in meta tags.\n    property: 0,\n    resource: 0,\n    'typeof': 0,\n    vocab: 0,\n\n    /**\n     * Non-standard Properties\n     */\n    // autoCapitalize and autoCorrect are supported in Mobile Safari for\n    // keyboard hints.\n    autoCapitalize: 0,\n    autoCorrect: 0,\n    // autoSave allows WebKit/Blink to persist values of input fields on page reloads\n    autoSave: 0,\n    // color is for Safari mask-icon link\n    color: 0,\n    // itemProp, itemScope, itemType are for\n    // Microdata support. See http://schema.org/docs/gs.html\n    itemProp: 0,\n    itemScope: HAS_BOOLEAN_VALUE,\n    itemType: 0,\n    // itemID and itemRef are for Microdata support as well but\n    // only specified in the WHATWG spec document. See\n    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api\n    itemID: 0,\n    itemRef: 0,\n    // results show looking glass icon and recent searches on input\n    // search fields in WebKit/Blink\n    results: 0,\n    // IE-only attribute that specifies security restrictions on an iframe\n    // as an alternative to the sandbox attribute on IE<10\n    security: 0,\n    // IE-only attribute that controls focus behavior\n    unselectable: 0\n  },\n  DOMAttributeNames: {\n    acceptCharset: 'accept-charset',\n    className: 'class',\n    htmlFor: 'for',\n    httpEquiv: 'http-equiv'\n  },\n  DOMPropertyNames: {}\n};\n\nmodule.exports = HTMLDOMPropertyConfig;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentBrowserEnvironment\n */\n\n'use strict';\n\nvar DOMChildrenOperations = require('./DOMChildrenOperations');\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\n\n/**\n * Abstracts away all functionality of the reconciler that requires knowledge of\n * the browser context. TODO: These callers should be refactored to avoid the\n * need for this injection.\n */\nvar ReactComponentBrowserEnvironment = {\n\n  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,\n\n  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup\n\n};\n\nmodule.exports = ReactComponentBrowserEnvironment;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMChildrenOperations\n */\n\n'use strict';\n\nvar DOMLazyTree = require('./DOMLazyTree');\nvar Danger = require('./Danger');\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactInstrumentation = require('./ReactInstrumentation');\n\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');\nvar setInnerHTML = require('./setInnerHTML');\nvar setTextContent = require('./setTextContent');\n\nfunction getNodeAfter(parentNode, node) {\n  // Special case for text components, which return [open, close] comments\n  // from getHostNode.\n  if (Array.isArray(node)) {\n    node = node[1];\n  }\n  return node ? node.nextSibling : parentNode.firstChild;\n}\n\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\nvar insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {\n  // We rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so\n  // we are careful to use `null`.)\n  parentNode.insertBefore(childNode, referenceNode);\n});\n\nfunction insertLazyTreeChildAt(parentNode, childTree, referenceNode) {\n  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);\n}\n\nfunction moveChild(parentNode, childNode, referenceNode) {\n  if (Array.isArray(childNode)) {\n    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);\n  } else {\n    insertChildAt(parentNode, childNode, referenceNode);\n  }\n}\n\nfunction removeChild(parentNode, childNode) {\n  if (Array.isArray(childNode)) {\n    var closingComment = childNode[1];\n    childNode = childNode[0];\n    removeDelimitedText(parentNode, childNode, closingComment);\n    parentNode.removeChild(closingComment);\n  }\n  parentNode.removeChild(childNode);\n}\n\nfunction moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {\n  var node = openingComment;\n  while (true) {\n    var nextNode = node.nextSibling;\n    insertChildAt(parentNode, node, referenceNode);\n    if (node === closingComment) {\n      break;\n    }\n    node = nextNode;\n  }\n}\n\nfunction removeDelimitedText(parentNode, startNode, closingComment) {\n  while (true) {\n    var node = startNode.nextSibling;\n    if (node === closingComment) {\n      // The closing comment is removed by ReactMultiChild.\n      break;\n    } else {\n      parentNode.removeChild(node);\n    }\n  }\n}\n\nfunction replaceDelimitedText(openingComment, closingComment, stringText) {\n  var parentNode = openingComment.parentNode;\n  var nodeAfterComment = openingComment.nextSibling;\n  if (nodeAfterComment === closingComment) {\n    // There are no text nodes between the opening and closing comments; insert\n    // a new one if stringText isn't empty.\n    if (stringText) {\n      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);\n    }\n  } else {\n    if (stringText) {\n      // Set the text content of the first node after the opening comment, and\n      // remove all following nodes up until the closing comment.\n      setTextContent(nodeAfterComment, stringText);\n      removeDelimitedText(parentNode, nodeAfterComment, closingComment);\n    } else {\n      removeDelimitedText(parentNode, openingComment, closingComment);\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID, 'replace text', stringText);\n  }\n}\n\nvar dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;\nif (process.env.NODE_ENV !== 'production') {\n  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {\n    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);\n    if (prevInstance._debugID !== 0) {\n      ReactInstrumentation.debugTool.onHostOperation(prevInstance._debugID, 'replace with', markup.toString());\n    } else {\n      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);\n      if (nextInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onHostOperation(nextInstance._debugID, 'mount', markup.toString());\n      }\n    }\n  };\n}\n\n/**\n * Operations for updating with DOM children.\n */\nvar DOMChildrenOperations = {\n\n  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,\n\n  replaceDelimitedText: replaceDelimitedText,\n\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @internal\n   */\n  processUpdates: function (parentNode, updates) {\n    if (process.env.NODE_ENV !== 'production') {\n      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;\n    }\n\n    for (var k = 0; k < updates.length; k++) {\n      var update = updates[k];\n      switch (update.type) {\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:\n          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'insert child', { toIndex: update.toIndex, content: update.content.toString() });\n          }\n          break;\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:\n          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'move child', { fromIndex: update.fromIndex, toIndex: update.toIndex });\n          }\n          break;\n        case ReactMultiChildUpdateTypes.SET_MARKUP:\n          setInnerHTML(parentNode, update.content);\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'replace children', update.content.toString());\n          }\n          break;\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:\n          setTextContent(parentNode, update.content);\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'replace text', update.content.toString());\n          }\n          break;\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:\n          removeChild(parentNode, update.fromNode);\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'remove child', { fromIndex: update.fromIndex });\n          }\n          break;\n      }\n    }\n  }\n\n};\n\nmodule.exports = DOMChildrenOperations;","/**\n * Copyright 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMLazyTree\n */\n\n'use strict';\n\nvar DOMNamespaces = require('./DOMNamespaces');\nvar setInnerHTML = require('./setInnerHTML');\n\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');\nvar setTextContent = require('./setTextContent');\n\nvar ELEMENT_NODE_TYPE = 1;\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;\n\n/**\n * In IE (8-11) and Edge, appending nodes with no children is dramatically\n * faster than appending a full subtree, so we essentially queue up the\n * .appendChild calls here and apply them so each node is added to its parent\n * before any children are added.\n *\n * In other browsers, doing so is slower or neutral compared to the other order\n * (in Firefox, twice as slow) so we only do this inversion in IE.\n *\n * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.\n */\nvar enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\\bEdge\\/\\d/.test(navigator.userAgent);\n\nfunction insertTreeChildren(tree) {\n  if (!enableLazy) {\n    return;\n  }\n  var node = tree.node;\n  var children = tree.children;\n  if (children.length) {\n    for (var i = 0; i < children.length; i++) {\n      insertTreeBefore(node, children[i], null);\n    }\n  } else if (tree.html != null) {\n    setInnerHTML(node, tree.html);\n  } else if (tree.text != null) {\n    setTextContent(node, tree.text);\n  }\n}\n\nvar insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {\n  // DocumentFragments aren't actually part of the DOM after insertion so\n  // appending children won't update the DOM. We need to ensure the fragment\n  // is properly populated first, breaking out of our lazy approach for just\n  // this level. Also, some <object> plugins (like Flash Player) will read\n  // <param> nodes immediately upon insertion into the DOM, so <object>\n  // must also be populated prior to insertion into the DOM.\n  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {\n    insertTreeChildren(tree);\n    parentNode.insertBefore(tree.node, referenceNode);\n  } else {\n    parentNode.insertBefore(tree.node, referenceNode);\n    insertTreeChildren(tree);\n  }\n});\n\nfunction replaceChildWithTree(oldNode, newTree) {\n  oldNode.parentNode.replaceChild(newTree.node, oldNode);\n  insertTreeChildren(newTree);\n}\n\nfunction queueChild(parentTree, childTree) {\n  if (enableLazy) {\n    parentTree.children.push(childTree);\n  } else {\n    parentTree.node.appendChild(childTree.node);\n  }\n}\n\nfunction queueHTML(tree, html) {\n  if (enableLazy) {\n    tree.html = html;\n  } else {\n    setInnerHTML(tree.node, html);\n  }\n}\n\nfunction queueText(tree, text) {\n  if (enableLazy) {\n    tree.text = text;\n  } else {\n    setTextContent(tree.node, text);\n  }\n}\n\nfunction toString() {\n  return this.node.nodeName;\n}\n\nfunction DOMLazyTree(node) {\n  return {\n    node: node,\n    children: [],\n    html: null,\n    text: null,\n    toString: toString\n  };\n}\n\nDOMLazyTree.insertTreeBefore = insertTreeBefore;\nDOMLazyTree.replaceChildWithTree = replaceChildWithTree;\nDOMLazyTree.queueChild = queueChild;\nDOMLazyTree.queueHTML = queueHTML;\nDOMLazyTree.queueText = queueText;\n\nmodule.exports = DOMLazyTree;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMNamespaces\n */\n\n'use strict';\n\nvar DOMNamespaces = {\n  html: 'http://www.w3.org/1999/xhtml',\n  mathml: 'http://www.w3.org/1998/Math/MathML',\n  svg: 'http://www.w3.org/2000/svg'\n};\n\nmodule.exports = DOMNamespaces;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule setInnerHTML\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar DOMNamespaces = require('./DOMNamespaces');\n\nvar WHITESPACE_TEST = /^[ \\r\\n\\t\\f]/;\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/;\n\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');\n\n// SVG temp container for IE lacking innerHTML\nvar reusableSVGContainer;\n\n/**\n * Set the innerHTML property of a node, ensuring that whitespace is preserved\n * even in IE8.\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\nvar setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {\n  // IE does not have innerHTML for SVG nodes, so instead we inject the\n  // new markup in a temp node and then move the child nodes across into\n  // the target node\n  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {\n    reusableSVGContainer = reusableSVGContainer || document.createElement('div');\n    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';\n    var svgNode = reusableSVGContainer.firstChild;\n    while (svgNode.firstChild) {\n      node.appendChild(svgNode.firstChild);\n    }\n  } else {\n    node.innerHTML = html;\n  }\n});\n\nif (ExecutionEnvironment.canUseDOM) {\n  // IE8: When updating a just created node with innerHTML only leading\n  // whitespace is removed. When updating an existing node with innerHTML\n  // whitespace in root TextNodes is also collapsed.\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html\n\n  // Feature detection; only IE8 is known to behave improperly like this.\n  var testElement = document.createElement('div');\n  testElement.innerHTML = ' ';\n  if (testElement.innerHTML === '') {\n    setInnerHTML = function (node, html) {\n      // Magic theory: IE8 supposedly differentiates between added and updated\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers\n      // from worse whitespace behavior. Re-adding a node like this triggers\n      // the initial and more favorable whitespace behavior.\n      // TODO: What to do on a detached node?\n      if (node.parentNode) {\n        node.parentNode.replaceChild(node, node);\n      }\n\n      // We also implement a workaround for non-visible tags disappearing into\n      // thin air on IE8, this only happens if there is no visible text\n      // in-front of the non-visible tags. Piggyback on the whitespace fix\n      // and simply check if any non-visible tags appear in the source.\n      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {\n        // Recover leading whitespace by temporarily prepending any character.\n        // \\uFEFF has the potential advantage of being zero-width/invisible.\n        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode\n        // in hopes that this is preserved even if \"\\uFEFF\" is transformed to\n        // the actual Unicode character (by Babel, for example).\n        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216\n        node.innerHTML = String.fromCharCode(0xFEFF) + html;\n\n        // deleteData leaves an empty `TextNode` which offsets the index of all\n        // children. Definitely want to avoid this.\n        var textNode = node.firstChild;\n        if (textNode.data.length === 1) {\n          node.removeChild(textNode);\n        } else {\n          textNode.deleteData(0, 1);\n        }\n      } else {\n        node.innerHTML = html;\n      }\n    };\n  }\n  testElement = null;\n}\n\nmodule.exports = setInnerHTML;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createMicrosoftUnsafeLocalFunction\n */\n\n/* globals MSApp */\n\n'use strict';\n\n/**\n * Create a function which has 'unsafe' privileges (required by windows8 apps)\n */\n\nvar createMicrosoftUnsafeLocalFunction = function (func) {\n  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {\n    return function (arg0, arg1, arg2, arg3) {\n      MSApp.execUnsafeLocalFunction(function () {\n        return func(arg0, arg1, arg2, arg3);\n      });\n    };\n  } else {\n    return func;\n  }\n};\n\nmodule.exports = createMicrosoftUnsafeLocalFunction;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule setTextContent\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\nvar setInnerHTML = require('./setInnerHTML');\n\n/**\n * Set the textContent property of a node, ensuring that whitespace is preserved\n * even in IE8. innerText is a poor substitute for textContent and, among many\n * issues, inserts <br> instead of the literal newline chars. innerHTML behaves\n * as it should.\n *\n * @param {DOMElement} node\n * @param {string} text\n * @internal\n */\nvar setTextContent = function (node, text) {\n  if (text) {\n    var firstChild = node.firstChild;\n\n    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {\n      firstChild.nodeValue = text;\n      return;\n    }\n  }\n  node.textContent = text;\n};\n\nif (ExecutionEnvironment.canUseDOM) {\n  if (!('textContent' in document.documentElement)) {\n    setTextContent = function (node, text) {\n      setInnerHTML(node, escapeTextContentForBrowser(text));\n    };\n  }\n}\n\nmodule.exports = setTextContent;","/**\n * Copyright 2016-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * Based on the escape-html library, which is used under the MIT License below:\n *\n * Copyright (c) 2012-2013 TJ Holowaychuk\n * Copyright (c) 2015 Andreas Lubbe\n * Copyright (c) 2015 Tiancheng \"Timothy\" Gu\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @providesModule escapeTextContentForBrowser\n */\n\n'use strict';\n\n// code copied and modified from escape-html\n/**\n * Module variables.\n * @private\n */\n\nvar matchHtmlRegExp = /[\"'&<>]/;\n\n/**\n * Escape special characters in the given string of html.\n *\n * @param  {string} string The string to escape for inserting into HTML\n * @return {string}\n * @public\n */\n\nfunction escapeHtml(string) {\n  var str = '' + string;\n  var match = matchHtmlRegExp.exec(str);\n\n  if (!match) {\n    return str;\n  }\n\n  var escape;\n  var html = '';\n  var index = 0;\n  var lastIndex = 0;\n\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        // \"\n        escape = '&quot;';\n        break;\n      case 38:\n        // &\n        escape = '&amp;';\n        break;\n      case 39:\n        // '\n        escape = '&#x27;'; // modified from escape-html; used to be '&#39'\n        break;\n      case 60:\n        // <\n        escape = '&lt;';\n        break;\n      case 62:\n        // >\n        escape = '&gt;';\n        break;\n      default:\n        continue;\n    }\n\n    if (lastIndex !== index) {\n      html += str.substring(lastIndex, index);\n    }\n\n    lastIndex = index + 1;\n    html += escape;\n  }\n\n  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\n}\n// end code copied and modified from escape-html\n\n\n/**\n * Escapes text to prevent scripting attacks.\n *\n * @param {*} text Text value to escape.\n * @return {string} An escaped string.\n */\nfunction escapeTextContentForBrowser(text) {\n  if (typeof text === 'boolean' || typeof text === 'number') {\n    // this shortcircuit helps perf for types that we know will never have\n    // special characters, especially given that this function is used often\n    // for numeric dom ids.\n    return '' + text;\n  }\n  return escapeHtml(text);\n}\n\nmodule.exports = escapeTextContentForBrowser;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Danger\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar DOMLazyTree = require('./DOMLazyTree');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar invariant = require('fbjs/lib/invariant');\n\nvar Danger = {\n\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;\n    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;\n    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;\n\n    if (typeof markup === 'string') {\n      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n      oldChild.parentNode.replaceChild(newChild, oldChild);\n    } else {\n      DOMLazyTree.replaceChildWithTree(oldChild, markup);\n    }\n  }\n\n};\n\nmodule.exports = Danger;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChildUpdateTypes\n */\n\n'use strict';\n\nvar keyMirror = require('fbjs/lib/keyMirror');\n\n/**\n * When a component's children are updated, a series of update configuration\n * objects are created in order to batch and serialize the required changes.\n *\n * Enumerates all the possible types of update configurations.\n *\n * @internal\n */\nvar ReactMultiChildUpdateTypes = keyMirror({\n  INSERT_MARKUP: null,\n  MOVE_EXISTING: null,\n  REMOVE_NODE: null,\n  SET_MARKUP: null,\n  TEXT_CONTENT: null\n});\n\nmodule.exports = ReactMultiChildUpdateTypes;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMIDOperations\n */\n\n'use strict';\n\nvar DOMChildrenOperations = require('./DOMChildrenOperations');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\n/**\n * Operations used to process updates to DOM nodes.\n */\nvar ReactDOMIDOperations = {\n\n  /**\n   * Updates a component's children by processing a series of updates.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @internal\n   */\n  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {\n    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);\n    DOMChildrenOperations.processUpdates(node, updates);\n  }\n};\n\nmodule.exports = ReactDOMIDOperations;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMComponent\n */\n\n/* global hasOwnProperty:true */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar AutoFocusUtils = require('./AutoFocusUtils');\nvar CSSPropertyOperations = require('./CSSPropertyOperations');\nvar DOMLazyTree = require('./DOMLazyTree');\nvar DOMNamespaces = require('./DOMNamespaces');\nvar DOMProperty = require('./DOMProperty');\nvar DOMPropertyOperations = require('./DOMPropertyOperations');\nvar EventConstants = require('./EventConstants');\nvar EventPluginHub = require('./EventPluginHub');\nvar EventPluginRegistry = require('./EventPluginRegistry');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactDOMButton = require('./ReactDOMButton');\nvar ReactDOMComponentFlags = require('./ReactDOMComponentFlags');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactDOMInput = require('./ReactDOMInput');\nvar ReactDOMOption = require('./ReactDOMOption');\nvar ReactDOMSelect = require('./ReactDOMSelect');\nvar ReactDOMTextarea = require('./ReactDOMTextarea');\nvar ReactInstrumentation = require('./ReactInstrumentation');\nvar ReactMultiChild = require('./ReactMultiChild');\nvar ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\nvar invariant = require('fbjs/lib/invariant');\nvar isEventSupported = require('./isEventSupported');\nvar keyOf = require('fbjs/lib/keyOf');\nvar shallowEqual = require('fbjs/lib/shallowEqual');\nvar validateDOMNesting = require('./validateDOMNesting');\nvar warning = require('fbjs/lib/warning');\n\nvar Flags = ReactDOMComponentFlags;\nvar deleteListener = EventPluginHub.deleteListener;\nvar getNode = ReactDOMComponentTree.getNodeFromInstance;\nvar listenTo = ReactBrowserEventEmitter.listenTo;\nvar registrationNameModules = EventPluginRegistry.registrationNameModules;\n\n// For quickly matching children type, to test if can be treated as content.\nvar CONTENT_TYPES = { 'string': true, 'number': true };\n\nvar STYLE = keyOf({ style: null });\nvar HTML = keyOf({ __html: null });\nvar RESERVED_PROPS = {\n  children: null,\n  dangerouslySetInnerHTML: null,\n  suppressContentEditableWarning: null\n};\n\n// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).\nvar DOC_FRAGMENT_TYPE = 11;\n\nfunction getDeclarationErrorAddendum(internalInstance) {\n  if (internalInstance) {\n    var owner = internalInstance._currentElement._owner || null;\n    if (owner) {\n      var name = owner.getName();\n      if (name) {\n        return ' This DOM node was rendered by `' + name + '`.';\n      }\n    }\n  }\n  return '';\n}\n\nfunction friendlyStringify(obj) {\n  if (typeof obj === 'object') {\n    if (Array.isArray(obj)) {\n      return '[' + obj.map(friendlyStringify).join(', ') + ']';\n    } else {\n      var pairs = [];\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var keyEscaped = /^[a-z$_][\\w$_]*$/i.test(key) ? key : JSON.stringify(key);\n          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));\n        }\n      }\n      return '{' + pairs.join(', ') + '}';\n    }\n  } else if (typeof obj === 'string') {\n    return JSON.stringify(obj);\n  } else if (typeof obj === 'function') {\n    return '[function object]';\n  }\n  // Differs from JSON.stringify in that undefined because undefined and that\n  // inf and nan don't become null\n  return String(obj);\n}\n\nvar styleMutationWarning = {};\n\nfunction checkAndWarnForMutatedStyle(style1, style2, component) {\n  if (style1 == null || style2 == null) {\n    return;\n  }\n  if (shallowEqual(style1, style2)) {\n    return;\n  }\n\n  var componentName = component._tag;\n  var owner = component._currentElement._owner;\n  var ownerName;\n  if (owner) {\n    ownerName = owner.getName();\n  }\n\n  var hash = ownerName + '|' + componentName;\n\n  if (styleMutationWarning.hasOwnProperty(hash)) {\n    return;\n  }\n\n  styleMutationWarning[hash] = true;\n\n  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;\n}\n\n/**\n * @param {object} component\n * @param {?object} props\n */\nfunction assertValidProps(component, props) {\n  if (!props) {\n    return;\n  }\n  // Note the use of `==` which checks for null or undefined.\n  if (voidElementTags[component._tag]) {\n    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;\n  }\n  if (props.dangerouslySetInnerHTML != null) {\n    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;\n    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;\n    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;\n    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;\n  }\n  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \\'em\\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;\n}\n\nfunction enqueuePutListener(inst, registrationName, listener, transaction) {\n  if (transaction instanceof ReactServerRenderingTransaction) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // IE8 has no API for event capturing and the `onScroll` event doesn't\n    // bubble.\n    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\\'t support the `onScroll` event') : void 0;\n  }\n  var containerInfo = inst._hostContainerInfo;\n  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;\n  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;\n  listenTo(registrationName, doc);\n  transaction.getReactMountReady().enqueue(putListener, {\n    inst: inst,\n    registrationName: registrationName,\n    listener: listener\n  });\n}\n\nfunction putListener() {\n  var listenerToPut = this;\n  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);\n}\n\nfunction inputPostMount() {\n  var inst = this;\n  ReactDOMInput.postMountWrapper(inst);\n}\n\nfunction textareaPostMount() {\n  var inst = this;\n  ReactDOMTextarea.postMountWrapper(inst);\n}\n\nfunction optionPostMount() {\n  var inst = this;\n  ReactDOMOption.postMountWrapper(inst);\n}\n\nvar setAndValidateContentChildDev = emptyFunction;\nif (process.env.NODE_ENV !== 'production') {\n  setAndValidateContentChildDev = function (content) {\n    var hasExistingContent = this._contentDebugID != null;\n    var debugID = this._debugID;\n    // This ID represents the inlined child that has no backing instance:\n    var contentDebugID = -debugID;\n\n    if (content == null) {\n      if (hasExistingContent) {\n        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);\n      }\n      this._contentDebugID = null;\n      return;\n    }\n\n    validateDOMNesting(null, String(content), this, this._ancestorInfo);\n    this._contentDebugID = contentDebugID;\n    if (hasExistingContent) {\n      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);\n      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);\n    } else {\n      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);\n      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);\n      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);\n    }\n  };\n}\n\n// There are so many media events, it makes sense to just\n// maintain a list rather than create a `trapBubbledEvent` for each\nvar mediaEvents = {\n  topAbort: 'abort',\n  topCanPlay: 'canplay',\n  topCanPlayThrough: 'canplaythrough',\n  topDurationChange: 'durationchange',\n  topEmptied: 'emptied',\n  topEncrypted: 'encrypted',\n  topEnded: 'ended',\n  topError: 'error',\n  topLoadedData: 'loadeddata',\n  topLoadedMetadata: 'loadedmetadata',\n  topLoadStart: 'loadstart',\n  topPause: 'pause',\n  topPlay: 'play',\n  topPlaying: 'playing',\n  topProgress: 'progress',\n  topRateChange: 'ratechange',\n  topSeeked: 'seeked',\n  topSeeking: 'seeking',\n  topStalled: 'stalled',\n  topSuspend: 'suspend',\n  topTimeUpdate: 'timeupdate',\n  topVolumeChange: 'volumechange',\n  topWaiting: 'waiting'\n};\n\nfunction trapBubbledEventsLocal() {\n  var inst = this;\n  // If a component renders to null or if another component fatals and causes\n  // the state of the tree to be corrupted, `node` here can be null.\n  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;\n  var node = getNode(inst);\n  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;\n\n  switch (inst._tag) {\n    case 'iframe':\n    case 'object':\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];\n      break;\n    case 'video':\n    case 'audio':\n\n      inst._wrapperState.listeners = [];\n      // Create listener for each media event\n      for (var event in mediaEvents) {\n        if (mediaEvents.hasOwnProperty(event)) {\n          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));\n        }\n      }\n      break;\n    case 'source':\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node)];\n      break;\n    case 'img':\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];\n      break;\n    case 'form':\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];\n      break;\n    case 'input':\n    case 'select':\n    case 'textarea':\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topInvalid, 'invalid', node)];\n      break;\n  }\n}\n\nfunction postUpdateSelectWrapper() {\n  ReactDOMSelect.postUpdateWrapper(this);\n}\n\n// For HTML, certain tags should omit their close tag. We keep a whitelist for\n// those special-case tags.\n\nvar omittedCloseTags = {\n  'area': true,\n  'base': true,\n  'br': true,\n  'col': true,\n  'embed': true,\n  'hr': true,\n  'img': true,\n  'input': true,\n  'keygen': true,\n  'link': true,\n  'meta': true,\n  'param': true,\n  'source': true,\n  'track': true,\n  'wbr': true\n};\n\n// NOTE: menuitem's close tag should be omitted, but that causes problems.\nvar newlineEatingTags = {\n  'listing': true,\n  'pre': true,\n  'textarea': true\n};\n\n// For HTML, certain tags cannot have children. This has the same purpose as\n// `omittedCloseTags` except that `menuitem` should still have its closing tag.\n\nvar voidElementTags = _assign({\n  'menuitem': true\n}, omittedCloseTags);\n\n// We accept any tag to be rendered but since this gets injected into arbitrary\n// HTML, we want to make sure that it's a safe tag.\n// http://www.w3.org/TR/REC-xml/#NT-Name\n\nvar VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/; // Simplified subset\nvar validatedTagCache = {};\nvar hasOwnProperty = {}.hasOwnProperty;\n\nfunction validateDangerousTag(tag) {\n  if (!hasOwnProperty.call(validatedTagCache, tag)) {\n    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;\n    validatedTagCache[tag] = true;\n  }\n}\n\nfunction isCustomComponent(tagName, props) {\n  return tagName.indexOf('-') >= 0 || props.is != null;\n}\n\nvar globalIdCounter = 1;\n\n/**\n * Creates a new React class that is idempotent and capable of containing other\n * React components. It accepts event listeners and DOM properties that are\n * valid according to `DOMProperty`.\n *\n *  - Event listeners: `onClick`, `onMouseDown`, etc.\n *  - DOM properties: `className`, `name`, `title`, etc.\n *\n * The `style` property functions differently from the DOM API. It accepts an\n * object mapping of style properties to values.\n *\n * @constructor ReactDOMComponent\n * @extends ReactMultiChild\n */\nfunction ReactDOMComponent(element) {\n  var tag = element.type;\n  validateDangerousTag(tag);\n  this._currentElement = element;\n  this._tag = tag.toLowerCase();\n  this._namespaceURI = null;\n  this._renderedChildren = null;\n  this._previousStyle = null;\n  this._previousStyleCopy = null;\n  this._hostNode = null;\n  this._hostParent = null;\n  this._rootNodeID = 0;\n  this._domID = 0;\n  this._hostContainerInfo = null;\n  this._wrapperState = null;\n  this._topLevelWrapper = null;\n  this._flags = 0;\n  if (process.env.NODE_ENV !== 'production') {\n    this._ancestorInfo = null;\n    setAndValidateContentChildDev.call(this, null);\n  }\n}\n\nReactDOMComponent.displayName = 'ReactDOMComponent';\n\nReactDOMComponent.Mixin = {\n\n  /**\n   * Generates root tag markup then recurses. This method has side effects and\n   * is not idempotent.\n   *\n   * @internal\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {?ReactDOMComponent} the parent component instance\n   * @param {?object} info about the host container\n   * @param {object} context\n   * @return {string} The computed markup.\n   */\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {\n    this._rootNodeID = globalIdCounter++;\n    this._domID = hostContainerInfo._idCounter++;\n    this._hostParent = hostParent;\n    this._hostContainerInfo = hostContainerInfo;\n\n    var props = this._currentElement.props;\n\n    switch (this._tag) {\n      case 'audio':\n      case 'form':\n      case 'iframe':\n      case 'img':\n      case 'link':\n      case 'object':\n      case 'source':\n      case 'video':\n        this._wrapperState = {\n          listeners: null\n        };\n        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);\n        break;\n      case 'button':\n        props = ReactDOMButton.getHostProps(this, props, hostParent);\n        break;\n      case 'input':\n        ReactDOMInput.mountWrapper(this, props, hostParent);\n        props = ReactDOMInput.getHostProps(this, props);\n        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);\n        break;\n      case 'option':\n        ReactDOMOption.mountWrapper(this, props, hostParent);\n        props = ReactDOMOption.getHostProps(this, props);\n        break;\n      case 'select':\n        ReactDOMSelect.mountWrapper(this, props, hostParent);\n        props = ReactDOMSelect.getHostProps(this, props);\n        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);\n        break;\n      case 'textarea':\n        ReactDOMTextarea.mountWrapper(this, props, hostParent);\n        props = ReactDOMTextarea.getHostProps(this, props);\n        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);\n        break;\n    }\n\n    assertValidProps(this, props);\n\n    // We create tags in the namespace of their parent container, except HTML\n    // tags get no namespace.\n    var namespaceURI;\n    var parentTag;\n    if (hostParent != null) {\n      namespaceURI = hostParent._namespaceURI;\n      parentTag = hostParent._tag;\n    } else if (hostContainerInfo._tag) {\n      namespaceURI = hostContainerInfo._namespaceURI;\n      parentTag = hostContainerInfo._tag;\n    }\n    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {\n      namespaceURI = DOMNamespaces.html;\n    }\n    if (namespaceURI === DOMNamespaces.html) {\n      if (this._tag === 'svg') {\n        namespaceURI = DOMNamespaces.svg;\n      } else if (this._tag === 'math') {\n        namespaceURI = DOMNamespaces.mathml;\n      }\n    }\n    this._namespaceURI = namespaceURI;\n\n    if (process.env.NODE_ENV !== 'production') {\n      var parentInfo;\n      if (hostParent != null) {\n        parentInfo = hostParent._ancestorInfo;\n      } else if (hostContainerInfo._tag) {\n        parentInfo = hostContainerInfo._ancestorInfo;\n      }\n      if (parentInfo) {\n        // parentInfo should always be present except for the top-level\n        // component when server rendering\n        validateDOMNesting(this._tag, null, this, parentInfo);\n      }\n      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);\n    }\n\n    var mountImage;\n    if (transaction.useCreateElement) {\n      var ownerDocument = hostContainerInfo._ownerDocument;\n      var el;\n      if (namespaceURI === DOMNamespaces.html) {\n        if (this._tag === 'script') {\n          // Create the script via .innerHTML so its \"parser-inserted\" flag is\n          // set to true and it does not execute\n          var div = ownerDocument.createElement('div');\n          var type = this._currentElement.type;\n          div.innerHTML = '<' + type + '></' + type + '>';\n          el = div.removeChild(div.firstChild);\n        } else if (props.is) {\n          el = ownerDocument.createElement(this._currentElement.type, props.is);\n        } else {\n          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.\n          // See discussion in https://github.com/facebook/react/pull/6896\n          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\n          el = ownerDocument.createElement(this._currentElement.type);\n        }\n      } else {\n        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);\n      }\n      ReactDOMComponentTree.precacheNode(this, el);\n      this._flags |= Flags.hasCachedChildNodes;\n      if (!this._hostParent) {\n        DOMPropertyOperations.setAttributeForRoot(el);\n      }\n      this._updateDOMProperties(null, props, transaction);\n      var lazyTree = DOMLazyTree(el);\n      this._createInitialChildren(transaction, props, context, lazyTree);\n      mountImage = lazyTree;\n    } else {\n      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);\n      var tagContent = this._createContentMarkup(transaction, props, context);\n      if (!tagContent && omittedCloseTags[this._tag]) {\n        mountImage = tagOpen + '/>';\n      } else {\n        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';\n      }\n    }\n\n    switch (this._tag) {\n      case 'input':\n        transaction.getReactMountReady().enqueue(inputPostMount, this);\n        if (props.autoFocus) {\n          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);\n        }\n        break;\n      case 'textarea':\n        transaction.getReactMountReady().enqueue(textareaPostMount, this);\n        if (props.autoFocus) {\n          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);\n        }\n        break;\n      case 'select':\n        if (props.autoFocus) {\n          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);\n        }\n        break;\n      case 'button':\n        if (props.autoFocus) {\n          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);\n        }\n        break;\n      case 'option':\n        transaction.getReactMountReady().enqueue(optionPostMount, this);\n        break;\n    }\n\n    return mountImage;\n  },\n\n  /**\n   * Creates markup for the open tag and all attributes.\n   *\n   * This method has side effects because events get registered.\n   *\n   * Iterating over object properties is faster than iterating over arrays.\n   * @see http://jsperf.com/obj-vs-arr-iteration\n   *\n   * @private\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {object} props\n   * @return {string} Markup of opening tag.\n   */\n  _createOpenTagMarkupAndPutListeners: function (transaction, props) {\n    var ret = '<' + this._currentElement.type;\n\n    for (var propKey in props) {\n      if (!props.hasOwnProperty(propKey)) {\n        continue;\n      }\n      var propValue = props[propKey];\n      if (propValue == null) {\n        continue;\n      }\n      if (registrationNameModules.hasOwnProperty(propKey)) {\n        if (propValue) {\n          enqueuePutListener(this, propKey, propValue, transaction);\n        }\n      } else {\n        if (propKey === STYLE) {\n          if (propValue) {\n            if (process.env.NODE_ENV !== 'production') {\n              // See `_updateDOMProperties`. style block\n              this._previousStyle = propValue;\n            }\n            propValue = this._previousStyleCopy = _assign({}, props.style);\n          }\n          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);\n        }\n        var markup = null;\n        if (this._tag != null && isCustomComponent(this._tag, props)) {\n          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {\n            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);\n          }\n        } else {\n          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);\n        }\n        if (markup) {\n          ret += ' ' + markup;\n        }\n      }\n    }\n\n    // For static pages, no need to put React ID and checksum. Saves lots of\n    // bytes.\n    if (transaction.renderToStaticMarkup) {\n      return ret;\n    }\n\n    if (!this._hostParent) {\n      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();\n    }\n    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);\n    return ret;\n  },\n\n  /**\n   * Creates markup for the content between the tags.\n   *\n   * @private\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {object} props\n   * @param {object} context\n   * @return {string} Content markup.\n   */\n  _createContentMarkup: function (transaction, props, context) {\n    var ret = '';\n\n    // Intentional use of != to avoid catching zero/false.\n    var innerHTML = props.dangerouslySetInnerHTML;\n    if (innerHTML != null) {\n      if (innerHTML.__html != null) {\n        ret = innerHTML.__html;\n      }\n    } else {\n      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;\n      var childrenToUse = contentToUse != null ? null : props.children;\n      if (contentToUse != null) {\n        // TODO: Validate that text is allowed as a child of this node\n        ret = escapeTextContentForBrowser(contentToUse);\n        if (process.env.NODE_ENV !== 'production') {\n          setAndValidateContentChildDev.call(this, contentToUse);\n        }\n      } else if (childrenToUse != null) {\n        var mountImages = this.mountChildren(childrenToUse, transaction, context);\n        ret = mountImages.join('');\n      }\n    }\n    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\\n') {\n      // text/html ignores the first character in these tags if it's a newline\n      // Prefer to break application/xml over text/html (for now) by adding\n      // a newline specifically to get eaten by the parser. (Alternately for\n      // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first\n      // \\r is normalized out by HTMLTextAreaElement#value.)\n      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>\n      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>\n      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>\n      // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements\n      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>\n      return '\\n' + ret;\n    } else {\n      return ret;\n    }\n  },\n\n  _createInitialChildren: function (transaction, props, context, lazyTree) {\n    // Intentional use of != to avoid catching zero/false.\n    var innerHTML = props.dangerouslySetInnerHTML;\n    if (innerHTML != null) {\n      if (innerHTML.__html != null) {\n        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);\n      }\n    } else {\n      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;\n      var childrenToUse = contentToUse != null ? null : props.children;\n      if (contentToUse != null) {\n        // TODO: Validate that text is allowed as a child of this node\n        if (process.env.NODE_ENV !== 'production') {\n          setAndValidateContentChildDev.call(this, contentToUse);\n        }\n        DOMLazyTree.queueText(lazyTree, contentToUse);\n      } else if (childrenToUse != null) {\n        var mountImages = this.mountChildren(childrenToUse, transaction, context);\n        for (var i = 0; i < mountImages.length; i++) {\n          DOMLazyTree.queueChild(lazyTree, mountImages[i]);\n        }\n      }\n    }\n  },\n\n  /**\n   * Receives a next element and updates the component.\n   *\n   * @internal\n   * @param {ReactElement} nextElement\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {object} context\n   */\n  receiveComponent: function (nextElement, transaction, context) {\n    var prevElement = this._currentElement;\n    this._currentElement = nextElement;\n    this.updateComponent(transaction, prevElement, nextElement, context);\n  },\n\n  /**\n   * Updates a DOM component after it has already been allocated and\n   * attached to the DOM. Reconciles the root DOM node, then recurses.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevElement\n   * @param {ReactElement} nextElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: function (transaction, prevElement, nextElement, context) {\n    var lastProps = prevElement.props;\n    var nextProps = this._currentElement.props;\n\n    switch (this._tag) {\n      case 'button':\n        lastProps = ReactDOMButton.getHostProps(this, lastProps);\n        nextProps = ReactDOMButton.getHostProps(this, nextProps);\n        break;\n      case 'input':\n        lastProps = ReactDOMInput.getHostProps(this, lastProps);\n        nextProps = ReactDOMInput.getHostProps(this, nextProps);\n        break;\n      case 'option':\n        lastProps = ReactDOMOption.getHostProps(this, lastProps);\n        nextProps = ReactDOMOption.getHostProps(this, nextProps);\n        break;\n      case 'select':\n        lastProps = ReactDOMSelect.getHostProps(this, lastProps);\n        nextProps = ReactDOMSelect.getHostProps(this, nextProps);\n        break;\n      case 'textarea':\n        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);\n        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);\n        break;\n    }\n\n    assertValidProps(this, nextProps);\n    this._updateDOMProperties(lastProps, nextProps, transaction);\n    this._updateDOMChildren(lastProps, nextProps, transaction, context);\n\n    switch (this._tag) {\n      case 'input':\n        // Update the wrapper around inputs *after* updating props. This has to\n        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations\n        // raise warnings and prevent the new value from being assigned.\n        ReactDOMInput.updateWrapper(this);\n        break;\n      case 'textarea':\n        ReactDOMTextarea.updateWrapper(this);\n        break;\n      case 'select':\n        // <select> value update needs to occur after <option> children\n        // reconciliation\n        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);\n        break;\n    }\n  },\n\n  /**\n   * Reconciles the properties by detecting differences in property values and\n   * updating the DOM as necessary. This function is probably the single most\n   * critical path for performance optimization.\n   *\n   * TODO: Benchmark whether checking for changed values in memory actually\n   *       improves performance (especially statically positioned elements).\n   * TODO: Benchmark the effects of putting this at the top since 99% of props\n   *       do not change for a given reconciliation.\n   * TODO: Benchmark areas that can be improved with caching.\n   *\n   * @private\n   * @param {object} lastProps\n   * @param {object} nextProps\n   * @param {?DOMElement} node\n   */\n  _updateDOMProperties: function (lastProps, nextProps, transaction) {\n    var propKey;\n    var styleName;\n    var styleUpdates;\n    for (propKey in lastProps) {\n      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {\n        continue;\n      }\n      if (propKey === STYLE) {\n        var lastStyle = this._previousStyleCopy;\n        for (styleName in lastStyle) {\n          if (lastStyle.hasOwnProperty(styleName)) {\n            styleUpdates = styleUpdates || {};\n            styleUpdates[styleName] = '';\n          }\n        }\n        this._previousStyleCopy = null;\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {\n        if (lastProps[propKey]) {\n          // Only call deleteListener if there was a listener previously or\n          // else willDeleteListener gets called when there wasn't actually a\n          // listener (e.g., onClick={null})\n          deleteListener(this, propKey);\n        }\n      } else if (isCustomComponent(this._tag, lastProps)) {\n        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {\n          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);\n        }\n      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {\n        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);\n      }\n    }\n    for (propKey in nextProps) {\n      var nextProp = nextProps[propKey];\n      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;\n      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {\n        continue;\n      }\n      if (propKey === STYLE) {\n        if (nextProp) {\n          if (process.env.NODE_ENV !== 'production') {\n            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);\n            this._previousStyle = nextProp;\n          }\n          nextProp = this._previousStyleCopy = _assign({}, nextProp);\n        } else {\n          this._previousStyleCopy = null;\n        }\n        if (lastProp) {\n          // Unset styles on `lastProp` but not on `nextProp`.\n          for (styleName in lastProp) {\n            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {\n              styleUpdates = styleUpdates || {};\n              styleUpdates[styleName] = '';\n            }\n          }\n          // Update styles that changed since `lastProp`.\n          for (styleName in nextProp) {\n            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {\n              styleUpdates = styleUpdates || {};\n              styleUpdates[styleName] = nextProp[styleName];\n            }\n          }\n        } else {\n          // Relies on `updateStylesByID` not mutating `styleUpdates`.\n          styleUpdates = nextProp;\n        }\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {\n        if (nextProp) {\n          enqueuePutListener(this, propKey, nextProp, transaction);\n        } else if (lastProp) {\n          deleteListener(this, propKey);\n        }\n      } else if (isCustomComponent(this._tag, nextProps)) {\n        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {\n          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);\n        }\n      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {\n        var node = getNode(this);\n        // If we're updating to null or undefined, we should remove the property\n        // from the DOM node instead of inadvertently setting to a string. This\n        // brings us in line with the same behavior we have on initial render.\n        if (nextProp != null) {\n          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);\n        } else {\n          DOMPropertyOperations.deleteValueForProperty(node, propKey);\n        }\n      }\n    }\n    if (styleUpdates) {\n      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);\n    }\n  },\n\n  /**\n   * Reconciles the children with the various properties that affect the\n   * children content.\n   *\n   * @param {object} lastProps\n   * @param {object} nextProps\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   */\n  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {\n    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;\n    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;\n\n    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;\n    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;\n\n    // Note the use of `!=` which checks for null or undefined.\n    var lastChildren = lastContent != null ? null : lastProps.children;\n    var nextChildren = nextContent != null ? null : nextProps.children;\n\n    // If we're switching from children to content/html or vice versa, remove\n    // the old content\n    var lastHasContentOrHtml = lastContent != null || lastHtml != null;\n    var nextHasContentOrHtml = nextContent != null || nextHtml != null;\n    if (lastChildren != null && nextChildren == null) {\n      this.updateChildren(null, transaction, context);\n    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {\n      this.updateTextContent('');\n      if (process.env.NODE_ENV !== 'production') {\n        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);\n      }\n    }\n\n    if (nextContent != null) {\n      if (lastContent !== nextContent) {\n        this.updateTextContent('' + nextContent);\n        if (process.env.NODE_ENV !== 'production') {\n          setAndValidateContentChildDev.call(this, nextContent);\n        }\n      }\n    } else if (nextHtml != null) {\n      if (lastHtml !== nextHtml) {\n        this.updateMarkup('' + nextHtml);\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);\n      }\n    } else if (nextChildren != null) {\n      if (process.env.NODE_ENV !== 'production') {\n        setAndValidateContentChildDev.call(this, null);\n      }\n\n      this.updateChildren(nextChildren, transaction, context);\n    }\n  },\n\n  getHostNode: function () {\n    return getNode(this);\n  },\n\n  /**\n   * Destroys all event registrations for this instance. Does not remove from\n   * the DOM. That must be done by the parent.\n   *\n   * @internal\n   */\n  unmountComponent: function (safely) {\n    switch (this._tag) {\n      case 'audio':\n      case 'form':\n      case 'iframe':\n      case 'img':\n      case 'link':\n      case 'object':\n      case 'source':\n      case 'video':\n        var listeners = this._wrapperState.listeners;\n        if (listeners) {\n          for (var i = 0; i < listeners.length; i++) {\n            listeners[i].remove();\n          }\n        }\n        break;\n      case 'html':\n      case 'head':\n      case 'body':\n        /**\n         * Components like <html> <head> and <body> can't be removed or added\n         * easily in a cross-browser way, however it's valuable to be able to\n         * take advantage of React's reconciliation for styling and <title>\n         * management. So we just document it and throw in dangerous cases.\n         */\n        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;\n        break;\n    }\n\n    this.unmountChildren(safely);\n    ReactDOMComponentTree.uncacheNode(this);\n    EventPluginHub.deleteAllListeners(this);\n    this._rootNodeID = 0;\n    this._domID = 0;\n    this._wrapperState = null;\n\n    if (process.env.NODE_ENV !== 'production') {\n      setAndValidateContentChildDev.call(this, null);\n    }\n  },\n\n  getPublicInstance: function () {\n    return getNode(this);\n  }\n\n};\n\n_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);\n\nmodule.exports = ReactDOMComponent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AutoFocusUtils\n */\n\n'use strict';\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar focusNode = require('fbjs/lib/focusNode');\n\nvar AutoFocusUtils = {\n  focusDOMComponent: function () {\n    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));\n  }\n};\n\nmodule.exports = AutoFocusUtils;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSPropertyOperations\n */\n\n'use strict';\n\nvar CSSProperty = require('./CSSProperty');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactInstrumentation = require('./ReactInstrumentation');\n\nvar camelizeStyleName = require('fbjs/lib/camelizeStyleName');\nvar dangerousStyleValue = require('./dangerousStyleValue');\nvar hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');\nvar memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');\nvar warning = require('fbjs/lib/warning');\n\nvar processStyleName = memoizeStringOnly(function (styleName) {\n  return hyphenateStyleName(styleName);\n});\n\nvar hasShorthandPropertyBug = false;\nvar styleFloatAccessor = 'cssFloat';\nif (ExecutionEnvironment.canUseDOM) {\n  var tempStyle = document.createElement('div').style;\n  try {\n    // IE8 throws \"Invalid argument.\" if resetting shorthand style properties.\n    tempStyle.font = '';\n  } catch (e) {\n    hasShorthandPropertyBug = true;\n  }\n  // IE8 only supports accessing cssFloat (standard) as styleFloat\n  if (document.documentElement.style.cssFloat === undefined) {\n    styleFloatAccessor = 'styleFloat';\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  // 'msTransform' is correct, but the other prefixes should be capitalized\n  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\n\n  // style values shouldn't contain a semicolon\n  var badStyleValueWithSemicolonPattern = /;\\s*$/;\n\n  var warnedStyleNames = {};\n  var warnedStyleValues = {};\n  var warnedForNaNValue = false;\n\n  var warnHyphenatedStyleName = function (name, owner) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;\n  };\n\n  var warnBadVendoredStyleName = function (name, owner) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;\n  };\n\n  var warnStyleValueWithSemicolon = function (name, value, owner) {\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n      return;\n    }\n\n    warnedStyleValues[value] = true;\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\\'t contain a semicolon.%s ' + 'Try \"%s: %s\" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;\n  };\n\n  var warnStyleValueIsNaN = function (name, value, owner) {\n    if (warnedForNaNValue) {\n      return;\n    }\n\n    warnedForNaNValue = true;\n    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;\n  };\n\n  var checkRenderMessage = function (owner) {\n    if (owner) {\n      var name = owner.getName();\n      if (name) {\n        return ' Check the render method of `' + name + '`.';\n      }\n    }\n    return '';\n  };\n\n  /**\n   * @param {string} name\n   * @param {*} value\n   * @param {ReactDOMComponent} component\n   */\n  var warnValidStyle = function (name, value, component) {\n    var owner;\n    if (component) {\n      owner = component._currentElement._owner;\n    }\n    if (name.indexOf('-') > -1) {\n      warnHyphenatedStyleName(name, owner);\n    } else if (badVendoredStyleNamePattern.test(name)) {\n      warnBadVendoredStyleName(name, owner);\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {\n      warnStyleValueWithSemicolon(name, value, owner);\n    }\n\n    if (typeof value === 'number' && isNaN(value)) {\n      warnStyleValueIsNaN(name, value, owner);\n    }\n  };\n}\n\n/**\n * Operations for dealing with CSS properties.\n */\nvar CSSPropertyOperations = {\n\n  /**\n   * Serializes a mapping of style properties for use as inline styles:\n   *\n   *   > createMarkupForStyles({width: '200px', height: 0})\n   *   \"width:200px;height:0;\"\n   *\n   * Undefined values are ignored so that declarative programming is easier.\n   * The result should be HTML-escaped before insertion into the DOM.\n   *\n   * @param {object} styles\n   * @param {ReactDOMComponent} component\n   * @return {?string}\n   */\n  createMarkupForStyles: function (styles, component) {\n    var serialized = '';\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      var styleValue = styles[styleName];\n      if (process.env.NODE_ENV !== 'production') {\n        warnValidStyle(styleName, styleValue, component);\n      }\n      if (styleValue != null) {\n        serialized += processStyleName(styleName) + ':';\n        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';\n      }\n    }\n    return serialized || null;\n  },\n\n  /**\n   * Sets the value for multiple styles on a node.  If a value is specified as\n   * '' (empty string), the corresponding style property will be unset.\n   *\n   * @param {DOMElement} node\n   * @param {object} styles\n   * @param {ReactDOMComponent} component\n   */\n  setValueForStyles: function (node, styles, component) {\n    if (process.env.NODE_ENV !== 'production') {\n      ReactInstrumentation.debugTool.onHostOperation(component._debugID, 'update styles', styles);\n    }\n\n    var style = node.style;\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        warnValidStyle(styleName, styles[styleName], component);\n      }\n      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);\n      if (styleName === 'float' || styleName === 'cssFloat') {\n        styleName = styleFloatAccessor;\n      }\n      if (styleValue) {\n        style[styleName] = styleValue;\n      } else {\n        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];\n        if (expansion) {\n          // Shorthand property that IE8 won't like unsetting, so unset each\n          // component to placate it\n          for (var individualStyleName in expansion) {\n            style[individualStyleName] = '';\n          }\n        } else {\n          style[styleName] = '';\n        }\n      }\n    }\n  }\n\n};\n\nmodule.exports = CSSPropertyOperations;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSProperty\n */\n\n'use strict';\n\n/**\n * CSS properties which accept numbers but are not in units of \"px\".\n */\n\nvar isUnitlessNumber = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridColumn: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true\n};\n\n/**\n * @param {string} prefix vendor-specific prefix, eg: Webkit\n * @param {string} key style name, eg: transitionDuration\n * @return {string} style name prefixed with `prefix`, properly camelCased, eg:\n * WebkitTransitionDuration\n */\nfunction prefixKey(prefix, key) {\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);\n}\n\n/**\n * Support style names that may come passed in prefixed by adding permutations\n * of vendor prefixes.\n */\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];\n\n// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an\n// infinite loop, because it iterates over the newly added props too.\nObject.keys(isUnitlessNumber).forEach(function (prop) {\n  prefixes.forEach(function (prefix) {\n    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];\n  });\n});\n\n/**\n * Most style properties can be unset by doing .style[prop] = '' but IE8\n * doesn't like doing that with shorthand properties so for the properties that\n * IE8 breaks on, which are listed here, we instead unset each of the\n * individual properties. See http://bugs.jquery.com/ticket/12385.\n * The 4-value 'clock' properties like margin, padding, border-width seem to\n * behave without any problems. Curiously, list-style works too without any\n * special prodding.\n */\nvar shorthandPropertyExpansions = {\n  background: {\n    backgroundAttachment: true,\n    backgroundColor: true,\n    backgroundImage: true,\n    backgroundPositionX: true,\n    backgroundPositionY: true,\n    backgroundRepeat: true\n  },\n  backgroundPosition: {\n    backgroundPositionX: true,\n    backgroundPositionY: true\n  },\n  border: {\n    borderWidth: true,\n    borderStyle: true,\n    borderColor: true\n  },\n  borderBottom: {\n    borderBottomWidth: true,\n    borderBottomStyle: true,\n    borderBottomColor: true\n  },\n  borderLeft: {\n    borderLeftWidth: true,\n    borderLeftStyle: true,\n    borderLeftColor: true\n  },\n  borderRight: {\n    borderRightWidth: true,\n    borderRightStyle: true,\n    borderRightColor: true\n  },\n  borderTop: {\n    borderTopWidth: true,\n    borderTopStyle: true,\n    borderTopColor: true\n  },\n  font: {\n    fontStyle: true,\n    fontVariant: true,\n    fontWeight: true,\n    fontSize: true,\n    lineHeight: true,\n    fontFamily: true\n  },\n  outline: {\n    outlineWidth: true,\n    outlineStyle: true,\n    outlineColor: true\n  }\n};\n\nvar CSSProperty = {\n  isUnitlessNumber: isUnitlessNumber,\n  shorthandPropertyExpansions: shorthandPropertyExpansions\n};\n\nmodule.exports = CSSProperty;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule dangerousStyleValue\n */\n\n'use strict';\n\nvar CSSProperty = require('./CSSProperty');\nvar warning = require('fbjs/lib/warning');\n\nvar isUnitlessNumber = CSSProperty.isUnitlessNumber;\nvar styleWarnings = {};\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @param {ReactDOMComponent} component\n * @return {string} Normalized style value with dimensions applied.\n */\nfunction dangerousStyleValue(name, value, component) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n  if (isEmpty) {\n    return '';\n  }\n\n  var isNonNumeric = isNaN(value);\n  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {\n    return '' + value; // cast to string\n  }\n\n  if (typeof value === 'string') {\n    if (process.env.NODE_ENV !== 'production') {\n      // Allow '0' to pass through without warning. 0 is already special and\n      // doesn't require units, so we don't need to warn about it.\n      if (component && value !== '0') {\n        var owner = component._currentElement._owner;\n        var ownerName = owner ? owner.getName() : null;\n        if (ownerName && !styleWarnings[ownerName]) {\n          styleWarnings[ownerName] = {};\n        }\n        var warned = false;\n        if (ownerName) {\n          var warnings = styleWarnings[ownerName];\n          warned = warnings[name];\n          if (!warned) {\n            warnings[name] = true;\n          }\n        }\n        if (!warned) {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;\n        }\n      }\n    }\n    value = value.trim();\n  }\n  return value + 'px';\n}\n\nmodule.exports = dangerousStyleValue;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMPropertyOperations\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactInstrumentation = require('./ReactInstrumentation');\n\nvar quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');\nvar warning = require('fbjs/lib/warning');\n\nvar VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');\nvar illegalAttributeNameCache = {};\nvar validatedAttributeNameCache = {};\n\nfunction isAttributeNameSafe(attributeName) {\n  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {\n    return true;\n  }\n  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {\n    return false;\n  }\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n    validatedAttributeNameCache[attributeName] = true;\n    return true;\n  }\n  illegalAttributeNameCache[attributeName] = true;\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;\n  return false;\n}\n\nfunction shouldIgnoreValue(propertyInfo, value) {\n  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;\n}\n\n/**\n * Operations for dealing with DOM properties.\n */\nvar DOMPropertyOperations = {\n\n  /**\n   * Creates markup for the ID property.\n   *\n   * @param {string} id Unescaped ID.\n   * @return {string} Markup string.\n   */\n  createMarkupForID: function (id) {\n    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);\n  },\n\n  setAttributeForID: function (node, id) {\n    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);\n  },\n\n  createMarkupForRoot: function () {\n    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=\"\"';\n  },\n\n  setAttributeForRoot: function (node) {\n    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');\n  },\n\n  /**\n   * Creates markup for a property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {?string} Markup string, or null if the property was invalid.\n   */\n  createMarkupForProperty: function (name, value) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n    if (propertyInfo) {\n      if (shouldIgnoreValue(propertyInfo, value)) {\n        return '';\n      }\n      var attributeName = propertyInfo.attributeName;\n      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {\n        return attributeName + '=\"\"';\n      }\n      return attributeName + '=' + quoteAttributeValueForBrowser(value);\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value == null) {\n        return '';\n      }\n      return name + '=' + quoteAttributeValueForBrowser(value);\n    }\n    return null;\n  },\n\n  /**\n   * Creates markup for a custom property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {string} Markup string, or empty string if the property was invalid.\n   */\n  createMarkupForCustomAttribute: function (name, value) {\n    if (!isAttributeNameSafe(name) || value == null) {\n      return '';\n    }\n    return name + '=' + quoteAttributeValueForBrowser(value);\n  },\n\n  /**\n   * Sets the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   * @param {*} value\n   */\n  setValueForProperty: function (node, name, value) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n    if (propertyInfo) {\n      var mutationMethod = propertyInfo.mutationMethod;\n      if (mutationMethod) {\n        mutationMethod(node, value);\n      } else if (shouldIgnoreValue(propertyInfo, value)) {\n        this.deleteValueForProperty(node, name);\n        return;\n      } else if (propertyInfo.mustUseProperty) {\n        // Contrary to `setAttribute`, object properties are properly\n        // `toString`ed by IE8/9.\n        node[propertyInfo.propertyName] = value;\n      } else {\n        var attributeName = propertyInfo.attributeName;\n        var namespace = propertyInfo.attributeNamespace;\n        // `setAttribute` with objects becomes only `[object]` in IE8/9,\n        // ('' + value) makes it output the correct toString()-value.\n        if (namespace) {\n          node.setAttributeNS(namespace, attributeName, '' + value);\n        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {\n          node.setAttribute(attributeName, '');\n        } else {\n          node.setAttribute(attributeName, '' + value);\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      DOMPropertyOperations.setValueForAttribute(node, name, value);\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var payload = {};\n      payload[name] = value;\n      ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'update attribute', payload);\n    }\n  },\n\n  setValueForAttribute: function (node, name, value) {\n    if (!isAttributeNameSafe(name)) {\n      return;\n    }\n    if (value == null) {\n      node.removeAttribute(name);\n    } else {\n      node.setAttribute(name, '' + value);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var payload = {};\n      payload[name] = value;\n      ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'update attribute', payload);\n    }\n  },\n\n  /**\n   * Deletes an attributes from a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   */\n  deleteValueForAttribute: function (node, name) {\n    node.removeAttribute(name);\n    if (process.env.NODE_ENV !== 'production') {\n      ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'remove attribute', name);\n    }\n  },\n\n  /**\n   * Deletes the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   */\n  deleteValueForProperty: function (node, name) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n    if (propertyInfo) {\n      var mutationMethod = propertyInfo.mutationMethod;\n      if (mutationMethod) {\n        mutationMethod(node, undefined);\n      } else if (propertyInfo.mustUseProperty) {\n        var propName = propertyInfo.propertyName;\n        if (propertyInfo.hasBooleanValue) {\n          node[propName] = false;\n        } else {\n          node[propName] = '';\n        }\n      } else {\n        node.removeAttribute(propertyInfo.attributeName);\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      node.removeAttribute(name);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'remove attribute', name);\n    }\n  }\n\n};\n\nmodule.exports = DOMPropertyOperations;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule quoteAttributeValueForBrowser\n */\n\n'use strict';\n\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\n\n/**\n * Escapes attribute value to prevent scripting attacks.\n *\n * @param {*} value Value to escape.\n * @return {string} An escaped string.\n */\nfunction quoteAttributeValueForBrowser(value) {\n  return '\"' + escapeTextContentForBrowser(value) + '\"';\n}\n\nmodule.exports = quoteAttributeValueForBrowser;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactBrowserEventEmitter\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar EventConstants = require('./EventConstants');\nvar EventPluginRegistry = require('./EventPluginRegistry');\nvar ReactEventEmitterMixin = require('./ReactEventEmitterMixin');\nvar ViewportMetrics = require('./ViewportMetrics');\n\nvar getVendorPrefixedEventName = require('./getVendorPrefixedEventName');\nvar isEventSupported = require('./isEventSupported');\n\n/**\n * Summary of `ReactBrowserEventEmitter` event handling:\n *\n *  - Top-level delegation is used to trap most native browser events. This\n *    may only occur in the main thread and is the responsibility of\n *    ReactEventListener, which is injected and can therefore support pluggable\n *    event sources. This is the only work that occurs in the main thread.\n *\n *  - We normalize and de-duplicate events to account for browser quirks. This\n *    may be done in the worker thread.\n *\n *  - Forward these native events (with the associated top-level type used to\n *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want\n *    to extract any synthetic events.\n *\n *  - The `EventPluginHub` will then process each event by annotating them with\n *    \"dispatches\", a sequence of listeners and IDs that care about that event.\n *\n *  - The `EventPluginHub` then dispatches the events.\n *\n * Overview of React and the event system:\n *\n * +------------+    .\n * |    DOM     |    .\n * +------------+    .\n *       |           .\n *       v           .\n * +------------+    .\n * | ReactEvent |    .\n * |  Listener  |    .\n * +------------+    .                         +-----------+\n *       |           .               +--------+|SimpleEvent|\n *       |           .               |         |Plugin     |\n * +-----|------+    .               v         +-----------+\n * |     |      |    .    +--------------+                    +------------+\n * |     +-----------.--->|EventPluginHub|                    |    Event   |\n * |            |    .    |              |     +-----------+  | Propagators|\n * | ReactEvent |    .    |              |     |TapEvent   |  |------------|\n * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|\n * |            |    .    |              |     +-----------+  |  utilities |\n * |     +-----------.--->|              |                    +------------+\n * |     |      |    .    +--------------+\n * +-----|------+    .                ^        +-----------+\n *       |           .                |        |Enter/Leave|\n *       +           .                +-------+|Plugin     |\n * +-------------+   .                         +-----------+\n * | application |   .\n * |-------------|   .\n * |             |   .\n * |             |   .\n * +-------------+   .\n *                   .\n *    React Core     .  General Purpose Event Plugin System\n */\n\nvar hasEventPageXY;\nvar alreadyListeningTo = {};\nvar isMonitoringScrollValue = false;\nvar reactTopListenersCounter = 0;\n\n// For events like 'submit' which don't consistently bubble (which we trap at a\n// lower node than `document`), binding at `document` would cause duplicate\n// events so we don't include them here\nvar topEventMapping = {\n  topAbort: 'abort',\n  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',\n  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',\n  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',\n  topBlur: 'blur',\n  topCanPlay: 'canplay',\n  topCanPlayThrough: 'canplaythrough',\n  topChange: 'change',\n  topClick: 'click',\n  topCompositionEnd: 'compositionend',\n  topCompositionStart: 'compositionstart',\n  topCompositionUpdate: 'compositionupdate',\n  topContextMenu: 'contextmenu',\n  topCopy: 'copy',\n  topCut: 'cut',\n  topDoubleClick: 'dblclick',\n  topDrag: 'drag',\n  topDragEnd: 'dragend',\n  topDragEnter: 'dragenter',\n  topDragExit: 'dragexit',\n  topDragLeave: 'dragleave',\n  topDragOver: 'dragover',\n  topDragStart: 'dragstart',\n  topDrop: 'drop',\n  topDurationChange: 'durationchange',\n  topEmptied: 'emptied',\n  topEncrypted: 'encrypted',\n  topEnded: 'ended',\n  topError: 'error',\n  topFocus: 'focus',\n  topInput: 'input',\n  topKeyDown: 'keydown',\n  topKeyPress: 'keypress',\n  topKeyUp: 'keyup',\n  topLoadedData: 'loadeddata',\n  topLoadedMetadata: 'loadedmetadata',\n  topLoadStart: 'loadstart',\n  topMouseDown: 'mousedown',\n  topMouseMove: 'mousemove',\n  topMouseOut: 'mouseout',\n  topMouseOver: 'mouseover',\n  topMouseUp: 'mouseup',\n  topPaste: 'paste',\n  topPause: 'pause',\n  topPlay: 'play',\n  topPlaying: 'playing',\n  topProgress: 'progress',\n  topRateChange: 'ratechange',\n  topScroll: 'scroll',\n  topSeeked: 'seeked',\n  topSeeking: 'seeking',\n  topSelectionChange: 'selectionchange',\n  topStalled: 'stalled',\n  topSuspend: 'suspend',\n  topTextInput: 'textInput',\n  topTimeUpdate: 'timeupdate',\n  topTouchCancel: 'touchcancel',\n  topTouchEnd: 'touchend',\n  topTouchMove: 'touchmove',\n  topTouchStart: 'touchstart',\n  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',\n  topVolumeChange: 'volumechange',\n  topWaiting: 'waiting',\n  topWheel: 'wheel'\n};\n\n/**\n * To ensure no conflicts with other potential React instances on the page\n */\nvar topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);\n\nfunction getListeningForDocument(mountAt) {\n  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`\n  // directly.\n  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {\n    mountAt[topListenersIDKey] = reactTopListenersCounter++;\n    alreadyListeningTo[mountAt[topListenersIDKey]] = {};\n  }\n  return alreadyListeningTo[mountAt[topListenersIDKey]];\n}\n\n/**\n * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For\n * example:\n *\n *   EventPluginHub.putListener('myID', 'onClick', myFunction);\n *\n * This would allocate a \"registration\" of `('onClick', myFunction)` on 'myID'.\n *\n * @internal\n */\nvar ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {\n\n  /**\n   * Injectable event backend\n   */\n  ReactEventListener: null,\n\n  injection: {\n    /**\n     * @param {object} ReactEventListener\n     */\n    injectReactEventListener: function (ReactEventListener) {\n      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);\n      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;\n    }\n  },\n\n  /**\n   * Sets whether or not any created callbacks should be enabled.\n   *\n   * @param {boolean} enabled True if callbacks should be enabled.\n   */\n  setEnabled: function (enabled) {\n    if (ReactBrowserEventEmitter.ReactEventListener) {\n      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);\n    }\n  },\n\n  /**\n   * @return {boolean} True if callbacks are enabled.\n   */\n  isEnabled: function () {\n    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());\n  },\n\n  /**\n   * We listen for bubbled touch events on the document object.\n   *\n   * Firefox v8.01 (and possibly others) exhibited strange behavior when\n   * mounting `onmousemove` events at some node that was not the document\n   * element. The symptoms were that if your mouse is not moving over something\n   * contained within that mount point (for example on the background) the\n   * top-level listeners for `onmousemove` won't be called. However, if you\n   * register the `mousemove` on the document object, then it will of course\n   * catch all `mousemove`s. This along with iOS quirks, justifies restricting\n   * top-level listeners to the document object only, at least for these\n   * movement types of events and possibly all events.\n   *\n   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\n   *\n   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but\n   * they bubble to document.\n   *\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {object} contentDocumentHandle Document which owns the container\n   */\n  listenTo: function (registrationName, contentDocumentHandle) {\n    var mountAt = contentDocumentHandle;\n    var isListening = getListeningForDocument(mountAt);\n    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];\n\n    var topLevelTypes = EventConstants.topLevelTypes;\n    for (var i = 0; i < dependencies.length; i++) {\n      var dependency = dependencies[i];\n      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {\n        if (dependency === topLevelTypes.topWheel) {\n          if (isEventSupported('wheel')) {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);\n          } else if (isEventSupported('mousewheel')) {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);\n          } else {\n            // Firefox needs to capture a different mouse scroll event.\n            // @see http://www.quirksmode.org/dom/events/tests/scroll.html\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);\n          }\n        } else if (dependency === topLevelTypes.topScroll) {\n\n          if (isEventSupported('scroll', true)) {\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);\n          } else {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);\n          }\n        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {\n\n          if (isEventSupported('focus', true)) {\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);\n          } else if (isEventSupported('focusin')) {\n            // IE has `focusin` and `focusout` events which bubble.\n            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);\n          }\n\n          // to make sure blur and focus event listeners are only attached once\n          isListening[topLevelTypes.topBlur] = true;\n          isListening[topLevelTypes.topFocus] = true;\n        } else if (topEventMapping.hasOwnProperty(dependency)) {\n          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);\n        }\n\n        isListening[dependency] = true;\n      }\n    }\n  },\n\n  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {\n    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);\n  },\n\n  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {\n    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);\n  },\n\n  /**\n   * Protect against document.createEvent() returning null\n   * Some popup blocker extensions appear to do this:\n   * https://github.com/facebook/react/issues/6887\n   */\n  supportsEventPageXY: function () {\n    if (!document.createEvent) {\n      return false;\n    }\n    var ev = document.createEvent('MouseEvent');\n    return ev != null && 'pageX' in ev;\n  },\n\n  /**\n   * Listens to window scroll and resize events. We cache scroll values so that\n   * application code can access them without triggering reflows.\n   *\n   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when\n   * pageX/pageY isn't supported (legacy browsers).\n   *\n   * NOTE: Scroll events do not bubble.\n   *\n   * @see http://www.quirksmode.org/dom/events/scroll.html\n   */\n  ensureScrollValueMonitoring: function () {\n    if (hasEventPageXY === undefined) {\n      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();\n    }\n    if (!hasEventPageXY && !isMonitoringScrollValue) {\n      var refresh = ViewportMetrics.refreshScrollValues;\n      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);\n      isMonitoringScrollValue = true;\n    }\n  }\n\n});\n\nmodule.exports = ReactBrowserEventEmitter;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEventEmitterMixin\n */\n\n'use strict';\n\nvar EventPluginHub = require('./EventPluginHub');\n\nfunction runEventQueueInBatch(events) {\n  EventPluginHub.enqueueEvents(events);\n  EventPluginHub.processEventQueue(false);\n}\n\nvar ReactEventEmitterMixin = {\n\n  /**\n   * Streams a fired top-level event to `EventPluginHub` where plugins have the\n   * opportunity to create `ReactEvent`s to be dispatched.\n   */\n  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);\n    runEventQueueInBatch(events);\n  }\n};\n\nmodule.exports = ReactEventEmitterMixin;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getVendorPrefixedEventName\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\n/**\n * Generate a mapping of standard vendor prefixes using the defined style property and event name.\n *\n * @param {string} styleProp\n * @param {string} eventName\n * @returns {object}\n */\nfunction makePrefixMap(styleProp, eventName) {\n  var prefixes = {};\n\n  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();\n  prefixes['Webkit' + styleProp] = 'webkit' + eventName;\n  prefixes['Moz' + styleProp] = 'moz' + eventName;\n  prefixes['ms' + styleProp] = 'MS' + eventName;\n  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();\n\n  return prefixes;\n}\n\n/**\n * A list of event names to a configurable list of vendor prefixes.\n */\nvar vendorPrefixes = {\n  animationend: makePrefixMap('Animation', 'AnimationEnd'),\n  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),\n  animationstart: makePrefixMap('Animation', 'AnimationStart'),\n  transitionend: makePrefixMap('Transition', 'TransitionEnd')\n};\n\n/**\n * Event names that have already been detected and prefixed (if applicable).\n */\nvar prefixedEventNames = {};\n\n/**\n * Element to check for prefixes on.\n */\nvar style = {};\n\n/**\n * Bootstrap if a DOM exists.\n */\nif (ExecutionEnvironment.canUseDOM) {\n  style = document.createElement('div').style;\n\n  // On some platforms, in particular some releases of Android 4.x,\n  // the un-prefixed \"animation\" and \"transition\" properties are defined on the\n  // style object but the events that fire will still be prefixed, so we need\n  // to check if the un-prefixed events are usable, and if not remove them from the map.\n  if (!('AnimationEvent' in window)) {\n    delete vendorPrefixes.animationend.animation;\n    delete vendorPrefixes.animationiteration.animation;\n    delete vendorPrefixes.animationstart.animation;\n  }\n\n  // Same as above\n  if (!('TransitionEvent' in window)) {\n    delete vendorPrefixes.transitionend.transition;\n  }\n}\n\n/**\n * Attempts to determine the correct vendor prefixed event name.\n *\n * @param {string} eventName\n * @returns {string}\n */\nfunction getVendorPrefixedEventName(eventName) {\n  if (prefixedEventNames[eventName]) {\n    return prefixedEventNames[eventName];\n  } else if (!vendorPrefixes[eventName]) {\n    return eventName;\n  }\n\n  var prefixMap = vendorPrefixes[eventName];\n\n  for (var styleProp in prefixMap) {\n    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {\n      return prefixedEventNames[eventName] = prefixMap[styleProp];\n    }\n  }\n\n  return '';\n}\n\nmodule.exports = getVendorPrefixedEventName;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMButton\n */\n\n'use strict';\n\nvar DisabledInputUtils = require('./DisabledInputUtils');\n\n/**\n * Implements a <button> host component that does not receive mouse events\n * when `disabled` is set.\n */\nvar ReactDOMButton = {\n  getHostProps: DisabledInputUtils.getHostProps\n};\n\nmodule.exports = ReactDOMButton;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DisabledInputUtils\n */\n\n'use strict';\n\nvar disableableMouseListenerNames = {\n  onClick: true,\n  onDoubleClick: true,\n  onMouseDown: true,\n  onMouseMove: true,\n  onMouseUp: true,\n\n  onClickCapture: true,\n  onDoubleClickCapture: true,\n  onMouseDownCapture: true,\n  onMouseMoveCapture: true,\n  onMouseUpCapture: true\n};\n\n/**\n * Implements a host component that does not receive mouse events\n * when `disabled` is set.\n */\nvar DisabledInputUtils = {\n  getHostProps: function (inst, props) {\n    if (!props.disabled) {\n      return props;\n    }\n\n    // Copy the props, except the mouse listeners\n    var hostProps = {};\n    for (var key in props) {\n      if (!disableableMouseListenerNames[key] && props.hasOwnProperty(key)) {\n        hostProps[key] = props[key];\n      }\n    }\n\n    return hostProps;\n  }\n};\n\nmodule.exports = DisabledInputUtils;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMInput\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar DisabledInputUtils = require('./DisabledInputUtils');\nvar DOMPropertyOperations = require('./DOMPropertyOperations');\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar didWarnValueLink = false;\nvar didWarnCheckedLink = false;\nvar didWarnValueDefaultValue = false;\nvar didWarnCheckedDefaultChecked = false;\nvar didWarnControlledToUncontrolled = false;\nvar didWarnUncontrolledToControlled = false;\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMInput.updateWrapper(this);\n  }\n}\n\nfunction isControlled(props) {\n  var usesChecked = props.type === 'checkbox' || props.type === 'radio';\n  return usesChecked ? props.checked != null : props.value != null;\n}\n\n/**\n * Implements an <input> host component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = {\n  getHostProps: function (inst, props) {\n    var value = LinkedValueUtils.getValue(props);\n    var checked = LinkedValueUtils.getChecked(props);\n\n    var hostProps = _assign({\n      // Make sure we set .type before any other properties (setting .value\n      // before .type means .value is lost in IE11 and below)\n      type: undefined,\n      // Make sure we set .step before .value (setting .value before .step\n      // means .value is rounded on mount, based upon step precision)\n      step: undefined,\n      // Make sure we set .min & .max before .value (to ensure proper order\n      // in corner cases such as min or max deriving from value, e.g. Issue #7170)\n      min: undefined,\n      max: undefined\n    }, DisabledInputUtils.getHostProps(inst, props), {\n      defaultChecked: undefined,\n      defaultValue: undefined,\n      value: value != null ? value : inst._wrapperState.initialValue,\n      checked: checked != null ? checked : inst._wrapperState.initialChecked,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return hostProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);\n\n      var owner = inst._currentElement._owner;\n\n      if (props.valueLink !== undefined && !didWarnValueLink) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnValueLink = true;\n      }\n      if (props.checkedLink !== undefined && !didWarnCheckedLink) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnCheckedLink = true;\n      }\n      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnCheckedDefaultChecked = true;\n      }\n      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnValueDefaultValue = true;\n      }\n    }\n\n    var defaultValue = props.defaultValue;\n    inst._wrapperState = {\n      initialChecked: props.checked != null ? props.checked : props.defaultChecked,\n      initialValue: props.value != null ? props.value : defaultValue,\n      listeners: null,\n      onChange: _handleChange.bind(inst)\n    };\n\n    if (process.env.NODE_ENV !== 'production') {\n      inst._wrapperState.controlled = isControlled(props);\n    }\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    if (process.env.NODE_ENV !== 'production') {\n      var controlled = isControlled(props);\n      var owner = inst._currentElement._owner;\n\n      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnUncontrolledToControlled = true;\n      }\n      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnControlledToUncontrolled = true;\n      }\n    }\n\n    // TODO: Shouldn't this be getChecked(props)?\n    var checked = props.checked;\n    if (checked != null) {\n      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);\n    }\n\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      var newValue = '' + value;\n\n      // To avoid side effects (such as losing text selection), only set value if changed\n      if (newValue !== node.value) {\n        node.value = newValue;\n      }\n    } else {\n      if (props.value == null && props.defaultValue != null) {\n        node.defaultValue = '' + props.defaultValue;\n      }\n      if (props.checked == null && props.defaultChecked != null) {\n        node.defaultChecked = !!props.defaultChecked;\n      }\n    }\n  },\n\n  postMountWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    // This is in postMount because we need access to the DOM node, which is not\n    // available until after the component has mounted.\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n\n    // Detach value from defaultValue. We won't do anything if we're working on\n    // submit or reset inputs as those values & defaultValues are linked. They\n    // are not resetable nodes so this operation doesn't matter and actually\n    // removes browser-default values (eg \"Submit Query\") when no value is\n    // provided.\n\n    switch (props.type) {\n      case 'submit':\n      case 'reset':\n        break;\n      case 'color':\n      case 'date':\n      case 'datetime':\n      case 'datetime-local':\n      case 'month':\n      case 'time':\n      case 'week':\n        // This fixes the no-show issue on iOS Safari and Android Chrome:\n        // https://github.com/facebook/react/issues/7233\n        node.value = '';\n        node.value = node.defaultValue;\n        break;\n      default:\n        node.value = node.value;\n        break;\n    }\n\n    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug\n    // this is needed to work around a chrome bug where setting defaultChecked\n    // will sometimes influence the value of checked (even after detachment).\n    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416\n    // We need to temporarily unset name to avoid disrupting radio button groups.\n    var name = node.name;\n    if (name !== '') {\n      node.name = '';\n    }\n    node.defaultChecked = !node.defaultChecked;\n    node.defaultChecked = !node.defaultChecked;\n    if (name !== '') {\n      node.name = name;\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n\n  // Here we use asap to wait until all updates have propagated, which\n  // is important when using controlled components within layers:\n  // https://github.com/facebook/react/issues/1698\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n\n  var name = props.name;\n  if (props.type === 'radio' && name != null) {\n    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);\n    var queryRoot = rootNode;\n\n    while (queryRoot.parentNode) {\n      queryRoot = queryRoot.parentNode;\n    }\n\n    // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form, let's just use the global\n    // `querySelectorAll` to ensure we don't miss anything.\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n    for (var i = 0; i < group.length; i++) {\n      var otherNode = group[i];\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      }\n      // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React radio buttons with non-React ones.\n      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);\n      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;\n      // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n    }\n  }\n\n  return returnValue;\n}\n\nmodule.exports = ReactDOMInput;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule LinkedValueUtils\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactPropTypes = require('./ReactPropTypes');\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar hasReadOnlyValue = {\n  'button': true,\n  'checkbox': true,\n  'image': true,\n  'hidden': true,\n  'radio': true,\n  'reset': true,\n  'submit': true\n};\n\nfunction _assertSingleLink(inputProps) {\n  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;\n}\nfunction _assertValueLink(inputProps) {\n  _assertSingleLink(inputProps);\n  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\\'t want to use valueLink.') : _prodInvariant('88') : void 0;\n}\n\nfunction _assertCheckedLink(inputProps) {\n  _assertSingleLink(inputProps);\n  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\\'t want to use checkedLink') : _prodInvariant('89') : void 0;\n}\n\nvar propTypes = {\n  value: function (props, propName, componentName) {\n    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {\n      return null;\n    }\n    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n  },\n  checked: function (props, propName, componentName) {\n    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {\n      return null;\n    }\n    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n  },\n  onChange: ReactPropTypes.func\n};\n\nvar loggedTypeFailures = {};\nfunction getDeclarationErrorAddendum(owner) {\n  if (owner) {\n    var name = owner.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * Provide a linked `value` attribute for controlled forms. You should not use\n * this outside of the ReactDOM controlled form components.\n */\nvar LinkedValueUtils = {\n  checkPropTypes: function (tagName, props, owner) {\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop, null, ReactPropTypesSecret);\n      }\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n\n        var addendum = getDeclarationErrorAddendum(owner);\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;\n      }\n    }\n  },\n\n  /**\n   * @param {object} inputProps Props for form component\n   * @return {*} current value of the input either from value prop or link.\n   */\n  getValue: function (inputProps) {\n    if (inputProps.valueLink) {\n      _assertValueLink(inputProps);\n      return inputProps.valueLink.value;\n    }\n    return inputProps.value;\n  },\n\n  /**\n   * @param {object} inputProps Props for form component\n   * @return {*} current checked status of the input either from checked prop\n   *             or link.\n   */\n  getChecked: function (inputProps) {\n    if (inputProps.checkedLink) {\n      _assertCheckedLink(inputProps);\n      return inputProps.checkedLink.value;\n    }\n    return inputProps.checked;\n  },\n\n  /**\n   * @param {object} inputProps Props for form component\n   * @param {SyntheticEvent} event change event to handle\n   */\n  executeOnChange: function (inputProps, event) {\n    if (inputProps.valueLink) {\n      _assertValueLink(inputProps);\n      return inputProps.valueLink.requestChange(event.target.value);\n    } else if (inputProps.checkedLink) {\n      _assertCheckedLink(inputProps);\n      return inputProps.checkedLink.requestChange(event.target.checked);\n    } else if (inputProps.onChange) {\n      return inputProps.onChange.call(undefined, event);\n    }\n  }\n};\n\nmodule.exports = LinkedValueUtils;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMOption\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar ReactChildren = require('./ReactChildren');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactDOMSelect = require('./ReactDOMSelect');\n\nvar warning = require('fbjs/lib/warning');\nvar didWarnInvalidOptionChildren = false;\n\nfunction flattenChildren(children) {\n  var content = '';\n\n  // Flatten children and warn if they aren't strings or numbers;\n  // invalid types are ignored.\n  ReactChildren.forEach(children, function (child) {\n    if (child == null) {\n      return;\n    }\n    if (typeof child === 'string' || typeof child === 'number') {\n      content += child;\n    } else if (!didWarnInvalidOptionChildren) {\n      didWarnInvalidOptionChildren = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;\n    }\n  });\n\n  return content;\n}\n\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\nvar ReactDOMOption = {\n  mountWrapper: function (inst, props, hostParent) {\n    // TODO (yungsters): Remove support for `selected` in <option>.\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;\n    }\n\n    // Look up whether this option is 'selected'\n    var selectValue = null;\n    if (hostParent != null) {\n      var selectParent = hostParent;\n\n      if (selectParent._tag === 'optgroup') {\n        selectParent = selectParent._hostParent;\n      }\n\n      if (selectParent != null && selectParent._tag === 'select') {\n        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);\n      }\n    }\n\n    // If the value is null (e.g., no specified value or after initial mount)\n    // or missing (e.g., for <datalist>), we don't change props.selected\n    var selected = null;\n    if (selectValue != null) {\n      var value;\n      if (props.value != null) {\n        value = props.value + '';\n      } else {\n        value = flattenChildren(props.children);\n      }\n      selected = false;\n      if (Array.isArray(selectValue)) {\n        // multiple\n        for (var i = 0; i < selectValue.length; i++) {\n          if ('' + selectValue[i] === value) {\n            selected = true;\n            break;\n          }\n        }\n      } else {\n        selected = '' + selectValue === value;\n      }\n    }\n\n    inst._wrapperState = { selected: selected };\n  },\n\n  postMountWrapper: function (inst) {\n    // value=\"\" should make a value attribute (#6219)\n    var props = inst._currentElement.props;\n    if (props.value != null) {\n      var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n      node.setAttribute('value', props.value);\n    }\n  },\n\n  getHostProps: function (inst, props) {\n    var hostProps = _assign({ selected: undefined, children: undefined }, props);\n\n    // Read state only from initial mount because <select> updates value\n    // manually; we need the initial state only for server rendering\n    if (inst._wrapperState.selected != null) {\n      hostProps.selected = inst._wrapperState.selected;\n    }\n\n    var content = flattenChildren(props.children);\n\n    if (content) {\n      hostProps.children = content;\n    }\n\n    return hostProps;\n  }\n\n};\n\nmodule.exports = ReactDOMOption;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelect\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar DisabledInputUtils = require('./DisabledInputUtils');\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar warning = require('fbjs/lib/warning');\n\nvar didWarnValueLink = false;\nvar didWarnValueDefaultValue = false;\n\nfunction updateOptionsIfPendingUpdateAndMounted() {\n  if (this._rootNodeID && this._wrapperState.pendingUpdate) {\n    this._wrapperState.pendingUpdate = false;\n\n    var props = this._currentElement.props;\n    var value = LinkedValueUtils.getValue(props);\n\n    if (value != null) {\n      updateOptions(this, Boolean(props.multiple), value);\n    }\n  }\n}\n\nfunction getDeclarationErrorAddendum(owner) {\n  if (owner) {\n    var name = owner.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\nvar valuePropNames = ['value', 'defaultValue'];\n\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\nfunction checkSelectPropTypes(inst, props) {\n  var owner = inst._currentElement._owner;\n  LinkedValueUtils.checkPropTypes('select', props, owner);\n\n  if (props.valueLink !== undefined && !didWarnValueLink) {\n    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;\n    didWarnValueLink = true;\n  }\n\n  for (var i = 0; i < valuePropNames.length; i++) {\n    var propName = valuePropNames[i];\n    if (props[propName] == null) {\n      continue;\n    }\n    var isArray = Array.isArray(props[propName]);\n    if (props.multiple && !isArray) {\n      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;\n    } else if (!props.multiple && isArray) {\n      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;\n    }\n  }\n}\n\n/**\n * @param {ReactDOMComponent} inst\n * @param {boolean} multiple\n * @param {*} propValue A stringable (with `multiple`, a list of stringables).\n * @private\n */\nfunction updateOptions(inst, multiple, propValue) {\n  var selectedValue, i;\n  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;\n\n  if (multiple) {\n    selectedValue = {};\n    for (i = 0; i < propValue.length; i++) {\n      selectedValue['' + propValue[i]] = true;\n    }\n    for (i = 0; i < options.length; i++) {\n      var selected = selectedValue.hasOwnProperty(options[i].value);\n      if (options[i].selected !== selected) {\n        options[i].selected = selected;\n      }\n    }\n  } else {\n    // Do not set `select.value` as exact behavior isn't consistent across all\n    // browsers for all cases.\n    selectedValue = '' + propValue;\n    for (i = 0; i < options.length; i++) {\n      if (options[i].value === selectedValue) {\n        options[i].selected = true;\n        return;\n      }\n    }\n    if (options.length) {\n      options[0].selected = true;\n    }\n  }\n}\n\n/**\n * Implements a <select> host component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * stringable. If `multiple` is true, the prop must be an array of stringables.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\nvar ReactDOMSelect = {\n  getHostProps: function (inst, props) {\n    return _assign({}, DisabledInputUtils.getHostProps(inst, props), {\n      onChange: inst._wrapperState.onChange,\n      value: undefined\n    });\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      checkSelectPropTypes(inst, props);\n    }\n\n    var value = LinkedValueUtils.getValue(props);\n    inst._wrapperState = {\n      pendingUpdate: false,\n      initialValue: value != null ? value : props.defaultValue,\n      listeners: null,\n      onChange: _handleChange.bind(inst),\n      wasMultiple: Boolean(props.multiple)\n    };\n\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;\n      didWarnValueDefaultValue = true;\n    }\n  },\n\n  getSelectValueContext: function (inst) {\n    // ReactDOMOption looks at this initial value so the initial generated\n    // markup has correct `selected` attributes\n    return inst._wrapperState.initialValue;\n  },\n\n  postUpdateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    // After the initial mount, we control selected-ness manually so don't pass\n    // this value down\n    inst._wrapperState.initialValue = undefined;\n\n    var wasMultiple = inst._wrapperState.wasMultiple;\n    inst._wrapperState.wasMultiple = Boolean(props.multiple);\n\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      inst._wrapperState.pendingUpdate = false;\n      updateOptions(inst, Boolean(props.multiple), value);\n    } else if (wasMultiple !== Boolean(props.multiple)) {\n      // For simplicity, reapply `defaultValue` if `multiple` is toggled.\n      if (props.defaultValue != null) {\n        updateOptions(inst, Boolean(props.multiple), props.defaultValue);\n      } else {\n        // Revert the select back to its default unselected state.\n        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');\n      }\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n\n  if (this._rootNodeID) {\n    this._wrapperState.pendingUpdate = true;\n  }\n  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);\n  return returnValue;\n}\n\nmodule.exports = ReactDOMSelect;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextarea\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar DisabledInputUtils = require('./DisabledInputUtils');\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar didWarnValueLink = false;\nvar didWarnValDefaultVal = false;\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMTextarea.updateWrapper(this);\n  }\n}\n\n/**\n * Implements a <textarea> host component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = {\n  getHostProps: function (inst, props) {\n    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.  We could add a check in setTextContent\n    // to only set the value if/when the value differs from the node value (which would\n    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.\n    // The value can be a boolean or object so that's why it's forced to be a string.\n    var hostProps = _assign({}, DisabledInputUtils.getHostProps(inst, props), {\n      value: undefined,\n      defaultValue: undefined,\n      children: '' + inst._wrapperState.initialValue,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return hostProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);\n      if (props.valueLink !== undefined && !didWarnValueLink) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnValueLink = true;\n      }\n      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;\n        didWarnValDefaultVal = true;\n      }\n    }\n\n    var value = LinkedValueUtils.getValue(props);\n    var initialValue = value;\n\n    // Only bother fetching default value if we're going to use it\n    if (value == null) {\n      var defaultValue = props.defaultValue;\n      // TODO (yungsters): Remove support for children content in <textarea>.\n      var children = props.children;\n      if (children != null) {\n        if (process.env.NODE_ENV !== 'production') {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;\n        }\n        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;\n        if (Array.isArray(children)) {\n          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;\n          children = children[0];\n        }\n\n        defaultValue = '' + children;\n      }\n      if (defaultValue == null) {\n        defaultValue = '';\n      }\n      initialValue = defaultValue;\n    }\n\n    inst._wrapperState = {\n      initialValue: '' + initialValue,\n      listeners: null,\n      onChange: _handleChange.bind(inst)\n    };\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      var newValue = '' + value;\n\n      // To avoid side effects (such as losing text selection), only set value if changed\n      if (newValue !== node.value) {\n        node.value = newValue;\n      }\n      if (props.defaultValue == null) {\n        node.defaultValue = newValue;\n      }\n    }\n    if (props.defaultValue != null) {\n      node.defaultValue = props.defaultValue;\n    }\n  },\n\n  postMountWrapper: function (inst) {\n    // This is in postMount because we need access to the DOM node, which is not\n    // available until after the component has mounted.\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n\n    // Warning: node.value may be the empty string at this point (IE11) if placeholder is set.\n    node.value = node.textContent; // Detach value from defaultValue\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n  return returnValue;\n}\n\nmodule.exports = ReactDOMTextarea;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactInstrumentation = require('./ReactInstrumentation');\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactChildReconciler = require('./ReactChildReconciler');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar flattenChildren = require('./flattenChildren');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Make an update for markup to be rendered and inserted at a supplied index.\n *\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction makeInsertMarkup(markup, afterNode, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    content: markup,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: toIndex,\n    afterNode: afterNode\n  };\n}\n\n/**\n * Make an update for moving an existing element to another index.\n *\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction makeMove(child, afterNode, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    content: null,\n    fromIndex: child._mountIndex,\n    fromNode: ReactReconciler.getHostNode(child),\n    toIndex: toIndex,\n    afterNode: afterNode\n  };\n}\n\n/**\n * Make an update for removing an element at an index.\n *\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction makeRemove(child, node) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    content: null,\n    fromIndex: child._mountIndex,\n    fromNode: node,\n    toIndex: null,\n    afterNode: null\n  };\n}\n\n/**\n * Make an update for setting the markup of a node.\n *\n * @param {string} markup Markup that renders into an element.\n * @private\n */\nfunction makeSetMarkup(markup) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: ReactMultiChildUpdateTypes.SET_MARKUP,\n    content: markup,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: null,\n    afterNode: null\n  };\n}\n\n/**\n * Make an update for setting the text content.\n *\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction makeTextContent(textContent) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    content: textContent,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: null,\n    afterNode: null\n  };\n}\n\n/**\n * Push an update, if any, onto the queue. Creates a new queue if none is\n * passed and always returns the queue. Mutative.\n */\nfunction enqueue(queue, update) {\n  if (update) {\n    queue = queue || [];\n    queue.push(update);\n  }\n  return queue;\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue(inst, updateQueue) {\n  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);\n}\n\nvar setChildrenForInstrumentation = emptyFunction;\nif (process.env.NODE_ENV !== 'production') {\n  var getDebugID = function (inst) {\n    if (!inst._debugID) {\n      // Check for ART-like instances. TODO: This is silly/gross.\n      var internal;\n      if (internal = ReactInstanceMap.get(inst)) {\n        inst = internal;\n      }\n    }\n    return inst._debugID;\n  };\n  setChildrenForInstrumentation = function (children) {\n    var debugID = getDebugID(this);\n    // TODO: React Native empty components are also multichild.\n    // This means they still get into this method but don't have _debugID.\n    if (debugID !== 0) {\n      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {\n        return children[key]._debugID;\n      }) : []);\n    }\n  };\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {\n      if (process.env.NODE_ENV !== 'production') {\n        var selfDebugID = getDebugID(this);\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n        }\n      }\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n    },\n\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {\n      var nextChildren;\n      var selfDebugID = 0;\n      if (process.env.NODE_ENV !== 'production') {\n        selfDebugID = getDebugID(this);\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);\n          return nextChildren;\n        }\n      }\n      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);\n      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);\n      return nextChildren;\n    },\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction, context) {\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);\n      this._renderedChildren = children;\n\n      var mountImages = [];\n      var index = 0;\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          var selfDebugID = 0;\n          if (process.env.NODE_ENV !== 'production') {\n            selfDebugID = getDebugID(this);\n          }\n          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);\n          child._mountIndex = index++;\n          mountImages.push(mountImage);\n        }\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        setChildrenForInstrumentation.call(this, children);\n      }\n\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      var prevChildren = this._renderedChildren;\n      // Remove any rendered children.\n      ReactChildReconciler.unmountChildren(prevChildren, false);\n      for (var name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name)) {\n          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;\n        }\n      }\n      // Set new text content.\n      var updates = [makeTextContent(nextContent)];\n      processQueue(this, updates);\n    },\n\n    /**\n     * Replaces any rendered children with a markup string.\n     *\n     * @param {string} nextMarkup String of markup.\n     * @internal\n     */\n    updateMarkup: function (nextMarkup) {\n      var prevChildren = this._renderedChildren;\n      // Remove any rendered children.\n      ReactChildReconciler.unmountChildren(prevChildren, false);\n      for (var name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name)) {\n          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;\n        }\n      }\n      var updates = [makeSetMarkup(nextMarkup)];\n      processQueue(this, updates);\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      // Hook used by React ART\n      this._updateChildren(nextNestedChildrenElements, transaction, context);\n    },\n\n    /**\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var removedNodes = {};\n      var mountImages = [];\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var updates = null;\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var nextIndex = 0;\n      var lastIndex = 0;\n      // `nextMountIndex` will increment for each newly mounted child.\n      var nextMountIndex = 0;\n      var lastPlacedNode = null;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (prevChild === nextChild) {\n          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            // The `removedNodes` loop below will actually remove the child.\n          }\n          // The child must be instantiated before it's mounted.\n          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));\n          nextMountIndex++;\n        }\n        nextIndex++;\n        lastPlacedNode = ReactReconciler.getHostNode(nextChild);\n      }\n      // Remove children that are no longer present.\n      for (name in removedNodes) {\n        if (removedNodes.hasOwnProperty(name)) {\n          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));\n        }\n      }\n      if (updates) {\n        processQueue(this, updates);\n      }\n      this._renderedChildren = nextChildren;\n\n      if (process.env.NODE_ENV !== 'production') {\n        setChildrenForInstrumentation.call(this, nextChildren);\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted. It does not actually perform any\n     * backend operations.\n     *\n     * @internal\n     */\n    unmountChildren: function (safely) {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren, safely);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, afterNode, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        return makeMove(child, afterNode, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, afterNode, mountImage) {\n      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child, node) {\n      return makeRemove(child, node);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {\n      child._mountIndex = index;\n      return this.createChild(child, afterNode, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @private\n     */\n    _unmountChild: function (child, node) {\n      var update = this.removeChild(child, node);\n      child._mountIndex = null;\n      return update;\n    }\n\n  }\n\n};\n\nmodule.exports = ReactMultiChild;","/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentEnvironment\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar injected = false;\n\nvar ReactComponentEnvironment = {\n\n  /**\n   * Optionally injectable hook for swapping out mount images in the middle of\n   * the tree.\n   */\n  replaceNodeWithMarkup: null,\n\n  /**\n   * Optionally injectable hook for processing a queue of child updates. Will\n   * later move into MultiChildComponents.\n   */\n  processChildrenUpdates: null,\n\n  injection: {\n    injectEnvironment: function (environment) {\n      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;\n      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;\n      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;\n      injected = true;\n    }\n  }\n\n};\n\nmodule.exports = ReactComponentEnvironment;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInstanceMap\n */\n\n'use strict';\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n */\n\n// TODO: Replace this with ES6: var ReactInstanceMap = new Map();\n\nvar ReactInstanceMap = {\n\n  /**\n   * This API should be called `delete` but we'd have to make sure to always\n   * transform these to strings for IE support. When this transform is fully\n   * supported we can rename it.\n   */\n  remove: function (key) {\n    key._reactInternalInstance = undefined;\n  },\n\n  get: function (key) {\n    return key._reactInternalInstance;\n  },\n\n  has: function (key) {\n    return key._reactInternalInstance !== undefined;\n  },\n\n  set: function (key, value) {\n    key._reactInternalInstance = value;\n  }\n\n};\n\nmodule.exports = ReactInstanceMap;","/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactChildReconciler\n */\n\n'use strict';\n\nvar ReactReconciler = require('./ReactReconciler');\n\nvar instantiateReactComponent = require('./instantiateReactComponent');\nvar KeyEscapeUtils = require('./KeyEscapeUtils');\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');\nvar traverseAllChildren = require('./traverseAllChildren');\nvar warning = require('fbjs/lib/warning');\n\nvar ReactComponentTreeHook;\n\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {\n  // Temporary hack.\n  // Inline requires don't work well with Jest:\n  // https://github.com/facebook/react/issues/7240\n  // Remove the inline requires when we don't need them anymore:\n  // https://github.com/facebook/react/pull/7178\n  ReactComponentTreeHook = require('./ReactComponentTreeHook');\n}\n\nfunction instantiateChild(childInstances, child, name, selfDebugID) {\n  // We found a component instance.\n  var keyUnique = childInstances[name] === undefined;\n  if (process.env.NODE_ENV !== 'production') {\n    if (!ReactComponentTreeHook) {\n      ReactComponentTreeHook = require('./ReactComponentTreeHook');\n    }\n    if (!keyUnique) {\n      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;\n    }\n  }\n  if (child != null && keyUnique) {\n    childInstances[name] = instantiateReactComponent(child, true);\n  }\n}\n\n/**\n * ReactChildReconciler provides helpers for initializing or updating a set of\n * children. Its output is suitable for passing it onto ReactMultiChild which\n * does diffed reordering and insertion.\n */\nvar ReactChildReconciler = {\n  /**\n   * Generates a \"mount image\" for each of the supplied children. In the case\n   * of `ReactDOMComponent`, a mount image is a string of markup.\n   *\n   * @param {?object} nestedChildNodes Nested child maps.\n   * @return {?object} A set of child instances.\n   * @internal\n   */\n  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots\n  ) {\n    if (nestedChildNodes == null) {\n      return null;\n    }\n    var childInstances = {};\n\n    if (process.env.NODE_ENV !== 'production') {\n      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {\n        return instantiateChild(childInsts, child, name, selfDebugID);\n      }, childInstances);\n    } else {\n      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);\n    }\n    return childInstances;\n  },\n\n  /**\n   * Updates the rendered children and returns a new set of children.\n   *\n   * @param {?object} prevChildren Previously initialized set of children.\n   * @param {?object} nextChildren Flat child element maps.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @return {?object} A new set of child instances.\n   * @internal\n   */\n  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots\n  ) {\n    // We currently don't have a way to track moves here but if we use iterators\n    // instead of for..in we can zip the iterators and check if an item has\n    // moved.\n    // TODO: If nothing has changed, return the prevChildren object so that we\n    // can quickly bailout if nothing has changed.\n    if (!nextChildren && !prevChildren) {\n      return;\n    }\n    var name;\n    var prevChild;\n    for (name in nextChildren) {\n      if (!nextChildren.hasOwnProperty(name)) {\n        continue;\n      }\n      prevChild = prevChildren && prevChildren[name];\n      var prevElement = prevChild && prevChild._currentElement;\n      var nextElement = nextChildren[name];\n      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {\n        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);\n        nextChildren[name] = prevChild;\n      } else {\n        if (prevChild) {\n          removedNodes[name] = ReactReconciler.getHostNode(prevChild);\n          ReactReconciler.unmountComponent(prevChild, false);\n        }\n        // The child must be instantiated before it's mounted.\n        var nextChildInstance = instantiateReactComponent(nextElement, true);\n        nextChildren[name] = nextChildInstance;\n        // Creating mount image now ensures refs are resolved in right order\n        // (see https://github.com/facebook/react/pull/7101 for explanation).\n        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);\n        mountImages.push(nextChildMountImage);\n      }\n    }\n    // Unmount children that are no longer present.\n    for (name in prevChildren) {\n      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n        prevChild = prevChildren[name];\n        removedNodes[name] = ReactReconciler.getHostNode(prevChild);\n        ReactReconciler.unmountComponent(prevChild, false);\n      }\n    }\n  },\n\n  /**\n   * Unmounts all rendered children. This should be used to clean up children\n   * when this component is unmounted.\n   *\n   * @param {?object} renderedChildren Previously initialized set of children.\n   * @internal\n   */\n  unmountChildren: function (renderedChildren, safely) {\n    for (var name in renderedChildren) {\n      if (renderedChildren.hasOwnProperty(name)) {\n        var renderedChild = renderedChildren[name];\n        ReactReconciler.unmountComponent(renderedChild, safely);\n      }\n    }\n  }\n\n};\n\nmodule.exports = ReactChildReconciler;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule instantiateReactComponent\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar ReactCompositeComponent = require('./ReactCompositeComponent');\nvar ReactEmptyComponent = require('./ReactEmptyComponent');\nvar ReactHostComponent = require('./ReactHostComponent');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n// To avoid a cyclic dependency, we create the final class in this module\nvar ReactCompositeComponentWrapper = function (element) {\n  this.construct(element);\n};\n_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {\n  _instantiateReactComponent: instantiateReactComponent\n});\n\nfunction getDeclarationErrorAddendum(owner) {\n  if (owner) {\n    var name = owner.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * Check if the type reference is a known internal type. I.e. not a user\n * provided composite type.\n *\n * @param {function} type\n * @return {boolean} Returns true if this is a valid internal type.\n */\nfunction isInternalComponentType(type) {\n  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';\n}\n\nvar nextDebugID = 1;\n\n/**\n * Given a ReactNode, create an instance that will actually be mounted.\n *\n * @param {ReactNode} node\n * @param {boolean} shouldHaveDebugID\n * @return {object} A new instance of the element's constructor.\n * @protected\n */\nfunction instantiateReactComponent(node, shouldHaveDebugID) {\n  var instance;\n\n  if (node === null || node === false) {\n    instance = ReactEmptyComponent.create(instantiateReactComponent);\n  } else if (typeof node === 'object') {\n    var element = node;\n    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : _prodInvariant('130', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : void 0;\n\n    // Special case string values\n    if (typeof element.type === 'string') {\n      instance = ReactHostComponent.createInternalComponent(element);\n    } else if (isInternalComponentType(element.type)) {\n      // This is temporarily available for custom components that are not string\n      // representations. I.e. ART. Once those are updated to use the string\n      // representation, we can drop this code path.\n      instance = new element.type(element);\n\n      // We renamed this. Allow the old name for compat. :(\n      if (!instance.getHostNode) {\n        instance.getHostNode = instance.getNativeNode;\n      }\n    } else {\n      instance = new ReactCompositeComponentWrapper(element);\n    }\n  } else if (typeof node === 'string' || typeof node === 'number') {\n    instance = ReactHostComponent.createInstanceForText(node);\n  } else {\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;\n  }\n\n  // These two fields are used by the DOM and ART diffing algorithms\n  // respectively. Instead of using expandos on components, we should be\n  // storing the state needed by the diffing algorithms elsewhere.\n  instance._mountIndex = 0;\n  instance._mountImage = null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    instance._debugID = shouldHaveDebugID ? nextDebugID++ : 0;\n  }\n\n  // Internal instances should fully constructed at this point, so they should\n  // not get any new fields added to them at this point.\n  if (process.env.NODE_ENV !== 'production') {\n    if (Object.preventExtensions) {\n      Object.preventExtensions(instance);\n    }\n  }\n\n  return instance;\n}\n\nmodule.exports = instantiateReactComponent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCompositeComponent\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactElement = require('./ReactElement');\nvar ReactErrorUtils = require('./ReactErrorUtils');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactInstrumentation = require('./ReactInstrumentation');\nvar ReactNodeTypes = require('./ReactNodeTypes');\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\nvar ReactReconciler = require('./ReactReconciler');\n\nvar checkReactTypeSpec = require('./checkReactTypeSpec');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar invariant = require('fbjs/lib/invariant');\nvar shallowEqual = require('fbjs/lib/shallowEqual');\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');\nvar warning = require('fbjs/lib/warning');\n\nvar CompositeTypes = {\n  ImpureClass: 0,\n  PureClass: 1,\n  StatelessFunctional: 2\n};\n\nfunction StatelessComponent(Component) {}\nStatelessComponent.prototype.render = function () {\n  var Component = ReactInstanceMap.get(this)._currentElement.type;\n  var element = Component(this.props, this.context, this.updater);\n  warnIfInvalidElement(Component, element);\n  return element;\n};\n\nfunction warnIfInvalidElement(Component, element) {\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || ReactElement.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;\n    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;\n  }\n}\n\nfunction shouldConstruct(Component) {\n  return !!(Component.prototype && Component.prototype.isReactComponent);\n}\n\nfunction isPureComponent(Component) {\n  return !!(Component.prototype && Component.prototype.isPureReactComponent);\n}\n\n// Separated into a function to contain deoptimizations caused by try/finally.\nfunction measureLifeCyclePerf(fn, debugID, timerType) {\n  if (debugID === 0) {\n    // Top-level wrappers (see ReactMount) and empty components (see\n    // ReactDOMEmptyComponent) are invisible to hooks and devtools.\n    // Both are implementation details that should go away in the future.\n    return fn();\n  }\n\n  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);\n  try {\n    return fn();\n  } finally {\n    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);\n  }\n}\n\n/**\n * ------------------ The Life-Cycle of a Composite Component ------------------\n *\n * - constructor: Initialization of state. The instance is now retained.\n *   - componentWillMount\n *   - render\n *   - [children's constructors]\n *     - [children's componentWillMount and render]\n *     - [children's componentDidMount]\n *     - componentDidMount\n *\n *       Update Phases:\n *       - componentWillReceiveProps (only called if parent updated)\n *       - shouldComponentUpdate\n *         - componentWillUpdate\n *           - render\n *           - [children's constructors or receive props phases]\n *         - componentDidUpdate\n *\n *     - componentWillUnmount\n *     - [children's componentWillUnmount]\n *   - [children destroyed]\n * - (destroyed): The instance is now blank, released by React and ready for GC.\n *\n * -----------------------------------------------------------------------------\n */\n\n/**\n * An incrementing ID assigned to each component when it is mounted. This is\n * used to enforce the order in which `ReactUpdates` updates dirty components.\n *\n * @private\n */\nvar nextMountID = 1;\n\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\nvar ReactCompositeComponentMixin = {\n\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {ReactElement} element\n   * @final\n   * @internal\n   */\n  construct: function (element) {\n    this._currentElement = element;\n    this._rootNodeID = 0;\n    this._compositeType = null;\n    this._instance = null;\n    this._hostParent = null;\n    this._hostContainerInfo = null;\n\n    // See ReactUpdateQueue\n    this._updateBatchNumber = null;\n    this._pendingElement = null;\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n\n    this._renderedNodeType = null;\n    this._renderedComponent = null;\n    this._context = null;\n    this._mountOrder = 0;\n    this._topLevelWrapper = null;\n\n    // See ReactUpdates and ReactUpdateQueue.\n    this._pendingCallbacks = null;\n\n    // ComponentWillUnmount shall only be called once\n    this._calledComponentWillUnmount = false;\n\n    if (process.env.NODE_ENV !== 'production') {\n      this._warnedAboutRefsInRender = false;\n    }\n  },\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {?object} hostParent\n   * @param {?object} hostContainerInfo\n   * @param {?object} context\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {\n    var _this = this;\n\n    this._context = context;\n    this._mountOrder = nextMountID++;\n    this._hostParent = hostParent;\n    this._hostContainerInfo = hostContainerInfo;\n\n    var publicProps = this._currentElement.props;\n    var publicContext = this._processContext(context);\n\n    var Component = this._currentElement.type;\n\n    var updateQueue = transaction.getUpdateQueue();\n\n    // Initialize the public class\n    var doConstruct = shouldConstruct(Component);\n    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);\n    var renderedElement;\n\n    // Support functional components\n    if (!doConstruct && (inst == null || inst.render == null)) {\n      renderedElement = inst;\n      warnIfInvalidElement(Component, renderedElement);\n      !(inst === null || inst === false || ReactElement.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;\n      inst = new StatelessComponent(Component);\n      this._compositeType = CompositeTypes.StatelessFunctional;\n    } else {\n      if (isPureComponent(Component)) {\n        this._compositeType = CompositeTypes.PureClass;\n      } else {\n        this._compositeType = CompositeTypes.ImpureClass;\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This will throw later in _renderValidatedComponent, but add an early\n      // warning now to help debugging\n      if (inst.render == null) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;\n      }\n\n      var propsMutated = inst.props !== publicProps;\n      var componentName = Component.displayName || Component.name || 'Component';\n\n      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\\'s constructor was passed.', componentName, componentName) : void 0;\n    }\n\n    // These should be set up in the constructor, but as a convenience for\n    // simpler class abstractions, we set them up after the fact.\n    inst.props = publicProps;\n    inst.context = publicContext;\n    inst.refs = emptyObject;\n    inst.updater = updateQueue;\n\n    this._instance = inst;\n\n    // Store a reference from the instance back to the internal representation\n    ReactInstanceMap.set(inst, this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Since plain JS classes are defined without any special initialization\n      // logic, we can not catch common errors early. Therefore, we have to\n      // catch them here, at initialization time, instead.\n      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;\n    }\n\n    var initialState = inst.state;\n    if (initialState === undefined) {\n      inst.state = initialState = null;\n    }\n    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;\n\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n\n    var markup;\n    if (inst.unstable_handleError) {\n      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);\n    } else {\n      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);\n    }\n\n    if (inst.componentDidMount) {\n      if (process.env.NODE_ENV !== 'production') {\n        transaction.getReactMountReady().enqueue(function () {\n          measureLifeCyclePerf(function () {\n            return inst.componentDidMount();\n          }, _this._debugID, 'componentDidMount');\n        });\n      } else {\n        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);\n      }\n    }\n\n    return markup;\n  },\n\n  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {\n    if (process.env.NODE_ENV !== 'production') {\n      ReactCurrentOwner.current = this;\n      try {\n        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);\n      } finally {\n        ReactCurrentOwner.current = null;\n      }\n    } else {\n      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);\n    }\n  },\n\n  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {\n    var Component = this._currentElement.type;\n\n    if (doConstruct) {\n      if (process.env.NODE_ENV !== 'production') {\n        return measureLifeCyclePerf(function () {\n          return new Component(publicProps, publicContext, updateQueue);\n        }, this._debugID, 'ctor');\n      } else {\n        return new Component(publicProps, publicContext, updateQueue);\n      }\n    }\n\n    // This can still be an instance in case of factory components\n    // but we'll count this as time spent rendering as the more common case.\n    if (process.env.NODE_ENV !== 'production') {\n      return measureLifeCyclePerf(function () {\n        return Component(publicProps, publicContext, updateQueue);\n      }, this._debugID, 'render');\n    } else {\n      return Component(publicProps, publicContext, updateQueue);\n    }\n  },\n\n  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {\n    var markup;\n    var checkpoint = transaction.checkpoint();\n    try {\n      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);\n    } catch (e) {\n      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint\n      transaction.rollback(checkpoint);\n      this._instance.unstable_handleError(e);\n      if (this._pendingStateQueue) {\n        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);\n      }\n      checkpoint = transaction.checkpoint();\n\n      this._renderedComponent.unmountComponent(true);\n      transaction.rollback(checkpoint);\n\n      // Try again - we've informed the component about the error, so they can render an error message this time.\n      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).\n      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);\n    }\n    return markup;\n  },\n\n  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {\n    var inst = this._instance;\n\n    var debugID = 0;\n    if (process.env.NODE_ENV !== 'production') {\n      debugID = this._debugID;\n    }\n\n    if (inst.componentWillMount) {\n      if (process.env.NODE_ENV !== 'production') {\n        measureLifeCyclePerf(function () {\n          return inst.componentWillMount();\n        }, debugID, 'componentWillMount');\n      } else {\n        inst.componentWillMount();\n      }\n      // When mounting, calls to `setState` by `componentWillMount` will set\n      // `this._pendingStateQueue` without triggering a re-render.\n      if (this._pendingStateQueue) {\n        inst.state = this._processPendingState(inst.props, inst.context);\n      }\n    }\n\n    // If not a stateless component, we now render\n    if (renderedElement === undefined) {\n      renderedElement = this._renderValidatedComponent();\n    }\n\n    var nodeType = ReactNodeTypes.getType(renderedElement);\n    this._renderedNodeType = nodeType;\n    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */\n    );\n    this._renderedComponent = child;\n\n    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (debugID !== 0) {\n        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];\n        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);\n      }\n    }\n\n    return markup;\n  },\n\n  getHostNode: function () {\n    return ReactReconciler.getHostNode(this._renderedComponent);\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function (safely) {\n    if (!this._renderedComponent) {\n      return;\n    }\n\n    var inst = this._instance;\n\n    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {\n      inst._calledComponentWillUnmount = true;\n\n      if (safely) {\n        var name = this.getName() + '.componentWillUnmount()';\n        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          measureLifeCyclePerf(function () {\n            return inst.componentWillUnmount();\n          }, this._debugID, 'componentWillUnmount');\n        } else {\n          inst.componentWillUnmount();\n        }\n      }\n    }\n\n    if (this._renderedComponent) {\n      ReactReconciler.unmountComponent(this._renderedComponent, safely);\n      this._renderedNodeType = null;\n      this._renderedComponent = null;\n      this._instance = null;\n    }\n\n    // Reset pending fields\n    // Even if this component is scheduled for another update in ReactUpdates,\n    // it would still be ignored because these fields are reset.\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n    this._pendingCallbacks = null;\n    this._pendingElement = null;\n\n    // These fields do not really need to be reset since this object is no\n    // longer accessible.\n    this._context = null;\n    this._rootNodeID = 0;\n    this._topLevelWrapper = null;\n\n    // Delete the reference from the instance to this internal representation\n    // which allow the internals to be properly cleaned up even if the user\n    // leaks a reference to the public instance.\n    ReactInstanceMap.remove(inst);\n\n    // Some existing components rely on inst.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: inst.props = null;\n    // TODO: inst.state = null;\n    // TODO: inst.context = null;\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _maskContext: function (context) {\n    var Component = this._currentElement.type;\n    var contextTypes = Component.contextTypes;\n    if (!contextTypes) {\n      return emptyObject;\n    }\n    var maskedContext = {};\n    for (var contextName in contextTypes) {\n      maskedContext[contextName] = context[contextName];\n    }\n    return maskedContext;\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`, and asserts that they are valid.\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _processContext: function (context) {\n    var maskedContext = this._maskContext(context);\n    if (process.env.NODE_ENV !== 'production') {\n      var Component = this._currentElement.type;\n      if (Component.contextTypes) {\n        this._checkContextTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);\n      }\n    }\n    return maskedContext;\n  },\n\n  /**\n   * @param {object} currentContext\n   * @return {object}\n   * @private\n   */\n  _processChildContext: function (currentContext) {\n    var Component = this._currentElement.type;\n    var inst = this._instance;\n    var childContext;\n\n    if (inst.getChildContext) {\n      if (process.env.NODE_ENV !== 'production') {\n        ReactInstrumentation.debugTool.onBeginProcessingChildContext();\n        try {\n          childContext = inst.getChildContext();\n        } finally {\n          ReactInstrumentation.debugTool.onEndProcessingChildContext();\n        }\n      } else {\n        childContext = inst.getChildContext();\n      }\n    }\n\n    if (childContext) {\n      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;\n      if (process.env.NODE_ENV !== 'production') {\n        this._checkContextTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);\n      }\n      for (var name in childContext) {\n        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;\n      }\n      return _assign({}, currentContext, childContext);\n    }\n    return currentContext;\n  },\n\n  /**\n   * Assert that the context types are valid\n   *\n   * @param {object} typeSpecs Map of context field to a ReactPropType\n   * @param {object} values Runtime values that need to be type-checked\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @private\n   */\n  _checkContextTypes: function (typeSpecs, values, location) {\n    checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);\n  },\n\n  receiveComponent: function (nextElement, transaction, nextContext) {\n    var prevElement = this._currentElement;\n    var prevContext = this._context;\n\n    this._pendingElement = null;\n\n    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);\n  },\n\n  /**\n   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`\n   * is set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (transaction) {\n    if (this._pendingElement != null) {\n      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);\n    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {\n      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);\n    } else {\n      this._updateBatchNumber = null;\n    }\n  },\n\n  /**\n   * Perform an update to a mounted component. The componentWillReceiveProps and\n   * shouldComponentUpdate methods are called, then (assuming the update isn't\n   * skipped) the remaining update lifecycle methods are called and the DOM\n   * representation is updated.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevParentElement\n   * @param {ReactElement} nextParentElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {\n    var inst = this._instance;\n    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;\n\n    var willReceive = false;\n    var nextContext;\n\n    // Determine if the context has changed or not\n    if (this._context === nextUnmaskedContext) {\n      nextContext = inst.context;\n    } else {\n      nextContext = this._processContext(nextUnmaskedContext);\n      willReceive = true;\n    }\n\n    var prevProps = prevParentElement.props;\n    var nextProps = nextParentElement.props;\n\n    // Not a simple state update but a props update\n    if (prevParentElement !== nextParentElement) {\n      willReceive = true;\n    }\n\n    // An update here will schedule an update but immediately set\n    // _pendingStateQueue which will ensure that any state updates gets\n    // immediately reconciled instead of waiting for the next batch.\n    if (willReceive && inst.componentWillReceiveProps) {\n      if (process.env.NODE_ENV !== 'production') {\n        measureLifeCyclePerf(function () {\n          return inst.componentWillReceiveProps(nextProps, nextContext);\n        }, this._debugID, 'componentWillReceiveProps');\n      } else {\n        inst.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n\n    var nextState = this._processPendingState(nextProps, nextContext);\n    var shouldUpdate = true;\n\n    if (!this._pendingForceUpdate) {\n      if (inst.shouldComponentUpdate) {\n        if (process.env.NODE_ENV !== 'production') {\n          shouldUpdate = measureLifeCyclePerf(function () {\n            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);\n          }, this._debugID, 'shouldComponentUpdate');\n        } else {\n          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);\n        }\n      } else {\n        if (this._compositeType === CompositeTypes.PureClass) {\n          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);\n        }\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;\n    }\n\n    this._updateBatchNumber = null;\n    if (shouldUpdate) {\n      this._pendingForceUpdate = false;\n      // Will set `this.props`, `this.state` and `this.context`.\n      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);\n    } else {\n      // If it's determined that a component should not update, we still want\n      // to set props and state but we shortcut the rest of the update.\n      this._currentElement = nextParentElement;\n      this._context = nextUnmaskedContext;\n      inst.props = nextProps;\n      inst.state = nextState;\n      inst.context = nextContext;\n    }\n  },\n\n  _processPendingState: function (props, context) {\n    var inst = this._instance;\n    var queue = this._pendingStateQueue;\n    var replace = this._pendingReplaceState;\n    this._pendingReplaceState = false;\n    this._pendingStateQueue = null;\n\n    if (!queue) {\n      return inst.state;\n    }\n\n    if (replace && queue.length === 1) {\n      return queue[0];\n    }\n\n    var nextState = _assign({}, replace ? queue[0] : inst.state);\n    for (var i = replace ? 1 : 0; i < queue.length; i++) {\n      var partial = queue[i];\n      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);\n    }\n\n    return nextState;\n  },\n\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {ReactElement} nextElement Next element\n   * @param {object} nextProps Next public object to set as properties.\n   * @param {?object} nextState Next object to set as state.\n   * @param {?object} nextContext Next public object to set as context.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {?object} unmaskedContext\n   * @private\n   */\n  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {\n    var _this2 = this;\n\n    var inst = this._instance;\n\n    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);\n    var prevProps;\n    var prevState;\n    var prevContext;\n    if (hasComponentDidUpdate) {\n      prevProps = inst.props;\n      prevState = inst.state;\n      prevContext = inst.context;\n    }\n\n    if (inst.componentWillUpdate) {\n      if (process.env.NODE_ENV !== 'production') {\n        measureLifeCyclePerf(function () {\n          return inst.componentWillUpdate(nextProps, nextState, nextContext);\n        }, this._debugID, 'componentWillUpdate');\n      } else {\n        inst.componentWillUpdate(nextProps, nextState, nextContext);\n      }\n    }\n\n    this._currentElement = nextElement;\n    this._context = unmaskedContext;\n    inst.props = nextProps;\n    inst.state = nextState;\n    inst.context = nextContext;\n\n    this._updateRenderedComponent(transaction, unmaskedContext);\n\n    if (hasComponentDidUpdate) {\n      if (process.env.NODE_ENV !== 'production') {\n        transaction.getReactMountReady().enqueue(function () {\n          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');\n        });\n      } else {\n        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);\n      }\n    }\n  },\n\n  /**\n   * Call the component's `render` method and update the DOM accordingly.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  _updateRenderedComponent: function (transaction, context) {\n    var prevComponentInstance = this._renderedComponent;\n    var prevRenderedElement = prevComponentInstance._currentElement;\n    var nextRenderedElement = this._renderValidatedComponent();\n\n    var debugID = 0;\n    if (process.env.NODE_ENV !== 'production') {\n      debugID = this._debugID;\n    }\n\n    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {\n      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));\n    } else {\n      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);\n      ReactReconciler.unmountComponent(prevComponentInstance, false);\n\n      var nodeType = ReactNodeTypes.getType(nextRenderedElement);\n      this._renderedNodeType = nodeType;\n      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */\n      );\n      this._renderedComponent = child;\n\n      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (debugID !== 0) {\n          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];\n          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);\n        }\n      }\n\n      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);\n    }\n  },\n\n  /**\n   * Overridden in shallow rendering.\n   *\n   * @protected\n   */\n  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {\n    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);\n  },\n\n  /**\n   * @protected\n   */\n  _renderValidatedComponentWithoutOwnerOrContext: function () {\n    var inst = this._instance;\n    var renderedComponent;\n\n    if (process.env.NODE_ENV !== 'production') {\n      renderedComponent = measureLifeCyclePerf(function () {\n        return inst.render();\n      }, this._debugID, 'render');\n    } else {\n      renderedComponent = inst.render();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // We allow auto-mocks to proceed as if they're returning null.\n      if (renderedComponent === undefined && inst.render._isMockFunction) {\n        // This is probably bad practice. Consider warning here and\n        // deprecating this convenience.\n        renderedComponent = null;\n      }\n    }\n\n    return renderedComponent;\n  },\n\n  /**\n   * @private\n   */\n  _renderValidatedComponent: function () {\n    var renderedComponent;\n    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {\n      ReactCurrentOwner.current = this;\n      try {\n        renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();\n      } finally {\n        ReactCurrentOwner.current = null;\n      }\n    } else {\n      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();\n    }\n    !(\n    // TODO: An `isValidNode` function would probably be more appropriate\n    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;\n\n    return renderedComponent;\n  },\n\n  /**\n   * Lazily allocates the refs object and stores `component` as `ref`.\n   *\n   * @param {string} ref Reference name.\n   * @param {component} component Component to store as `ref`.\n   * @final\n   * @private\n   */\n  attachRef: function (ref, component) {\n    var inst = this.getPublicInstance();\n    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;\n    var publicComponentInstance = component.getPublicInstance();\n    if (process.env.NODE_ENV !== 'production') {\n      var componentName = component && component.getName ? component.getName() : 'a component';\n      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref \"%s\" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;\n    }\n    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;\n    refs[ref] = publicComponentInstance;\n  },\n\n  /**\n   * Detaches a reference name.\n   *\n   * @param {string} ref Name to dereference.\n   * @final\n   * @private\n   */\n  detachRef: function (ref) {\n    var refs = this.getPublicInstance().refs;\n    delete refs[ref];\n  },\n\n  /**\n   * Get a text description of the component that can be used to identify it\n   * in error messages.\n   * @return {string} The name or null.\n   * @internal\n   */\n  getName: function () {\n    var type = this._currentElement.type;\n    var constructor = this._instance && this._instance.constructor;\n    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;\n  },\n\n  /**\n   * Get the publicly accessible representation of this component - i.e. what\n   * is exposed by refs and returned by render. Can be null for stateless\n   * components.\n   *\n   * @return {ReactComponent} the public component instance.\n   * @internal\n   */\n  getPublicInstance: function () {\n    var inst = this._instance;\n    if (this._compositeType === CompositeTypes.StatelessFunctional) {\n      return null;\n    }\n    return inst;\n  },\n\n  // Stub\n  _instantiateReactComponent: null\n\n};\n\nvar ReactCompositeComponent = {\n\n  Mixin: ReactCompositeComponentMixin\n\n};\n\nmodule.exports = ReactCompositeComponent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNodeTypes\n * \n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactElement = require('./ReactElement');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar ReactNodeTypes = {\n  HOST: 0,\n  COMPOSITE: 1,\n  EMPTY: 2,\n\n  getType: function (node) {\n    if (node === null || node === false) {\n      return ReactNodeTypes.EMPTY;\n    } else if (ReactElement.isValidElement(node)) {\n      if (typeof node.type === 'function') {\n        return ReactNodeTypes.COMPOSITE;\n      } else {\n        return ReactNodeTypes.HOST;\n      }\n    }\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;\n  }\n};\n\nmodule.exports = ReactNodeTypes;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule shouldUpdateReactComponent\n */\n\n'use strict';\n\n/**\n * Given a `prevElement` and `nextElement`, determines if the existing\n * instance should be updated as opposed to being destroyed or replaced by a new\n * instance. Both arguments are elements. This ensures that this logic can\n * operate on stateless trees without any backing instance.\n *\n * @param {?object} prevElement\n * @param {?object} nextElement\n * @return {boolean} True if the existing instance should be updated.\n * @protected\n */\n\nfunction shouldUpdateReactComponent(prevElement, nextElement) {\n  var prevEmpty = prevElement === null || prevElement === false;\n  var nextEmpty = nextElement === null || nextElement === false;\n  if (prevEmpty || nextEmpty) {\n    return prevEmpty === nextEmpty;\n  }\n\n  var prevType = typeof prevElement;\n  var nextType = typeof nextElement;\n  if (prevType === 'string' || prevType === 'number') {\n    return nextType === 'string' || nextType === 'number';\n  } else {\n    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;\n  }\n}\n\nmodule.exports = shouldUpdateReactComponent;","/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEmptyComponent\n */\n\n'use strict';\n\nvar emptyComponentFactory;\n\nvar ReactEmptyComponentInjection = {\n  injectEmptyComponentFactory: function (factory) {\n    emptyComponentFactory = factory;\n  }\n};\n\nvar ReactEmptyComponent = {\n  create: function (instantiate) {\n    return emptyComponentFactory(instantiate);\n  }\n};\n\nReactEmptyComponent.injection = ReactEmptyComponentInjection;\n\nmodule.exports = ReactEmptyComponent;","/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactHostComponent\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar genericComponentClass = null;\n// This registry keeps track of wrapper classes around host tags.\nvar tagToComponentClass = {};\nvar textComponentClass = null;\n\nvar ReactHostComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function (componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a text component class that takes the text string to be\n  // rendered as props.\n  injectTextComponentClass: function (componentClass) {\n    textComponentClass = componentClass;\n  },\n  // This accepts a keyed object with classes as values. Each key represents a\n  // tag. That particular tag will use this class instead of the generic one.\n  injectComponentClasses: function (componentClasses) {\n    _assign(tagToComponentClass, componentClasses);\n  }\n};\n\n/**\n * Get a host internal component class for a specific tag.\n *\n * @param {ReactElement} element The element to create.\n * @return {function} The internal class constructor function.\n */\nfunction createInternalComponent(element) {\n  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;\n  return new genericComponentClass(element);\n}\n\n/**\n * @param {ReactText} text\n * @return {ReactComponent}\n */\nfunction createInstanceForText(text) {\n  return new textComponentClass(text);\n}\n\n/**\n * @param {ReactComponent} component\n * @return {boolean}\n */\nfunction isTextComponent(component) {\n  return component instanceof textComponentClass;\n}\n\nvar ReactHostComponent = {\n  createInternalComponent: createInternalComponent,\n  createInstanceForText: createInstanceForText,\n  isTextComponent: isTextComponent,\n  injection: ReactHostComponentInjection\n};\n\nmodule.exports = ReactHostComponent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule flattenChildren\n * \n */\n\n'use strict';\n\nvar KeyEscapeUtils = require('./KeyEscapeUtils');\nvar traverseAllChildren = require('./traverseAllChildren');\nvar warning = require('fbjs/lib/warning');\n\nvar ReactComponentTreeHook;\n\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {\n  // Temporary hack.\n  // Inline requires don't work well with Jest:\n  // https://github.com/facebook/react/issues/7240\n  // Remove the inline requires when we don't need them anymore:\n  // https://github.com/facebook/react/pull/7178\n  ReactComponentTreeHook = require('./ReactComponentTreeHook');\n}\n\n/**\n * @param {function} traverseContext Context passed through traversal.\n * @param {?ReactComponent} child React child component.\n * @param {!string} name String name of key path to child.\n * @param {number=} selfDebugID Optional debugID of the current internal instance.\n */\nfunction flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {\n  // We found a component instance.\n  if (traverseContext && typeof traverseContext === 'object') {\n    var result = traverseContext;\n    var keyUnique = result[name] === undefined;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ReactComponentTreeHook) {\n        ReactComponentTreeHook = require('./ReactComponentTreeHook');\n      }\n      if (!keyUnique) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;\n      }\n    }\n    if (keyUnique && child != null) {\n      result[name] = child;\n    }\n  }\n}\n\n/**\n * Flattens children that are typically specified as `props.children`. Any null\n * children will not be included in the resulting object.\n * @return {!object} flattened children keyed by name.\n */\nfunction flattenChildren(children, selfDebugID) {\n  if (children == null) {\n    return children;\n  }\n  var result = {};\n\n  if (process.env.NODE_ENV !== 'production') {\n    traverseAllChildren(children, function (traverseContext, child, name) {\n      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);\n    }, result);\n  } else {\n    traverseAllChildren(children, flattenSingleChildIntoContext, result);\n  }\n  return result;\n}\n\nmodule.exports = flattenChildren;","/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactServerRenderingTransaction\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar PooledClass = require('./PooledClass');\nvar Transaction = require('./Transaction');\nvar ReactInstrumentation = require('./ReactInstrumentation');\nvar ReactServerUpdateQueue = require('./ReactServerUpdateQueue');\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [];\n\nif (process.env.NODE_ENV !== 'production') {\n  TRANSACTION_WRAPPERS.push({\n    initialize: ReactInstrumentation.debugTool.onBeginFlush,\n    close: ReactInstrumentation.debugTool.onEndFlush\n  });\n}\n\nvar noopCallbackQueue = {\n  enqueue: function () {}\n};\n\n/**\n * @class ReactServerRenderingTransaction\n * @param {boolean} renderToStaticMarkup\n */\nfunction ReactServerRenderingTransaction(renderToStaticMarkup) {\n  this.reinitializeTransaction();\n  this.renderToStaticMarkup = renderToStaticMarkup;\n  this.useCreateElement = false;\n  this.updateQueue = new ReactServerUpdateQueue(this);\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array} Empty list of operation wrap procedures.\n   */\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function () {\n    return noopCallbackQueue;\n  },\n\n  /**\n   * @return {object} The queue to collect React async events.\n   */\n  getUpdateQueue: function () {\n    return this.updateQueue;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be reused.\n   */\n  destructor: function () {},\n\n  checkpoint: function () {},\n\n  rollback: function () {}\n};\n\n_assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);\n\nPooledClass.addPoolingTo(ReactServerRenderingTransaction);\n\nmodule.exports = ReactServerRenderingTransaction;","/**\n * Copyright 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactServerUpdateQueue\n * \n */\n\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\nvar Transaction = require('./Transaction');\nvar warning = require('fbjs/lib/warning');\n\nfunction warnNoop(publicInstance, callerName) {\n  if (process.env.NODE_ENV !== 'production') {\n    var constructor = publicInstance.constructor;\n    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;\n  }\n}\n\n/**\n * This is the update queue used for server rendering.\n * It delegates to ReactUpdateQueue while server rendering is in progress and\n * switches to ReactNoopUpdateQueue after the transaction has completed.\n * @class ReactServerUpdateQueue\n * @param {Transaction} transaction\n */\n\nvar ReactServerUpdateQueue = function () {\n  /* :: transaction: Transaction; */\n\n  function ReactServerUpdateQueue(transaction) {\n    _classCallCheck(this, ReactServerUpdateQueue);\n\n    this.transaction = transaction;\n  }\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n\n\n  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {\n    return false;\n  };\n\n  /**\n   * Enqueue a callback that will be executed after all the pending updates\n   * have processed.\n   *\n   * @param {ReactClass} publicInstance The instance to use as `this` context.\n   * @param {?function} callback Called after state is updated.\n   * @internal\n   */\n\n\n  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {\n    if (this.transaction.isInTransaction()) {\n      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);\n    }\n  };\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @internal\n   */\n\n\n  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {\n    if (this.transaction.isInTransaction()) {\n      ReactUpdateQueue.enqueueForceUpdate(publicInstance);\n    } else {\n      warnNoop(publicInstance, 'forceUpdate');\n    }\n  };\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object|function} completeState Next state.\n   * @internal\n   */\n\n\n  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {\n    if (this.transaction.isInTransaction()) {\n      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);\n    } else {\n      warnNoop(publicInstance, 'replaceState');\n    }\n  };\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object|function} partialState Next partial state to be merged with state.\n   * @internal\n   */\n\n\n  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {\n    if (this.transaction.isInTransaction()) {\n      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);\n    } else {\n      warnNoop(publicInstance, 'setState');\n    }\n  };\n\n  return ReactServerUpdateQueue;\n}();\n\nmodule.exports = ReactServerUpdateQueue;","/**\n * Copyright 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactUpdateQueue\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactInstrumentation = require('./ReactInstrumentation');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nfunction enqueueUpdate(internalInstance) {\n  ReactUpdates.enqueueUpdate(internalInstance);\n}\n\nfunction formatUnexpectedArgument(arg) {\n  var type = typeof arg;\n  if (type !== 'object') {\n    return type;\n  }\n  var displayName = arg.constructor && arg.constructor.name || type;\n  var keys = Object.keys(arg);\n  if (keys.length > 0 && keys.length < 20) {\n    return displayName + ' (keys: ' + keys.join(', ') + ')';\n  }\n  return displayName;\n}\n\nfunction getInternalInstanceReadyForUpdate(publicInstance, callerName) {\n  var internalInstance = ReactInstanceMap.get(publicInstance);\n  if (!internalInstance) {\n    if (process.env.NODE_ENV !== 'production') {\n      var ctor = publicInstance.constructor;\n      // Only warn when we have a callerName. Otherwise we should be silent.\n      // We're probably calling from enqueueCallback. We don't want to warn\n      // there because we already warned for the corresponding lifecycle method.\n      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;\n    }\n    return null;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;\n  }\n\n  return internalInstance;\n}\n\n/**\n * ReactUpdateQueue allows for state updates to be scheduled into a later\n * reconciliation step.\n */\nvar ReactUpdateQueue = {\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    if (process.env.NODE_ENV !== 'production') {\n      var owner = ReactCurrentOwner.current;\n      if (owner !== null) {\n        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;\n        owner._warnedAboutRefsInRender = true;\n      }\n    }\n    var internalInstance = ReactInstanceMap.get(publicInstance);\n    if (internalInstance) {\n      // During componentWillMount and render this will still be null but after\n      // that will always render to something. At least for now. So we can use\n      // this hack.\n      return !!internalInstance._renderedComponent;\n    } else {\n      return false;\n    }\n  },\n\n  /**\n   * Enqueue a callback that will be executed after all the pending updates\n   * have processed.\n   *\n   * @param {ReactClass} publicInstance The instance to use as `this` context.\n   * @param {?function} callback Called after state is updated.\n   * @param {string} callerName Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueCallback: function (publicInstance, callback, callerName) {\n    ReactUpdateQueue.validateCallback(callback, callerName);\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);\n\n    // Previously we would throw an error if we didn't have an internal\n    // instance. Since we want to make it a no-op instead, we mirror the same\n    // behavior we have in other enqueue* methods.\n    // We also need to ignore callbacks in componentWillMount. See\n    // enqueueUpdates.\n    if (!internalInstance) {\n      return null;\n    }\n\n    if (internalInstance._pendingCallbacks) {\n      internalInstance._pendingCallbacks.push(callback);\n    } else {\n      internalInstance._pendingCallbacks = [callback];\n    }\n    // TODO: The callback here is ignored when setState is called from\n    // componentWillMount. Either fix it or disallow doing so completely in\n    // favor of getInitialState. Alternatively, we can disallow\n    // componentWillMount during server-side rendering.\n    enqueueUpdate(internalInstance);\n  },\n\n  enqueueCallbackInternal: function (internalInstance, callback) {\n    if (internalInstance._pendingCallbacks) {\n      internalInstance._pendingCallbacks.push(callback);\n    } else {\n      internalInstance._pendingCallbacks = [callback];\n    }\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');\n\n    if (!internalInstance) {\n      return;\n    }\n\n    internalInstance._pendingForceUpdate = true;\n\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');\n\n    if (!internalInstance) {\n      return;\n    }\n\n    internalInstance._pendingStateQueue = [completeState];\n    internalInstance._pendingReplaceState = true;\n\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState) {\n    if (process.env.NODE_ENV !== 'production') {\n      ReactInstrumentation.debugTool.onSetState();\n      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;\n    }\n\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');\n\n    if (!internalInstance) {\n      return;\n    }\n\n    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);\n    queue.push(partialState);\n\n    enqueueUpdate(internalInstance);\n  },\n\n  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {\n    internalInstance._pendingElement = nextElement;\n    // TODO: introduce _pendingContext instead of setting it directly.\n    internalInstance._context = nextContext;\n    enqueueUpdate(internalInstance);\n  },\n\n  validateCallback: function (callback, callerName) {\n    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;\n  }\n\n};\n\nmodule.exports = ReactUpdateQueue;","/**\n * Copyright 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule validateDOMNesting\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar warning = require('fbjs/lib/warning');\n\nvar validateDOMNesting = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  // This validation code was written based on the HTML5 parsing spec:\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope\n  //\n  // Note: this does not catch all invalid nesting, nor does it try to (as it's\n  // not clear what practical benefit doing so provides); instead, we warn only\n  // for cases where the parser will give a parse tree differing from what React\n  // intended. For example, <b><div></div></b> is invalid but we don't warn\n  // because it still parses correctly; we do warn for other cases like nested\n  // <p> tags where the beginning of the second element implicitly closes the\n  // first, causing a confusing mess.\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#special\n  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope\n  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point\n  // TODO: Distinguish by namespace here -- for <title>, including it here\n  // errs on the side of fewer warnings\n  'foreignObject', 'desc', 'title'];\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope\n  var buttonScopeTags = inScopeTags.concat(['button']);\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags\n  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];\n\n  var emptyAncestorInfo = {\n    current: null,\n\n    formTag: null,\n    aTagInScope: null,\n    buttonTagInScope: null,\n    nobrTagInScope: null,\n    pTagInButtonScope: null,\n\n    listItemTagAutoclosing: null,\n    dlItemTagAutoclosing: null\n  };\n\n  var updatedAncestorInfo = function (oldInfo, tag, instance) {\n    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);\n    var info = { tag: tag, instance: instance };\n\n    if (inScopeTags.indexOf(tag) !== -1) {\n      ancestorInfo.aTagInScope = null;\n      ancestorInfo.buttonTagInScope = null;\n      ancestorInfo.nobrTagInScope = null;\n    }\n    if (buttonScopeTags.indexOf(tag) !== -1) {\n      ancestorInfo.pTagInButtonScope = null;\n    }\n\n    // See rules for 'li', 'dd', 'dt' start tags in\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\n    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {\n      ancestorInfo.listItemTagAutoclosing = null;\n      ancestorInfo.dlItemTagAutoclosing = null;\n    }\n\n    ancestorInfo.current = info;\n\n    if (tag === 'form') {\n      ancestorInfo.formTag = info;\n    }\n    if (tag === 'a') {\n      ancestorInfo.aTagInScope = info;\n    }\n    if (tag === 'button') {\n      ancestorInfo.buttonTagInScope = info;\n    }\n    if (tag === 'nobr') {\n      ancestorInfo.nobrTagInScope = info;\n    }\n    if (tag === 'p') {\n      ancestorInfo.pTagInButtonScope = info;\n    }\n    if (tag === 'li') {\n      ancestorInfo.listItemTagAutoclosing = info;\n    }\n    if (tag === 'dd' || tag === 'dt') {\n      ancestorInfo.dlItemTagAutoclosing = info;\n    }\n\n    return ancestorInfo;\n  };\n\n  /**\n   * Returns whether\n   */\n  var isTagValidWithParent = function (tag, parentTag) {\n    // First, let's check if we're in an unusual parsing mode...\n    switch (parentTag) {\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect\n      case 'select':\n        return tag === 'option' || tag === 'optgroup' || tag === '#text';\n      case 'optgroup':\n        return tag === 'option' || tag === '#text';\n      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>\n      // but\n      case 'option':\n        return tag === '#text';\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption\n      // No special behavior since these rules fall back to \"in body\" mode for\n      // all except special table nodes which cause bad parsing behavior anyway.\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr\n      case 'tr':\n        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody\n      case 'tbody':\n      case 'thead':\n      case 'tfoot':\n        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup\n      case 'colgroup':\n        return tag === 'col' || tag === 'template';\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable\n      case 'table':\n        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead\n      case 'head':\n        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';\n\n      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element\n      case 'html':\n        return tag === 'head' || tag === 'body';\n      case '#document':\n        return tag === 'html';\n    }\n\n    // Probably in the \"in body\" parsing mode, so we outlaw only tag combos\n    // where the parsing rules cause implicit opens or closes to be added.\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\n    switch (tag) {\n      case 'h1':\n      case 'h2':\n      case 'h3':\n      case 'h4':\n      case 'h5':\n      case 'h6':\n        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';\n\n      case 'rp':\n      case 'rt':\n        return impliedEndTags.indexOf(parentTag) === -1;\n\n      case 'body':\n      case 'caption':\n      case 'col':\n      case 'colgroup':\n      case 'frame':\n      case 'head':\n      case 'html':\n      case 'tbody':\n      case 'td':\n      case 'tfoot':\n      case 'th':\n      case 'thead':\n      case 'tr':\n        // These tags are only valid with a few parents that have special child\n        // parsing rules -- if we're down here, then none of those matched and\n        // so we allow it only if we don't know what the parent is, as all other\n        // cases are invalid.\n        return parentTag == null;\n    }\n\n    return true;\n  };\n\n  /**\n   * Returns whether\n   */\n  var findInvalidAncestorForTag = function (tag, ancestorInfo) {\n    switch (tag) {\n      case 'address':\n      case 'article':\n      case 'aside':\n      case 'blockquote':\n      case 'center':\n      case 'details':\n      case 'dialog':\n      case 'dir':\n      case 'div':\n      case 'dl':\n      case 'fieldset':\n      case 'figcaption':\n      case 'figure':\n      case 'footer':\n      case 'header':\n      case 'hgroup':\n      case 'main':\n      case 'menu':\n      case 'nav':\n      case 'ol':\n      case 'p':\n      case 'section':\n      case 'summary':\n      case 'ul':\n\n      case 'pre':\n      case 'listing':\n\n      case 'table':\n\n      case 'hr':\n\n      case 'xmp':\n\n      case 'h1':\n      case 'h2':\n      case 'h3':\n      case 'h4':\n      case 'h5':\n      case 'h6':\n        return ancestorInfo.pTagInButtonScope;\n\n      case 'form':\n        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;\n\n      case 'li':\n        return ancestorInfo.listItemTagAutoclosing;\n\n      case 'dd':\n      case 'dt':\n        return ancestorInfo.dlItemTagAutoclosing;\n\n      case 'button':\n        return ancestorInfo.buttonTagInScope;\n\n      case 'a':\n        // Spec says something about storing a list of markers, but it sounds\n        // equivalent to this check.\n        return ancestorInfo.aTagInScope;\n\n      case 'nobr':\n        return ancestorInfo.nobrTagInScope;\n    }\n\n    return null;\n  };\n\n  /**\n   * Given a ReactCompositeComponent instance, return a list of its recursive\n   * owners, starting at the root and ending with the instance itself.\n   */\n  var findOwnerStack = function (instance) {\n    if (!instance) {\n      return [];\n    }\n\n    var stack = [];\n    do {\n      stack.push(instance);\n    } while (instance = instance._currentElement._owner);\n    stack.reverse();\n    return stack;\n  };\n\n  var didWarn = {};\n\n  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {\n    ancestorInfo = ancestorInfo || emptyAncestorInfo;\n    var parentInfo = ancestorInfo.current;\n    var parentTag = parentInfo && parentInfo.tag;\n\n    if (childText != null) {\n      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;\n      childTag = '#text';\n    }\n\n    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;\n    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);\n    var problematic = invalidParent || invalidAncestor;\n\n    if (problematic) {\n      var ancestorTag = problematic.tag;\n      var ancestorInstance = problematic.instance;\n\n      var childOwner = childInstance && childInstance._currentElement._owner;\n      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;\n\n      var childOwners = findOwnerStack(childOwner);\n      var ancestorOwners = findOwnerStack(ancestorOwner);\n\n      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);\n      var i;\n\n      var deepestCommon = -1;\n      for (i = 0; i < minStackLen; i++) {\n        if (childOwners[i] === ancestorOwners[i]) {\n          deepestCommon = i;\n        } else {\n          break;\n        }\n      }\n\n      var UNKNOWN = '(unknown)';\n      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {\n        return inst.getName() || UNKNOWN;\n      });\n      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {\n        return inst.getName() || UNKNOWN;\n      });\n      var ownerInfo = [].concat(\n      // If the parent and child instances have a common owner ancestor, start\n      // with that -- otherwise we just start with the parent's owners.\n      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,\n      // If we're warning about an invalid (non-parent) ancestry, add '...'\n      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');\n\n      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;\n      if (didWarn[warnKey]) {\n        return;\n      }\n      didWarn[warnKey] = true;\n\n      var tagDisplayName = childTag;\n      var whitespaceInfo = '';\n      if (childTag === '#text') {\n        if (/\\S/.test(childText)) {\n          tagDisplayName = 'Text nodes';\n        } else {\n          tagDisplayName = 'Whitespace text nodes';\n          whitespaceInfo = ' Make sure you don\\'t have any extra whitespace between tags on ' + 'each line of your source code.';\n        }\n      } else {\n        tagDisplayName = '<' + childTag + '>';\n      }\n\n      if (invalidParent) {\n        var info = '';\n        if (ancestorTag === 'table' && childTag === 'tr') {\n          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';\n        }\n        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;\n      } else {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;\n      }\n    }\n  };\n\n  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;\n\n  // For testing\n  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {\n    ancestorInfo = ancestorInfo || emptyAncestorInfo;\n    var parentInfo = ancestorInfo.current;\n    var parentTag = parentInfo && parentInfo.tag;\n    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);\n  };\n}\n\nmodule.exports = validateDOMNesting;","/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMEmptyComponent\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar DOMLazyTree = require('./DOMLazyTree');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar ReactDOMEmptyComponent = function (instantiate) {\n  // ReactCompositeComponent uses this:\n  this._currentElement = null;\n  // ReactDOMComponentTree uses these:\n  this._hostNode = null;\n  this._hostParent = null;\n  this._hostContainerInfo = null;\n  this._domID = 0;\n};\n_assign(ReactDOMEmptyComponent.prototype, {\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {\n    var domID = hostContainerInfo._idCounter++;\n    this._domID = domID;\n    this._hostParent = hostParent;\n    this._hostContainerInfo = hostContainerInfo;\n\n    var nodeValue = ' react-empty: ' + this._domID + ' ';\n    if (transaction.useCreateElement) {\n      var ownerDocument = hostContainerInfo._ownerDocument;\n      var node = ownerDocument.createComment(nodeValue);\n      ReactDOMComponentTree.precacheNode(this, node);\n      return DOMLazyTree(node);\n    } else {\n      if (transaction.renderToStaticMarkup) {\n        // Normally we'd insert a comment node, but since this is a situation\n        // where React won't take over (static pages), we can simply return\n        // nothing.\n        return '';\n      }\n      return '<!--' + nodeValue + '-->';\n    }\n  },\n  receiveComponent: function () {},\n  getHostNode: function () {\n    return ReactDOMComponentTree.getNodeFromInstance(this);\n  },\n  unmountComponent: function () {\n    ReactDOMComponentTree.uncacheNode(this);\n  }\n});\n\nmodule.exports = ReactDOMEmptyComponent;","/**\n * Copyright 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTreeTraversal\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Return the lowest common ancestor of A and B, or null if they are in\n * different trees.\n */\nfunction getLowestCommonAncestor(instA, instB) {\n  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;\n  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;\n\n  var depthA = 0;\n  for (var tempA = instA; tempA; tempA = tempA._hostParent) {\n    depthA++;\n  }\n  var depthB = 0;\n  for (var tempB = instB; tempB; tempB = tempB._hostParent) {\n    depthB++;\n  }\n\n  // If A is deeper, crawl up.\n  while (depthA - depthB > 0) {\n    instA = instA._hostParent;\n    depthA--;\n  }\n\n  // If B is deeper, crawl up.\n  while (depthB - depthA > 0) {\n    instB = instB._hostParent;\n    depthB--;\n  }\n\n  // Walk in lockstep until we find a match.\n  var depth = depthA;\n  while (depth--) {\n    if (instA === instB) {\n      return instA;\n    }\n    instA = instA._hostParent;\n    instB = instB._hostParent;\n  }\n  return null;\n}\n\n/**\n * Return if A is an ancestor of B.\n */\nfunction isAncestor(instA, instB) {\n  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;\n  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;\n\n  while (instB) {\n    if (instB === instA) {\n      return true;\n    }\n    instB = instB._hostParent;\n  }\n  return false;\n}\n\n/**\n * Return the parent instance of the passed-in instance.\n */\nfunction getParentInstance(inst) {\n  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;\n\n  return inst._hostParent;\n}\n\n/**\n * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n */\nfunction traverseTwoPhase(inst, fn, arg) {\n  var path = [];\n  while (inst) {\n    path.push(inst);\n    inst = inst._hostParent;\n  }\n  var i;\n  for (i = path.length; i-- > 0;) {\n    fn(path[i], false, arg);\n  }\n  for (i = 0; i < path.length; i++) {\n    fn(path[i], true, arg);\n  }\n}\n\n/**\n * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that\n * should would receive a `mouseEnter` or `mouseLeave` event.\n *\n * Does not invoke the callback on the nearest common ancestor because nothing\n * \"entered\" or \"left\" that element.\n */\nfunction traverseEnterLeave(from, to, fn, argFrom, argTo) {\n  var common = from && to ? getLowestCommonAncestor(from, to) : null;\n  var pathFrom = [];\n  while (from && from !== common) {\n    pathFrom.push(from);\n    from = from._hostParent;\n  }\n  var pathTo = [];\n  while (to && to !== common) {\n    pathTo.push(to);\n    to = to._hostParent;\n  }\n  var i;\n  for (i = 0; i < pathFrom.length; i++) {\n    fn(pathFrom[i], true, argFrom);\n  }\n  for (i = pathTo.length; i-- > 0;) {\n    fn(pathTo[i], false, argTo);\n  }\n}\n\nmodule.exports = {\n  isAncestor: isAncestor,\n  getLowestCommonAncestor: getLowestCommonAncestor,\n  getParentInstance: getParentInstance,\n  traverseTwoPhase: traverseTwoPhase,\n  traverseEnterLeave: traverseEnterLeave\n};","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextComponent\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar DOMChildrenOperations = require('./DOMChildrenOperations');\nvar DOMLazyTree = require('./DOMLazyTree');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\nvar invariant = require('fbjs/lib/invariant');\nvar validateDOMNesting = require('./validateDOMNesting');\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings between comment nodes so that they\n * can undergo the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactDOMTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactDOMTextComponent = function (text) {\n  // TODO: This is really a ReactText (ReactNode), not a ReactElement\n  this._currentElement = text;\n  this._stringText = '' + text;\n  // ReactDOMComponentTree uses these:\n  this._hostNode = null;\n  this._hostParent = null;\n\n  // Properties\n  this._domID = 0;\n  this._mountIndex = 0;\n  this._closingComment = null;\n  this._commentNodes = null;\n};\n\n_assign(ReactDOMTextComponent.prototype, {\n\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {\n    if (process.env.NODE_ENV !== 'production') {\n      var parentInfo;\n      if (hostParent != null) {\n        parentInfo = hostParent._ancestorInfo;\n      } else if (hostContainerInfo != null) {\n        parentInfo = hostContainerInfo._ancestorInfo;\n      }\n      if (parentInfo) {\n        // parentInfo should always be present except for the top-level\n        // component when server rendering\n        validateDOMNesting(null, this._stringText, this, parentInfo);\n      }\n    }\n\n    var domID = hostContainerInfo._idCounter++;\n    var openingValue = ' react-text: ' + domID + ' ';\n    var closingValue = ' /react-text ';\n    this._domID = domID;\n    this._hostParent = hostParent;\n    if (transaction.useCreateElement) {\n      var ownerDocument = hostContainerInfo._ownerDocument;\n      var openingComment = ownerDocument.createComment(openingValue);\n      var closingComment = ownerDocument.createComment(closingValue);\n      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());\n      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));\n      if (this._stringText) {\n        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));\n      }\n      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));\n      ReactDOMComponentTree.precacheNode(this, openingComment);\n      this._closingComment = closingComment;\n      return lazyTree;\n    } else {\n      var escapedText = escapeTextContentForBrowser(this._stringText);\n\n      if (transaction.renderToStaticMarkup) {\n        // Normally we'd wrap this between comment nodes for the reasons stated\n        // above, but since this is a situation where React won't take over\n        // (static pages), we can simply return the text as it is.\n        return escapedText;\n      }\n\n      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';\n    }\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {ReactText} nextText The next text content\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function (nextText, transaction) {\n    if (nextText !== this._currentElement) {\n      this._currentElement = nextText;\n      var nextStringText = '' + nextText;\n      if (nextStringText !== this._stringText) {\n        // TODO: Save this as pending props and use performUpdateIfNecessary\n        // and/or updateComponent to do the actual update for consistency with\n        // other component types?\n        this._stringText = nextStringText;\n        var commentNodes = this.getHostNode();\n        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);\n      }\n    }\n  },\n\n  getHostNode: function () {\n    var hostNode = this._commentNodes;\n    if (hostNode) {\n      return hostNode;\n    }\n    if (!this._closingComment) {\n      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);\n      var node = openingComment.nextSibling;\n      while (true) {\n        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;\n        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {\n          this._closingComment = node;\n          break;\n        }\n        node = node.nextSibling;\n      }\n    }\n    hostNode = [this._hostNode, this._closingComment];\n    this._commentNodes = hostNode;\n    return hostNode;\n  },\n\n  unmountComponent: function () {\n    this._closingComment = null;\n    this._commentNodes = null;\n    ReactDOMComponentTree.uncacheNode(this);\n  }\n\n});\n\nmodule.exports = ReactDOMTextComponent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultBatchingStrategy\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar ReactUpdates = require('./ReactUpdates');\nvar Transaction = require('./Transaction');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar RESET_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: function () {\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\n  }\n};\n\nvar FLUSH_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\n\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\n\nfunction ReactDefaultBatchingStrategyTransaction() {\n  this.reinitializeTransaction();\n}\n\n_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  }\n});\n\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\n\nvar ReactDefaultBatchingStrategy = {\n  isBatchingUpdates: false,\n\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren't updated unnecessarily.\n   */\n  batchedUpdates: function (callback, a, b, c, d, e) {\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\n\n    // The code is written this way to avoid extra allocations\n    if (alreadyBatchingUpdates) {\n      callback(a, b, c, d, e);\n    } else {\n      transaction.perform(callback, null, a, b, c, d, e);\n    }\n  }\n};\n\nmodule.exports = ReactDefaultBatchingStrategy;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEventListener\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar EventListener = require('fbjs/lib/EventListener');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar PooledClass = require('./PooledClass');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar getEventTarget = require('./getEventTarget');\nvar getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');\n\n/**\n * Find the deepest React component completely containing the root of the\n * passed-in instance (for use when entire React trees are nested within each\n * other). If React trees are not nested, returns null.\n */\nfunction findParent(inst) {\n  // TODO: It may be a good idea to cache this to prevent unnecessary DOM\n  // traversal, but caching is difficult to do correctly without using a\n  // mutation observer to listen for all DOM changes.\n  while (inst._hostParent) {\n    inst = inst._hostParent;\n  }\n  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);\n  var container = rootNode.parentNode;\n  return ReactDOMComponentTree.getClosestInstanceFromNode(container);\n}\n\n// Used to store ancestor hierarchy in top level callback\nfunction TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {\n  this.topLevelType = topLevelType;\n  this.nativeEvent = nativeEvent;\n  this.ancestors = [];\n}\n_assign(TopLevelCallbackBookKeeping.prototype, {\n  destructor: function () {\n    this.topLevelType = null;\n    this.nativeEvent = null;\n    this.ancestors.length = 0;\n  }\n});\nPooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);\n\nfunction handleTopLevelImpl(bookKeeping) {\n  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);\n  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);\n\n  // Loop through the hierarchy, in case there's any nested components.\n  // It's important that we build the array of ancestors before calling any\n  // event handlers, because event handlers can modify the DOM, leading to\n  // inconsistencies with ReactMount's node cache. See #1105.\n  var ancestor = targetInst;\n  do {\n    bookKeeping.ancestors.push(ancestor);\n    ancestor = ancestor && findParent(ancestor);\n  } while (ancestor);\n\n  for (var i = 0; i < bookKeeping.ancestors.length; i++) {\n    targetInst = bookKeeping.ancestors[i];\n    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));\n  }\n}\n\nfunction scrollValueMonitor(cb) {\n  var scrollPosition = getUnboundedScrollPosition(window);\n  cb(scrollPosition);\n}\n\nvar ReactEventListener = {\n  _enabled: true,\n  _handleTopLevel: null,\n\n  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,\n\n  setHandleTopLevel: function (handleTopLevel) {\n    ReactEventListener._handleTopLevel = handleTopLevel;\n  },\n\n  setEnabled: function (enabled) {\n    ReactEventListener._enabled = !!enabled;\n  },\n\n  isEnabled: function () {\n    return ReactEventListener._enabled;\n  },\n\n  /**\n   * Traps top-level events by using event bubbling.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. \"click\").\n   * @param {object} handle Element on which to attach listener.\n   * @return {?object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {\n    var element = handle;\n    if (!element) {\n      return null;\n    }\n    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));\n  },\n\n  /**\n   * Traps a top-level event by using event capturing.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. \"click\").\n   * @param {object} handle Element on which to attach listener.\n   * @return {?object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {\n    var element = handle;\n    if (!element) {\n      return null;\n    }\n    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));\n  },\n\n  monitorScrollValue: function (refresh) {\n    var callback = scrollValueMonitor.bind(null, refresh);\n    EventListener.listen(window, 'scroll', callback);\n  },\n\n  dispatchEvent: function (topLevelType, nativeEvent) {\n    if (!ReactEventListener._enabled) {\n      return;\n    }\n\n    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);\n    try {\n      // Event queue being processed in the same cycle allows\n      // `preventDefault`.\n      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);\n    } finally {\n      TopLevelCallbackBookKeeping.release(bookKeeping);\n    }\n  }\n};\n\nmodule.exports = ReactEventListener;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInjection\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar EventPluginHub = require('./EventPluginHub');\nvar EventPluginUtils = require('./EventPluginUtils');\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactClass = require('./ReactClass');\nvar ReactEmptyComponent = require('./ReactEmptyComponent');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactHostComponent = require('./ReactHostComponent');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar ReactInjection = {\n  Component: ReactComponentEnvironment.injection,\n  Class: ReactClass.injection,\n  DOMProperty: DOMProperty.injection,\n  EmptyComponent: ReactEmptyComponent.injection,\n  EventPluginHub: EventPluginHub.injection,\n  EventPluginUtils: EventPluginUtils.injection,\n  EventEmitter: ReactBrowserEventEmitter.injection,\n  HostComponent: ReactHostComponent.injection,\n  Updates: ReactUpdates.injection\n};\n\nmodule.exports = ReactInjection;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconcileTransaction\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar CallbackQueue = require('./CallbackQueue');\nvar PooledClass = require('./PooledClass');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactInputSelection = require('./ReactInputSelection');\nvar ReactInstrumentation = require('./ReactInstrumentation');\nvar Transaction = require('./Transaction');\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\n\n/**\n * Ensures that, when possible, the selection range (currently selected text\n * input) is not disturbed by performing the transaction.\n */\nvar SELECTION_RESTORATION = {\n  /**\n   * @return {Selection} Selection information.\n   */\n  initialize: ReactInputSelection.getSelectionInformation,\n  /**\n   * @param {Selection} sel Selection information returned from `initialize`.\n   */\n  close: ReactInputSelection.restoreSelection\n};\n\n/**\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\n * high level DOM manipulations (like temporarily removing a text input from the\n * DOM).\n */\nvar EVENT_SUPPRESSION = {\n  /**\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before\n   * the reconciliation.\n   */\n  initialize: function () {\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();\n    ReactBrowserEventEmitter.setEnabled(false);\n    return currentlyEnabled;\n  },\n\n  /**\n   * @param {boolean} previouslyEnabled Enabled status of\n   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`\n   *   restores the previous value.\n   */\n  close: function (previouslyEnabled) {\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);\n  }\n};\n\n/**\n * Provides a queue for collecting `componentDidMount` and\n * `componentDidUpdate` callbacks during the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function () {\n    this.reactMountReady.reset();\n  },\n\n  /**\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\n   */\n  close: function () {\n    this.reactMountReady.notifyAll();\n  }\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];\n\nif (process.env.NODE_ENV !== 'production') {\n  TRANSACTION_WRAPPERS.push({\n    initialize: ReactInstrumentation.debugTool.onBeginFlush,\n    close: ReactInstrumentation.debugTool.onEndFlush\n  });\n}\n\n/**\n * Currently:\n * - The order that these are listed in the transaction is critical:\n * - Suppresses events.\n * - Restores selection range.\n *\n * Future:\n * - Restore document/overflow scroll positions that were unintentionally\n *   modified via DOM insertions above the top viewport boundary.\n * - Implement/integrate with customized constraint based layout system and keep\n *   track of which dimensions must be remeasured.\n *\n * @class ReactReconcileTransaction\n */\nfunction ReactReconcileTransaction(useCreateElement) {\n  this.reinitializeTransaction();\n  // Only server-side rendering really needs this option (see\n  // `ReactServerRendering`), but server-side uses\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's\n  // accessible and defaults to false when `ReactDOMComponent` and\n  // `ReactDOMTextComponent` checks it in `mountComponent`.`\n  this.renderToStaticMarkup = false;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.useCreateElement = useCreateElement;\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array<object>} List of operation wrap procedures.\n   *   TODO: convert to array<TransactionWrapper>\n   */\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function () {\n    return this.reactMountReady;\n  },\n\n  /**\n   * @return {object} The queue to collect React async events.\n   */\n  getUpdateQueue: function () {\n    return ReactUpdateQueue;\n  },\n\n  /**\n   * Save current transaction state -- if the return value from this method is\n   * passed to `rollback`, the transaction will be reset to that state.\n   */\n  checkpoint: function () {\n    // reactMountReady is the our only stateful wrapper\n    return this.reactMountReady.checkpoint();\n  },\n\n  rollback: function (checkpoint) {\n    this.reactMountReady.rollback(checkpoint);\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be reused.\n   */\n  destructor: function () {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n  }\n};\n\n_assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);\n\nPooledClass.addPoolingTo(ReactReconcileTransaction);\n\nmodule.exports = ReactReconcileTransaction;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInputSelection\n */\n\n'use strict';\n\nvar ReactDOMSelection = require('./ReactDOMSelection');\n\nvar containsNode = require('fbjs/lib/containsNode');\nvar focusNode = require('fbjs/lib/focusNode');\nvar getActiveElement = require('fbjs/lib/getActiveElement');\n\nfunction isInDocument(node) {\n  return containsNode(document.documentElement, node);\n}\n\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\nvar ReactInputSelection = {\n\n  hasSelectionCapabilities: function (elem) {\n    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');\n  },\n\n  getSelectionInformation: function () {\n    var focusedElem = getActiveElement();\n    return {\n      focusedElem: focusedElem,\n      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null\n    };\n  },\n\n  /**\n   * @restoreSelection: If any selection information was potentially lost,\n   * restore it. This is useful when performing operations that could remove dom\n   * nodes and place them back in, resulting in focus being lost.\n   */\n  restoreSelection: function (priorSelectionInformation) {\n    var curFocusedElem = getActiveElement();\n    var priorFocusedElem = priorSelectionInformation.focusedElem;\n    var priorSelectionRange = priorSelectionInformation.selectionRange;\n    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {\n        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);\n      }\n      focusNode(priorFocusedElem);\n    }\n  },\n\n  /**\n   * @getSelection: Gets the selection bounds of a focused textarea, input or\n   * contentEditable node.\n   * -@input: Look up selection bounds of this input\n   * -@return {start: selectionStart, end: selectionEnd}\n   */\n  getSelection: function (input) {\n    var selection;\n\n    if ('selectionStart' in input) {\n      // Modern browser with input or textarea.\n      selection = {\n        start: input.selectionStart,\n        end: input.selectionEnd\n      };\n    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {\n      // IE8 input.\n      var range = document.selection.createRange();\n      // There can only be one selection per document in IE, so it must\n      // be in our element.\n      if (range.parentElement() === input) {\n        selection = {\n          start: -range.moveStart('character', -input.value.length),\n          end: -range.moveEnd('character', -input.value.length)\n        };\n      }\n    } else {\n      // Content editable or old IE textarea.\n      selection = ReactDOMSelection.getOffsets(input);\n    }\n\n    return selection || { start: 0, end: 0 };\n  },\n\n  /**\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses\n   * the input.\n   * -@input     Set selection bounds of this input or textarea\n   * -@offsets   Object of same form that is returned from get*\n   */\n  setSelection: function (input, offsets) {\n    var start = offsets.start;\n    var end = offsets.end;\n    if (end === undefined) {\n      end = start;\n    }\n\n    if ('selectionStart' in input) {\n      input.selectionStart = start;\n      input.selectionEnd = Math.min(end, input.value.length);\n    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {\n      var range = input.createTextRange();\n      range.collapse(true);\n      range.moveStart('character', start);\n      range.moveEnd('character', end - start);\n      range.select();\n    } else {\n      ReactDOMSelection.setOffsets(input, offsets);\n    }\n  }\n};\n\nmodule.exports = ReactInputSelection;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelection\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar getNodeForCharacterOffset = require('./getNodeForCharacterOffset');\nvar getTextContentAccessor = require('./getTextContentAccessor');\n\n/**\n * While `isCollapsed` is available on the Selection object and `collapsed`\n * is available on the Range object, IE11 sometimes gets them wrong.\n * If the anchor/focus nodes and offsets are the same, the range is collapsed.\n */\nfunction isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {\n  return anchorNode === focusNode && anchorOffset === focusOffset;\n}\n\n/**\n * Get the appropriate anchor and focus node/offset pairs for IE.\n *\n * The catch here is that IE's selection API doesn't provide information\n * about whether the selection is forward or backward, so we have to\n * behave as though it's always forward.\n *\n * IE text differs from modern selection in that it behaves as though\n * block elements end with a new line. This means character offsets will\n * differ between the two APIs.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getIEOffsets(node) {\n  var selection = document.selection;\n  var selectedRange = selection.createRange();\n  var selectedLength = selectedRange.text.length;\n\n  // Duplicate selection so we can move range without breaking user selection.\n  var fromStart = selectedRange.duplicate();\n  fromStart.moveToElementText(node);\n  fromStart.setEndPoint('EndToStart', selectedRange);\n\n  var startOffset = fromStart.text.length;\n  var endOffset = startOffset + selectedLength;\n\n  return {\n    start: startOffset,\n    end: endOffset\n  };\n}\n\n/**\n * @param {DOMElement} node\n * @return {?object}\n */\nfunction getModernOffsets(node) {\n  var selection = window.getSelection && window.getSelection();\n\n  if (!selection || selection.rangeCount === 0) {\n    return null;\n  }\n\n  var anchorNode = selection.anchorNode;\n  var anchorOffset = selection.anchorOffset;\n  var focusNode = selection.focusNode;\n  var focusOffset = selection.focusOffset;\n\n  var currentRange = selection.getRangeAt(0);\n\n  // In Firefox, range.startContainer and range.endContainer can be \"anonymous\n  // divs\", e.g. the up/down buttons on an <input type=\"number\">. Anonymous\n  // divs do not seem to expose properties, triggering a \"Permission denied\n  // error\" if any of its properties are accessed. The only seemingly possible\n  // way to avoid erroring is to access a property that typically works for\n  // non-anonymous divs and catch any error that may otherwise arise. See\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427\n  try {\n    /* eslint-disable no-unused-expressions */\n    currentRange.startContainer.nodeType;\n    currentRange.endContainer.nodeType;\n    /* eslint-enable no-unused-expressions */\n  } catch (e) {\n    return null;\n  }\n\n  // If the node and offset values are the same, the selection is collapsed.\n  // `Selection.isCollapsed` is available natively, but IE sometimes gets\n  // this value wrong.\n  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);\n\n  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;\n\n  var tempRange = currentRange.cloneRange();\n  tempRange.selectNodeContents(node);\n  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);\n\n  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);\n\n  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;\n  var end = start + rangeLength;\n\n  // Detect whether the selection is backward.\n  var detectionRange = document.createRange();\n  detectionRange.setStart(anchorNode, anchorOffset);\n  detectionRange.setEnd(focusNode, focusOffset);\n  var isBackward = detectionRange.collapsed;\n\n  return {\n    start: isBackward ? end : start,\n    end: isBackward ? start : end\n  };\n}\n\n/**\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setIEOffsets(node, offsets) {\n  var range = document.selection.createRange().duplicate();\n  var start, end;\n\n  if (offsets.end === undefined) {\n    start = offsets.start;\n    end = start;\n  } else if (offsets.start > offsets.end) {\n    start = offsets.end;\n    end = offsets.start;\n  } else {\n    start = offsets.start;\n    end = offsets.end;\n  }\n\n  range.moveToElementText(node);\n  range.moveStart('character', start);\n  range.setEndPoint('EndToStart', range);\n  range.moveEnd('character', end - start);\n  range.select();\n}\n\n/**\n * In modern non-IE browsers, we can support both forward and backward\n * selections.\n *\n * Note: IE10+ supports the Selection object, but it does not support\n * the `extend` method, which means that even in modern IE, it's not possible\n * to programmatically create a backward selection. Thus, for all IE\n * versions, we use the old IE API to create our selections.\n *\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setModernOffsets(node, offsets) {\n  if (!window.getSelection) {\n    return;\n  }\n\n  var selection = window.getSelection();\n  var length = node[getTextContentAccessor()].length;\n  var start = Math.min(offsets.start, length);\n  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);\n\n  // IE 11 uses modern selection, but doesn't support the extend method.\n  // Flip backward selections, so we can set with a single range.\n  if (!selection.extend && start > end) {\n    var temp = end;\n    end = start;\n    start = temp;\n  }\n\n  var startMarker = getNodeForCharacterOffset(node, start);\n  var endMarker = getNodeForCharacterOffset(node, end);\n\n  if (startMarker && endMarker) {\n    var range = document.createRange();\n    range.setStart(startMarker.node, startMarker.offset);\n    selection.removeAllRanges();\n\n    if (start > end) {\n      selection.addRange(range);\n      selection.extend(endMarker.node, endMarker.offset);\n    } else {\n      range.setEnd(endMarker.node, endMarker.offset);\n      selection.addRange(range);\n    }\n  }\n}\n\nvar useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);\n\nvar ReactDOMSelection = {\n  /**\n   * @param {DOMElement} node\n   */\n  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,\n\n  /**\n   * @param {DOMElement|DOMTextNode} node\n   * @param {object} offsets\n   */\n  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets\n};\n\nmodule.exports = ReactDOMSelection;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getNodeForCharacterOffset\n */\n\n'use strict';\n\n/**\n * Given any node return the first leaf node without children.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {DOMElement|DOMTextNode}\n */\n\nfunction getLeafNode(node) {\n  while (node && node.firstChild) {\n    node = node.firstChild;\n  }\n  return node;\n}\n\n/**\n * Get the next sibling within a container. This will walk up the\n * DOM if a node's siblings have been exhausted.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {?DOMElement|DOMTextNode}\n */\nfunction getSiblingNode(node) {\n  while (node) {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n    node = node.parentNode;\n  }\n}\n\n/**\n * Get object describing the nodes which contain characters at offset.\n *\n * @param {DOMElement|DOMTextNode} root\n * @param {number} offset\n * @return {?object}\n */\nfunction getNodeForCharacterOffset(root, offset) {\n  var node = getLeafNode(root);\n  var nodeStart = 0;\n  var nodeEnd = 0;\n\n  while (node) {\n    if (node.nodeType === 3) {\n      nodeEnd = nodeStart + node.textContent.length;\n\n      if (nodeStart <= offset && nodeEnd >= offset) {\n        return {\n          node: node,\n          offset: offset - nodeStart\n        };\n      }\n\n      nodeStart = nodeEnd;\n    }\n\n    node = getLeafNode(getSiblingNode(node));\n  }\n}\n\nmodule.exports = getNodeForCharacterOffset;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SVGDOMPropertyConfig\n */\n\n'use strict';\n\nvar NS = {\n  xlink: 'http://www.w3.org/1999/xlink',\n  xml: 'http://www.w3.org/XML/1998/namespace'\n};\n\n// We use attributes for everything SVG so let's avoid some duplication and run\n// code instead.\n// The following are all specified in the HTML config already so we exclude here.\n// - class (as className)\n// - color\n// - height\n// - id\n// - lang\n// - max\n// - media\n// - method\n// - min\n// - name\n// - style\n// - target\n// - type\n// - width\nvar ATTRS = {\n  accentHeight: 'accent-height',\n  accumulate: 0,\n  additive: 0,\n  alignmentBaseline: 'alignment-baseline',\n  allowReorder: 'allowReorder',\n  alphabetic: 0,\n  amplitude: 0,\n  arabicForm: 'arabic-form',\n  ascent: 0,\n  attributeName: 'attributeName',\n  attributeType: 'attributeType',\n  autoReverse: 'autoReverse',\n  azimuth: 0,\n  baseFrequency: 'baseFrequency',\n  baseProfile: 'baseProfile',\n  baselineShift: 'baseline-shift',\n  bbox: 0,\n  begin: 0,\n  bias: 0,\n  by: 0,\n  calcMode: 'calcMode',\n  capHeight: 'cap-height',\n  clip: 0,\n  clipPath: 'clip-path',\n  clipRule: 'clip-rule',\n  clipPathUnits: 'clipPathUnits',\n  colorInterpolation: 'color-interpolation',\n  colorInterpolationFilters: 'color-interpolation-filters',\n  colorProfile: 'color-profile',\n  colorRendering: 'color-rendering',\n  contentScriptType: 'contentScriptType',\n  contentStyleType: 'contentStyleType',\n  cursor: 0,\n  cx: 0,\n  cy: 0,\n  d: 0,\n  decelerate: 0,\n  descent: 0,\n  diffuseConstant: 'diffuseConstant',\n  direction: 0,\n  display: 0,\n  divisor: 0,\n  dominantBaseline: 'dominant-baseline',\n  dur: 0,\n  dx: 0,\n  dy: 0,\n  edgeMode: 'edgeMode',\n  elevation: 0,\n  enableBackground: 'enable-background',\n  end: 0,\n  exponent: 0,\n  externalResourcesRequired: 'externalResourcesRequired',\n  fill: 0,\n  fillOpacity: 'fill-opacity',\n  fillRule: 'fill-rule',\n  filter: 0,\n  filterRes: 'filterRes',\n  filterUnits: 'filterUnits',\n  floodColor: 'flood-color',\n  floodOpacity: 'flood-opacity',\n  focusable: 0,\n  fontFamily: 'font-family',\n  fontSize: 'font-size',\n  fontSizeAdjust: 'font-size-adjust',\n  fontStretch: 'font-stretch',\n  fontStyle: 'font-style',\n  fontVariant: 'font-variant',\n  fontWeight: 'font-weight',\n  format: 0,\n  from: 0,\n  fx: 0,\n  fy: 0,\n  g1: 0,\n  g2: 0,\n  glyphName: 'glyph-name',\n  glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n  glyphOrientationVertical: 'glyph-orientation-vertical',\n  glyphRef: 'glyphRef',\n  gradientTransform: 'gradientTransform',\n  gradientUnits: 'gradientUnits',\n  hanging: 0,\n  horizAdvX: 'horiz-adv-x',\n  horizOriginX: 'horiz-origin-x',\n  ideographic: 0,\n  imageRendering: 'image-rendering',\n  'in': 0,\n  in2: 0,\n  intercept: 0,\n  k: 0,\n  k1: 0,\n  k2: 0,\n  k3: 0,\n  k4: 0,\n  kernelMatrix: 'kernelMatrix',\n  kernelUnitLength: 'kernelUnitLength',\n  kerning: 0,\n  keyPoints: 'keyPoints',\n  keySplines: 'keySplines',\n  keyTimes: 'keyTimes',\n  lengthAdjust: 'lengthAdjust',\n  letterSpacing: 'letter-spacing',\n  lightingColor: 'lighting-color',\n  limitingConeAngle: 'limitingConeAngle',\n  local: 0,\n  markerEnd: 'marker-end',\n  markerMid: 'marker-mid',\n  markerStart: 'marker-start',\n  markerHeight: 'markerHeight',\n  markerUnits: 'markerUnits',\n  markerWidth: 'markerWidth',\n  mask: 0,\n  maskContentUnits: 'maskContentUnits',\n  maskUnits: 'maskUnits',\n  mathematical: 0,\n  mode: 0,\n  numOctaves: 'numOctaves',\n  offset: 0,\n  opacity: 0,\n  operator: 0,\n  order: 0,\n  orient: 0,\n  orientation: 0,\n  origin: 0,\n  overflow: 0,\n  overlinePosition: 'overline-position',\n  overlineThickness: 'overline-thickness',\n  paintOrder: 'paint-order',\n  panose1: 'panose-1',\n  pathLength: 'pathLength',\n  patternContentUnits: 'patternContentUnits',\n  patternTransform: 'patternTransform',\n  patternUnits: 'patternUnits',\n  pointerEvents: 'pointer-events',\n  points: 0,\n  pointsAtX: 'pointsAtX',\n  pointsAtY: 'pointsAtY',\n  pointsAtZ: 'pointsAtZ',\n  preserveAlpha: 'preserveAlpha',\n  preserveAspectRatio: 'preserveAspectRatio',\n  primitiveUnits: 'primitiveUnits',\n  r: 0,\n  radius: 0,\n  refX: 'refX',\n  refY: 'refY',\n  renderingIntent: 'rendering-intent',\n  repeatCount: 'repeatCount',\n  repeatDur: 'repeatDur',\n  requiredExtensions: 'requiredExtensions',\n  requiredFeatures: 'requiredFeatures',\n  restart: 0,\n  result: 0,\n  rotate: 0,\n  rx: 0,\n  ry: 0,\n  scale: 0,\n  seed: 0,\n  shapeRendering: 'shape-rendering',\n  slope: 0,\n  spacing: 0,\n  specularConstant: 'specularConstant',\n  specularExponent: 'specularExponent',\n  speed: 0,\n  spreadMethod: 'spreadMethod',\n  startOffset: 'startOffset',\n  stdDeviation: 'stdDeviation',\n  stemh: 0,\n  stemv: 0,\n  stitchTiles: 'stitchTiles',\n  stopColor: 'stop-color',\n  stopOpacity: 'stop-opacity',\n  strikethroughPosition: 'strikethrough-position',\n  strikethroughThickness: 'strikethrough-thickness',\n  string: 0,\n  stroke: 0,\n  strokeDasharray: 'stroke-dasharray',\n  strokeDashoffset: 'stroke-dashoffset',\n  strokeLinecap: 'stroke-linecap',\n  strokeLinejoin: 'stroke-linejoin',\n  strokeMiterlimit: 'stroke-miterlimit',\n  strokeOpacity: 'stroke-opacity',\n  strokeWidth: 'stroke-width',\n  surfaceScale: 'surfaceScale',\n  systemLanguage: 'systemLanguage',\n  tableValues: 'tableValues',\n  targetX: 'targetX',\n  targetY: 'targetY',\n  textAnchor: 'text-anchor',\n  textDecoration: 'text-decoration',\n  textRendering: 'text-rendering',\n  textLength: 'textLength',\n  to: 0,\n  transform: 0,\n  u1: 0,\n  u2: 0,\n  underlinePosition: 'underline-position',\n  underlineThickness: 'underline-thickness',\n  unicode: 0,\n  unicodeBidi: 'unicode-bidi',\n  unicodeRange: 'unicode-range',\n  unitsPerEm: 'units-per-em',\n  vAlphabetic: 'v-alphabetic',\n  vHanging: 'v-hanging',\n  vIdeographic: 'v-ideographic',\n  vMathematical: 'v-mathematical',\n  values: 0,\n  vectorEffect: 'vector-effect',\n  version: 0,\n  vertAdvY: 'vert-adv-y',\n  vertOriginX: 'vert-origin-x',\n  vertOriginY: 'vert-origin-y',\n  viewBox: 'viewBox',\n  viewTarget: 'viewTarget',\n  visibility: 0,\n  widths: 0,\n  wordSpacing: 'word-spacing',\n  writingMode: 'writing-mode',\n  x: 0,\n  xHeight: 'x-height',\n  x1: 0,\n  x2: 0,\n  xChannelSelector: 'xChannelSelector',\n  xlinkActuate: 'xlink:actuate',\n  xlinkArcrole: 'xlink:arcrole',\n  xlinkHref: 'xlink:href',\n  xlinkRole: 'xlink:role',\n  xlinkShow: 'xlink:show',\n  xlinkTitle: 'xlink:title',\n  xlinkType: 'xlink:type',\n  xmlBase: 'xml:base',\n  xmlns: 0,\n  xmlnsXlink: 'xmlns:xlink',\n  xmlLang: 'xml:lang',\n  xmlSpace: 'xml:space',\n  y: 0,\n  y1: 0,\n  y2: 0,\n  yChannelSelector: 'yChannelSelector',\n  z: 0,\n  zoomAndPan: 'zoomAndPan'\n};\n\nvar SVGDOMPropertyConfig = {\n  Properties: {},\n  DOMAttributeNamespaces: {\n    xlinkActuate: NS.xlink,\n    xlinkArcrole: NS.xlink,\n    xlinkHref: NS.xlink,\n    xlinkRole: NS.xlink,\n    xlinkShow: NS.xlink,\n    xlinkTitle: NS.xlink,\n    xlinkType: NS.xlink,\n    xmlBase: NS.xml,\n    xmlLang: NS.xml,\n    xmlSpace: NS.xml\n  },\n  DOMAttributeNames: {}\n};\n\nObject.keys(ATTRS).forEach(function (key) {\n  SVGDOMPropertyConfig.Properties[key] = 0;\n  if (ATTRS[key]) {\n    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];\n  }\n});\n\nmodule.exports = SVGDOMPropertyConfig;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SelectEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactInputSelection = require('./ReactInputSelection');\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getActiveElement = require('fbjs/lib/getActiveElement');\nvar isTextInputElement = require('./isTextInputElement');\nvar keyOf = require('fbjs/lib/keyOf');\nvar shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\n\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSelect: null }),\n      captured: keyOf({ onSelectCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]\n  }\n};\n\nvar activeElement = null;\nvar activeElementInst = null;\nvar lastSelection = null;\nvar mouseDown = false;\n\n// Track whether a listener exists for this plugin. If none exist, we do\n// not extract events. See #3639.\nvar hasListener = false;\nvar ON_SELECT_KEY = keyOf({ onSelect: null });\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getSelection(node) {\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  } else if (document.selection) {\n    var range = document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  }\n}\n\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {\n    return null;\n  }\n\n  // Only fire when selection has actually changed.\n  var currentSelection = getSelection(activeElement);\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);\n\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n\n    return syntheticEvent;\n  }\n\n  return null;\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nvar SelectEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    if (!hasListener) {\n      return null;\n    }\n\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case topLevelTypes.topFocus:\n        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {\n          activeElement = targetNode;\n          activeElementInst = targetInst;\n          lastSelection = null;\n        }\n        break;\n      case topLevelTypes.topBlur:\n        activeElement = null;\n        activeElementInst = null;\n        lastSelection = null;\n        break;\n\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n      case topLevelTypes.topMouseDown:\n        mouseDown = true;\n        break;\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topMouseUp:\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't). IE's event fires out of order with respect\n      // to key and input events on deletion, so we discard it.\n      //\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      // This is also our approach for IE handling, for the reason above.\n      case topLevelTypes.topSelectionChange:\n        if (skipSelectionChangeEvent) {\n          break;\n        }\n      // falls through\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n    }\n\n    return null;\n  },\n\n  didPutListener: function (inst, registrationName, listener) {\n    if (registrationName === ON_SELECT_KEY) {\n      hasListener = true;\n    }\n  }\n};\n\nmodule.exports = SelectEventPlugin;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SimpleEventPlugin\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar EventConstants = require('./EventConstants');\nvar EventListener = require('fbjs/lib/EventListener');\nvar EventPropagators = require('./EventPropagators');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar SyntheticAnimationEvent = require('./SyntheticAnimationEvent');\nvar SyntheticClipboardEvent = require('./SyntheticClipboardEvent');\nvar SyntheticEvent = require('./SyntheticEvent');\nvar SyntheticFocusEvent = require('./SyntheticFocusEvent');\nvar SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\nvar SyntheticDragEvent = require('./SyntheticDragEvent');\nvar SyntheticTouchEvent = require('./SyntheticTouchEvent');\nvar SyntheticTransitionEvent = require('./SyntheticTransitionEvent');\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\nvar SyntheticWheelEvent = require('./SyntheticWheelEvent');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar getEventCharCode = require('./getEventCharCode');\nvar invariant = require('fbjs/lib/invariant');\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  abort: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onAbort: true }),\n      captured: keyOf({ onAbortCapture: true })\n    }\n  },\n  animationEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onAnimationEnd: true }),\n      captured: keyOf({ onAnimationEndCapture: true })\n    }\n  },\n  animationIteration: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onAnimationIteration: true }),\n      captured: keyOf({ onAnimationIterationCapture: true })\n    }\n  },\n  animationStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onAnimationStart: true }),\n      captured: keyOf({ onAnimationStartCapture: true })\n    }\n  },\n  blur: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onBlur: true }),\n      captured: keyOf({ onBlurCapture: true })\n    }\n  },\n  canPlay: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCanPlay: true }),\n      captured: keyOf({ onCanPlayCapture: true })\n    }\n  },\n  canPlayThrough: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCanPlayThrough: true }),\n      captured: keyOf({ onCanPlayThroughCapture: true })\n    }\n  },\n  click: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onClick: true }),\n      captured: keyOf({ onClickCapture: true })\n    }\n  },\n  contextMenu: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onContextMenu: true }),\n      captured: keyOf({ onContextMenuCapture: true })\n    }\n  },\n  copy: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCopy: true }),\n      captured: keyOf({ onCopyCapture: true })\n    }\n  },\n  cut: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCut: true }),\n      captured: keyOf({ onCutCapture: true })\n    }\n  },\n  doubleClick: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDoubleClick: true }),\n      captured: keyOf({ onDoubleClickCapture: true })\n    }\n  },\n  drag: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDrag: true }),\n      captured: keyOf({ onDragCapture: true })\n    }\n  },\n  dragEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragEnd: true }),\n      captured: keyOf({ onDragEndCapture: true })\n    }\n  },\n  dragEnter: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragEnter: true }),\n      captured: keyOf({ onDragEnterCapture: true })\n    }\n  },\n  dragExit: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragExit: true }),\n      captured: keyOf({ onDragExitCapture: true })\n    }\n  },\n  dragLeave: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragLeave: true }),\n      captured: keyOf({ onDragLeaveCapture: true })\n    }\n  },\n  dragOver: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragOver: true }),\n      captured: keyOf({ onDragOverCapture: true })\n    }\n  },\n  dragStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragStart: true }),\n      captured: keyOf({ onDragStartCapture: true })\n    }\n  },\n  drop: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDrop: true }),\n      captured: keyOf({ onDropCapture: true })\n    }\n  },\n  durationChange: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDurationChange: true }),\n      captured: keyOf({ onDurationChangeCapture: true })\n    }\n  },\n  emptied: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onEmptied: true }),\n      captured: keyOf({ onEmptiedCapture: true })\n    }\n  },\n  encrypted: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onEncrypted: true }),\n      captured: keyOf({ onEncryptedCapture: true })\n    }\n  },\n  ended: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onEnded: true }),\n      captured: keyOf({ onEndedCapture: true })\n    }\n  },\n  error: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onError: true }),\n      captured: keyOf({ onErrorCapture: true })\n    }\n  },\n  focus: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onFocus: true }),\n      captured: keyOf({ onFocusCapture: true })\n    }\n  },\n  input: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onInput: true }),\n      captured: keyOf({ onInputCapture: true })\n    }\n  },\n  invalid: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onInvalid: true }),\n      captured: keyOf({ onInvalidCapture: true })\n    }\n  },\n  keyDown: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onKeyDown: true }),\n      captured: keyOf({ onKeyDownCapture: true })\n    }\n  },\n  keyPress: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onKeyPress: true }),\n      captured: keyOf({ onKeyPressCapture: true })\n    }\n  },\n  keyUp: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onKeyUp: true }),\n      captured: keyOf({ onKeyUpCapture: true })\n    }\n  },\n  load: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onLoad: true }),\n      captured: keyOf({ onLoadCapture: true })\n    }\n  },\n  loadedData: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onLoadedData: true }),\n      captured: keyOf({ onLoadedDataCapture: true })\n    }\n  },\n  loadedMetadata: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onLoadedMetadata: true }),\n      captured: keyOf({ onLoadedMetadataCapture: true })\n    }\n  },\n  loadStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onLoadStart: true }),\n      captured: keyOf({ onLoadStartCapture: true })\n    }\n  },\n  // Note: We do not allow listening to mouseOver events. Instead, use the\n  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.\n  mouseDown: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onMouseDown: true }),\n      captured: keyOf({ onMouseDownCapture: true })\n    }\n  },\n  mouseMove: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onMouseMove: true }),\n      captured: keyOf({ onMouseMoveCapture: true })\n    }\n  },\n  mouseOut: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onMouseOut: true }),\n      captured: keyOf({ onMouseOutCapture: true })\n    }\n  },\n  mouseOver: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onMouseOver: true }),\n      captured: keyOf({ onMouseOverCapture: true })\n    }\n  },\n  mouseUp: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onMouseUp: true }),\n      captured: keyOf({ onMouseUpCapture: true })\n    }\n  },\n  paste: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onPaste: true }),\n      captured: keyOf({ onPasteCapture: true })\n    }\n  },\n  pause: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onPause: true }),\n      captured: keyOf({ onPauseCapture: true })\n    }\n  },\n  play: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onPlay: true }),\n      captured: keyOf({ onPlayCapture: true })\n    }\n  },\n  playing: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onPlaying: true }),\n      captured: keyOf({ onPlayingCapture: true })\n    }\n  },\n  progress: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onProgress: true }),\n      captured: keyOf({ onProgressCapture: true })\n    }\n  },\n  rateChange: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onRateChange: true }),\n      captured: keyOf({ onRateChangeCapture: true })\n    }\n  },\n  reset: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onReset: true }),\n      captured: keyOf({ onResetCapture: true })\n    }\n  },\n  scroll: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onScroll: true }),\n      captured: keyOf({ onScrollCapture: true })\n    }\n  },\n  seeked: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSeeked: true }),\n      captured: keyOf({ onSeekedCapture: true })\n    }\n  },\n  seeking: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSeeking: true }),\n      captured: keyOf({ onSeekingCapture: true })\n    }\n  },\n  stalled: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onStalled: true }),\n      captured: keyOf({ onStalledCapture: true })\n    }\n  },\n  submit: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSubmit: true }),\n      captured: keyOf({ onSubmitCapture: true })\n    }\n  },\n  suspend: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSuspend: true }),\n      captured: keyOf({ onSuspendCapture: true })\n    }\n  },\n  timeUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onTimeUpdate: true }),\n      captured: keyOf({ onTimeUpdateCapture: true })\n    }\n  },\n  touchCancel: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onTouchCancel: true }),\n      captured: keyOf({ onTouchCancelCapture: true })\n    }\n  },\n  touchEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onTouchEnd: true }),\n      captured: keyOf({ onTouchEndCapture: true })\n    }\n  },\n  touchMove: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onTouchMove: true }),\n      captured: keyOf({ onTouchMoveCapture: true })\n    }\n  },\n  touchStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onTouchStart: true }),\n      captured: keyOf({ onTouchStartCapture: true })\n    }\n  },\n  transitionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onTransitionEnd: true }),\n      captured: keyOf({ onTransitionEndCapture: true })\n    }\n  },\n  volumeChange: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onVolumeChange: true }),\n      captured: keyOf({ onVolumeChangeCapture: true })\n    }\n  },\n  waiting: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onWaiting: true }),\n      captured: keyOf({ onWaitingCapture: true })\n    }\n  },\n  wheel: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onWheel: true }),\n      captured: keyOf({ onWheelCapture: true })\n    }\n  }\n};\n\nvar topLevelEventsToDispatchConfig = {\n  topAbort: eventTypes.abort,\n  topAnimationEnd: eventTypes.animationEnd,\n  topAnimationIteration: eventTypes.animationIteration,\n  topAnimationStart: eventTypes.animationStart,\n  topBlur: eventTypes.blur,\n  topCanPlay: eventTypes.canPlay,\n  topCanPlayThrough: eventTypes.canPlayThrough,\n  topClick: eventTypes.click,\n  topContextMenu: eventTypes.contextMenu,\n  topCopy: eventTypes.copy,\n  topCut: eventTypes.cut,\n  topDoubleClick: eventTypes.doubleClick,\n  topDrag: eventTypes.drag,\n  topDragEnd: eventTypes.dragEnd,\n  topDragEnter: eventTypes.dragEnter,\n  topDragExit: eventTypes.dragExit,\n  topDragLeave: eventTypes.dragLeave,\n  topDragOver: eventTypes.dragOver,\n  topDragStart: eventTypes.dragStart,\n  topDrop: eventTypes.drop,\n  topDurationChange: eventTypes.durationChange,\n  topEmptied: eventTypes.emptied,\n  topEncrypted: eventTypes.encrypted,\n  topEnded: eventTypes.ended,\n  topError: eventTypes.error,\n  topFocus: eventTypes.focus,\n  topInput: eventTypes.input,\n  topInvalid: eventTypes.invalid,\n  topKeyDown: eventTypes.keyDown,\n  topKeyPress: eventTypes.keyPress,\n  topKeyUp: eventTypes.keyUp,\n  topLoad: eventTypes.load,\n  topLoadedData: eventTypes.loadedData,\n  topLoadedMetadata: eventTypes.loadedMetadata,\n  topLoadStart: eventTypes.loadStart,\n  topMouseDown: eventTypes.mouseDown,\n  topMouseMove: eventTypes.mouseMove,\n  topMouseOut: eventTypes.mouseOut,\n  topMouseOver: eventTypes.mouseOver,\n  topMouseUp: eventTypes.mouseUp,\n  topPaste: eventTypes.paste,\n  topPause: eventTypes.pause,\n  topPlay: eventTypes.play,\n  topPlaying: eventTypes.playing,\n  topProgress: eventTypes.progress,\n  topRateChange: eventTypes.rateChange,\n  topReset: eventTypes.reset,\n  topScroll: eventTypes.scroll,\n  topSeeked: eventTypes.seeked,\n  topSeeking: eventTypes.seeking,\n  topStalled: eventTypes.stalled,\n  topSubmit: eventTypes.submit,\n  topSuspend: eventTypes.suspend,\n  topTimeUpdate: eventTypes.timeUpdate,\n  topTouchCancel: eventTypes.touchCancel,\n  topTouchEnd: eventTypes.touchEnd,\n  topTouchMove: eventTypes.touchMove,\n  topTouchStart: eventTypes.touchStart,\n  topTransitionEnd: eventTypes.transitionEnd,\n  topVolumeChange: eventTypes.volumeChange,\n  topWaiting: eventTypes.waiting,\n  topWheel: eventTypes.wheel\n};\n\nfor (var type in topLevelEventsToDispatchConfig) {\n  topLevelEventsToDispatchConfig[type].dependencies = [type];\n}\n\nvar ON_CLICK_KEY = keyOf({ onClick: null });\nvar onClickListeners = {};\n\nfunction getDictionaryKey(inst) {\n  // Prevents V8 performance issue:\n  // https://github.com/facebook/react/pull/7232\n  return '.' + inst._rootNodeID;\n}\n\nvar SimpleEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];\n    if (!dispatchConfig) {\n      return null;\n    }\n    var EventConstructor;\n    switch (topLevelType) {\n      case topLevelTypes.topAbort:\n      case topLevelTypes.topCanPlay:\n      case topLevelTypes.topCanPlayThrough:\n      case topLevelTypes.topDurationChange:\n      case topLevelTypes.topEmptied:\n      case topLevelTypes.topEncrypted:\n      case topLevelTypes.topEnded:\n      case topLevelTypes.topError:\n      case topLevelTypes.topInput:\n      case topLevelTypes.topInvalid:\n      case topLevelTypes.topLoad:\n      case topLevelTypes.topLoadedData:\n      case topLevelTypes.topLoadedMetadata:\n      case topLevelTypes.topLoadStart:\n      case topLevelTypes.topPause:\n      case topLevelTypes.topPlay:\n      case topLevelTypes.topPlaying:\n      case topLevelTypes.topProgress:\n      case topLevelTypes.topRateChange:\n      case topLevelTypes.topReset:\n      case topLevelTypes.topSeeked:\n      case topLevelTypes.topSeeking:\n      case topLevelTypes.topStalled:\n      case topLevelTypes.topSubmit:\n      case topLevelTypes.topSuspend:\n      case topLevelTypes.topTimeUpdate:\n      case topLevelTypes.topVolumeChange:\n      case topLevelTypes.topWaiting:\n        // HTML Events\n        // @see http://www.w3.org/TR/html5/index.html#events-0\n        EventConstructor = SyntheticEvent;\n        break;\n      case topLevelTypes.topKeyPress:\n        // Firefox creates a keypress event for function keys too. This removes\n        // the unwanted keypress events. Enter is however both printable and\n        // non-printable. One would expect Tab to be as well (but it isn't).\n        if (getEventCharCode(nativeEvent) === 0) {\n          return null;\n        }\n      /* falls through */\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        EventConstructor = SyntheticKeyboardEvent;\n        break;\n      case topLevelTypes.topBlur:\n      case topLevelTypes.topFocus:\n        EventConstructor = SyntheticFocusEvent;\n        break;\n      case topLevelTypes.topClick:\n        // Firefox creates a click event on right mouse clicks. This removes the\n        // unwanted click events.\n        if (nativeEvent.button === 2) {\n          return null;\n        }\n      /* falls through */\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topDoubleClick:\n      case topLevelTypes.topMouseDown:\n      case topLevelTypes.topMouseMove:\n      case topLevelTypes.topMouseOut:\n      case topLevelTypes.topMouseOver:\n      case topLevelTypes.topMouseUp:\n        EventConstructor = SyntheticMouseEvent;\n        break;\n      case topLevelTypes.topDrag:\n      case topLevelTypes.topDragEnd:\n      case topLevelTypes.topDragEnter:\n      case topLevelTypes.topDragExit:\n      case topLevelTypes.topDragLeave:\n      case topLevelTypes.topDragOver:\n      case topLevelTypes.topDragStart:\n      case topLevelTypes.topDrop:\n        EventConstructor = SyntheticDragEvent;\n        break;\n      case topLevelTypes.topTouchCancel:\n      case topLevelTypes.topTouchEnd:\n      case topLevelTypes.topTouchMove:\n      case topLevelTypes.topTouchStart:\n        EventConstructor = SyntheticTouchEvent;\n        break;\n      case topLevelTypes.topAnimationEnd:\n      case topLevelTypes.topAnimationIteration:\n      case topLevelTypes.topAnimationStart:\n        EventConstructor = SyntheticAnimationEvent;\n        break;\n      case topLevelTypes.topTransitionEnd:\n        EventConstructor = SyntheticTransitionEvent;\n        break;\n      case topLevelTypes.topScroll:\n        EventConstructor = SyntheticUIEvent;\n        break;\n      case topLevelTypes.topWheel:\n        EventConstructor = SyntheticWheelEvent;\n        break;\n      case topLevelTypes.topCopy:\n      case topLevelTypes.topCut:\n      case topLevelTypes.topPaste:\n        EventConstructor = SyntheticClipboardEvent;\n        break;\n    }\n    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;\n    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n    return event;\n  },\n\n  didPutListener: function (inst, registrationName, listener) {\n    // Mobile Safari does not fire properly bubble click events on\n    // non-interactive elements, which means delegated click listeners do not\n    // fire. The workaround for this bug involves attaching an empty click\n    // listener on the target node.\n    if (registrationName === ON_CLICK_KEY) {\n      var key = getDictionaryKey(inst);\n      var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n      if (!onClickListeners[key]) {\n        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);\n      }\n    }\n  },\n\n  willDeleteListener: function (inst, registrationName) {\n    if (registrationName === ON_CLICK_KEY) {\n      var key = getDictionaryKey(inst);\n      onClickListeners[key].remove();\n      delete onClickListeners[key];\n    }\n  }\n\n};\n\nmodule.exports = SimpleEventPlugin;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticAnimationEvent\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent\n */\nvar AnimationEventInterface = {\n  animationName: null,\n  elapsedTime: null,\n  pseudoElement: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticEvent}\n */\nfunction SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);\n\nmodule.exports = SyntheticAnimationEvent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticClipboardEvent\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/clipboard-apis/\n */\nvar ClipboardEventInterface = {\n  clipboardData: function (event) {\n    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);\n\nmodule.exports = SyntheticClipboardEvent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticFocusEvent\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\n\n/**\n * @interface FocusEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar FocusEventInterface = {\n  relatedTarget: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);\n\nmodule.exports = SyntheticFocusEvent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticKeyboardEvent\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\n\nvar getEventCharCode = require('./getEventCharCode');\nvar getEventKey = require('./getEventKey');\nvar getEventModifierState = require('./getEventModifierState');\n\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar KeyboardEventInterface = {\n  key: getEventKey,\n  location: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  repeat: null,\n  locale: null,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function (event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    return 0;\n  },\n  keyCode: function (event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n  which: function (event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);\n\nmodule.exports = SyntheticKeyboardEvent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventCharCode\n */\n\n'use strict';\n\n/**\n * `charCode` represents the actual \"character code\" and is safe to use with\n * `String.fromCharCode`. As such, only keys that correspond to printable\n * characters produce a valid `charCode`, the only exception to this is Enter.\n * The Tab-key is considered non-printable and does not have a `charCode`,\n * presumably because it does not produce a tab-character in browsers.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {number} Normalized `charCode` property.\n */\n\nfunction getEventCharCode(nativeEvent) {\n  var charCode;\n  var keyCode = nativeEvent.keyCode;\n\n  if ('charCode' in nativeEvent) {\n    charCode = nativeEvent.charCode;\n\n    // FF does not set `charCode` for the Enter-key, check against `keyCode`.\n    if (charCode === 0 && keyCode === 13) {\n      charCode = 13;\n    }\n  } else {\n    // IE8 does not implement `charCode`, but `keyCode` has the correct value.\n    charCode = keyCode;\n  }\n\n  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.\n  // Must not discard the (non-)printable Enter-key.\n  if (charCode >= 32 || charCode === 13) {\n    return charCode;\n  }\n\n  return 0;\n}\n\nmodule.exports = getEventCharCode;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventKey\n */\n\n'use strict';\n\nvar getEventCharCode = require('./getEventCharCode');\n\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar normalizeKey = {\n  'Esc': 'Escape',\n  'Spacebar': ' ',\n  'Left': 'ArrowLeft',\n  'Up': 'ArrowUp',\n  'Right': 'ArrowRight',\n  'Down': 'ArrowDown',\n  'Del': 'Delete',\n  'Win': 'OS',\n  'Menu': 'ContextMenu',\n  'Apps': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'MozPrintableKey': 'Unidentified'\n};\n\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar translateToKey = {\n  8: 'Backspace',\n  9: 'Tab',\n  12: 'Clear',\n  13: 'Enter',\n  16: 'Shift',\n  17: 'Control',\n  18: 'Alt',\n  19: 'Pause',\n  20: 'CapsLock',\n  27: 'Escape',\n  32: ' ',\n  33: 'PageUp',\n  34: 'PageDown',\n  35: 'End',\n  36: 'Home',\n  37: 'ArrowLeft',\n  38: 'ArrowUp',\n  39: 'ArrowRight',\n  40: 'ArrowDown',\n  45: 'Insert',\n  46: 'Delete',\n  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',\n  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',\n  144: 'NumLock',\n  145: 'ScrollLock',\n  224: 'Meta'\n};\n\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  }\n\n  // Browser does not implement `key`, polyfill as much of it as we can.\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent);\n\n    // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n  return '';\n}\n\nmodule.exports = getEventKey;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticDragEvent\n */\n\n'use strict';\n\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\n/**\n * @interface DragEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar DragEventInterface = {\n  dataTransfer: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);\n\nmodule.exports = SyntheticDragEvent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticTouchEvent\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\n\nvar getEventModifierState = require('./getEventModifierState');\n\n/**\n * @interface TouchEvent\n * @see http://www.w3.org/TR/touch-events/\n */\nvar TouchEventInterface = {\n  touches: null,\n  targetTouches: null,\n  changedTouches: null,\n  altKey: null,\n  metaKey: null,\n  ctrlKey: null,\n  shiftKey: null,\n  getModifierState: getEventModifierState\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);\n\nmodule.exports = SyntheticTouchEvent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticTransitionEvent\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent\n */\nvar TransitionEventInterface = {\n  propertyName: null,\n  elapsedTime: null,\n  pseudoElement: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticEvent}\n */\nfunction SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);\n\nmodule.exports = SyntheticTransitionEvent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticWheelEvent\n */\n\n'use strict';\n\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\n/**\n * @interface WheelEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar WheelEventInterface = {\n  deltaX: function (event) {\n    return 'deltaX' in event ? event.deltaX :\n    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\n    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;\n  },\n  deltaY: function (event) {\n    return 'deltaY' in event ? event.deltaY :\n    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\n    'wheelDeltaY' in event ? -event.wheelDeltaY :\n    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\n    'wheelDelta' in event ? -event.wheelDelta : 0;\n  },\n  deltaZ: null,\n\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\n  deltaMode: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticMouseEvent}\n */\nfunction SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);\n\nmodule.exports = SyntheticWheelEvent;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMount\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar DOMLazyTree = require('./DOMLazyTree');\nvar DOMProperty = require('./DOMProperty');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactDOMContainerInfo = require('./ReactDOMContainerInfo');\nvar ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');\nvar ReactElement = require('./ReactElement');\nvar ReactFeatureFlags = require('./ReactFeatureFlags');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactInstrumentation = require('./ReactInstrumentation');\nvar ReactMarkupChecksum = require('./ReactMarkupChecksum');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar instantiateReactComponent = require('./instantiateReactComponent');\nvar invariant = require('fbjs/lib/invariant');\nvar setInnerHTML = require('./setInnerHTML');\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');\nvar warning = require('fbjs/lib/warning');\n\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\nvar ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;\n\nvar ELEMENT_NODE_TYPE = 1;\nvar DOC_NODE_TYPE = 9;\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;\n\nvar instancesByReactRootID = {};\n\n/**\n * Finds the index of the first character\n * that's not common between the two given strings.\n *\n * @return {number} the index of the character where the strings diverge\n */\nfunction firstDifferenceIndex(string1, string2) {\n  var minLen = Math.min(string1.length, string2.length);\n  for (var i = 0; i < minLen; i++) {\n    if (string1.charAt(i) !== string2.charAt(i)) {\n      return i;\n    }\n  }\n  return string1.length === string2.length ? -1 : minLen;\n}\n\n/**\n * @param {DOMElement|DOMDocument} container DOM element that may contain\n * a React component\n * @return {?*} DOM element that may have the reactRoot ID, or null.\n */\nfunction getReactRootElementInContainer(container) {\n  if (!container) {\n    return null;\n  }\n\n  if (container.nodeType === DOC_NODE_TYPE) {\n    return container.documentElement;\n  } else {\n    return container.firstChild;\n  }\n}\n\nfunction internalGetID(node) {\n  // If node is something like a window, document, or text node, none of\n  // which support attributes or a .getAttribute method, gracefully return\n  // the empty string, as if the attribute were missing.\n  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';\n}\n\n/**\n * Mounts this component and inserts it into the DOM.\n *\n * @param {ReactComponent} componentInstance The instance to mount.\n * @param {DOMElement} container DOM element to mount into.\n * @param {ReactReconcileTransaction} transaction\n * @param {boolean} shouldReuseMarkup If true, do not insert markup\n */\nfunction mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {\n  var markerName;\n  if (ReactFeatureFlags.logTopLevelRenders) {\n    var wrappedElement = wrapperInstance._currentElement.props;\n    var type = wrappedElement.type;\n    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);\n    console.time(markerName);\n  }\n\n  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */\n  );\n\n  if (markerName) {\n    console.timeEnd(markerName);\n  }\n\n  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;\n  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);\n}\n\n/**\n * Batched mount.\n *\n * @param {ReactComponent} componentInstance The instance to mount.\n * @param {DOMElement} container DOM element to mount into.\n * @param {boolean} shouldReuseMarkup If true, do not insert markup\n */\nfunction batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {\n  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(\n  /* useCreateElement */\n  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);\n  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);\n  ReactUpdates.ReactReconcileTransaction.release(transaction);\n}\n\n/**\n * Unmounts a component and removes it from the DOM.\n *\n * @param {ReactComponent} instance React component instance.\n * @param {DOMElement} container DOM element to unmount from.\n * @final\n * @internal\n * @see {ReactMount.unmountComponentAtNode}\n */\nfunction unmountComponentFromNode(instance, container, safely) {\n  if (process.env.NODE_ENV !== 'production') {\n    ReactInstrumentation.debugTool.onBeginFlush();\n  }\n  ReactReconciler.unmountComponent(instance, safely);\n  if (process.env.NODE_ENV !== 'production') {\n    ReactInstrumentation.debugTool.onEndFlush();\n  }\n\n  if (container.nodeType === DOC_NODE_TYPE) {\n    container = container.documentElement;\n  }\n\n  // http://jsperf.com/emptying-a-node\n  while (container.lastChild) {\n    container.removeChild(container.lastChild);\n  }\n}\n\n/**\n * True if the supplied DOM node has a direct React-rendered child that is\n * not a React root element. Useful for warning in `render`,\n * `unmountComponentAtNode`, etc.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @return {boolean} True if the DOM element contains a direct child that was\n * rendered by React but is not a root element.\n * @internal\n */\nfunction hasNonRootReactChild(container) {\n  var rootEl = getReactRootElementInContainer(container);\n  if (rootEl) {\n    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);\n    return !!(inst && inst._hostParent);\n  }\n}\n\n/**\n * True if the supplied DOM node is a React DOM element and\n * it has been rendered by another copy of React.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @return {boolean} True if the DOM has been rendered by another copy of React\n * @internal\n */\nfunction nodeIsRenderedByOtherInstance(container) {\n  var rootEl = getReactRootElementInContainer(container);\n  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));\n}\n\n/**\n * True if the supplied DOM node is a valid node element.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @return {boolean} True if the DOM is a valid DOM node.\n * @internal\n */\nfunction isValidContainer(node) {\n  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));\n}\n\n/**\n * True if the supplied DOM node is a valid React node element.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @return {boolean} True if the DOM is a valid React DOM node.\n * @internal\n */\nfunction isReactNode(node) {\n  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));\n}\n\nfunction getHostRootInstanceInContainer(container) {\n  var rootEl = getReactRootElementInContainer(container);\n  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);\n  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;\n}\n\nfunction getTopLevelWrapperInContainer(container) {\n  var root = getHostRootInstanceInContainer(container);\n  return root ? root._hostContainerInfo._topLevelWrapper : null;\n}\n\n/**\n * Temporary (?) hack so that we can store all top-level pending updates on\n * composites instead of having to worry about different types of components\n * here.\n */\nvar topLevelRootCounter = 1;\nvar TopLevelWrapper = function () {\n  this.rootID = topLevelRootCounter++;\n};\nTopLevelWrapper.prototype.isReactComponent = {};\nif (process.env.NODE_ENV !== 'production') {\n  TopLevelWrapper.displayName = 'TopLevelWrapper';\n}\nTopLevelWrapper.prototype.render = function () {\n  // this.props is actually a ReactElement\n  return this.props;\n};\n\n/**\n * Mounting is the process of initializing a React component by creating its\n * representative DOM elements and inserting them into a supplied `container`.\n * Any prior content inside `container` is destroyed in the process.\n *\n *   ReactMount.render(\n *     component,\n *     document.getElementById('container')\n *   );\n *\n *   <div id=\"container\">                   <-- Supplied `container`.\n *     <div data-reactid=\".3\">              <-- Rendered reactRoot of React\n *       // ...                                 component.\n *     </div>\n *   </div>\n *\n * Inside of `container`, the first element rendered is the \"reactRoot\".\n */\nvar ReactMount = {\n\n  TopLevelWrapper: TopLevelWrapper,\n\n  /**\n   * Used by devtools. The keys are not important.\n   */\n  _instancesByReactRootID: instancesByReactRootID,\n\n  /**\n   * This is a hook provided to support rendering React components while\n   * ensuring that the apparent scroll position of its `container` does not\n   * change.\n   *\n   * @param {DOMElement} container The `container` being rendered into.\n   * @param {function} renderCallback This must be called once to do the render.\n   */\n  scrollMonitor: function (container, renderCallback) {\n    renderCallback();\n  },\n\n  /**\n   * Take a component that's already mounted into the DOM and replace its props\n   * @param {ReactComponent} prevComponent component instance already in the DOM\n   * @param {ReactElement} nextElement component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {?function} callback function triggered on completion\n   */\n  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {\n    ReactMount.scrollMonitor(container, function () {\n      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);\n      if (callback) {\n        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);\n      }\n    });\n\n    return prevComponent;\n  },\n\n  /**\n   * Render a new component into the DOM. Hooked by hooks!\n   *\n   * @param {ReactElement} nextElement element to render\n   * @param {DOMElement} container container to render into\n   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion\n   * @return {ReactComponent} nextComponent\n   */\n  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {\n    // Various parts of our code (such as ReactCompositeComponent's\n    // _renderValidatedComponent) assume that calls to render aren't nested;\n    // verify that that's the case.\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;\n\n    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;\n\n    ReactBrowserEventEmitter.ensureScrollValueMonitoring();\n    var componentInstance = instantiateReactComponent(nextElement, false);\n\n    // The initial render is synchronous but any updates that happen during\n    // rendering, in componentWillMount or componentDidMount, will be batched\n    // according to the current batching strategy.\n\n    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);\n\n    var wrapperID = componentInstance._instance.rootID;\n    instancesByReactRootID[wrapperID] = componentInstance;\n\n    return componentInstance;\n  },\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.\n   * @param {ReactElement} nextElement Component element to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {\n    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;\n    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);\n  },\n\n  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {\n    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');\n    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \\'div\\', pass ' + 'React.createElement(\\'div\\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :\n    // Check if it quacks like an element\n    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \\'div\\', pass ' + 'React.createElement(\\'div\\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;\n\n    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;\n\n    var nextWrappedElement = ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);\n\n    var nextContext;\n    if (parentComponent) {\n      var parentInst = ReactInstanceMap.get(parentComponent);\n      nextContext = parentInst._processChildContext(parentInst._context);\n    } else {\n      nextContext = emptyObject;\n    }\n\n    var prevComponent = getTopLevelWrapperInContainer(container);\n\n    if (prevComponent) {\n      var prevWrappedElement = prevComponent._currentElement;\n      var prevElement = prevWrappedElement.props;\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {\n        var publicInst = prevComponent._renderedComponent.getPublicInstance();\n        var updatedCallback = callback && function () {\n          callback.call(publicInst);\n        };\n        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);\n        return publicInst;\n      } else {\n        ReactMount.unmountComponentAtNode(container);\n      }\n    }\n\n    var reactRootElement = getReactRootElementInContainer(container);\n    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);\n    var containerHasNonRootReactChild = hasNonRootReactChild(container);\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;\n\n      if (!containerHasReactMarkup || reactRootElement.nextSibling) {\n        var rootElementSibling = reactRootElement;\n        while (rootElementSibling) {\n          if (internalGetID(rootElementSibling)) {\n            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;\n            break;\n          }\n          rootElementSibling = rootElementSibling.nextSibling;\n        }\n      }\n    }\n\n    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;\n    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();\n    if (callback) {\n      callback.call(component);\n    }\n    return component;\n  },\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactElement} nextElement Component element to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  render: function (nextElement, container, callback) {\n    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);\n  },\n\n  /**\n   * Unmounts and destroys the React component rendered in the `container`.\n   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode\n   *\n   * @param {DOMElement} container DOM element containing a React component.\n   * @return {boolean} True if a component was found in and unmounted from\n   *                   `container`\n   */\n  unmountComponentAtNode: function (container) {\n    // Various parts of our code (such as ReactCompositeComponent's\n    // _renderValidatedComponent) assume that calls to render aren't nested;\n    // verify that that's the case. (Strictly speaking, unmounting won't cause a\n    // render but we still don't expect to be in a render call here.)\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;\n\n    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;\n    }\n\n    var prevComponent = getTopLevelWrapperInContainer(container);\n    if (!prevComponent) {\n      // Check if the node being unmounted was rendered by React, but isn't a\n      // root node.\n      var containerHasNonRootReactChild = hasNonRootReactChild(container);\n\n      // Check if the container itself is a React root node.\n      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);\n\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;\n      }\n\n      return false;\n    }\n    delete instancesByReactRootID[prevComponent._instance.rootID];\n    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);\n    return true;\n  },\n\n  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {\n    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;\n\n    if (shouldReuseMarkup) {\n      var rootElement = getReactRootElementInContainer(container);\n      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {\n        ReactDOMComponentTree.precacheNode(instance, rootElement);\n        return;\n      } else {\n        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n\n        var rootMarkup = rootElement.outerHTML;\n        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);\n\n        var normalizedMarkup = markup;\n        if (process.env.NODE_ENV !== 'production') {\n          // because rootMarkup is retrieved from the DOM, various normalizations\n          // will have occurred which will not be present in `markup`. Here,\n          // insert markup into a <div> or <iframe> depending on the container\n          // type to perform the same normalizations before comparing.\n          var normalizer;\n          if (container.nodeType === ELEMENT_NODE_TYPE) {\n            normalizer = document.createElement('div');\n            normalizer.innerHTML = markup;\n            normalizedMarkup = normalizer.innerHTML;\n          } else {\n            normalizer = document.createElement('iframe');\n            document.body.appendChild(normalizer);\n            normalizer.contentDocument.write(markup);\n            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;\n            document.body.removeChild(normalizer);\n          }\n        }\n\n        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);\n        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);\n\n        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\\n%s', difference) : _prodInvariant('42', difference) : void 0;\n\n        if (process.env.NODE_ENV !== 'production') {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\\n%s', difference) : void 0;\n        }\n      }\n    }\n\n    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\\'re trying to render a component to the document but you didn\\'t use server rendering. We can\\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;\n\n    if (transaction.useCreateElement) {\n      while (container.lastChild) {\n        container.removeChild(container.lastChild);\n      }\n      DOMLazyTree.insertTreeBefore(container, markup, null);\n    } else {\n      setInnerHTML(container, markup);\n      ReactDOMComponentTree.precacheNode(instance, container.firstChild);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);\n      if (hostNode._debugID !== 0) {\n        ReactInstrumentation.debugTool.onHostOperation(hostNode._debugID, 'mount', markup.toString());\n      }\n    }\n  }\n};\n\nmodule.exports = ReactMount;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMContainerInfo\n */\n\n'use strict';\n\nvar validateDOMNesting = require('./validateDOMNesting');\n\nvar DOC_NODE_TYPE = 9;\n\nfunction ReactDOMContainerInfo(topLevelWrapper, node) {\n  var info = {\n    _topLevelWrapper: topLevelWrapper,\n    _idCounter: 1,\n    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,\n    _node: node,\n    _tag: node ? node.nodeName.toLowerCase() : null,\n    _namespaceURI: node ? node.namespaceURI : null\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;\n  }\n  return info;\n}\n\nmodule.exports = ReactDOMContainerInfo;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMFeatureFlags\n */\n\n'use strict';\n\nvar ReactDOMFeatureFlags = {\n  useCreateElement: true\n};\n\nmodule.exports = ReactDOMFeatureFlags;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMarkupChecksum\n */\n\n'use strict';\n\nvar adler32 = require('./adler32');\n\nvar TAG_END = /\\/?>/;\nvar COMMENT_START = /^<\\!\\-\\-/;\n\nvar ReactMarkupChecksum = {\n  CHECKSUM_ATTR_NAME: 'data-react-checksum',\n\n  /**\n   * @param {string} markup Markup string\n   * @return {string} Markup string with checksum attribute attached\n   */\n  addChecksumToMarkup: function (markup) {\n    var checksum = adler32(markup);\n\n    // Add checksum (handle both parent tags, comments and self-closing tags)\n    if (COMMENT_START.test(markup)) {\n      return markup;\n    } else {\n      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"' + checksum + '\"$&');\n    }\n  },\n\n  /**\n   * @param {string} markup to use\n   * @param {DOMElement} element root React element\n   * @returns {boolean} whether or not the markup is the same\n   */\n  canReuseMarkup: function (markup, element) {\n    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);\n    var markupChecksum = adler32(markup);\n    return markupChecksum === existingChecksum;\n  }\n};\n\nmodule.exports = ReactMarkupChecksum;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule adler32\n * \n */\n\n'use strict';\n\nvar MOD = 65521;\n\n// adler32 is not cryptographically strong, and is only used to sanity check that\n// markup generated on the server matches the markup generated on the client.\n// This implementation (a modified version of the SheetJS version) has been optimized\n// for our use case, at the expense of conforming to the adler32 specification\n// for non-ascii inputs.\nfunction adler32(data) {\n  var a = 1;\n  var b = 0;\n  var i = 0;\n  var l = data.length;\n  var m = l & ~0x3;\n  while (i < m) {\n    var n = Math.min(i + 4096, m);\n    for (; i < n; i += 4) {\n      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));\n    }\n    a %= MOD;\n    b %= MOD;\n  }\n  for (; i < l; i++) {\n    b += a += data.charCodeAt(i);\n  }\n  a %= MOD;\n  b %= MOD;\n  return a | b << 16;\n}\n\nmodule.exports = adler32;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule findDOMNode\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactInstanceMap = require('./ReactInstanceMap');\n\nvar getHostComponentFromComposite = require('./getHostComponentFromComposite');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Returns the DOM node rendered by this element.\n *\n * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode\n *\n * @param {ReactComponent|DOMElement} componentOrElement\n * @return {?DOMElement} The root node of this element.\n */\nfunction findDOMNode(componentOrElement) {\n  if (process.env.NODE_ENV !== 'production') {\n    var owner = ReactCurrentOwner.current;\n    if (owner !== null) {\n      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;\n      owner._warnedAboutRefsInRender = true;\n    }\n  }\n  if (componentOrElement == null) {\n    return null;\n  }\n  if (componentOrElement.nodeType === 1) {\n    return componentOrElement;\n  }\n\n  var inst = ReactInstanceMap.get(componentOrElement);\n  if (inst) {\n    inst = getHostComponentFromComposite(inst);\n    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;\n  }\n\n  if (typeof componentOrElement.render === 'function') {\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;\n  } else {\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;\n  }\n}\n\nmodule.exports = findDOMNode;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getHostComponentFromComposite\n */\n\n'use strict';\n\nvar ReactNodeTypes = require('./ReactNodeTypes');\n\nfunction getHostComponentFromComposite(inst) {\n  var type;\n\n  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {\n    inst = inst._renderedComponent;\n  }\n\n  if (type === ReactNodeTypes.HOST) {\n    return inst._renderedComponent;\n  } else if (type === ReactNodeTypes.EMPTY) {\n    return null;\n  }\n}\n\nmodule.exports = getHostComponentFromComposite;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n* @providesModule renderSubtreeIntoContainer\n*/\n\n'use strict';\n\nvar ReactMount = require('./ReactMount');\n\nmodule.exports = ReactMount.renderSubtreeIntoContainer;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMUnknownPropertyHook\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar EventPluginRegistry = require('./EventPluginRegistry');\nvar ReactComponentTreeHook = require('./ReactComponentTreeHook');\n\nvar warning = require('fbjs/lib/warning');\n\nif (process.env.NODE_ENV !== 'production') {\n  var reactProps = {\n    children: true,\n    dangerouslySetInnerHTML: true,\n    key: true,\n    ref: true,\n\n    autoFocus: true,\n    defaultValue: true,\n    valueLink: true,\n    defaultChecked: true,\n    checkedLink: true,\n    innerHTML: true,\n    suppressContentEditableWarning: true,\n    onFocusIn: true,\n    onFocusOut: true\n  };\n  var warnedProperties = {};\n\n  var validateProperty = function (tagName, name, debugID) {\n    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {\n      return true;\n    }\n    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {\n      return true;\n    }\n    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {\n      return true;\n    }\n    warnedProperties[name] = true;\n    var lowerCasedName = name.toLowerCase();\n\n    // data-* attributes should be lowercase; suggest the lowercase version\n    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;\n\n    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;\n\n    if (standardName != null) {\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n      return true;\n    } else if (registrationName != null) {\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n      return true;\n    } else {\n      // We were unable to guess which prop the user intended.\n      // It is likely that the user was just blindly spreading/forwarding props\n      // Components should be careful to only render valid props/attributes.\n      // Warning will be invoked in warnUnknownProperties to allow grouping.\n      return false;\n    }\n  };\n}\n\nvar warnUnknownProperties = function (debugID, element) {\n  var unknownProps = [];\n  for (var key in element.props) {\n    var isValid = validateProperty(element.type, key, debugID);\n    if (!isValid) {\n      unknownProps.push(key);\n    }\n  }\n\n  var unknownPropString = unknownProps.map(function (prop) {\n    return '`' + prop + '`';\n  }).join(', ');\n\n  if (unknownProps.length === 1) {\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n  } else if (unknownProps.length > 1) {\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n  }\n};\n\nfunction handleElement(debugID, element) {\n  if (element == null || typeof element.type !== 'string') {\n    return;\n  }\n  if (element.type.indexOf('-') >= 0 || element.props.is) {\n    return;\n  }\n  warnUnknownProperties(debugID, element);\n}\n\nvar ReactDOMUnknownPropertyHook = {\n  onBeforeMountComponent: function (debugID, element) {\n    handleElement(debugID, element);\n  },\n  onBeforeUpdateComponent: function (debugID, element) {\n    handleElement(debugID, element);\n  }\n};\n\nmodule.exports = ReactDOMUnknownPropertyHook;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMNullInputValuePropHook\n */\n\n'use strict';\n\nvar ReactComponentTreeHook = require('./ReactComponentTreeHook');\n\nvar warning = require('fbjs/lib/warning');\n\nvar didWarnValueNull = false;\n\nfunction handleElement(debugID, element) {\n  if (element == null) {\n    return;\n  }\n  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {\n    return;\n  }\n  if (element.props != null && element.props.value === null && !didWarnValueNull) {\n    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;\n\n    didWarnValueNull = true;\n  }\n}\n\nvar ReactDOMNullInputValuePropHook = {\n  onBeforeMountComponent: function (debugID, element) {\n    handleElement(debugID, element);\n  },\n  onBeforeUpdateComponent: function (debugID, element) {\n    handleElement(debugID, element);\n  }\n};\n\nmodule.exports = ReactDOMNullInputValuePropHook;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentWithPureRenderMixin\n */\n\n'use strict';\n\nvar shallowCompare = require('./shallowCompare');\n\n/**\n * If your React component's render function is \"pure\", e.g. it will render the\n * same result given the same props and state, provide this mixin for a\n * considerable performance boost.\n *\n * Most React components have pure render functions.\n *\n * Example:\n *\n *   var ReactComponentWithPureRenderMixin =\n *     require('ReactComponentWithPureRenderMixin');\n *   React.createClass({\n *     mixins: [ReactComponentWithPureRenderMixin],\n *\n *     render: function() {\n *       return <div className={this.props.className}>foo</div>;\n *     }\n *   });\n *\n * Note: This only checks shallow equality for props and state. If these contain\n * complex data structures this mixin may have false-negatives for deeper\n * differences. Only mixin to components which have simple props and state, or\n * use `forceUpdate()` when you know deep data structures have changed.\n *\n * See https://facebook.github.io/react/docs/pure-render-mixin.html\n */\nvar ReactComponentWithPureRenderMixin = {\n  shouldComponentUpdate: function (nextProps, nextState) {\n    return shallowCompare(this, nextProps, nextState);\n  }\n};\n\nmodule.exports = ReactComponentWithPureRenderMixin;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n* @providesModule shallowCompare\n*/\n\n'use strict';\n\nvar shallowEqual = require('fbjs/lib/shallowEqual');\n\n/**\n * Does a shallow comparison for props and state.\n * See ReactComponentWithPureRenderMixin\n * See also https://facebook.github.io/react/docs/shallow-compare.html\n */\nfunction shallowCompare(instance, nextProps, nextState) {\n  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);\n}\n\nmodule.exports = shallowCompare;","exports.name = \"object-assign\";\nexports.version = \"4.1.0\";\n","'use strict';\n/* eslint-disable no-unused-vars */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (e) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (Object.getOwnPropertySymbols) {\n\t\t\tsymbols = Object.getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  (function () {\n    var printWarning = function printWarning(format) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch (x) {}\n    };\n\n    warning = function warning(condition, format) {\n      if (format === undefined) {\n        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n      }\n\n      if (format.indexOf('Failed Composite propType: ') === 0) {\n        return; // Ignore CompositeComponent proptype check.\n      }\n\n      if (!condition) {\n        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n          args[_key2 - 2] = arguments[_key2];\n        }\n\n        printWarning.apply(undefined, [format].concat(args));\n      }\n    };\n  })();\n}\n\nmodule.exports = warning;","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n */\n\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nvar emptyFunction = function emptyFunction() {};\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar emptyObject = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  Object.freeze(emptyObject);\n}\n\nmodule.exports = emptyObject;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\n\n/**\n * Constructs an enumeration with keys equal to their value.\n *\n * For example:\n *\n *   var COLORS = keyMirror({blue: null, red: null});\n *   var myColor = COLORS.blue;\n *   var isColorValid = !!COLORS[myColor];\n *\n * The last line could not be performed if the values of the generated enum were\n * not equal to their keys.\n *\n *   Input:  {key1: val1, key2: val2}\n *   Output: {key1: key1, key2: key2}\n *\n * @param {object} obj\n * @return {object}\n */\nvar keyMirror = function keyMirror(obj) {\n  var ret = {};\n  var key;\n  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;\n  for (key in obj) {\n    if (!obj.hasOwnProperty(key)) {\n      continue;\n    }\n    ret[key] = key;\n  }\n  return ret;\n};\n\nmodule.exports = keyMirror;","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n/**\n * Allows extraction of a minified key. Let's the build system minify keys\n * without losing the ability to dynamically use key strings as values\n * themselves. Pass in an object with a single key/val pair and it will return\n * you the string key of that single record. Suppose you want to grab the\n * value for a key 'className' inside of an object. Key/val minification may\n * have aliased that key to be 'xa12'. keyOf({className: null}) will return\n * 'xa12' in that case. Resolve keys you want to use once at startup time, then\n * reuse those resolutions.\n */\nvar keyOf = function keyOf(oneKeyObj) {\n  var key;\n  for (key in oneKeyObj) {\n    if (!oneKeyObj.hasOwnProperty(key)) {\n      continue;\n    }\n    return key;\n  }\n  return null;\n};\n\nmodule.exports = keyOf;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n\n/**\n * Simple, lightweight module assisting with the detection and context of\n * Worker. Helps avoid circular dependencies and allows code to reason about\n * whether or not they are in a Worker, even if they never include the main\n * `ReactWorker` dependency.\n */\nvar ExecutionEnvironment = {\n\n  canUseDOM: canUseDOM,\n\n  canUseWorkers: typeof Worker !== 'undefined',\n\n  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),\n\n  canUseViewport: canUseDOM && !!window.screen,\n\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\n\n};\n\nmodule.exports = ExecutionEnvironment;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n */\n\nvar performance = require('./performance');\n\nvar performanceNow;\n\n/**\n * Detect if we can use `window.performance.now()` and gracefully fallback to\n * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now\n * because of Facebook's testing infrastructure.\n */\nif (performance.now) {\n  performanceNow = function performanceNow() {\n    return performance.now();\n  };\n} else {\n  performanceNow = function performanceNow() {\n    return Date.now();\n  };\n}\n\nmodule.exports = performanceNow;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar performance;\n\nif (ExecutionEnvironment.canUseDOM) {\n  performance = window.performance || window.msPerformance || window.webkitPerformance;\n}\n\nmodule.exports = performance || {};","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n */\n\n/*eslint-disable fb-www/unsafe-html*/\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar createArrayFromMixed = require('./createArrayFromMixed');\nvar getMarkupWrap = require('./getMarkupWrap');\nvar invariant = require('./invariant');\n\n/**\n * Dummy container used to render all markup.\n */\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Pattern used by `getNodeName`.\n */\nvar nodeNamePattern = /^\\s*<(\\w+)/;\n\n/**\n * Extracts the `nodeName` of the first element in a string of markup.\n *\n * @param {string} markup String of markup.\n * @return {?string} Node name of the supplied markup.\n */\nfunction getNodeName(markup) {\n  var nodeNameMatch = markup.match(nodeNamePattern);\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\n}\n\n/**\n * Creates an array containing the nodes rendered from the supplied markup. The\n * optionally supplied `handleScript` function will be invoked once for each\n * <script> element that is rendered. If no `handleScript` function is supplied,\n * an exception is thrown if any <script> elements are rendered.\n *\n * @param {string} markup A string of valid HTML markup.\n * @param {?function} handleScript Invoked once for each rendered <script>.\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\n */\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node = dummyNode;\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;\n  var nodeName = getNodeName(markup);\n\n  var wrap = nodeName && getMarkupWrap(nodeName);\n  if (wrap) {\n    node.innerHTML = wrap[1] + markup + wrap[2];\n\n    var wrapDepth = wrap[0];\n    while (wrapDepth--) {\n      node = node.lastChild;\n    }\n  } else {\n    node.innerHTML = markup;\n  }\n\n  var scripts = node.getElementsByTagName('script');\n  if (scripts.length) {\n    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;\n    createArrayFromMixed(scripts).forEach(handleScript);\n  }\n\n  var nodes = Array.from(node.childNodes);\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n  return nodes;\n}\n\nmodule.exports = createNodesFromMarkup;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n */\n\nvar invariant = require('./invariant');\n\n/**\n * Convert array-like objects to arrays.\n *\n * This API assumes the caller knows the contents of the data type. For less\n * well defined inputs use createArrayFromMixed.\n *\n * @param {object|function|filelist} obj\n * @return {array}\n */\nfunction toArray(obj) {\n  var length = obj.length;\n\n  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList\n  // in old versions of Safari).\n  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;\n\n  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;\n\n  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;\n\n  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;\n\n  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs\n  // without method will throw during the slice call and skip straight to the\n  // fallback.\n  if (obj.hasOwnProperty) {\n    try {\n      return Array.prototype.slice.call(obj);\n    } catch (e) {\n      // IE < 9 does not support Array#slice on collections objects\n    }\n  }\n\n  // Fall back to copying key by key. This assumes all keys have a value,\n  // so will not preserve sparsely populated inputs.\n  var ret = Array(length);\n  for (var ii = 0; ii < length; ii++) {\n    ret[ii] = obj[ii];\n  }\n  return ret;\n}\n\n/**\n * Perform a heuristic test to determine if an object is \"array-like\".\n *\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\n *   Joshu replied: \"Mu.\"\n *\n * This function determines if its argument has \"array nature\": it returns\n * true if the argument is an actual array, an `arguments' object, or an\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\n *\n * It will return false for other array-like objects like Filelist.\n *\n * @param {*} obj\n * @return {boolean}\n */\nfunction hasArrayNature(obj) {\n  return (\n    // not null/false\n    !!obj && (\n    // arrays are objects, NodeLists are functions in Safari\n    typeof obj == 'object' || typeof obj == 'function') &&\n    // quacks like an array\n    'length' in obj &&\n    // not window\n    !('setInterval' in obj) &&\n    // no DOM node should be considered an array-like\n    // a 'select' element has 'length' and 'item' properties on IE8\n    typeof obj.nodeType != 'number' && (\n    // a real array\n    Array.isArray(obj) ||\n    // arguments\n    'callee' in obj ||\n    // HTMLCollection/NodeList\n    'item' in obj)\n  );\n}\n\n/**\n * Ensure that the argument is an array by wrapping it in an array if it is not.\n * Creates a copy of the argument if it is already an array.\n *\n * This is mostly useful idiomatically:\n *\n *   var createArrayFromMixed = require('createArrayFromMixed');\n *\n *   function takesOneOrMoreThings(things) {\n *     things = createArrayFromMixed(things);\n *     ...\n *   }\n *\n * This allows you to treat `things' as an array, but accept scalars in the API.\n *\n * If you need to convert an array-like object, like `arguments`, into an array\n * use toArray instead.\n *\n * @param {*} obj\n * @return {array}\n */\nfunction createArrayFromMixed(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  } else if (Array.isArray(obj)) {\n    return obj.slice();\n  } else {\n    return toArray(obj);\n  }\n}\n\nmodule.exports = createArrayFromMixed;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n/*eslint-disable fb-www/unsafe-html */\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar invariant = require('./invariant');\n\n/**\n * Dummy container used to detect which wraps are necessary.\n */\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Some browsers cannot use `innerHTML` to render certain elements standalone,\n * so we wrap them, render the wrapped nodes, then extract the desired node.\n *\n * In IE8, certain elements cannot render alone, so wrap all elements ('*').\n */\n\nvar shouldWrap = {};\n\nvar selectWrap = [1, '<select multiple=\"true\">', '</select>'];\nvar tableWrap = [1, '<table>', '</table>'];\nvar trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nvar svgWrap = [1, '<svg xmlns=\"http://www.w3.org/2000/svg\">', '</svg>'];\n\nvar markupWrap = {\n  '*': [1, '?<div>', '</div>'],\n\n  'area': [1, '<map>', '</map>'],\n  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],\n  'legend': [1, '<fieldset>', '</fieldset>'],\n  'param': [1, '<object>', '</object>'],\n  'tr': [2, '<table><tbody>', '</tbody></table>'],\n\n  'optgroup': selectWrap,\n  'option': selectWrap,\n\n  'caption': tableWrap,\n  'colgroup': tableWrap,\n  'tbody': tableWrap,\n  'tfoot': tableWrap,\n  'thead': tableWrap,\n\n  'td': trWrap,\n  'th': trWrap\n};\n\n// Initialize the SVG elements since we know they'll always need to be wrapped\n// consistently. If they are created inside a <div> they will be initialized in\n// the wrong namespace (and will not display).\nvar svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];\nsvgElements.forEach(function (nodeName) {\n  markupWrap[nodeName] = svgWrap;\n  shouldWrap[nodeName] = true;\n});\n\n/**\n * Gets the markup wrap configuration for the supplied `nodeName`.\n *\n * NOTE: This lazily detects which wraps are necessary for the current browser.\n *\n * @param {string} nodeName Lowercase `nodeName`.\n * @return {?array} Markup wrap configuration, if applicable.\n */\nfunction getMarkupWrap(nodeName) {\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;\n  if (!markupWrap.hasOwnProperty(nodeName)) {\n    nodeName = '*';\n  }\n  if (!shouldWrap.hasOwnProperty(nodeName)) {\n    if (nodeName === '*') {\n      dummyNode.innerHTML = '<link />';\n    } else {\n      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';\n    }\n    shouldWrap[nodeName] = !dummyNode.firstChild;\n  }\n  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;\n}\n\nmodule.exports = getMarkupWrap;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\n/**\n * @param {DOMElement} node input/textarea to focus\n */\n\nfunction focusNode(node) {\n  // IE8 can throw \"Can't move focus to the control because it is invisible,\n  // not enabled, or of a type that does not accept the focus.\" for all kinds of\n  // reasons that are too expensive and fragile to test.\n  try {\n    node.focus();\n  } catch (e) {}\n}\n\nmodule.exports = focusNode;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n */\n\n'use strict';\n\nvar camelize = require('./camelize');\n\nvar msPattern = /^-ms-/;\n\n/**\n * Camelcases a hyphenated CSS property name, for example:\n *\n *   > camelizeStyleName('background-color')\n *   < \"backgroundColor\"\n *   > camelizeStyleName('-moz-transition')\n *   < \"MozTransition\"\n *   > camelizeStyleName('-ms-transition')\n *   < \"msTransition\"\n *\n * As Andi Smith suggests\n * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n * is converted to lowercase `ms`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction camelizeStyleName(string) {\n  return camelize(string.replace(msPattern, 'ms-'));\n}\n\nmodule.exports = camelizeStyleName;","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n */\n\nvar _hyphenPattern = /-(.)/g;\n\n/**\n * Camelcases a hyphenated string, for example:\n *\n *   > camelize('background-color')\n *   < \"backgroundColor\"\n *\n * @param {string} string\n * @return {string}\n */\nfunction camelize(string) {\n  return string.replace(_hyphenPattern, function (_, character) {\n    return character.toUpperCase();\n  });\n}\n\nmodule.exports = camelize;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n */\n\n'use strict';\n\nvar hyphenate = require('./hyphenate');\n\nvar msPattern = /^ms-/;\n\n/**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenateStyleName(string) {\n  return hyphenate(string).replace(msPattern, '-ms-');\n}\n\nmodule.exports = hyphenateStyleName;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n */\n\nvar _uppercasePattern = /([A-Z])/g;\n\n/**\n * Hyphenates a camelcased string, for example:\n *\n *   > hyphenate('backgroundColor')\n *   < \"background-color\"\n *\n * For CSS style names, use `hyphenateStyleName` instead which works properly\n * with all vendor prefixes, including `ms`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenate(string) {\n  return string.replace(_uppercasePattern, '-$1').toLowerCase();\n}\n\nmodule.exports = hyphenate;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * Memoizes the return value of a function that accepts one string argument.\n */\n\nfunction memoizeStringOnly(callback) {\n  var cache = {};\n  return function (string) {\n    if (!cache.hasOwnProperty(string)) {\n      cache[string] = callback.call(this, string);\n    }\n    return cache[string];\n  };\n}\n\nmodule.exports = memoizeStringOnly;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n * \n */\n\n/*eslint-disable no-self-compare */\n\n'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Added the nonzero y check to make Flow happy, but it is redundant\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n  }\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = shallowEqual;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @typechecks\n */\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function listen(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function remove() {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function remove() {\n          target.detachEvent('on' + eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function capture(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function remove() {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\n      }\n      return {\n        remove: emptyFunction\n      };\n    }\n  },\n\n  registerDefault: function registerDefault() {}\n};\n\nmodule.exports = EventListener;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n */\n\n'use strict';\n\n/**\n * Gets the scroll position of the supplied element or window.\n *\n * The return values are unbounded, unlike `getScrollPosition`. This means they\n * may be negative or exceed the element boundaries (which is possible using\n * inertial scrolling).\n *\n * @param {DOMWindow|DOMElement} scrollable\n * @return {object} Map with `x` and `y` keys.\n */\n\nfunction getUnboundedScrollPosition(scrollable) {\n  if (scrollable === window) {\n    return {\n      x: window.pageXOffset || document.documentElement.scrollLeft,\n      y: window.pageYOffset || document.documentElement.scrollTop\n    };\n  }\n  return {\n    x: scrollable.scrollLeft,\n    y: scrollable.scrollTop\n  };\n}\n\nmodule.exports = getUnboundedScrollPosition;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n */\n\nvar isTextNode = require('./isTextNode');\n\n/*eslint-disable no-bitwise */\n\n/**\n * Checks if a given DOM node contains or is another DOM node.\n */\nfunction containsNode(outerNode, innerNode) {\n  if (!outerNode || !innerNode) {\n    return false;\n  } else if (outerNode === innerNode) {\n    return true;\n  } else if (isTextNode(outerNode)) {\n    return false;\n  } else if (isTextNode(innerNode)) {\n    return containsNode(outerNode, innerNode.parentNode);\n  } else if ('contains' in outerNode) {\n    return outerNode.contains(innerNode);\n  } else if (outerNode.compareDocumentPosition) {\n    return !!(outerNode.compareDocumentPosition(innerNode) & 16);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = containsNode;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n */\n\nvar isNode = require('./isNode');\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM text node.\n */\nfunction isTextNode(object) {\n  return isNode(object) && object.nodeType == 3;\n}\n\nmodule.exports = isTextNode;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n */\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM node.\n */\nfunction isNode(object) {\n  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));\n}\n\nmodule.exports = isNode;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n */\n\n/* eslint-disable fb-www/typeof-undefined */\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n */\nfunction getActiveElement() /*?DOMElement*/{\n  if (typeof document === 'undefined') {\n    return null;\n  }\n  try {\n    return document.activeElement || document.body;\n  } catch (e) {\n    return document.body;\n  }\n}\n\nmodule.exports = getActiveElement;","exports.name = \"react-dom\";\nexports.version = \"15.3.2\";\nexports.main = \"index.js\";\n","'use strict';\n\nmodule.exports = require('react/lib/ReactDOM');\n","exports.name = \"react-addons-pure-render-mixin\";\nexports.version = \"15.3.2\";\nexports.main = \"index.js\";\n","module.exports = require('react/lib/ReactComponentWithPureRenderMixin');"]}}]