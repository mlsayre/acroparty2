[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/amdingo_textillate-js/packages/amdingo_textillate-js.js                                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n(function () {                                                                                                      // 1\n                                                                                                                    // 2\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                           //     // 4\n// packages/amdingo:textillate-js/amdingo:textillate-js.js                                                   //     // 5\n//                                                                                                           //     // 6\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                             //     // 8\n// Write your package code here!                                                                             // 1   // 9\njquery.textillate.registerHelper('initTextillate', function() {                                              // 2   // 10\n    Meteor.defer(function() {                                                                                // 3   // 11\n        $(document).textillate();                                                                            // 4   // 12\n    });                                                                                                      // 5   // 13\n});                                                                                                          // 6   // 14\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 15\n                                                                                                                    // 16\n}).call(this);                                                                                                      // 17\n                                                                                                                    // 18\n                                                                                                                    // 19\n                                                                                                                    // 20\n                                                                                                                    // 21\n                                                                                                                    // 22\n                                                                                                                    // 23\n(function () {                                                                                                      // 24\n                                                                                                                    // 25\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 26\n//                                                                                                           //     // 27\n// packages/amdingo:textillate-js/js/jquery.textillate.js                                                    //     // 28\n//                                                                                                           //     // 29\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 30\n                                                                                                             //     // 31\n/*                                                                                                           // 1   // 32\n * textillate.js                                                                                             // 2   // 33\n * http://jschr.github.com/textillate                                                                        // 3   // 34\n * MIT licensed                                                                                              // 4   // 35\n *                                                                                                           // 5   // 36\n * Copyright (C) 2012-2013 Jordan Schroter                                                                   // 6   // 37\n */                                                                                                          // 7   // 38\n                                                                                                             // 8   // 39\n(function ($) {                                                                                              // 9   // 40\n    \"use strict\";                                                                                            // 10  // 41\n                                                                                                             // 11  // 42\n    function isInEffect (effect) {                                                                           // 12  // 43\n        return /In/.test(effect) || $.inArray(effect, $.fn.textillate.defaults.inEffects) >= 0;              // 13  // 44\n    };                                                                                                       // 14  // 45\n                                                                                                             // 15  // 46\n    function isOutEffect (effect) {                                                                          // 16  // 47\n        return /Out/.test(effect) || $.inArray(effect, $.fn.textillate.defaults.outEffects) >= 0;            // 17  // 48\n    };                                                                                                       // 18  // 49\n                                                                                                             // 19  // 50\n    // custom get data api method                                                                            // 20  // 51\n    function getData (node) {                                                                                // 21  // 52\n        var attrs = node.attributes || []                                                                    // 22  // 53\n            , data = {};                                                                                     // 23  // 54\n                                                                                                             // 24  // 55\n        if (!attrs.length) return data;                                                                      // 25  // 56\n                                                                                                             // 26  // 57\n        $.each(attrs, function (i, attr) {                                                                   // 27  // 58\n            if (/^data-in-*/.test(attr.nodeName)) {                                                          // 28  // 59\n                data.in = data.in || {};                                                                     // 29  // 60\n                data.in[attr.nodeName.replace(/data-in-/, '')] = attr.nodeValue;                             // 30  // 61\n            } else if (/^data-out-*/.test(attr.nodeName)) {                                                  // 31  // 62\n                data.out = data.out || {};                                                                   // 32  // 63\n                data.out[attr.nodeName.replace(/data-out-/, '')] = attr.nodeValue;                           // 33  // 64\n            } else if (/^data-*/.test(attr.nodeName)) {                                                      // 34  // 65\n                data[attr.nodeName] = attr.nodeValue;                                                        // 35  // 66\n            }                                                                                                // 36  // 67\n        })                                                                                                   // 37  // 68\n                                                                                                             // 38  // 69\n        return data;                                                                                         // 39  // 70\n    }                                                                                                        // 40  // 71\n                                                                                                             // 41  // 72\n    function shuffle (o) {                                                                                   // 42  // 73\n        for (var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x); // 43  // 74\n        return o;                                                                                            // 44  // 75\n    }                                                                                                        // 45  // 76\n                                                                                                             // 46  // 77\n    function animate ($c, effect, cb) {                                                                      // 47  // 78\n        $c.addClass('animated ' + effect)                                                                    // 48  // 79\n            .css('visibility', 'visible')                                                                    // 49  // 80\n            .show();                                                                                         // 50  // 81\n                                                                                                             // 51  // 82\n        $c.one('animationend webkitAnimationEnd oAnimationEnd', function () {                                // 52  // 83\n            $c.removeClass('animated ' + effect);                                                            // 53  // 84\n            cb && cb();                                                                                      // 54  // 85\n        });                                                                                                  // 55  // 86\n    }                                                                                                        // 56  // 87\n                                                                                                             // 57  // 88\n    function animateChars ($chars, options, cb) {                                                            // 58  // 89\n        var that = this                                                                                      // 59  // 90\n            , count = $chars.length;                                                                         // 60  // 91\n                                                                                                             // 61  // 92\n        if (!count) {                                                                                        // 62  // 93\n            cb && cb();                                                                                      // 63  // 94\n            return;                                                                                          // 64  // 95\n        }                                                                                                    // 65  // 96\n                                                                                                             // 66  // 97\n        if (options.shuffle) $chars = shuffle($chars);                                                       // 67  // 98\n        if (options.reverse) $chars = $chars.toArray().reverse();                                            // 68  // 99\n                                                                                                             // 69  // 100\n        $.each($chars, function (i, c) {                                                                     // 70  // 101\n            var $char = $(c);                                                                                // 71  // 102\n                                                                                                             // 72  // 103\n            function complete () {                                                                           // 73  // 104\n                if (isInEffect(options.effect)) {                                                            // 74  // 105\n                    $char.css('visibility', 'visible');                                                      // 75  // 106\n                } else if (isOutEffect(options.effect)) {                                                    // 76  // 107\n                    $char.css('visibility', 'hidden');                                                       // 77  // 108\n                }                                                                                            // 78  // 109\n                count -= 1;                                                                                  // 79  // 110\n                if (!count && cb) cb();                                                                      // 80  // 111\n            }                                                                                                // 81  // 112\n                                                                                                             // 82  // 113\n            var delay = options.sync ? options.delay : options.delay * i * options.delayScale;               // 83  // 114\n                                                                                                             // 84  // 115\n            $char.text() ?                                                                                   // 85  // 116\n                setTimeout(function () { animate($char, options.effect, complete) }, delay) :                // 86  // 117\n                complete();                                                                                  // 87  // 118\n        });                                                                                                  // 88  // 119\n    };                                                                                                       // 89  // 120\n                                                                                                             // 90  // 121\n    var Textillate = function (element, options) {                                                           // 91  // 122\n        var base = this                                                                                      // 92  // 123\n            , $element = $(element);                                                                         // 93  // 124\n                                                                                                             // 94  // 125\n        base.init = function () {                                                                            // 95  // 126\n            base.$texts = $element.find(options.selector);                                                   // 96  // 127\n                                                                                                             // 97  // 128\n            if (!base.$texts.length) {                                                                       // 98  // 129\n                base.$texts = $('<ul class=\"texts\"><li>' + $element.html() + '</li></ul>');                  // 99  // 130\n                $element.html(base.$texts);                                                                  // 100\n            }                                                                                                // 101\n                                                                                                             // 102\n            base.$texts.hide();                                                                              // 103\n                                                                                                             // 104\n            base.$current = $('<span>')                                                                      // 105\n                .text(base.$texts.find(':first-child').html())                                               // 106\n                .prependTo($element);                                                                        // 107\n                                                                                                             // 108\n            if (isInEffect(options.effect)) {                                                                // 109\n                base.$current.css('visibility', 'hidden');                                                   // 110\n            } else if (isOutEffect(options.effect)) {                                                        // 111\n                base.$current.css('visibility', 'visible');                                                  // 112\n            }                                                                                                // 113\n                                                                                                             // 114\n            base.setOptions(options);                                                                        // 115\n                                                                                                             // 116\n            setTimeout(function () {                                                                         // 117\n                base.options.autoStart && base.start();                                                      // 118\n            }, base.options.initialDelay)                                                                    // 119\n        };                                                                                                   // 120\n                                                                                                             // 121\n        base.setOptions = function (options) {                                                               // 122\n            base.options = options;                                                                          // 123\n        };                                                                                                   // 124\n                                                                                                             // 125\n        base.triggerEvent = function (name) {                                                                // 126\n            var e = $.Event(name + '.tlt', { data: base });                                                  // 127\n            $element.trigger(e);                                                                             // 128\n            return e;                                                                                        // 129\n        };                                                                                                   // 130\n                                                                                                             // 131\n        base.in = function (index, cb) {                                                                     // 132\n            index = index || 0;                                                                              // 133\n                                                                                                             // 134\n            var $elem = base.$texts.find(':nth-child(' + (index + 1) + ')')                                  // 135\n                , options = $.extend({}, base.options, getData($elem))                                       // 136\n                , $chars;                                                                                    // 137\n                                                                                                             // 138\n            base.triggerEvent('inAnimationBegin');                                                           // 139\n                                                                                                             // 140\n            base.$current                                                                                    // 141\n                .text($elem.html())                                                                          // 142\n                .lettering('words');                                                                         // 143\n                                                                                                             // 144\n            base.$current.find('[class^=\"word\"]')                                                            // 145\n                .css({                                                                                       // 146\n                    'display': 'inline-block',                                                               // 147\n                    // fix for poor ios performance                                                          // 148\n                    '-webkit-transform': 'translate3d(0,0,0)',                                               // 149\n                    '-moz-transform': 'translate3d(0,0,0)',                                                  // 150\n                    '-o-transform': 'translate3d(0,0,0)',                                                    // 151\n                    'transform': 'translate3d(0,0,0)'                                                        // 152\n                })                                                                                           // 153\n                .each(function () { $(this).lettering() });                                                  // 154\n                                                                                                             // 155\n            $chars = base.$current                                                                           // 156\n                .find('[class^=\"char\"]')                                                                     // 157\n                .css('display', 'inline-block');                                                             // 158\n                                                                                                             // 159\n            if (isInEffect(options.in.effect)) {                                                             // 160\n                $chars.css('visibility', 'hidden');                                                          // 161\n            } else if (isOutEffect(options.in.effect)) {                                                     // 162\n                $chars.css('visibility', 'visible');                                                         // 163\n            }                                                                                                // 164\n                                                                                                             // 165\n            base.currentIndex = index;                                                                       // 166\n                                                                                                             // 167\n            animateChars($chars, options.in, function () {                                                   // 168\n                base.triggerEvent('inAnimationEnd');                                                         // 169\n                if (options.in.callback) options.in.callback();                                              // 170\n                if (cb) cb(base);                                                                            // 171\n            });                                                                                              // 172\n        };                                                                                                   // 173\n                                                                                                             // 174\n        base.out = function (cb) {                                                                           // 175\n            var $elem = base.$texts.find(':nth-child(' + (base.currentIndex + 1) + ')')                      // 176\n                , $chars = base.$current.find('[class^=\"char\"]')                                             // 177\n                , options = $.extend({}, base.options, getData($elem));                                      // 178\n                                                                                                             // 179\n            base.triggerEvent('outAnimationBegin');                                                          // 180\n                                                                                                             // 181\n            animateChars($chars, options.out, function () {                                                  // 182\n                base.triggerEvent('outAnimationEnd');                                                        // 183\n                if (options.out.callback) options.out.callback();                                            // 184\n                if (cb) cb(base);                                                                            // 185\n            });                                                                                              // 186\n        };                                                                                                   // 187\n                                                                                                             // 188\n        base.start = function (index) {                                                                      // 189\n            base.triggerEvent('start');                                                                      // 190\n                                                                                                             // 191\n            (function run (index) {                                                                          // 192\n                base.in(index, function () {                                                                 // 193\n                    var length = base.$texts.children().length;                                              // 194\n                                                                                                             // 195\n                    index += 1;                                                                              // 196\n                                                                                                             // 197\n                    if (!base.options.loop && index >= length) {                                             // 198\n                        if (base.options.callback) base.options.callback();                                  // 199\n                        base.triggerEvent('end');                                                            // 200\n                    } else {                                                                                 // 201\n                        index = index % length;                                                              // 202\n                                                                                                             // 203\n                        setTimeout(function () {                                                             // 204\n                            base.out(function () {                                                           // 205\n                                run(index)                                                                   // 206\n                            });                                                                              // 207\n                        }, base.options.minDisplayTime);                                                     // 208\n                    }                                                                                        // 209\n                });                                                                                          // 210\n            }(index || 0));                                                                                  // 211\n        };                                                                                                   // 212\n                                                                                                             // 213\n        base.init();                                                                                         // 214\n    }                                                                                                        // 215\n                                                                                                             // 216\n    $.fn.textillate = function (settings, args) {                                                            // 217\n        return this.each(function () {                                                                       // 218\n            var $this = $(this)                                                                              // 219\n                , data = $this.data('textillate')                                                            // 220\n                , options = $.extend(true, {}, $.fn.textillate.defaults, getData(this), typeof settings == 'object' && settings);\n                                                                                                             // 222\n            if (!data) {                                                                                     // 223\n                $this.data('textillate', (data = new Textillate(this, options)));                            // 224\n            } else if (typeof settings == 'string') {                                                        // 225\n                data[settings].apply(data, [].concat(args));                                                 // 226\n            } else {                                                                                         // 227\n                data.setOptions.call(data, options);                                                         // 228\n            }                                                                                                // 229\n        })                                                                                                   // 230\n    };                                                                                                       // 231\n                                                                                                             // 232\n    $.fn.textillate.defaults = {                                                                             // 233\n        selector: '.texts',                                                                                  // 234\n        loop: false,                                                                                         // 235\n        minDisplayTime: 2000,                                                                                // 236\n        initialDelay: 0,                                                                                     // 237\n        in: {                                                                                                // 238\n            effect: 'fadeInLeftBig',                                                                         // 239\n            delayScale: 1.5,                                                                                 // 240\n            delay: 50,                                                                                       // 241\n            sync: false,                                                                                     // 242\n            reverse: false,                                                                                  // 243\n            shuffle: false,                                                                                  // 244\n            callback: function () {}                                                                         // 245\n        },                                                                                                   // 246\n        out: {                                                                                               // 247\n            effect: 'hinge',                                                                                 // 248\n            delayScale: 1.5,                                                                                 // 249\n            delay: 50,                                                                                       // 250\n            sync: false,                                                                                     // 251\n            reverse: false,                                                                                  // 252\n            shuffle: false,                                                                                  // 253\n            callback: function () {}                                                                         // 254\n        },                                                                                                   // 255\n        autoStart: true,                                                                                     // 256\n        inEffects: [],                                                                                       // 257\n        outEffects: [ 'hinge' ],                                                                             // 258\n        callback: function () {}                                                                             // 259\n    };                                                                                                       // 260\n                                                                                                             // 261\n}(jQuery));                                                                                                  // 262\n                                                                                                             // 263\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 295\n                                                                                                                    // 296\n}).call(this);                                                                                                      // 297\n                                                                                                                    // 298\n                                                                                                                    // 299\n                                                                                                                    // 300\n                                                                                                                    // 301\n                                                                                                                    // 302\n                                                                                                                    // 303\n(function () {                                                                                                      // 304\n                                                                                                                    // 305\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 306\n//                                                                                                           //     // 307\n// packages/amdingo:textillate-js/js/lettering.js                                                            //     // 308\n//                                                                                                           //     // 309\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 310\n                                                                                                             //     // 311\n/*global jQuery */                                                                                           // 1   // 312\n/*!\t                                                                                                         // 2   // 313\n * Lettering.JS 0.6.1                                                                                        // 3   // 314\n *                                                                                                           // 4   // 315\n * Copyright 2010, Dave Rupert http://daverupert.com                                                         // 5   // 316\n * Released under the WTFPL license                                                                          // 6   // 317\n * http://sam.zoy.org/wtfpl/                                                                                 // 7   // 318\n *                                                                                                           // 8   // 319\n * Thanks to Paul Irish - http://paulirish.com - for the feedback.                                           // 9   // 320\n *                                                                                                           // 10  // 321\n * Date: Mon Sep 20 17:14:00 2010 -0600                                                                      // 11  // 322\n */                                                                                                          // 12  // 323\n(function($){                                                                                                // 13  // 324\n    function injector(t, splitter, klass, after) {                                                           // 14  // 325\n        var a = t.text().split(splitter), inject = '';                                                       // 15  // 326\n        if (a.length) {                                                                                      // 16  // 327\n            $(a).each(function(i, item) {                                                                    // 17  // 328\n                inject += '<span class=\"'+klass+(i+1)+'\">'+item+'</span>'+after;                             // 18  // 329\n            });                                                                                              // 19  // 330\n            t.empty().append(inject);                                                                        // 20  // 331\n        }                                                                                                    // 21  // 332\n    }                                                                                                        // 22  // 333\n                                                                                                             // 23  // 334\n    var methods = {                                                                                          // 24  // 335\n        init : function() {                                                                                  // 25  // 336\n                                                                                                             // 26  // 337\n            return this.each(function() {                                                                    // 27  // 338\n                injector($(this), '', 'char', '');                                                           // 28  // 339\n            });                                                                                              // 29  // 340\n                                                                                                             // 30  // 341\n        },                                                                                                   // 31  // 342\n                                                                                                             // 32  // 343\n        words : function() {                                                                                 // 33  // 344\n                                                                                                             // 34  // 345\n            return this.each(function() {                                                                    // 35  // 346\n                injector($(this), ' ', 'word', ' ');                                                         // 36  // 347\n            });                                                                                              // 37  // 348\n                                                                                                             // 38  // 349\n        },                                                                                                   // 39  // 350\n                                                                                                             // 40  // 351\n        lines : function() {                                                                                 // 41  // 352\n                                                                                                             // 42  // 353\n            return this.each(function() {                                                                    // 43  // 354\n                var r = \"eefec303079ad17405c889e092e105b0\";                                                  // 44  // 355\n                // Because it's hard to split a <br/> tag consistently across browsers,                      // 45  // 356\n                // (*ahem* IE *ahem*), we replaces all <br/> instances with an md5 hash                      // 46  // 357\n                // (of the word \"split\").  If you're trying to use this plugin on that                       // 47  // 358\n                // md5 hash string, it will fail because you're being ridiculous.                            // 48  // 359\n                injector($(this).children(\"br\").replaceWith(r).end(), r, 'line', '');                        // 49  // 360\n            });                                                                                              // 50  // 361\n                                                                                                             // 51  // 362\n        }                                                                                                    // 52  // 363\n    };                                                                                                       // 53  // 364\n                                                                                                             // 54  // 365\n    $.fn.lettering = function( method ) {                                                                    // 55  // 366\n        // Method calling logic                                                                              // 56  // 367\n        if ( method && methods[method] ) {                                                                   // 57  // 368\n            return methods[ method ].apply( this, [].slice.call( arguments, 1 ));                            // 58  // 369\n        } else if ( method === 'letters' || ! method ) {                                                     // 59  // 370\n            return methods.init.apply( this, [].slice.call( arguments, 0 ) ); // always pass an array        // 60  // 371\n        }                                                                                                    // 61  // 372\n        $.error( 'Method ' +  method + ' does not exist on jQuery.lettering' );                              // 62  // 373\n        return this;                                                                                         // 63  // 374\n    };                                                                                                       // 64  // 375\n                                                                                                             // 65  // 376\n})(jQuery);                                                                                                  // 66  // 377\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 378\n                                                                                                                    // 379\n}).call(this);                                                                                                      // 380\n                                                                                                                    // 381\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['amdingo:textillate-js'] = {};\n\n})();\n","servePath":"/packages/amdingo_textillate-js.js","sourceMap":{"version":3,"sources":["/packages/amdingo_textillate-js/packages/amdingo_textillate-js.js"],"names":[],"mappingsfile":"/packages/amdingo_textillate-js.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/amdingo:textillate-js/amdingo:textillate-js.js                                                   //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n// Write your package code here!                                                                             // 1\njquery.textillate.registerHelper('initTextillate', function() {                                              // 2\n    Meteor.defer(function() {                                                                                // 3\n        $(document).textillate();                                                                            // 4\n    });                                                                                                      // 5\n});                                                                                                          // 6\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/amdingo:textillate-js/js/jquery.textillate.js                                                    //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n/*                                                                                                           // 1\n * textillate.js                                                                                             // 2\n * http://jschr.github.com/textillate                                                                        // 3\n * MIT licensed                                                                                              // 4\n *                                                                                                           // 5\n * Copyright (C) 2012-2013 Jordan Schroter                                                                   // 6\n */                                                                                                          // 7\n                                                                                                             // 8\n(function ($) {                                                                                              // 9\n    \"use strict\";                                                                                            // 10\n                                                                                                             // 11\n    function isInEffect (effect) {                                                                           // 12\n        return /In/.test(effect) || $.inArray(effect, $.fn.textillate.defaults.inEffects) >= 0;              // 13\n    };                                                                                                       // 14\n                                                                                                             // 15\n    function isOutEffect (effect) {                                                                          // 16\n        return /Out/.test(effect) || $.inArray(effect, $.fn.textillate.defaults.outEffects) >= 0;            // 17\n    };                                                                                                       // 18\n                                                                                                             // 19\n    // custom get data api method                                                                            // 20\n    function getData (node) {                                                                                // 21\n        var attrs = node.attributes || []                                                                    // 22\n            , data = {};                                                                                     // 23\n                                                                                                             // 24\n        if (!attrs.length) return data;                                                                      // 25\n                                                                                                             // 26\n        $.each(attrs, function (i, attr) {                                                                   // 27\n            if (/^data-in-*/.test(attr.nodeName)) {                                                          // 28\n                data.in = data.in || {};                                                                     // 29\n                data.in[attr.nodeName.replace(/data-in-/, '')] = attr.nodeValue;                             // 30\n            } else if (/^data-out-*/.test(attr.nodeName)) {                                                  // 31\n                data.out = data.out || {};                                                                   // 32\n                data.out[attr.nodeName.replace(/data-out-/, '')] = attr.nodeValue;                           // 33\n            } else if (/^data-*/.test(attr.nodeName)) {                                                      // 34\n                data[attr.nodeName] = attr.nodeValue;                                                        // 35\n            }                                                                                                // 36\n        })                                                                                                   // 37\n                                                                                                             // 38\n        return data;                                                                                         // 39\n    }                                                                                                        // 40\n                                                                                                             // 41\n    function shuffle (o) {                                                                                   // 42\n        for (var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x); // 43\n        return o;                                                                                            // 44\n    }                                                                                                        // 45\n                                                                                                             // 46\n    function animate ($c, effect, cb) {                                                                      // 47\n        $c.addClass('animated ' + effect)                                                                    // 48\n            .css('visibility', 'visible')                                                                    // 49\n            .show();                                                                                         // 50\n                                                                                                             // 51\n        $c.one('animationend webkitAnimationEnd oAnimationEnd', function () {                                // 52\n            $c.removeClass('animated ' + effect);                                                            // 53\n            cb && cb();                                                                                      // 54\n        });                                                                                                  // 55\n    }                                                                                                        // 56\n                                                                                                             // 57\n    function animateChars ($chars, options, cb) {                                                            // 58\n        var that = this                                                                                      // 59\n            , count = $chars.length;                                                                         // 60\n                                                                                                             // 61\n        if (!count) {                                                                                        // 62\n            cb && cb();                                                                                      // 63\n            return;                                                                                          // 64\n        }                                                                                                    // 65\n                                                                                                             // 66\n        if (options.shuffle) $chars = shuffle($chars);                                                       // 67\n        if (options.reverse) $chars = $chars.toArray().reverse();                                            // 68\n                                                                                                             // 69\n        $.each($chars, function (i, c) {                                                                     // 70\n            var $char = $(c);                                                                                // 71\n                                                                                                             // 72\n            function complete () {                                                                           // 73\n                if (isInEffect(options.effect)) {                                                            // 74\n                    $char.css('visibility', 'visible');                                                      // 75\n                } else if (isOutEffect(options.effect)) {                                                    // 76\n                    $char.css('visibility', 'hidden');                                                       // 77\n                }                                                                                            // 78\n                count -= 1;                                                                                  // 79\n                if (!count && cb) cb();                                                                      // 80\n            }                                                                                                // 81\n                                                                                                             // 82\n            var delay = options.sync ? options.delay : options.delay * i * options.delayScale;               // 83\n                                                                                                             // 84\n            $char.text() ?                                                                                   // 85\n                setTimeout(function () { animate($char, options.effect, complete) }, delay) :                // 86\n                complete();                                                                                  // 87\n        });                                                                                                  // 88\n    };                                                                                                       // 89\n                                                                                                             // 90\n    var Textillate = function (element, options) {                                                           // 91\n        var base = this                                                                                      // 92\n            , $element = $(element);                                                                         // 93\n                                                                                                             // 94\n        base.init = function () {                                                                            // 95\n            base.$texts = $element.find(options.selector);                                                   // 96\n                                                                                                             // 97\n            if (!base.$texts.length) {                                                                       // 98\n                base.$texts = $('<ul class=\"texts\"><li>' + $element.html() + '</li></ul>');                  // 99\n                $element.html(base.$texts);                                                                  // 100\n            }                                                                                                // 101\n                                                                                                             // 102\n            base.$texts.hide();                                                                              // 103\n                                                                                                             // 104\n            base.$current = $('<span>')                                                                      // 105\n                .text(base.$texts.find(':first-child').html())                                               // 106\n                .prependTo($element);                                                                        // 107\n                                                                                                             // 108\n            if (isInEffect(options.effect)) {                                                                // 109\n                base.$current.css('visibility', 'hidden');                                                   // 110\n            } else if (isOutEffect(options.effect)) {                                                        // 111\n                base.$current.css('visibility', 'visible');                                                  // 112\n            }                                                                                                // 113\n                                                                                                             // 114\n            base.setOptions(options);                                                                        // 115\n                                                                                                             // 116\n            setTimeout(function () {                                                                         // 117\n                base.options.autoStart && base.start();                                                      // 118\n            }, base.options.initialDelay)                                                                    // 119\n        };                                                                                                   // 120\n                                                                                                             // 121\n        base.setOptions = function (options) {                                                               // 122\n            base.options = options;                                                                          // 123\n        };                                                                                                   // 124\n                                                                                                             // 125\n        base.triggerEvent = function (name) {                                                                // 126\n            var e = $.Event(name + '.tlt', { data: base });                                                  // 127\n            $element.trigger(e);                                                                             // 128\n            return e;                                                                                        // 129\n        };                                                                                                   // 130\n                                                                                                             // 131\n        base.in = function (index, cb) {                                                                     // 132\n            index = index || 0;                                                                              // 133\n                                                                                                             // 134\n            var $elem = base.$texts.find(':nth-child(' + (index + 1) + ')')                                  // 135\n                , options = $.extend({}, base.options, getData($elem))                                       // 136\n                , $chars;                                                                                    // 137\n                                                                                                             // 138\n            base.triggerEvent('inAnimationBegin');                                                           // 139\n                                                                                                             // 140\n            base.$current                                                                                    // 141\n                .text($elem.html())                                                                          // 142\n                .lettering('words');                                                                         // 143\n                                                                                                             // 144\n            base.$current.find('[class^=\"word\"]')                                                            // 145\n                .css({                                                                                       // 146\n                    'display': 'inline-block',                                                               // 147\n                    // fix for poor ios performance                                                          // 148\n                    '-webkit-transform': 'translate3d(0,0,0)',                                               // 149\n                    '-moz-transform': 'translate3d(0,0,0)',                                                  // 150\n                    '-o-transform': 'translate3d(0,0,0)',                                                    // 151\n                    'transform': 'translate3d(0,0,0)'                                                        // 152\n                })                                                                                           // 153\n                .each(function () { $(this).lettering() });                                                  // 154\n                                                                                                             // 155\n            $chars = base.$current                                                                           // 156\n                .find('[class^=\"char\"]')                                                                     // 157\n                .css('display', 'inline-block');                                                             // 158\n                                                                                                             // 159\n            if (isInEffect(options.in.effect)) {                                                             // 160\n                $chars.css('visibility', 'hidden');                                                          // 161\n            } else if (isOutEffect(options.in.effect)) {                                                     // 162\n                $chars.css('visibility', 'visible');                                                         // 163\n            }                                                                                                // 164\n                                                                                                             // 165\n            base.currentIndex = index;                                                                       // 166\n                                                                                                             // 167\n            animateChars($chars, options.in, function () {                                                   // 168\n                base.triggerEvent('inAnimationEnd');                                                         // 169\n                if (options.in.callback) options.in.callback();                                              // 170\n                if (cb) cb(base);                                                                            // 171\n            });                                                                                              // 172\n        };                                                                                                   // 173\n                                                                                                             // 174\n        base.out = function (cb) {                                                                           // 175\n            var $elem = base.$texts.find(':nth-child(' + (base.currentIndex + 1) + ')')                      // 176\n                , $chars = base.$current.find('[class^=\"char\"]')                                             // 177\n                , options = $.extend({}, base.options, getData($elem));                                      // 178\n                                                                                                             // 179\n            base.triggerEvent('outAnimationBegin');                                                          // 180\n                                                                                                             // 181\n            animateChars($chars, options.out, function () {                                                  // 182\n                base.triggerEvent('outAnimationEnd');                                                        // 183\n                if (options.out.callback) options.out.callback();                                            // 184\n                if (cb) cb(base);                                                                            // 185\n            });                                                                                              // 186\n        };                                                                                                   // 187\n                                                                                                             // 188\n        base.start = function (index) {                                                                      // 189\n            base.triggerEvent('start');                                                                      // 190\n                                                                                                             // 191\n            (function run (index) {                                                                          // 192\n                base.in(index, function () {                                                                 // 193\n                    var length = base.$texts.children().length;                                              // 194\n                                                                                                             // 195\n                    index += 1;                                                                              // 196\n                                                                                                             // 197\n                    if (!base.options.loop && index >= length) {                                             // 198\n                        if (base.options.callback) base.options.callback();                                  // 199\n                        base.triggerEvent('end');                                                            // 200\n                    } else {                                                                                 // 201\n                        index = index % length;                                                              // 202\n                                                                                                             // 203\n                        setTimeout(function () {                                                             // 204\n                            base.out(function () {                                                           // 205\n                                run(index)                                                                   // 206\n                            });                                                                              // 207\n                        }, base.options.minDisplayTime);                                                     // 208\n                    }                                                                                        // 209\n                });                                                                                          // 210\n            }(index || 0));                                                                                  // 211\n        };                                                                                                   // 212\n                                                                                                             // 213\n        base.init();                                                                                         // 214\n    }                                                                                                        // 215\n                                                                                                             // 216\n    $.fn.textillate = function (settings, args) {                                                            // 217\n        return this.each(function () {                                                                       // 218\n            var $this = $(this)                                                                              // 219\n                , data = $this.data('textillate')                                                            // 220\n                , options = $.extend(true, {}, $.fn.textillate.defaults, getData(this), typeof settings == 'object' && settings);\n                                                                                                             // 222\n            if (!data) {                                                                                     // 223\n                $this.data('textillate', (data = new Textillate(this, options)));                            // 224\n            } else if (typeof settings == 'string') {                                                        // 225\n                data[settings].apply(data, [].concat(args));                                                 // 226\n            } else {                                                                                         // 227\n                data.setOptions.call(data, options);                                                         // 228\n            }                                                                                                // 229\n        })                                                                                                   // 230\n    };                                                                                                       // 231\n                                                                                                             // 232\n    $.fn.textillate.defaults = {                                                                             // 233\n        selector: '.texts',                                                                                  // 234\n        loop: false,                                                                                         // 235\n        minDisplayTime: 2000,                                                                                // 236\n        initialDelay: 0,                                                                                     // 237\n        in: {                                                                                                // 238\n            effect: 'fadeInLeftBig',                                                                         // 239\n            delayScale: 1.5,                                                                                 // 240\n            delay: 50,                                                                                       // 241\n            sync: false,                                                                                     // 242\n            reverse: false,                                                                                  // 243\n            shuffle: false,                                                                                  // 244\n            callback: function () {}                                                                         // 245\n        },                                                                                                   // 246\n        out: {                                                                                               // 247\n            effect: 'hinge',                                                                                 // 248\n            delayScale: 1.5,                                                                                 // 249\n            delay: 50,                                                                                       // 250\n            sync: false,                                                                                     // 251\n            reverse: false,                                                                                  // 252\n            shuffle: false,                                                                                  // 253\n            callback: function () {}                                                                         // 254\n        },                                                                                                   // 255\n        autoStart: true,                                                                                     // 256\n        inEffects: [],                                                                                       // 257\n        outEffects: [ 'hinge' ],                                                                             // 258\n        callback: function () {}                                                                             // 259\n    };                                                                                                       // 260\n                                                                                                             // 261\n}(jQuery));                                                                                                  // 262\n                                                                                                             // 263\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/amdingo:textillate-js/js/lettering.js                                                            //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n/*global jQuery */                                                                                           // 1\n/*!\t                                                                                                         // 2\n * Lettering.JS 0.6.1                                                                                        // 3\n *                                                                                                           // 4\n * Copyright 2010, Dave Rupert http://daverupert.com                                                         // 5\n * Released under the WTFPL license                                                                          // 6\n * http://sam.zoy.org/wtfpl/                                                                                 // 7\n *                                                                                                           // 8\n * Thanks to Paul Irish - http://paulirish.com - for the feedback.                                           // 9\n *                                                                                                           // 10\n * Date: Mon Sep 20 17:14:00 2010 -0600                                                                      // 11\n */                                                                                                          // 12\n(function($){                                                                                                // 13\n    function injector(t, splitter, klass, after) {                                                           // 14\n        var a = t.text().split(splitter), inject = '';                                                       // 15\n        if (a.length) {                                                                                      // 16\n            $(a).each(function(i, item) {                                                                    // 17\n                inject += '<span class=\"'+klass+(i+1)+'\">'+item+'</span>'+after;                             // 18\n            });                                                                                              // 19\n            t.empty().append(inject);                                                                        // 20\n        }                                                                                                    // 21\n    }                                                                                                        // 22\n                                                                                                             // 23\n    var methods = {                                                                                          // 24\n        init : function() {                                                                                  // 25\n                                                                                                             // 26\n            return this.each(function() {                                                                    // 27\n                injector($(this), '', 'char', '');                                                           // 28\n            });                                                                                              // 29\n                                                                                                             // 30\n        },                                                                                                   // 31\n                                                                                                             // 32\n        words : function() {                                                                                 // 33\n                                                                                                             // 34\n            return this.each(function() {                                                                    // 35\n                injector($(this), ' ', 'word', ' ');                                                         // 36\n            });                                                                                              // 37\n                                                                                                             // 38\n        },                                                                                                   // 39\n                                                                                                             // 40\n        lines : function() {                                                                                 // 41\n                                                                                                             // 42\n            return this.each(function() {                                                                    // 43\n                var r = \"eefec303079ad17405c889e092e105b0\";                                                  // 44\n                // Because it's hard to split a <br/> tag consistently across browsers,                      // 45\n                // (*ahem* IE *ahem*), we replaces all <br/> instances with an md5 hash                      // 46\n                // (of the word \"split\").  If you're trying to use this plugin on that                       // 47\n                // md5 hash string, it will fail because you're being ridiculous.                            // 48\n                injector($(this).children(\"br\").replaceWith(r).end(), r, 'line', '');                        // 49\n            });                                                                                              // 50\n                                                                                                             // 51\n        }                                                                                                    // 52\n    };                                                                                                       // 53\n                                                                                                             // 54\n    $.fn.lettering = function( method ) {                                                                    // 55\n        // Method calling logic                                                                              // 56\n        if ( method && methods[method] ) {                                                                   // 57\n            return methods[ method ].apply( this, [].slice.call( arguments, 1 ));                            // 58\n        } else if ( method === 'letters' || ! method ) {                                                     // 59\n            return methods.init.apply( this, [].slice.call( arguments, 0 ) ); // always pass an array        // 60\n        }                                                                                                    // 61\n        $.error( 'Method ' +  method + ' does not exist on jQuery.lettering' );                              // 62\n        return this;                                                                                         // 63\n    };                                                                                                       // 64\n                                                                                                             // 65\n})(jQuery);                                                                                                  // 66\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]