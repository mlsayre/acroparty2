{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"}]},{"source":"./AccountsUIWrapper.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"AccountsUIWrapper"}]},{"source":"meteor/react-meteor-data","imported":["createContainer"],"specifiers":[{"kind":"named","imported":"createContainer","local":"createContainer"}]},{"source":"meteor/reactive-var","imported":["ReactiveVar"],"specifiers":[{"kind":"named","imported":"ReactiveVar","local":"ReactiveVar"}]},{"source":"../api/rooms.js","imported":["Rooms"],"specifiers":[{"kind":"named","imported":"Rooms","local":"Rooms"}]},{"source":"../api/chats.js","imported":["Chats"],"specifiers":[{"kind":"named","imported":"Chats","local":"Chats"}]},{"source":"./Room.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Room"}]},{"source":"./Chat.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Chat"}]}],"exports":{"exported":["App"],"specifiers":[{"kind":"local","local":"App","exported":"default"}]}}},"options":{"filename":"/imports/ui/App.jsx","filenameRelative":"/imports/ui/App.jsx","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/ui/App.jsx.map","sourceFileName":"/imports/ui/App.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"App"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var React,Component;module.import('react',{\"default\":function(v){React=v},\"Component\":function(v){Component=v}});var AccountsUIWrapper;module.import('./AccountsUIWrapper.jsx',{\"default\":function(v){AccountsUIWrapper=v}});var createContainer;module.import('meteor/react-meteor-data',{\"createContainer\":function(v){createContainer=v}});var ReactiveVar;module.import('meteor/reactive-var',{\"ReactiveVar\":function(v){ReactiveVar=v}});var Rooms;module.import('../api/rooms.js',{\"Rooms\":function(v){Rooms=v}});var Chats;module.import('../api/chats.js',{\"Chats\":function(v){Chats=v}});var Room;module.import('./Room.jsx',{\"default\":function(v){Room=v}});var Chat;module.import('./Chat.jsx',{\"default\":function(v){Chat=v}});\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar gameRoomIdSelected = new ReactiveVar(\"\");\n\n// App component - represents the whole app\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  // constructor(props) {\n  //   super(props);\n\n  //   this.state = {\n  //     gameRoomId: \"\",\n  //   };\n  // }\n\n  App.prototype.userRouting = function () {\n    function userRouting() {\n      if (this.props.currentUser) {\n        $(\".frontSignin\").hide();\n      } else {\n        $(\".frontSignin\").show();\n        $(\".mainScreen, .stats, .chat, .gamePlay, .settings\").hide();\n      }\n      $(\".acroparty\").show();\n    }\n\n    return userRouting;\n  }();\n\n  // rooms\n\n\n  App.prototype.gotoRoom = function () {\n    function gotoRoom(e) {\n      var theroom = $(e.target).attr(\"data-room\");\n      gameRoomIdSelected.set(theroom);\n      if (this.props.selectedRoom) {\n        Rooms.update(this.props.selectedRoom._id, {\n          $addToSet: { players: this.props.currentUser.username }\n        });\n      }\n      $(\".mainScreen, .popup\").hide();\n      $(\".chat\").attr(\"id\", theroom).show();\n    }\n\n    return gotoRoom;\n  }();\n\n  App.prototype.renderRooms = function () {\n    function renderRooms() {\n      var _this2 = this;\n\n      return this.props.rooms.map(function (room) {\n        return React.createElement(Room, { key: room._id, room: room, updateRoom: _this2.gotoRoom.bind(_this2) });\n      });\n    }\n\n    return renderRooms;\n  }();\n\n  App.prototype.renderRoomId = function () {\n    function renderRoomId() {\n      return gameRoomIdSelected.get();\n      // return this.props.currentUser.currentRoom\n    }\n\n    return renderRoomId;\n  }();\n\n  App.prototype.roomName = function () {\n    function roomName() {\n      if (this.props.selectedRoom) {\n        var theRoomName = this.props.selectedRoom.displayName;\n      } else {\n        var theRoomName = \"\";\n      }\n      return theRoomName;\n    }\n\n    return roomName;\n  }();\n\n  App.prototype.roomPlayers = function () {\n    function roomPlayers() {\n      if (this.props.selectedRoom) {\n        var theRoomPlayers = this.props.selectedRoom.players;\n      } else {\n        var theRoomPlayers = [];\n      }\n      return theRoomPlayers;\n    }\n\n    return roomPlayers;\n  }();\n\n  App.prototype.exitRoom = function () {\n    function exitRoom(e) {\n      Rooms.update(this.props.selectedRoom._id, {}, { $pull: { players: \"matt\" } }, { multi: true });\n      $(\".popup\").hide();\n      $(\"#\" + gameRoomIdSelected.get()).hide();\n      $(\".chat\").removeAttr(\"id\");\n      $(\".mainScreen\").show();\n    }\n\n    return exitRoom;\n  }();\n\n  // stats\n\n\n  App.prototype.closePopup = function () {\n    function closePopup(e) {\n      $(\".popup\").hide();\n    }\n\n    return closePopup;\n  }();\n\n  App.prototype.openStats = function () {\n    function openStats(e) {\n      $(\".settings\").hide();\n      $(\".stats\").show();\n    }\n\n    return openStats;\n  }();\n\n  App.prototype.renderUsername = function () {\n    function renderUsername() {\n      if (this.props.currentUser) {\n        if (this.props.currentUser.username) {\n          return React.createElement(\n            'span',\n            null,\n            this.props.currentUser.username\n          );\n        } else {\n          return \"\";\n        }\n      } else {\n        return \"\";\n      }\n    }\n\n    return renderUsername;\n  }();\n\n  App.prototype.renderLifePoints = function () {\n    function renderLifePoints() {\n      // this.props.currentUser ? <span>{ this.props.currentUser.stats.lifetimePoints }</span> : '';\n      if (this.props.currentUser) {\n        if (this.props.currentUser.stats) {\n          return React.createElement(\n            'span',\n            null,\n            this.props.currentUser.stats.lifetimePoints\n          );\n        } else {\n          return \"\";\n        }\n      } else {\n        return \"\";\n      }\n    }\n\n    return renderLifePoints;\n  }();\n\n  //settings\n\n\n  App.prototype.openSettings = function () {\n    function openSettings(e) {\n      $(\".stats\").hide();\n      $(\".settings\").show();\n    }\n\n    return openSettings;\n  }();\n\n  App.prototype.render = function () {\n    function render() {\n      return React.createElement(\n        'div',\n        { className: 'acroparty' },\n        this.userRouting(),\n        React.createElement(\n          'section',\n          { className: 'frontSignin', style: { \"display\": \"none\" } },\n          React.createElement(\n            'h1',\n            null,\n            'Welcome to AcroParty!'\n          ),\n          React.createElement(AccountsUIWrapper, null)\n        ),\n        React.createElement(\n          'section',\n          { className: 'mainScreen' },\n          React.createElement(\n            'header',\n            null,\n            React.createElement(\n              'h1',\n              null,\n              'AcroParty'\n            )\n          ),\n          React.createElement(\n            'div',\n            { className: 'welcomeText' },\n            'Welcome, ',\n            this.renderUsername(),\n            '! Please select a room to start playing...'\n          ),\n          React.createElement(\n            'div',\n            { className: 'roomList' },\n            React.createElement(\n              'div',\n              { className: 'roomListTitle' },\n              'Rooms'\n            ),\n            this.renderRooms()\n          ),\n          React.createElement(\n            'div',\n            { className: 'mainButtons' },\n            React.createElement(\n              'button',\n              { className: 'mainButton', onClick: this.openStats.bind(this) },\n              'Stats'\n            ),\n            React.createElement(\n              'button',\n              { className: 'mainButton', onClick: this.openSettings.bind(this) },\n              'Settings'\n            )\n          )\n        ),\n        React.createElement(\n          'section',\n          { className: 'chat' },\n          React.createElement('section', { className: 'gamePlay' }),\n          'This is where chat will happen. This is game room id: ',\n          this.renderRoomId(),\n          '.',\n          React.createElement(Chat, { clickStats: this.openStats.bind(this), clickSettings: this.openSettings.bind(this),\n            roomName: this.roomName(), roomPlayers: this.roomPlayers(), exitRoom: this.exitRoom.bind(this) })\n        ),\n        React.createElement(\n          'section',\n          { className: 'stats popup' },\n          React.createElement(\n            'div',\n            null,\n            'Life wins is ',\n            this.renderLifePoints()\n          ),\n          React.createElement(\n            'button',\n            { className: 'popupButton', onClick: this.closePopup.bind(this) },\n            'Close'\n          )\n        ),\n        React.createElement(\n          'section',\n          { className: 'settings popup' },\n          React.createElement(AccountsUIWrapper, null),\n          React.createElement(\n            'button',\n            { className: 'popupButton', onClick: this.closePopup.bind(this) },\n            'Close'\n          )\n        )\n      );\n    }\n\n    return render;\n  }();\n\n  return App;\n}(Component);\n\nmodule.export(\"default\",exports.default=(App));\n\n\nmodule.export(\"default\",exports.default=(createContainer(function () {\n  //var userRoom = Meteor.user().currentRoom;\n  return {\n    currentUser: Meteor.user(),\n    rooms: Rooms.find({}).fetch(),\n    selectedRoom: Rooms.findOne({ room_id: gameRoomIdSelected.get() })\n  };\n}, App)));","ast":null,"map":{"version":3,"sources":["/imports/ui/App.jsx"],"names":[],"mappings":"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","file":"/imports/ui/App.jsx.map","sourcesContent":["import React, { Component } from 'react';\nimport AccountsUIWrapper from './AccountsUIWrapper.jsx';\nimport { createContainer } from 'meteor/react-meteor-data';\nimport { ReactiveVar } from 'meteor/reactive-var';\n\nimport { Rooms } from '../api/rooms.js';\nimport { Chats } from '../api/chats.js';\n\nimport Room from './Room.jsx';\nimport Chat from './Chat.jsx';\n\nvar gameRoomIdSelected = new ReactiveVar(\"\");\n\n// App component - represents the whole app\nexport default class App extends Component {\n  // constructor(props) {\n  //   super(props);\n\n  //   this.state = {\n  //     gameRoomId: \"\",\n  //   };\n  // }\n\n  userRouting() {\n    if (this.props.currentUser) {\n      $(\".frontSignin\").hide();\n    } else {\n      $(\".frontSignin\").show();\n      $(\".mainScreen, .stats, .chat, .gamePlay, .settings\").hide();\n    }\n    $(\".acroparty\").show()\n  }\n\n  // rooms\n  gotoRoom(e) {\n    var theroom = $(e.target).attr(\"data-room\")\n    gameRoomIdSelected.set(theroom);\n    if (this.props.selectedRoom) {\n      Rooms.update(this.props.selectedRoom._id, {\n        $addToSet: { players: this.props.currentUser.username },\n      });\n    }\n    $(\".mainScreen, .popup\").hide();\n    $(\".chat\").attr(\"id\", theroom).show();\n\n  }\n  renderRooms() {\n    return this.props.rooms.map((room) => (\n      <Room key={room._id} room={room} updateRoom={this.gotoRoom.bind(this)}/>\n    ));\n  }\n  renderRoomId() {\n    return gameRoomIdSelected.get();\n    // return this.props.currentUser.currentRoom\n  }\n  roomName() {\n    if (this.props.selectedRoom) {\n      var theRoomName = this.props.selectedRoom.displayName;\n    } else {\n      var theRoomName = \"\"\n    }\n    return theRoomName\n  }\n  roomPlayers() {\n    if (this.props.selectedRoom) {\n      var theRoomPlayers = this.props.selectedRoom.players;\n    } else {\n      var theRoomPlayers = []\n    }\n    return theRoomPlayers\n  }\n  exitRoom(e) {\n    Rooms.update(this.props.selectedRoom._id,{},{ $pull: { players:  \"matt\" }}, {multi: true})\n    $(\".popup\").hide();\n    $(\"#\" + gameRoomIdSelected.get()).hide();\n    $(\".chat\").removeAttr(\"id\");\n    $(\".mainScreen\").show();\n  }\n\n  // stats\n  closePopup(e) {\n    $(\".popup\").hide();\n  }\n\n  openStats(e) {\n    $(\".settings\").hide();\n    $(\".stats\").show();\n  }\n\n  renderUsername() {\n    if (this.props.currentUser) {\n      if (this.props.currentUser.username) {\n        return  <span>{ this.props.currentUser.username }</span>;\n      } else {\n        return \"\";\n      }\n    } else {\n      return \"\";\n    }\n  }\n\n  renderLifePoints() {\n    // this.props.currentUser ? <span>{ this.props.currentUser.stats.lifetimePoints }</span> : '';\n    if (this.props.currentUser) {\n      if (this.props.currentUser.stats) {\n        return  <span>{ this.props.currentUser.stats.lifetimePoints }</span>;\n      } else {\n        return \"\";\n      }\n    } else {\n      return \"\";\n    }\n  }\n\n  //settings\n  openSettings(e) {\n    $(\".stats\").hide();\n    $(\".settings\").show();\n  }\n\n  render() {\n    return (\n\n      <div className=\"acroparty\">\n        {this.userRouting()}\n        <section className=\"frontSignin\" style={{\"display\" : \"none\"}}>\n          <h1>Welcome to AcroParty!</h1>\n          <AccountsUIWrapper />\n        </section>\n\n        <section className=\"mainScreen\">\n          <header>\n            <h1>AcroParty</h1>\n          </header>\n          <div className=\"welcomeText\">\n            Welcome, { this.renderUsername() }! Please select a room to start playing...\n          </div>\n          <div className=\"roomList\">\n            <div className=\"roomListTitle\">Rooms</div>\n            { this.renderRooms() }\n          </div>\n          <div className=\"mainButtons\">\n            <button className=\"mainButton\" onClick={this.openStats.bind(this)}>Stats</button>\n            <button className=\"mainButton\" onClick={this.openSettings.bind(this)}>Settings</button>\n          </div>\n        </section>\n\n        <section className=\"chat\">\n          <section className=\"gamePlay\">\n          </section>\n\n          This is where chat will happen. This is game room id: {this.renderRoomId()}.\n          <Chat clickStats={this.openStats.bind(this)} clickSettings={this.openSettings.bind(this)}\n                roomName={this.roomName()} roomPlayers={this.roomPlayers()} exitRoom={this.exitRoom.bind(this)}/>\n        </section>\n\n        <section className=\"stats popup\">\n          <div>Life wins is { this.renderLifePoints() }</div>\n          <button className=\"popupButton\" onClick={this.closePopup.bind(this)}>Close</button>\n        </section>\n\n        <section className=\"settings popup\">\n          <AccountsUIWrapper />\n          <button className=\"popupButton\" onClick={this.closePopup.bind(this)}>Close</button>\n        </section>\n\n\n      </div>\n    );\n  }\n}\n\nexport default createContainer(() => {\n  //var userRoom = Meteor.user().currentRoom;\n  return {\n    currentUser: Meteor.user(),\n    rooms: Rooms.find({}).fetch(),\n    selectedRoom: Rooms.findOne({ room_id: gameRoomIdSelected.get() }),\n  };\n}, App);\n\n"]},"hash":"b8023522e8046c7ed42b44329f5b125f751005ad"}
