{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/practicalmeteor:chai","imported":["chai"],"specifiers":[{"kind":"named","imported":"chai","local":"chai"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/remcoder:chronos/unittests.js","filenameRelative":"/packages/remcoder:chronos/unittests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/remcoder:chronos/unittests.js.map","sourceFileName":"/packages/remcoder:chronos/unittests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"unittests"},"ignored":false,"code":"var chai;module.import('meteor/practicalmeteor:chai',{\"chai\":function(v){chai=v}});\n\nvar moment = require('moment');\n\ndescribe('timer creation I', function () {\n  it('invoking the constructor of Chronos.Timer should result in an instance of Chronos.Timer', function () {\n    var timer = new Chronos.Timer();\n    chai.assert.instanceOf(timer, Chronos.Timer);\n  });\n});\n\ndescribe('timer creation II', function () {\n  it('timer shouldn\\'t start immediately', function () {\n    var timer = new Chronos.Timer();\n    chai.assert.isUndefined(timer._timer, 'timer._timer should not be set ');\n  });\n});\n\ndescribe('timer start', function () {\n  it('timer should have handle when started', function () {\n    var timer = new Chronos.Timer();\n    timer.start();\n    chai.assert.isTrue(!!timer._timer);\n  });\n});\n\ndescribe('reactive updates I', function () {\n\n  var count = void 0;\n  before(function (done) {\n    var timer = new Chronos.Timer();\n\n    count = 0;\n    Tracker.autorun(Meteor.bindEnvironment(function (c) {\n      timer.time.get();\n      count++;\n      if (count > 1) {\n        timer.stop();\n        done();\n      }\n    }));\n\n    timer.start();\n  });\n\n  it('getting the time should trigger reactive updates', function () {\n    chai.assert(count > 1);\n  });\n});\n\ndescribe('reactive updates II', function () {\n  var count = void 0;\n\n  before(function (done) {\n    var timer = new Chronos.Timer();\n\n    count = 0;\n    Tracker.autorun(Meteor.bindEnvironment(function (c) {\n      timer.time.dep.depend();\n      count++;\n      if (count > 1) {\n        timer.stop();\n        done();\n      }\n    }));\n\n    timer.start();\n  });\n\n  it('calling the underlying Dependency should trigger reactive updates', function () {\n    chai.assert(count > 1);\n  });\n});\n\ndescribe('Chronos.update', function () {\n  var count = void 0;\n\n  before(function (done) {\n\n    count = 0;\n    Tracker.autorun(Meteor.bindEnvironment(function (c) {\n      var timer = Chronos.update(100);\n\n      count++;\n      if (count > 1) {\n        timer.destroy();\n        done();\n      }\n    }));\n  });\n\n  it('Chronos.update should trigger reactive updates', function () {\n    chai.assert(count > 1);\n  });\n});\n\ndescribe('Backwards compatibility I', function () {\n  var count = void 0;\n\n  before(function (done) {\n\n    count = 0;\n    Tracker.autorun(Meteor.bindEnvironment(function (c) {\n      var timer = Chronos.liveUpdate(100);\n\n      count++;\n      if (count > 1) {\n        timer.destroy();\n        done();\n      }\n    }));\n  });\n\n  it('Chronos.liveUpdate should trigger reactive updates', function () {\n    chai.assert(count > 1);\n  });\n});\n\ndescribe('Timer start II', function () {\n\n  it('An already started Timer should not be able to start', function () {\n    var timer = new Chronos.Timer();\n    timer.start();\n    chai.assert.throws(function () {\n      timer.start();\n    });\n  });\n});\n\ndescribe('Destroying a timer', function () {\n  var count = 0;\n  before(function (done) {\n\n    Tracker.autorun(Meteor.bindEnvironment(function (c) {\n\n      var timer = Chronos.update(10);\n\n      if (count == 1) {\n        timer.destroy();\n      }\n\n      count++;\n    }));\n\n    Meteor.setTimeout(done, 100);\n  });\n\n  it('A Chronos.update timer should be destroyable', function () {\n\n    chai.assert.equal(Object.keys(Chronos._timers).length, 0, 'there should be no more timers now');\n\n    chai.assert.equal(count, 2);\n  });\n});\n\ndescribe('Chronos.date', function () {\n\n  it('Chronos.date should return a Date object', function () {\n    var reactiveTime = Chronos.date();\n    chai.assert.instanceOf(reactiveTime, Date);\n  });\n});\n\ndescribe('Chronos.date II', function () {\n\n  it('Chronos.date should return same time as new Date()', function () {\n    var normalTime, reactiveTime;\n\n    Tracker.autorun(function (c) {\n\n      normalTime = new Date().getTime();\n      reactiveTime = Chronos.date().getTime();\n\n      c.stop();\n    });\n\n    chai.assert.closeTo(reactiveTime, normalTime, 2), 'there shouldn\\'t be more than a millisecond difference';\n  });\n});\n\ndescribe('Chronos.date reactivity', function () {\n\n  var count = 0;\n  before(function (done) {\n\n    Tracker.autorun(Meteor.bindEnvironment(function (c) {\n      Chronos.date(10);\n\n      count++;\n      if (count == 2) {\n        c.stop();\n        done();\n      }\n    }));\n  });\n\n  it('Chronos.date should trigger reactive updates', function () {\n    chai.assert.equal(count, 2);\n  });\n});\n\ndescribe('Chronos.now', function () {\n\n  it('Chronos.now should return a Number ', function () {\n    var reactiveTime = Chronos.now();\n    chai.assert.isNumber(reactiveTime, Date);\n  });\n});\n\ndescribe('Chronos.now II', function () {\n\n  it('Chronos.now should return same time as Date.now()', function () {\n    var normalTime, reactiveTime;\n\n    Tracker.autorun(function (c) {\n\n      normalTime = Date.now();\n      reactiveTime = Chronos.now();\n\n      c.stop();\n    });\n\n    chai.assert.closeTo(reactiveTime, normalTime, 2), 'there shouldn\\'t be more than a millisecond difference';\n  });\n});\n\ndescribe('Chronos.now reactivity', function () {\n\n  var count = 0;\n  before(function (done) {\n\n    Tracker.autorun(Meteor.bindEnvironment(function (c) {\n      Chronos.now(10);\n\n      count++;\n      if (count == 2) {\n        c.stop();\n        done();\n      }\n    }));\n  });\n\n  it('Chronos.now should trigger reactive updates', function () {\n    chai.assert.equal(count, 2);\n  });\n});\n\ndescribe('Stopping the computation', function () {\n\n  var count = 0;\n\n  before(function (done) {\n\n    Tracker.autorun(Meteor.bindEnvironment(function (c) {\n\n      Chronos.update(100);\n\n      if (count > 0) c.stop();\n\n      count++;\n    }));\n\n    Meteor.setTimeout(done, 400);\n  });\n\n  it('Chronos.update timer should be destroyed when computation is stopped', function () {\n    chai.assert.equal(count, 2);\n  });\n});\n\ndescribe('Stopping the computation II', function () {\n\n  var count = 0;\n\n  before(function (done) {\n\n    Tracker.autorun(Meteor.bindEnvironment(function (c) {\n\n      Chronos.date(100);\n\n      if (count > 0) c.stop();\n\n      count++;\n    }));\n\n    Meteor.setTimeout(done, 400);\n  });\n\n  it('Chronos.date timer should be destroyed when computation is stopped', function () {\n    chai.assert.equal(count, 2);\n  });\n});\n\ndescribe('Chronos.moment', function () {\n  it('Chronos.moment should return a moment instance', function () {\n    var reactiveMoment = Chronos.moment();\n    // chai.assert.instanceOf(reactiveMoment, moment().constructor);\n  });\n});","ast":null,"map":{"version":3,"sources":["/packages/remcoder:chronos/unittests.js"],"names":[],"mappings":"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","file":"/packages/remcoder:chronos/unittests.js.map","sourcesContent":["import { chai } from 'meteor/practicalmeteor:chai';\n\nconst moment = require('moment');\n\ndescribe('timer creation I', function () {\n  it('invoking the constructor of Chronos.Timer should result in an instance of Chronos.Timer', function () {\n    var timer = new Chronos.Timer();\n    chai.assert.instanceOf(timer, Chronos.Timer);\n  })\n});\n\ndescribe('timer creation II', function () {\n  it('timer shouldn\\'t start immediately', function() {\n    var timer = new Chronos.Timer();\n    chai.assert.isUndefined(timer._timer, 'timer._timer should not be set ');\n  });\n});\n\ndescribe('timer start', function () {\n  it('timer should have handle when started', function() {\n    var timer = new Chronos.Timer();\n    timer.start();\n    chai.assert.isTrue( !!timer._timer );\n  })\n});\n\n\ndescribe('reactive updates I',function() {\n\n  let count;\n  before(function(done) {\n    var timer = new Chronos.Timer();\n\n    count = 0;\n    Tracker.autorun(Meteor.bindEnvironment(function (c) {\n      timer.time.get();\n      count++;\n      if (count > 1) {\n        timer.stop();\n        done();\n      }\n    }));\n\n    timer.start();\n  });\n\n  it('getting the time should trigger reactive updates', function() {\n    chai.assert(count>1);\n  });\n});\n\ndescribe('reactive updates II',function() {\n  let count;\n\n  before(function(done) {\n    var timer = new Chronos.Timer();\n\n    count = 0;\n    Tracker.autorun(Meteor.bindEnvironment(function (c) {\n      timer.time.dep.depend();\n      count++;\n      if (count > 1) {\n        timer.stop();\n        done();\n      }\n    }));\n\n    timer.start();\n\n  });\n\n  it('calling the underlying Dependency should trigger reactive updates', function () {\n    chai.assert(count>1);\n  });\n\n});\n\ndescribe('Chronos.update', function() {\n  let count;\n\n  before(function(done) {\n\n    count = 0;\n    Tracker.autorun(Meteor.bindEnvironment(function(c) {\n      var timer = Chronos.update(100);\n\n      count++;\n      if (count > 1) {\n        timer.destroy();\n        done();\n      }\n    }));\n  });\n\n  it('Chronos.update should trigger reactive updates', function() {\n    chai.assert(count>1);\n  });\n});\n\ndescribe('Backwards compatibility I', function() {\n  let count;\n\n  before(function(done) {\n\n    count = 0;\n    Tracker.autorun(Meteor.bindEnvironment(function(c) {\n      var timer = Chronos.liveUpdate(100);\n\n      count++;\n      if (count > 1) {\n        timer.destroy();\n        done();\n      }\n    }));\n  });\n\n  it('Chronos.liveUpdate should trigger reactive updates', function() {\n    chai.assert(count>1);\n  });\n});\n\ndescribe('Timer start II', function() {\n\n  it('An already started Timer should not be able to start', function() {\n    var timer = new Chronos.Timer();\n    timer.start();\n    chai.assert.throws(function () {\n      timer.start();\n    });\n  });\n});\n\ndescribe('Destroying a timer', function() {\n  var count = 0;\n  before(function(done) {\n\n    Tracker.autorun(Meteor.bindEnvironment(function(c) {\n\n      var timer = Chronos.update(10);\n\n      if (count == 1) {\n        timer.destroy();\n      }\n\n      count++;\n\n    }));\n\n    Meteor.setTimeout(done, 100);\n  });\n\n  it('A Chronos.update timer should be destroyable', function() {\n\n    chai.assert.equal( Object.keys(Chronos._timers).length, 0, 'there should be no more timers now' );\n\n    chai.assert.equal( count, 2 );\n  });\n});\n\n\ndescribe('Chronos.date', function () {\n\n  it('Chronos.date should return a Date object', function() {\n    var reactiveTime = Chronos.date();\n    chai.assert.instanceOf(reactiveTime, Date);\n  });\n});\n\ndescribe('Chronos.date II', function() {\n\n  it('Chronos.date should return same time as new Date()', function() {\n    var normalTime, reactiveTime;\n\n    Tracker.autorun(function(c) {\n\n      normalTime = new Date().getTime();\n      reactiveTime = Chronos.date().getTime();\n\n      c.stop();\n    });\n\n    chai.assert.closeTo( reactiveTime, normalTime, 2), 'there shouldn\\'t be more than a millisecond difference';\n  });\n});\n\ndescribe('Chronos.date reactivity', function() {\n\n  let count = 0;\n  before(function(done) {\n\n\n    Tracker.autorun(Meteor.bindEnvironment(function(c) {\n      Chronos.date(10);\n\n      count++;\n      if (count == 2) {\n        c.stop();\n        done();\n      }\n    }));\n\n  });\n\n  it('Chronos.date should trigger reactive updates', function() {\n    chai.assert.equal(count, 2);\n  });\n});\n\ndescribe('Chronos.now', function () {\n\n  it('Chronos.now should return a Number ', function() {\n    var reactiveTime = Chronos.now();\n    chai.assert.isNumber(reactiveTime, Date);\n  });\n});\n\ndescribe('Chronos.now II', function() {\n\n  it('Chronos.now should return same time as Date.now()', function() {\n    var normalTime, reactiveTime;\n\n    Tracker.autorun(function(c) {\n\n      normalTime = Date.now();\n      reactiveTime = Chronos.now();\n\n      c.stop();\n    });\n\n    chai.assert.closeTo( reactiveTime, normalTime, 2), 'there shouldn\\'t be more than a millisecond difference';\n  });\n});\n\ndescribe('Chronos.now reactivity', function() {\n\n  let count = 0;\n  before(function(done) {\n\n\n    Tracker.autorun(Meteor.bindEnvironment(function(c) {\n      Chronos.now(10);\n\n      count++;\n      if (count == 2) {\n        c.stop();\n        done();\n      }\n    }));\n\n  });\n\n  it('Chronos.now should trigger reactive updates', function() {\n    chai.assert.equal(count, 2);\n  });\n});\n\ndescribe('Stopping the computation', function() {\n\n  let count = 0;\n\n  before(function (done) {\n\n    Tracker.autorun(Meteor.bindEnvironment(function(c) {\n\n      Chronos.update(100);\n\n      if (count > 0)\n        c.stop();\n\n      count++;\n\n    }));\n\n    Meteor.setTimeout(done, 400);\n\n  });\n\n  it('Chronos.update timer should be destroyed when computation is stopped', function() {\n    chai.assert.equal(count, 2);\n  });\n});\n\n\ndescribe('Stopping the computation II', function() {\n\n  let count = 0;\n\n  before(function (done) {\n\n    Tracker.autorun(Meteor.bindEnvironment(function(c) {\n\n      Chronos.date(100);\n\n      if (count > 0)\n        c.stop();\n\n      count++;\n\n    }));\n\n    Meteor.setTimeout(done, 400);\n\n  });\n\n  it('Chronos.date timer should be destroyed when computation is stopped', function() {\n    chai.assert.equal(count, 2);\n  });\n});\n\n\ndescribe('Chronos.moment', function () {\n  it('Chronos.moment should return a moment instance', function() {\n    var reactiveMoment = Chronos.moment();\n    // chai.assert.instanceOf(reactiveMoment, moment().constructor);\n  });\n});\n"]},"hash":"21688ac2e6eb3dfe89d394a769b5e8500689cd3f"}
