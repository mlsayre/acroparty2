{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"react-dom","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReactDOM"}]},{"source":"../api/rooms.js","imported":["Rooms"],"specifiers":[{"kind":"named","imported":"Rooms","local":"Rooms"}]},{"source":"../api/gamedata.js","imported":["Gamedata"],"specifiers":[{"kind":"named","imported":"Gamedata","local":"Gamedata"}]}],"exports":{"exported":["Games"],"specifiers":[{"kind":"local","local":"Games","exported":"Games"}]}}},"options":{"filename":"/imports/api/games.js","filenameRelative":"/imports/api/games.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/games.js.map","sourceFileName":"/imports/api/games.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"games"},"ignored":false,"code":"module.export({Games:function(){return Games}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});var ReactDOM;module.import('react-dom',{\"default\":function(v){ReactDOM=v}});var Rooms;module.import('../api/rooms.js',{\"Rooms\":function(v){Rooms=v}});var Gamedata;module.import('../api/gamedata.js',{\"Gamedata\":function(v){Gamedata=v}});\n\n\n\n\n\n\nvar Games = new Mongo.Collection('games');\n\n// game config\nacroLettersPool = \"AAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHIIIIIIIIIIIIIIIIIIIIIIJJJJJKKKKKKLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPPPPPPPPPPPQQQQRRRRRRRRRRRRRRRRRRSSSSSSSSSSSSSSSSSSSSSSSSTTTTTTTTTTTTTTTTTTTTTTTTUUUUUUUVVVVVVVVVVVVWWWWWWWWWWWWXYYYYYYYYYYYYZZZZ\";\n\nacroCategories = [\"General\", \"Sports\", \"Food\", \"Movies\", \"Television\", \"History\", \"Music\", \"Art\", \"Animals\", \"Science\", \"Politics\", \"Fashion\", \"Books\", \"Travel\", \"Celebrities\", \"Romance\", \"Technology\", \"Family\", \"School\", \"Nature\", \"Health\", \"Current Events\", \"Work\", \"Give Some Advice\", \"Definitions\", \"Sayings\", \"Exercise/Fitness\", \"Baby's First Sentence\", \"My Greatest Fear\", \"In the Year 3000\", \"Weird Laws\", \"I Was Late Because...\", \"Odd College Majors\", \"My Biggest Secret\", \"New Ice Cream Flavors\", \"Bad Restaurant Names\", \"I Got Fired Because...\", \"Odd Product Slogans\", \"Bad Habits\", \"Science Fiction\", \"Strange Trends\", \"Embarrassing Moments\", \"CAVEMAN SAY...\", \"Superhero/villain Names\", \"Horror Movie Titles\", \"In a Perfect World...\", \"Short Poetry\", \"New Year's Resolutions\", \"My Dream Last Night\", \"Odd Tombstone Messages\", \"Awful First Dates\", \"Odd Holiday Customs\", \"The Holidays\", \"Short Ghost Stories\", \"... Said No One Ever\", \"Fairy/Folk Tales\"];\n\nroundsToPlay = 8;\nroundTimes = [50, 60, 60, 80, 50, 60, 60, 80];\nroundAcroLength = [3, 4, 5, 6, 3, 4, 5, 6];\nreadyTimer = {};\nplayTimer = {};\nvoteTimer = {};\nresultsTimer = {};\nfinalTimer = {};\n\n////////////\n\nMeteor.methods({\n  'games.init': function gamesInit(roomId) {\n    if (Games.find({ room_id: roomId }).fetch().length === 0) {\n      //always make sure updates only happen once\n      var roundletters;\n      var acroPoolLength = acroLettersPool.length;\n      var catPoolLength = acroCategories.length;\n      var acroPlayArray = [];\n      var acroCatArray = [];\n      for (var i = 0; i < roundsToPlay; i++) {\n        var acroToPlay = \"\";\n        for (var j = 0; j < roundAcroLength[i]; j++) {\n          acroToPlay = acroToPlay + acroLettersPool[Math.floor(Math.random() * acroPoolLength)];\n        }\n        acroPlayArray.push(acroToPlay);\n        acroCatArray.push(acroCategories[Math.floor(Math.random() * catPoolLength)]);\n      }\n      Games.insert({\n        room_id: roomId,\n        roundletters: acroPlayArray,\n        roundcategories: acroCatArray,\n        roundtimes: roundTimes\n      });\n      Rooms.update({ room_id: roomId }, {\n        $set: { round: 1, subround: \"Get ready\" }\n      });\n    }\n  },\n  'games.getready': function gamesGetready(roomId) {\n    if (!readyTimer[roomId]) {\n      // one timer only\n      readyTimer[roomId] = Meteor.setTimeout(function () {\n        if (Gamedata.find({ room_id: roomId }).fetch().length === 0) {\n          Meteor.call('games.reset', roomId);\n        } else {\n          Rooms.update({ room_id: roomId }, {\n            $set: { subround: \"Play\" }\n          });\n        }\n        $(\".answerEnter\").value = \"\";\n        $(\".submittedInfo\").text(\"\");\n        delete readyTimer[roomId];\n      }, 7000);\n    }\n  },\n  'games.play': function gamesPlay(roomId, roundtime) {\n    if (!playTimer[roomId]) {\n      // one timer only\n      playTimer[roomId] = Meteor.setTimeout(function () {\n        if (Gamedata.find({ room_id: roomId }).fetch().length === 0) {\n          Meteor.call('games.reset', roomId);\n        } else {\n          Rooms.update({ room_id: roomId }, {\n            $set: { subround: \"Vote\" }\n          });\n        }\n        delete playTimer[roomId];\n      }, roundtime * 1000 + 20000);\n    }\n  },\n  'games.vote': function gamesVote(roomId) {\n    if (!voteTimer[roomId]) {\n      // one timer only\n      voteTimer[roomId] = Meteor.setTimeout(function () {\n        if (Gamedata.find({ room_id: roomId }).fetch().length === 0) {\n          Meteor.call('games.reset', roomId);\n        } else {\n          Rooms.update({ room_id: roomId }, {\n            $set: { subround: \"Results\" }\n          });\n        }\n        delete voteTimer[roomId];\n      }, 35000);\n    }\n  },\n  'games.results': function gamesResults(roomId) {\n    if (!resultsTimer[roomId]) {\n      // one timer only\n      var currentRound = Rooms.findOne({ room_id: roomId }).round;\n      if (currentRound === roundsToPlay) {\n        resultsTimer[roomId] = Meteor.setTimeout(function () {\n          if (Gamedata.find({ room_id: roomId }).fetch().length < 2) {\n            // end game after results if not enough players\n            delete resultsTimer[roomId];\n            Meteor.call('games.reset', roomId);\n          } else {\n            Rooms.update({ room_id: roomId }, {\n              $set: { subround: \"Final results\" }\n            });\n          }\n          delete resultsTimer[roomId];\n        }, 22000);\n      } else {\n        resultsTimer[roomId] = Meteor.setTimeout(function () {\n          if (Gamedata.find({ room_id: roomId }).fetch().length < 2) {\n            // end game after results if not enough players\n            delete resultsTimer[roomId];\n            Meteor.call('games.reset', roomId);\n          } else {\n            Rooms.update({ room_id: roomId }, {\n              $set: { round: currentRound + 1,\n                subround: \"Get ready\" }\n            });\n          }\n          delete resultsTimer[roomId];\n        }, 22000);\n      }\n    }\n  },\n  'games.finalresults': function gamesFinalresults(roomId) {\n    if (!finalTimer[roomId]) {\n      // one timer only\n      finalTimer[roomId] = Meteor.setTimeout(function () {\n        if (Gamedata.find({ room_id: roomId }).fetch().length < 2) {\n          // end game after results if not enough players\n          delete finalTimer[roomId];\n          Meteor.call('games.reset', roomId);\n        } else {\n          // set up for new game\n          Games.remove({ room_id: roomId });\n          Meteor.call('games.init', roomId);\n        }\n        delete finalTimer[roomId];\n      }, 25000);\n    }\n  },\n  'games.reset': function gamesReset(roomId) {\n    Games.remove({ room_id: roomId });\n    Gamedata.remove({ room_id: roomId });\n    Rooms.update({ room_id: roomId }, {\n      $set: { round: 0,\n        subround: \"Waiting for players\" }\n    });\n  }\n});\n\n// Games.find({ room_id: roomId }).remove({});","ast":null,"map":{"version":3,"sources":["/imports/api/games.js"],"names":[],"mappings":"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","file":"/imports/api/games.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\nimport ReactDOM from 'react-dom';\n\nimport { Rooms } from '../api/rooms.js';\nimport { Gamedata } from '../api/gamedata.js';\nexport const Games = new Mongo.Collection('games');\n\n// game config\nacroLettersPool = \"AAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHIIIIIIIIIIIIIIIIIIIIIIJJJJJKKKKKKLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPPPPPPPPPPPQQQQRRRRRRRRRRRRRRRRRRSSSSSSSSSSSSSSSSSSSSSSSSTTTTTTTTTTTTTTTTTTTTTTTTUUUUUUUVVVVVVVVVVVVWWWWWWWWWWWWXYYYYYYYYYYYYZZZZ\";\n\nacroCategories = [\"General\", \"Sports\", \"Food\", \"Movies\", \"Television\", \"History\", \"Music\", \"Art\", \"Animals\",\n                  \"Science\", \"Politics\", \"Fashion\", \"Books\", \"Travel\", \"Celebrities\", \"Romance\", \"Technology\",\n                  \"Family\", \"School\", \"Nature\", \"Health\", \"Current Events\", \"Work\", \"Give Some Advice\",\n                  \"Definitions\", \"Sayings\", \"Exercise/Fitness\", \"Baby's First Sentence\", \"My Greatest Fear\",\n                  \"In the Year 3000\", \"Weird Laws\", \"I Was Late Because...\", \"Odd College Majors\",\n                  \"My Biggest Secret\", \"New Ice Cream Flavors\", \"Bad Restaurant Names\",\n                  \"I Got Fired Because...\", \"Odd Product Slogans\", \"Bad Habits\", \"Science Fiction\",\n                  \"Strange Trends\", \"Embarrassing Moments\", \"CAVEMAN SAY...\", \"Superhero/villain Names\",\n                  \"Horror Movie Titles\", \"In a Perfect World...\", \"Short Poetry\", \"New Year's Resolutions\",\n                  \"My Dream Last Night\", \"Odd Tombstone Messages\", \"Awful First Dates\", \"Odd Holiday Customs\",\n                  \"The Holidays\", \"Short Ghost Stories\", \"... Said No One Ever\", \"Fairy/Folk Tales\"]\n\nroundsToPlay = 8;\nroundTimes = [50, 60, 60, 80, 50, 60, 60 ,80]\nroundAcroLength = [3, 4, 5, 6, 3, 4, 5, 6]\nreadyTimer = {}\nplayTimer = {}\nvoteTimer = {}\nresultsTimer = {}\nfinalTimer = {}\n\n////////////\n\nMeteor.methods({\n  'games.init'(roomId) {\n    if (Games.find({ room_id: roomId }).fetch().length === 0) { //always make sure updates only happen once\n      var roundletters;\n      var acroPoolLength = acroLettersPool.length;\n      var catPoolLength = acroCategories.length;\n      var acroPlayArray = [];\n      var acroCatArray = [];\n      for (var i = 0; i < roundsToPlay; i++) {\n        var acroToPlay = \"\";\n        for (var j = 0; j < roundAcroLength[i]; j++) {\n          acroToPlay = acroToPlay + acroLettersPool[Math.floor(Math.random() * acroPoolLength)]\n        }\n        acroPlayArray.push(acroToPlay);\n        acroCatArray.push(acroCategories[Math.floor(Math.random() * catPoolLength)])\n      }\n      Games.insert({\n        room_id: roomId,\n        roundletters: acroPlayArray,\n        roundcategories: acroCatArray,\n        roundtimes: roundTimes\n      });\n      Rooms.update({room_id: roomId}, {\n        $set: { round: 1 , subround: \"Get ready\" },\n      });\n    }\n  },\n\n  'games.getready'(roomId) {\n    if (!readyTimer[roomId]) { // one timer only\n      readyTimer[roomId] = Meteor.setTimeout(function() {\n        if (Gamedata.find({room_id: roomId}).fetch().length === 0) {\n          Meteor.call('games.reset', roomId );\n        } else {\n          Rooms.update({room_id: roomId}, {\n            $set: { subround: \"Play\" },\n          });\n        }\n        $(\".answerEnter\").value = \"\";\n        $(\".submittedInfo\").text(\"\")\n        delete readyTimer[roomId];\n      }, 7000);\n    }\n  },\n\n  'games.play'(roomId, roundtime) {\n    if (!playTimer[roomId]) { // one timer only\n      playTimer[roomId] = Meteor.setTimeout(function() {\n        if (Gamedata.find({room_id: roomId}).fetch().length === 0) {\n          Meteor.call('games.reset', roomId );\n        } else {\n          Rooms.update({room_id: roomId}, {\n            $set: { subround: \"Vote\" },\n          });\n        }\n        delete playTimer[roomId];\n      }, (roundtime * 1000) + 20000);\n    }\n  },\n\n  'games.vote'(roomId) {\n    if (!voteTimer[roomId]) { // one timer only\n      voteTimer[roomId] = Meteor.setTimeout(function() {\n        if (Gamedata.find({room_id: roomId}).fetch().length === 0) {\n          Meteor.call('games.reset', roomId );\n        } else {\n          Rooms.update({room_id: roomId}, {\n            $set: { subround: \"Results\" },\n          });\n        }\n        delete voteTimer[roomId];\n      }, 35000);\n    }\n  },\n\n  'games.results'(roomId) {\n    if (!resultsTimer[roomId]) { // one timer only\n      var currentRound = Rooms.findOne({room_id: roomId}).round;\n      if (currentRound === roundsToPlay) {\n        resultsTimer[roomId] = Meteor.setTimeout(function() {\n          if (Gamedata.find({room_id: roomId}).fetch().length < 2) { // end game after results if not enough players\n            delete resultsTimer[roomId];\n            Meteor.call('games.reset', roomId );\n          } else {\n            Rooms.update({room_id: roomId}, {\n              $set: { subround: \"Final results\" },\n            });\n          }\n          delete resultsTimer[roomId];\n        }, 22000);\n      } else {\n        resultsTimer[roomId] = Meteor.setTimeout(function() {\n          if (Gamedata.find({room_id: roomId}).fetch().length < 2) { // end game after results if not enough players\n            delete resultsTimer[roomId];\n            Meteor.call('games.reset', roomId );\n          } else {\n            Rooms.update({room_id: roomId}, {\n              $set: { round: currentRound + 1,\n                      subround: \"Get ready\" },\n            });\n          }\n          delete resultsTimer[roomId]\n        }, 22000);\n      }\n    }\n  },\n\n  'games.finalresults'(roomId) {\n    if (!finalTimer[roomId]) { // one timer only\n      finalTimer[roomId] = Meteor.setTimeout(function() {\n        if (Gamedata.find({room_id: roomId}).fetch().length < 2) { // end game after results if not enough players\n          delete finalTimer[roomId];\n          Meteor.call('games.reset', roomId );\n        } else { // set up for new game\n          Games.remove({ room_id: roomId });\n          Meteor.call('games.init', roomId );\n        }\n        delete finalTimer[roomId];\n      }, 25000);\n    }\n  },\n\n  'games.reset'(roomId) {\n    Games.remove({ room_id: roomId });\n    Gamedata.remove({ room_id: roomId });\n    Rooms.update({room_id: roomId}, {\n      $set: { round: 0,\n              subround: \"Waiting for players\" },\n    });\n  }\n\n\n\n\n})\n\n    // Games.find({ room_id: roomId }).remove({});\n"]},"hash":"b2fb245bd4243be35e2876056dcd1646a8afcd30"}
