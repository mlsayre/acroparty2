{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-dom","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReactDOM"}]},{"source":"meteor/react-meteor-data","imported":["createContainer"],"specifiers":[{"kind":"named","imported":"createContainer","local":"createContainer"}]},{"source":"./App.jsx","imported":["gameRoomIdSelected"],"specifiers":[{"kind":"named","imported":"gameRoomIdSelected","local":"gameRoomIdSelected"}]},{"source":"../api/messages.js","imported":["Messages"],"specifiers":[{"kind":"named","imported":"Messages","local":"Messages"}]}],"exports":{"exported":["ListMessages","ListItemPlayer","Chat"],"specifiers":[{"kind":"local","local":"ListMessages","exported":"default"},{"kind":"local","local":"ListItemPlayer","exported":"default"},{"kind":"local","local":"Chat","exported":"default"}]}}},"options":{"filename":"/imports/ui/Chat.jsx","filenameRelative":"/imports/ui/Chat.jsx","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/ui/Chat.jsx.map","sourceFileName":"/imports/ui/Chat.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"Chat"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var React,Component,PropTypes;module.import('react',{\"default\":function(v){React=v},\"Component\":function(v){Component=v},\"PropTypes\":function(v){PropTypes=v}});var ReactDOM;module.import('react-dom',{\"default\":function(v){ReactDOM=v}});var createContainer;module.import('meteor/react-meteor-data',{\"createContainer\":function(v){createContainer=v}});var gameRoomIdSelected;module.import('./App.jsx',{\"gameRoomIdSelected\":function(v){gameRoomIdSelected=v}});var Messages;module.import('../api/messages.js',{\"Messages\":function(v){Messages=v}});\n\n\n\n\n\n\n\n\n\nvar ListMessages = function (_Component) {\n  _inherits(ListMessages, _Component);\n\n  function ListMessages() {\n    _classCallCheck(this, ListMessages);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  ListMessages.prototype.componentDidMount = function componentDidMount() {\n    var $this = $(ReactDOM.findDOMNode(this));\n    $(\".messagesRead\")[0].scrollTop = $(\".messagesRead\")[0].scrollHeight;\n  };\n\n  ListMessages.prototype.render = function render() {\n    return React.createElement(\n      'li',\n      { className: this.props.author === \"<PartyHost>\" ? \"hostMessage\" : \"\" },\n      React.createElement(\n        'span',\n        { className: 'authorMessage' },\n        React.createElement(\n          'span',\n          { className: 'messageAuthor' },\n          this.props.author,\n          ':'\n        ),\n        ' ',\n        this.props.message\n      ),\n      React.createElement('span', { className: 'messageTime', 'data-livestamp': this.props.timestamp })\n    );\n  };\n\n  return ListMessages;\n}(Component);\n\nmodule.export(\"default\",exports.default=(ListMessages));\n\nvar ListItemPlayer = function (_Component2) {\n  _inherits(ListItemPlayer, _Component2);\n\n  function ListItemPlayer() {\n    _classCallCheck(this, ListItemPlayer);\n\n    return _possibleConstructorReturn(this, _Component2.apply(this, arguments));\n  }\n\n  ListItemPlayer.prototype.render = function render() {\n    return React.createElement(\n      'li',\n      { className: 'playerInList', 'data-playerInList': this.props.data },\n      this.props.data\n    );\n  };\n\n  return ListItemPlayer;\n}(Component);\n\nmodule.export(\"default\",exports.default=(ListItemPlayer));\n\nvar Chat = function (_Component3) {\n  _inherits(Chat, _Component3);\n\n  function Chat() {\n    _classCallCheck(this, Chat);\n\n    return _possibleConstructorReturn(this, _Component3.apply(this, arguments));\n  }\n\n  Chat.prototype.listPlayers = function listPlayers() {\n    var playerListArray = this.props.roomPlayers[0];\n    var playerListItems = playerListArray.map(function (name) {\n      return React.createElement(\n        'li',\n        null,\n        'name[1]'\n      );\n    });\n    return playerListItems;\n  };\n\n  Chat.prototype.sendMessage = function sendMessage(event) {\n    event.preventDefault();\n    var message = ReactDOM.findDOMNode(this.refs.messageInput).value.trim();\n    if (message === \"\") {\n      return;\n    } // blank messages don't send\n    Meteor.call('messages.postMessage', this.props.currentUser.username, gameRoomIdSelected.get(), message);\n    ReactDOM.findDOMNode(this.refs.messageInput).value = '';\n    // delete old messages in room\n    if (this.props.roomMessages.length > 150) {\n      // 200 chat messages per room\n      var indexToTrim = this.props.roomMessages.length - 150;\n      var oldestMessageTime = this.props.roomMessages[indexToTrim].createdAt;\n      var messagesToDelete = Messages.find({\n        room_id: gameRoomIdSelected.get(),\n        createdAt: { $lt: oldestMessageTime }\n      }).fetch();\n      messagesToDelete.forEach(function (message) {\n        Meteor.call('messages.deleteOld', message._id);\n      });\n    }\n  };\n\n  Chat.prototype.renderMessages = function renderMessages() {\n    if (this.props.roomMessages) {\n      return this.props.roomMessages.map(function (message) {\n        return React.createElement(ListMessages, { key: message._id, author: message.user_id, message: message.message,\n          timestamp: message.createdAt });\n      });\n    } else {\n      return \"\";\n    }\n  };\n\n  Chat.prototype.render = function render() {\n    return React.createElement(\n      'div',\n      { className: 'chatArea' },\n      React.createElement(\n        'div',\n        { className: 'listAndInfo' },\n        React.createElement(\n          'div',\n          { className: 'playerList' },\n          React.createElement(\n            'div',\n            { className: 'bigRoomName' },\n            React.createElement(\n              'span',\n              null,\n              this.props.roomName\n            )\n          ),\n          React.createElement(\n            'ul',\n            { className: 'playerNameList' },\n            React.createElement(\n              'u',\n              null,\n              'Players'\n            ),\n            this.props.roomPlayers.map(function (name) {\n              return React.createElement(ListItemPlayer, { key: name, data: name });\n            })\n          ),\n          React.createElement(\n            'ul',\n            { className: 'playerScoreList' },\n            React.createElement(\n              'u',\n              null,\n              'Score'\n            )\n          )\n        ),\n        React.createElement(\n          'div',\n          { className: 'chatMenuButtons' },\n          React.createElement(\n            'button',\n            { className: 'mainButton', onClick: this.props.clickStats },\n            'Stats'\n          ),\n          React.createElement(\n            'button',\n            { className: 'mainButton', onClick: this.props.clickSettings },\n            'Settings'\n          ),\n          React.createElement(\n            'button',\n            { className: 'mainButton', onClick: this.props.exitRoom },\n            'Exit Room'\n          )\n        )\n      ),\n      React.createElement(\n        'div',\n        { className: 'messagesArea' },\n        React.createElement(\n          'div',\n          { className: 'messagesRead' },\n          this.renderMessages()\n        ),\n        React.createElement(\n          'div',\n          { className: 'messagesSendArea' },\n          React.createElement(\n            'button',\n            { className: 'mobile openPlayerList' },\n            'Plyrs'\n          ),\n          React.createElement(\n            'form',\n            { onSubmit: this.sendMessage.bind(this) },\n            React.createElement('input', { type: 'text', ref: 'messageInput', className: 'messageEnter', placeholder: 'Enter chat here...' }),\n            React.createElement(\n              'button',\n              { className: 'messageSend', onClick: this.sendMessage.bind(this) },\n              'Send'\n            )\n          ),\n          React.createElement(\n            'button',\n            { className: 'mobile openChatMenu' },\n            'Menu'\n          )\n        )\n      )\n    );\n  };\n\n  return Chat;\n}(Component);\n\n// Chat.propTypes = {\n// This component gets the room to display through a React prop.\n// We can use propTypes to indicate it is required\n//   chat: PropTypes.object.isRequired,\n// };\n\nmodule.export(\"default\",exports.default=(Chat));\nmodule.export(\"default\",exports.default=(createContainer(function () {\n  return {\n    currentUser: Meteor.user(),\n    roomMessages: Messages.find({ room_id: gameRoomIdSelected.get() }, { sort: { createdAt: 1 } }).fetch()\n  };\n}, Chat)));","ast":null,"map":{"version":3,"sources":["/imports/ui/Chat.jsx"],"names":[],"mappings":"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","file":"/imports/ui/Chat.jsx.map","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createContainer } from 'meteor/react-meteor-data';\nimport { gameRoomIdSelected } from './App.jsx'\n\nimport { Messages } from '../api/messages.js';\n\nexport default class ListMessages extends Component {\n  componentDidMount() {\n    var $this = $(ReactDOM.findDOMNode(this));\n    $(\".messagesRead\")[0].scrollTop = $(\".messagesRead\")[0].scrollHeight;\n  }\n  render() {\n    return <li className={this.props.author === \"<PartyHost>\" ? \"hostMessage\" : \"\"}>\n            <span className=\"authorMessage\"><span className=\"messageAuthor\">{this.props.author}:</span> {this.props.message}</span>\n            <span className=\"messageTime\" data-livestamp={this.props.timestamp}></span>\n           </li>\n  }\n}\n\nexport default class ListItemPlayer extends Component {\n  render() {\n    return <li className=\"playerInList\" data-playerInList={this.props.data}>{this.props.data}</li>;\n  }\n}\n\nexport default class Chat extends Component {\n  listPlayers() {\n    var playerListArray = this.props.roomPlayers[0]\n    var playerListItems = playerListArray.map(function(name) {\n      return <li>name[1]</li>\n    });\n    return playerListItems\n  }\n\n  sendMessage(event) {\n    event.preventDefault();\n    const message = ReactDOM.findDOMNode(this.refs.messageInput).value.trim();\n    if (message === \"\") {return} // blank messages don't send\n    Meteor.call('messages.postMessage', this.props.currentUser.username, gameRoomIdSelected.get(), message);\n    ReactDOM.findDOMNode(this.refs.messageInput).value = '';\n    // delete old messages in room\n    if (this.props.roomMessages.length > 150) { // 200 chat messages per room\n      var indexToTrim = this.props.roomMessages.length - 150;\n      var oldestMessageTime = this.props.roomMessages[indexToTrim].createdAt;\n      var messagesToDelete = Messages.find({\n        room_id : gameRoomIdSelected.get(),\n        createdAt: { $lt: oldestMessageTime }\n      }).fetch();\n      messagesToDelete.forEach(function(message) {\n        Meteor.call('messages.deleteOld', message._id);\n      });\n    }\n  }\n\n  renderMessages() {\n    if (this.props.roomMessages) {\n      return this.props.roomMessages.map((message) => (\n        <ListMessages key={message._id} author={message.user_id} message={message.message}\n                      timestamp={message.createdAt} />\n      ));\n    } else {\n      return \"\";\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"chatArea\">\n        <div className=\"listAndInfo\">\n          <div className=\"playerList\">\n            <div className=\"bigRoomName\"><span>{this.props.roomName}</span></div>\n            <ul className=\"playerNameList\"><u>Players</u>\n              {this.props.roomPlayers.map((name) => (\n                <ListItemPlayer key={name} data={name} />\n              ))}\n            </ul>\n            <ul className=\"playerScoreList\"><u>Score</u>\n            </ul>\n          </div>\n          <div className=\"chatMenuButtons\">\n            <button className=\"mainButton\" onClick={this.props.clickStats}>Stats</button>\n            <button className=\"mainButton\" onClick={this.props.clickSettings}>Settings</button>\n            <button className=\"mainButton\" onClick={this.props.exitRoom}>Exit Room</button>\n          </div>\n        </div>\n        <div className=\"messagesArea\">\n          <div className=\"messagesRead\">\n            {this.renderMessages()}\n          </div>\n          <div className=\"messagesSendArea\">\n            <button className=\"mobile openPlayerList\">Plyrs</button>\n            <form onSubmit={this.sendMessage.bind(this)}>\n              <input type=\"text\" ref=\"messageInput\" className=\"messageEnter\" placeholder=\"Enter chat here...\"></input>\n              <button className=\"messageSend\" onClick={this.sendMessage.bind(this)}>Send</button>\n            </form>\n            <button className=\"mobile openChatMenu\">Menu</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// Chat.propTypes = {\n  // This component gets the room to display through a React prop.\n  // We can use propTypes to indicate it is required\n//   chat: PropTypes.object.isRequired,\n// };\n\nexport default createContainer(() => {\n  return {\n    currentUser: Meteor.user(),\n    roomMessages: Messages.find({ room_id: gameRoomIdSelected.get() }, { sort: { createdAt: 1 } }).fetch(),\n  };\n}, Chat);\n"]},"hash":"6831914d2ef6b9c953eb56fab5378617b488a390"}
